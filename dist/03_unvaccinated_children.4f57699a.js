// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"../node_modules/d3/dist/package.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dependencies = exports.devDependencies = exports.scripts = exports.repository = exports.module = exports.jsdelivr = exports.unpkg = exports.main = exports.author = exports.license = exports.homepage = exports.keywords = exports.description = exports.version = exports.name = void 0;
var name = "d3";
exports.name = name;
var version = "5.9.4";
exports.version = version;
var description = "Data-Driven Documents";
exports.description = description;
var keywords = ["dom", "visualization", "svg", "animation", "canvas"];
exports.keywords = keywords;
var homepage = "https://d3js.org";
exports.homepage = homepage;
var license = "BSD-3-Clause";
exports.license = license;
var author = {
  "name": "Mike Bostock",
  "url": "https://bost.ocks.org/mike"
};
exports.author = author;
var main = "dist/d3.node.js";
exports.main = main;
var unpkg = "dist/d3.min.js";
exports.unpkg = unpkg;
var jsdelivr = "dist/d3.min.js";
exports.jsdelivr = jsdelivr;
var _module = "index.js";
exports.module = _module;
var repository = {
  "type": "git",
  "url": "https://github.com/d3/d3.git"
};
exports.repository = repository;
var scripts = {
  "pretest": "rimraf dist && mkdir dist && json2module package.json > dist/package.js && node rollup.node",
  "test": "tape 'test/**/*-test.js'",
  "prepublishOnly": "yarn test && rollup -c",
  "postpublish": "git push && git push --tags && cd ../d3.github.com && git pull && cp ../d3/dist/d3.js d3.v5.js && cp ../d3/dist/d3.min.js d3.v5.min.js && git add d3.v5.js d3.v5.min.js && git commit -m \"d3 ${npm_package_version}\" && git push && cd - && cd ../d3-bower && git pull && cp ../d3/LICENSE ../d3/README.md ../d3/dist/d3.js ../d3/dist/d3.min.js . && git add -- LICENSE README.md d3.js d3.min.js && git commit -m \"${npm_package_version}\" && git tag -am \"${npm_package_version}\" v${npm_package_version} && git push && git push --tags && cd - && zip -j dist/d3.zip -- LICENSE README.md API.md CHANGES.md dist/d3.js dist/d3.min.js"
};
exports.scripts = scripts;
var devDependencies = {
  "json2module": "0.0",
  "rimraf": "2",
  "rollup": "0.64",
  "rollup-plugin-ascii": "0.0",
  "rollup-plugin-node-resolve": "3",
  "rollup-plugin-terser": "1",
  "tape": "4"
};
exports.devDependencies = devDependencies;
var dependencies = {
  "d3-array": "1",
  "d3-axis": "1",
  "d3-brush": "1",
  "d3-chord": "1",
  "d3-collection": "1",
  "d3-color": "1",
  "d3-contour": "1",
  "d3-dispatch": "1",
  "d3-drag": "1",
  "d3-dsv": "1",
  "d3-ease": "1",
  "d3-fetch": "1",
  "d3-force": "1",
  "d3-format": "1",
  "d3-geo": "1",
  "d3-hierarchy": "1",
  "d3-interpolate": "1",
  "d3-path": "1",
  "d3-polygon": "1",
  "d3-quadtree": "1",
  "d3-random": "1",
  "d3-scale": "2",
  "d3-scale-chromatic": "1",
  "d3-selection": "1",
  "d3-shape": "1",
  "d3-time": "1",
  "d3-time-format": "2",
  "d3-timer": "1",
  "d3-transition": "1",
  "d3-voronoi": "1",
  "d3-zoom": "1"
};
exports.dependencies = dependencies;
},{}],"../node_modules/d3-array/src/ascending.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}
},{}],"../node_modules/d3-array/src/bisector.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _ascending = _interopRequireDefault(require("./ascending"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(compare) {
  if (compare.length === 1) compare = ascendingComparator(compare);
  return {
    left: function (a, x, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a.length;

      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a[mid], x) < 0) lo = mid + 1;else hi = mid;
      }

      return lo;
    },
    right: function (a, x, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a.length;

      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a[mid], x) > 0) hi = mid;else lo = mid + 1;
      }

      return lo;
    }
  };
}

function ascendingComparator(f) {
  return function (d, x) {
    return (0, _ascending.default)(f(d), x);
  };
}
},{"./ascending":"../node_modules/d3-array/src/ascending.js"}],"../node_modules/d3-array/src/bisect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.bisectLeft = exports.bisectRight = void 0;

var _ascending = _interopRequireDefault(require("./ascending"));

var _bisector = _interopRequireDefault(require("./bisector"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ascendingBisect = (0, _bisector.default)(_ascending.default);
var bisectRight = ascendingBisect.right;
exports.bisectRight = bisectRight;
var bisectLeft = ascendingBisect.left;
exports.bisectLeft = bisectLeft;
var _default = bisectRight;
exports.default = _default;
},{"./ascending":"../node_modules/d3-array/src/ascending.js","./bisector":"../node_modules/d3-array/src/bisector.js"}],"../node_modules/d3-array/src/pairs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.pair = pair;

function _default(array, f) {
  if (f == null) f = pair;
  var i = 0,
      n = array.length - 1,
      p = array[0],
      pairs = new Array(n < 0 ? 0 : n);

  while (i < n) pairs[i] = f(p, p = array[++i]);

  return pairs;
}

function pair(a, b) {
  return [a, b];
}
},{}],"../node_modules/d3-array/src/cross.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _pairs = require("./pairs");

function _default(values0, values1, reduce) {
  var n0 = values0.length,
      n1 = values1.length,
      values = new Array(n0 * n1),
      i0,
      i1,
      i,
      value0;
  if (reduce == null) reduce = _pairs.pair;

  for (i0 = i = 0; i0 < n0; ++i0) {
    for (value0 = values0[i0], i1 = 0; i1 < n1; ++i1, ++i) {
      values[i] = reduce(value0, values1[i1]);
    }
  }

  return values;
}
},{"./pairs":"../node_modules/d3-array/src/pairs.js"}],"../node_modules/d3-array/src/descending.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
}
},{}],"../node_modules/d3-array/src/number.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return x === null ? NaN : +x;
}
},{}],"../node_modules/d3-array/src/variance.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _number = _interopRequireDefault(require("./number"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, valueof) {
  var n = values.length,
      m = 0,
      i = -1,
      mean = 0,
      value,
      delta,
      sum = 0;

  if (valueof == null) {
    while (++i < n) {
      if (!isNaN(value = (0, _number.default)(values[i]))) {
        delta = value - mean;
        mean += delta / ++m;
        sum += delta * (value - mean);
      }
    }
  } else {
    while (++i < n) {
      if (!isNaN(value = (0, _number.default)(valueof(values[i], i, values)))) {
        delta = value - mean;
        mean += delta / ++m;
        sum += delta * (value - mean);
      }
    }
  }

  if (m > 1) return sum / (m - 1);
}
},{"./number":"../node_modules/d3-array/src/number.js"}],"../node_modules/d3-array/src/deviation.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _variance = _interopRequireDefault(require("./variance"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(array, f) {
  var v = (0, _variance.default)(array, f);
  return v ? Math.sqrt(v) : v;
}
},{"./variance":"../node_modules/d3-array/src/variance.js"}],"../node_modules/d3-array/src/extent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      min,
      max;

  if (valueof == null) {
    while (++i < n) {
      // Find the first comparable value.
      if ((value = values[i]) != null && value >= value) {
        min = max = value;

        while (++i < n) {
          // Compare the remaining values.
          if ((value = values[i]) != null) {
            if (min > value) min = value;
            if (max < value) max = value;
          }
        }
      }
    }
  } else {
    while (++i < n) {
      // Find the first comparable value.
      if ((value = valueof(values[i], i, values)) != null && value >= value) {
        min = max = value;

        while (++i < n) {
          // Compare the remaining values.
          if ((value = valueof(values[i], i, values)) != null) {
            if (min > value) min = value;
            if (max < value) max = value;
          }
        }
      }
    }
  }

  return [min, max];
}
},{}],"../node_modules/d3-array/src/array.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.map = exports.slice = void 0;
var array = Array.prototype;
var slice = array.slice;
exports.slice = slice;
var map = array.map;
exports.map = map;
},{}],"../node_modules/d3-array/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"../node_modules/d3-array/src/identity.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return x;
}
},{}],"../node_modules/d3-array/src/range.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(start, stop, step) {
  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;
  var i = -1,
      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
      range = new Array(n);

  while (++i < n) {
    range[i] = start + i * step;
  }

  return range;
}
},{}],"../node_modules/d3-array/src/ticks.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.tickIncrement = tickIncrement;
exports.tickStep = tickStep;
var e10 = Math.sqrt(50),
    e5 = Math.sqrt(10),
    e2 = Math.sqrt(2);

function _default(start, stop, count) {
  var reverse,
      i = -1,
      n,
      ticks,
      step;
  stop = +stop, start = +start, count = +count;
  if (start === stop && count > 0) return [start];
  if (reverse = stop < start) n = start, start = stop, stop = n;
  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];

  if (step > 0) {
    start = Math.ceil(start / step);
    stop = Math.floor(stop / step);
    ticks = new Array(n = Math.ceil(stop - start + 1));

    while (++i < n) ticks[i] = (start + i) * step;
  } else {
    start = Math.floor(start * step);
    stop = Math.ceil(stop * step);
    ticks = new Array(n = Math.ceil(start - stop + 1));

    while (++i < n) ticks[i] = (start - i) / step;
  }

  if (reverse) ticks.reverse();
  return ticks;
}

function tickIncrement(start, stop, count) {
  var step = (stop - start) / Math.max(0, count),
      power = Math.floor(Math.log(step) / Math.LN10),
      error = step / Math.pow(10, power);
  return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
}

function tickStep(start, stop, count) {
  var step0 = Math.abs(stop - start) / Math.max(0, count),
      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
      error = step0 / step1;
  if (error >= e10) step1 *= 10;else if (error >= e5) step1 *= 5;else if (error >= e2) step1 *= 2;
  return stop < start ? -step1 : step1;
}
},{}],"../node_modules/d3-array/src/threshold/sturges.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(values) {
  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;
}
},{}],"../node_modules/d3-array/src/histogram.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _array = require("./array");

var _bisect = _interopRequireDefault(require("./bisect"));

var _constant = _interopRequireDefault(require("./constant"));

var _extent = _interopRequireDefault(require("./extent"));

var _identity = _interopRequireDefault(require("./identity"));

var _range = _interopRequireDefault(require("./range"));

var _ticks = require("./ticks");

var _sturges = _interopRequireDefault(require("./threshold/sturges"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var value = _identity.default,
      domain = _extent.default,
      threshold = _sturges.default;

  function histogram(data) {
    var i,
        n = data.length,
        x,
        values = new Array(n);

    for (i = 0; i < n; ++i) {
      values[i] = value(data[i], i, data);
    }

    var xz = domain(values),
        x0 = xz[0],
        x1 = xz[1],
        tz = threshold(values, x0, x1); // Convert number of thresholds into uniform thresholds.

    if (!Array.isArray(tz)) {
      tz = (0, _ticks.tickStep)(x0, x1, tz);
      tz = (0, _range.default)(Math.ceil(x0 / tz) * tz, x1, tz); // exclusive
    } // Remove any thresholds outside the domain.


    var m = tz.length;

    while (tz[0] <= x0) tz.shift(), --m;

    while (tz[m - 1] > x1) tz.pop(), --m;

    var bins = new Array(m + 1),
        bin; // Initialize bins.

    for (i = 0; i <= m; ++i) {
      bin = bins[i] = [];
      bin.x0 = i > 0 ? tz[i - 1] : x0;
      bin.x1 = i < m ? tz[i] : x1;
    } // Assign data to bins by value, ignoring any outside the domain.


    for (i = 0; i < n; ++i) {
      x = values[i];

      if (x0 <= x && x <= x1) {
        bins[(0, _bisect.default)(tz, x, 0, m)].push(data[i]);
      }
    }

    return bins;
  }

  histogram.value = function (_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : (0, _constant.default)(_), histogram) : value;
  };

  histogram.domain = function (_) {
    return arguments.length ? (domain = typeof _ === "function" ? _ : (0, _constant.default)([_[0], _[1]]), histogram) : domain;
  };

  histogram.thresholds = function (_) {
    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? (0, _constant.default)(_array.slice.call(_)) : (0, _constant.default)(_), histogram) : threshold;
  };

  return histogram;
}
},{"./array":"../node_modules/d3-array/src/array.js","./bisect":"../node_modules/d3-array/src/bisect.js","./constant":"../node_modules/d3-array/src/constant.js","./extent":"../node_modules/d3-array/src/extent.js","./identity":"../node_modules/d3-array/src/identity.js","./range":"../node_modules/d3-array/src/range.js","./ticks":"../node_modules/d3-array/src/ticks.js","./threshold/sturges":"../node_modules/d3-array/src/threshold/sturges.js"}],"../node_modules/d3-array/src/quantile.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _number = _interopRequireDefault(require("./number"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, p, valueof) {
  if (valueof == null) valueof = _number.default;
  if (!(n = values.length)) return;
  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);
  if (p >= 1) return +valueof(values[n - 1], n - 1, values);
  var n,
      i = (n - 1) * p,
      i0 = Math.floor(i),
      value0 = +valueof(values[i0], i0, values),
      value1 = +valueof(values[i0 + 1], i0 + 1, values);
  return value0 + (value1 - value0) * (i - i0);
}
},{"./number":"../node_modules/d3-array/src/number.js"}],"../node_modules/d3-array/src/threshold/freedmanDiaconis.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _array = require("../array");

var _ascending = _interopRequireDefault(require("../ascending"));

var _number = _interopRequireDefault(require("../number"));

var _quantile = _interopRequireDefault(require("../quantile"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, min, max) {
  values = _array.map.call(values, _number.default).sort(_ascending.default);
  return Math.ceil((max - min) / (2 * ((0, _quantile.default)(values, 0.75) - (0, _quantile.default)(values, 0.25)) * Math.pow(values.length, -1 / 3)));
}
},{"../array":"../node_modules/d3-array/src/array.js","../ascending":"../node_modules/d3-array/src/ascending.js","../number":"../node_modules/d3-array/src/number.js","../quantile":"../node_modules/d3-array/src/quantile.js"}],"../node_modules/d3-array/src/threshold/scott.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _deviation = _interopRequireDefault(require("../deviation"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, min, max) {
  return Math.ceil((max - min) / (3.5 * (0, _deviation.default)(values) * Math.pow(values.length, -1 / 3)));
}
},{"../deviation":"../node_modules/d3-array/src/deviation.js"}],"../node_modules/d3-array/src/max.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      max;

  if (valueof == null) {
    while (++i < n) {
      // Find the first comparable value.
      if ((value = values[i]) != null && value >= value) {
        max = value;

        while (++i < n) {
          // Compare the remaining values.
          if ((value = values[i]) != null && value > max) {
            max = value;
          }
        }
      }
    }
  } else {
    while (++i < n) {
      // Find the first comparable value.
      if ((value = valueof(values[i], i, values)) != null && value >= value) {
        max = value;

        while (++i < n) {
          // Compare the remaining values.
          if ((value = valueof(values[i], i, values)) != null && value > max) {
            max = value;
          }
        }
      }
    }
  }

  return max;
}
},{}],"../node_modules/d3-array/src/mean.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _number = _interopRequireDefault(require("./number"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, valueof) {
  var n = values.length,
      m = n,
      i = -1,
      value,
      sum = 0;

  if (valueof == null) {
    while (++i < n) {
      if (!isNaN(value = (0, _number.default)(values[i]))) sum += value;else --m;
    }
  } else {
    while (++i < n) {
      if (!isNaN(value = (0, _number.default)(valueof(values[i], i, values)))) sum += value;else --m;
    }
  }

  if (m) return sum / m;
}
},{"./number":"../node_modules/d3-array/src/number.js"}],"../node_modules/d3-array/src/median.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _ascending = _interopRequireDefault(require("./ascending"));

var _number = _interopRequireDefault(require("./number"));

var _quantile = _interopRequireDefault(require("./quantile"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      numbers = [];

  if (valueof == null) {
    while (++i < n) {
      if (!isNaN(value = (0, _number.default)(values[i]))) {
        numbers.push(value);
      }
    }
  } else {
    while (++i < n) {
      if (!isNaN(value = (0, _number.default)(valueof(values[i], i, values)))) {
        numbers.push(value);
      }
    }
  }

  return (0, _quantile.default)(numbers.sort(_ascending.default), 0.5);
}
},{"./ascending":"../node_modules/d3-array/src/ascending.js","./number":"../node_modules/d3-array/src/number.js","./quantile":"../node_modules/d3-array/src/quantile.js"}],"../node_modules/d3-array/src/merge.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(arrays) {
  var n = arrays.length,
      m,
      i = -1,
      j = 0,
      merged,
      array;

  while (++i < n) j += arrays[i].length;

  merged = new Array(j);

  while (--n >= 0) {
    array = arrays[n];
    m = array.length;

    while (--m >= 0) {
      merged[--j] = array[m];
    }
  }

  return merged;
}
},{}],"../node_modules/d3-array/src/min.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      min;

  if (valueof == null) {
    while (++i < n) {
      // Find the first comparable value.
      if ((value = values[i]) != null && value >= value) {
        min = value;

        while (++i < n) {
          // Compare the remaining values.
          if ((value = values[i]) != null && min > value) {
            min = value;
          }
        }
      }
    }
  } else {
    while (++i < n) {
      // Find the first comparable value.
      if ((value = valueof(values[i], i, values)) != null && value >= value) {
        min = value;

        while (++i < n) {
          // Compare the remaining values.
          if ((value = valueof(values[i], i, values)) != null && min > value) {
            min = value;
          }
        }
      }
    }
  }

  return min;
}
},{}],"../node_modules/d3-array/src/permute.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(array, indexes) {
  var i = indexes.length,
      permutes = new Array(i);

  while (i--) permutes[i] = array[indexes[i]];

  return permutes;
}
},{}],"../node_modules/d3-array/src/scan.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _ascending = _interopRequireDefault(require("./ascending"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, compare) {
  if (!(n = values.length)) return;
  var n,
      i = 0,
      j = 0,
      xi,
      xj = values[j];
  if (compare == null) compare = _ascending.default;

  while (++i < n) {
    if (compare(xi = values[i], xj) < 0 || compare(xj, xj) !== 0) {
      xj = xi, j = i;
    }
  }

  if (compare(xj, xj) === 0) return j;
}
},{"./ascending":"../node_modules/d3-array/src/ascending.js"}],"../node_modules/d3-array/src/shuffle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(array, i0, i1) {
  var m = (i1 == null ? array.length : i1) - (i0 = i0 == null ? 0 : +i0),
      t,
      i;

  while (m) {
    i = Math.random() * m-- | 0;
    t = array[m + i0];
    array[m + i0] = array[i + i0];
    array[i + i0] = t;
  }

  return array;
}
},{}],"../node_modules/d3-array/src/sum.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      sum = 0;

  if (valueof == null) {
    while (++i < n) {
      if (value = +values[i]) sum += value; // Note: zero and null are equivalent.
    }
  } else {
    while (++i < n) {
      if (value = +valueof(values[i], i, values)) sum += value;
    }
  }

  return sum;
}
},{}],"../node_modules/d3-array/src/transpose.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _min = _interopRequireDefault(require("./min"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(matrix) {
  if (!(n = matrix.length)) return [];

  for (var i = -1, m = (0, _min.default)(matrix, length), transpose = new Array(m); ++i < m;) {
    for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {
      row[j] = matrix[j][i];
    }
  }

  return transpose;
}

function length(d) {
  return d.length;
}
},{"./min":"../node_modules/d3-array/src/min.js"}],"../node_modules/d3-array/src/zip.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _transpose = _interopRequireDefault(require("./transpose"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  return (0, _transpose.default)(arguments);
}
},{"./transpose":"../node_modules/d3-array/src/transpose.js"}],"../node_modules/d3-array/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "bisect", {
  enumerable: true,
  get: function () {
    return _bisect.default;
  }
});
Object.defineProperty(exports, "bisectRight", {
  enumerable: true,
  get: function () {
    return _bisect.bisectRight;
  }
});
Object.defineProperty(exports, "bisectLeft", {
  enumerable: true,
  get: function () {
    return _bisect.bisectLeft;
  }
});
Object.defineProperty(exports, "ascending", {
  enumerable: true,
  get: function () {
    return _ascending.default;
  }
});
Object.defineProperty(exports, "bisector", {
  enumerable: true,
  get: function () {
    return _bisector.default;
  }
});
Object.defineProperty(exports, "cross", {
  enumerable: true,
  get: function () {
    return _cross.default;
  }
});
Object.defineProperty(exports, "descending", {
  enumerable: true,
  get: function () {
    return _descending.default;
  }
});
Object.defineProperty(exports, "deviation", {
  enumerable: true,
  get: function () {
    return _deviation.default;
  }
});
Object.defineProperty(exports, "extent", {
  enumerable: true,
  get: function () {
    return _extent.default;
  }
});
Object.defineProperty(exports, "histogram", {
  enumerable: true,
  get: function () {
    return _histogram.default;
  }
});
Object.defineProperty(exports, "thresholdFreedmanDiaconis", {
  enumerable: true,
  get: function () {
    return _freedmanDiaconis.default;
  }
});
Object.defineProperty(exports, "thresholdScott", {
  enumerable: true,
  get: function () {
    return _scott.default;
  }
});
Object.defineProperty(exports, "thresholdSturges", {
  enumerable: true,
  get: function () {
    return _sturges.default;
  }
});
Object.defineProperty(exports, "max", {
  enumerable: true,
  get: function () {
    return _max.default;
  }
});
Object.defineProperty(exports, "mean", {
  enumerable: true,
  get: function () {
    return _mean.default;
  }
});
Object.defineProperty(exports, "median", {
  enumerable: true,
  get: function () {
    return _median.default;
  }
});
Object.defineProperty(exports, "merge", {
  enumerable: true,
  get: function () {
    return _merge.default;
  }
});
Object.defineProperty(exports, "min", {
  enumerable: true,
  get: function () {
    return _min.default;
  }
});
Object.defineProperty(exports, "pairs", {
  enumerable: true,
  get: function () {
    return _pairs.default;
  }
});
Object.defineProperty(exports, "permute", {
  enumerable: true,
  get: function () {
    return _permute.default;
  }
});
Object.defineProperty(exports, "quantile", {
  enumerable: true,
  get: function () {
    return _quantile.default;
  }
});
Object.defineProperty(exports, "range", {
  enumerable: true,
  get: function () {
    return _range.default;
  }
});
Object.defineProperty(exports, "scan", {
  enumerable: true,
  get: function () {
    return _scan.default;
  }
});
Object.defineProperty(exports, "shuffle", {
  enumerable: true,
  get: function () {
    return _shuffle.default;
  }
});
Object.defineProperty(exports, "sum", {
  enumerable: true,
  get: function () {
    return _sum.default;
  }
});
Object.defineProperty(exports, "ticks", {
  enumerable: true,
  get: function () {
    return _ticks.default;
  }
});
Object.defineProperty(exports, "tickIncrement", {
  enumerable: true,
  get: function () {
    return _ticks.tickIncrement;
  }
});
Object.defineProperty(exports, "tickStep", {
  enumerable: true,
  get: function () {
    return _ticks.tickStep;
  }
});
Object.defineProperty(exports, "transpose", {
  enumerable: true,
  get: function () {
    return _transpose.default;
  }
});
Object.defineProperty(exports, "variance", {
  enumerable: true,
  get: function () {
    return _variance.default;
  }
});
Object.defineProperty(exports, "zip", {
  enumerable: true,
  get: function () {
    return _zip.default;
  }
});

var _bisect = _interopRequireWildcard(require("./bisect"));

var _ascending = _interopRequireDefault(require("./ascending"));

var _bisector = _interopRequireDefault(require("./bisector"));

var _cross = _interopRequireDefault(require("./cross"));

var _descending = _interopRequireDefault(require("./descending"));

var _deviation = _interopRequireDefault(require("./deviation"));

var _extent = _interopRequireDefault(require("./extent"));

var _histogram = _interopRequireDefault(require("./histogram"));

var _freedmanDiaconis = _interopRequireDefault(require("./threshold/freedmanDiaconis"));

var _scott = _interopRequireDefault(require("./threshold/scott"));

var _sturges = _interopRequireDefault(require("./threshold/sturges"));

var _max = _interopRequireDefault(require("./max"));

var _mean = _interopRequireDefault(require("./mean"));

var _median = _interopRequireDefault(require("./median"));

var _merge = _interopRequireDefault(require("./merge"));

var _min = _interopRequireDefault(require("./min"));

var _pairs = _interopRequireDefault(require("./pairs"));

var _permute = _interopRequireDefault(require("./permute"));

var _quantile = _interopRequireDefault(require("./quantile"));

var _range = _interopRequireDefault(require("./range"));

var _scan = _interopRequireDefault(require("./scan"));

var _shuffle = _interopRequireDefault(require("./shuffle"));

var _sum = _interopRequireDefault(require("./sum"));

var _ticks = _interopRequireWildcard(require("./ticks"));

var _transpose = _interopRequireDefault(require("./transpose"));

var _variance = _interopRequireDefault(require("./variance"));

var _zip = _interopRequireDefault(require("./zip"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }
},{"./bisect":"../node_modules/d3-array/src/bisect.js","./ascending":"../node_modules/d3-array/src/ascending.js","./bisector":"../node_modules/d3-array/src/bisector.js","./cross":"../node_modules/d3-array/src/cross.js","./descending":"../node_modules/d3-array/src/descending.js","./deviation":"../node_modules/d3-array/src/deviation.js","./extent":"../node_modules/d3-array/src/extent.js","./histogram":"../node_modules/d3-array/src/histogram.js","./threshold/freedmanDiaconis":"../node_modules/d3-array/src/threshold/freedmanDiaconis.js","./threshold/scott":"../node_modules/d3-array/src/threshold/scott.js","./threshold/sturges":"../node_modules/d3-array/src/threshold/sturges.js","./max":"../node_modules/d3-array/src/max.js","./mean":"../node_modules/d3-array/src/mean.js","./median":"../node_modules/d3-array/src/median.js","./merge":"../node_modules/d3-array/src/merge.js","./min":"../node_modules/d3-array/src/min.js","./pairs":"../node_modules/d3-array/src/pairs.js","./permute":"../node_modules/d3-array/src/permute.js","./quantile":"../node_modules/d3-array/src/quantile.js","./range":"../node_modules/d3-array/src/range.js","./scan":"../node_modules/d3-array/src/scan.js","./shuffle":"../node_modules/d3-array/src/shuffle.js","./sum":"../node_modules/d3-array/src/sum.js","./ticks":"../node_modules/d3-array/src/ticks.js","./transpose":"../node_modules/d3-array/src/transpose.js","./variance":"../node_modules/d3-array/src/variance.js","./zip":"../node_modules/d3-array/src/zip.js"}],"../node_modules/d3-axis/src/array.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.slice = void 0;
var slice = Array.prototype.slice;
exports.slice = slice;
},{}],"../node_modules/d3-axis/src/identity.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return x;
}
},{}],"../node_modules/d3-axis/src/axis.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.axisTop = axisTop;
exports.axisRight = axisRight;
exports.axisBottom = axisBottom;
exports.axisLeft = axisLeft;

var _array = require("./array");

var _identity = _interopRequireDefault(require("./identity"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var top = 1,
    right = 2,
    bottom = 3,
    left = 4,
    epsilon = 1e-6;

function translateX(x) {
  return "translate(" + (x + 0.5) + ",0)";
}

function translateY(y) {
  return "translate(0," + (y + 0.5) + ")";
}

function number(scale) {
  return function (d) {
    return +scale(d);
  };
}

function center(scale) {
  var offset = Math.max(0, scale.bandwidth() - 1) / 2; // Adjust for 0.5px offset.

  if (scale.round()) offset = Math.round(offset);
  return function (d) {
    return +scale(d) + offset;
  };
}

function entering() {
  return !this.__axis;
}

function axis(orient, scale) {
  var tickArguments = [],
      tickValues = null,
      tickFormat = null,
      tickSizeInner = 6,
      tickSizeOuter = 6,
      tickPadding = 3,
      k = orient === top || orient === left ? -1 : 1,
      x = orient === left || orient === right ? "x" : "y",
      transform = orient === top || orient === bottom ? translateX : translateY;

  function axis(context) {
    var values = tickValues == null ? scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain() : tickValues,
        format = tickFormat == null ? scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : _identity.default : tickFormat,
        spacing = Math.max(tickSizeInner, 0) + tickPadding,
        range = scale.range(),
        range0 = +range[0] + 0.5,
        range1 = +range[range.length - 1] + 0.5,
        position = (scale.bandwidth ? center : number)(scale.copy()),
        selection = context.selection ? context.selection() : context,
        path = selection.selectAll(".domain").data([null]),
        tick = selection.selectAll(".tick").data(values, scale).order(),
        tickExit = tick.exit(),
        tickEnter = tick.enter().append("g").attr("class", "tick"),
        line = tick.select("line"),
        text = tick.select("text");
    path = path.merge(path.enter().insert("path", ".tick").attr("class", "domain").attr("stroke", "currentColor"));
    tick = tick.merge(tickEnter);
    line = line.merge(tickEnter.append("line").attr("stroke", "currentColor").attr(x + "2", k * tickSizeInner));
    text = text.merge(tickEnter.append("text").attr("fill", "currentColor").attr(x, k * spacing).attr("dy", orient === top ? "0em" : orient === bottom ? "0.71em" : "0.32em"));

    if (context !== selection) {
      path = path.transition(context);
      tick = tick.transition(context);
      line = line.transition(context);
      text = text.transition(context);
      tickExit = tickExit.transition(context).attr("opacity", epsilon).attr("transform", function (d) {
        return isFinite(d = position(d)) ? transform(d) : this.getAttribute("transform");
      });
      tickEnter.attr("opacity", epsilon).attr("transform", function (d) {
        var p = this.parentNode.__axis;
        return transform(p && isFinite(p = p(d)) ? p : position(d));
      });
    }

    tickExit.remove();
    path.attr("d", orient === left || orient == right ? tickSizeOuter ? "M" + k * tickSizeOuter + "," + range0 + "H0.5V" + range1 + "H" + k * tickSizeOuter : "M0.5," + range0 + "V" + range1 : tickSizeOuter ? "M" + range0 + "," + k * tickSizeOuter + "V0.5H" + range1 + "V" + k * tickSizeOuter : "M" + range0 + ",0.5H" + range1);
    tick.attr("opacity", 1).attr("transform", function (d) {
      return transform(position(d));
    });
    line.attr(x + "2", k * tickSizeInner);
    text.attr(x, k * spacing).text(format);
    selection.filter(entering).attr("fill", "none").attr("font-size", 10).attr("font-family", "sans-serif").attr("text-anchor", orient === right ? "start" : orient === left ? "end" : "middle");
    selection.each(function () {
      this.__axis = position;
    });
  }

  axis.scale = function (_) {
    return arguments.length ? (scale = _, axis) : scale;
  };

  axis.ticks = function () {
    return tickArguments = _array.slice.call(arguments), axis;
  };

  axis.tickArguments = function (_) {
    return arguments.length ? (tickArguments = _ == null ? [] : _array.slice.call(_), axis) : tickArguments.slice();
  };

  axis.tickValues = function (_) {
    return arguments.length ? (tickValues = _ == null ? null : _array.slice.call(_), axis) : tickValues && tickValues.slice();
  };

  axis.tickFormat = function (_) {
    return arguments.length ? (tickFormat = _, axis) : tickFormat;
  };

  axis.tickSize = function (_) {
    return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner;
  };

  axis.tickSizeInner = function (_) {
    return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner;
  };

  axis.tickSizeOuter = function (_) {
    return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter;
  };

  axis.tickPadding = function (_) {
    return arguments.length ? (tickPadding = +_, axis) : tickPadding;
  };

  return axis;
}

function axisTop(scale) {
  return axis(top, scale);
}

function axisRight(scale) {
  return axis(right, scale);
}

function axisBottom(scale) {
  return axis(bottom, scale);
}

function axisLeft(scale) {
  return axis(left, scale);
}
},{"./array":"../node_modules/d3-axis/src/array.js","./identity":"../node_modules/d3-axis/src/identity.js"}],"../node_modules/d3-axis/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "axisTop", {
  enumerable: true,
  get: function () {
    return _axis.axisTop;
  }
});
Object.defineProperty(exports, "axisRight", {
  enumerable: true,
  get: function () {
    return _axis.axisRight;
  }
});
Object.defineProperty(exports, "axisBottom", {
  enumerable: true,
  get: function () {
    return _axis.axisBottom;
  }
});
Object.defineProperty(exports, "axisLeft", {
  enumerable: true,
  get: function () {
    return _axis.axisLeft;
  }
});

var _axis = require("./axis");
},{"./axis":"../node_modules/d3-axis/src/axis.js"}],"../node_modules/d3-dispatch/src/dispatch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var noop = {
  value: function () {}
};

function dispatch() {
  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
    if (!(t = arguments[i] + "") || t in _) throw new Error("illegal type: " + t);
    _[t] = [];
  }

  return new Dispatch(_);
}

function Dispatch(_) {
  this._ = _;
}

function parseTypenames(typenames, types) {
  return typenames.trim().split(/^|\s+/).map(function (t) {
    var name = "",
        i = t.indexOf(".");
    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
    if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
    return {
      type: t,
      name: name
    };
  });
}

Dispatch.prototype = dispatch.prototype = {
  constructor: Dispatch,
  on: function (typename, callback) {
    var _ = this._,
        T = parseTypenames(typename + "", _),
        t,
        i = -1,
        n = T.length; // If no callback was specified, return the callback of the given type and name.

    if (arguments.length < 2) {
      while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;

      return;
    } // If a type was specified, set the callback for the given type and name.
    // Otherwise, if a null callback was specified, remove callbacks of the given name.


    if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);

    while (++i < n) {
      if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);
    }

    return this;
  },
  copy: function () {
    var copy = {},
        _ = this._;

    for (var t in _) copy[t] = _[t].slice();

    return new Dispatch(copy);
  },
  call: function (type, that) {
    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];
    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);

    for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
  },
  apply: function (type, that, args) {
    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);

    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
  }
};

function get(type, name) {
  for (var i = 0, n = type.length, c; i < n; ++i) {
    if ((c = type[i]).name === name) {
      return c.value;
    }
  }
}

function set(type, name, callback) {
  for (var i = 0, n = type.length; i < n; ++i) {
    if (type[i].name === name) {
      type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));
      break;
    }
  }

  if (callback != null) type.push({
    name: name,
    value: callback
  });
  return type;
}

var _default = dispatch;
exports.default = _default;
},{}],"../node_modules/d3-dispatch/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "dispatch", {
  enumerable: true,
  get: function () {
    return _dispatch.default;
  }
});

var _dispatch = _interopRequireDefault(require("./dispatch"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./dispatch":"../node_modules/d3-dispatch/src/dispatch.js"}],"../node_modules/d3-selection/src/namespaces.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.xhtml = void 0;
var xhtml = "http://www.w3.org/1999/xhtml";
exports.xhtml = xhtml;
var _default = {
  svg: "http://www.w3.org/2000/svg",
  xhtml: xhtml,
  xlink: "http://www.w3.org/1999/xlink",
  xml: "http://www.w3.org/XML/1998/namespace",
  xmlns: "http://www.w3.org/2000/xmlns/"
};
exports.default = _default;
},{}],"../node_modules/d3-selection/src/namespace.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _namespaces = _interopRequireDefault(require("./namespaces"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(name) {
  var prefix = name += "",
      i = prefix.indexOf(":");
  if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
  return _namespaces.default.hasOwnProperty(prefix) ? {
    space: _namespaces.default[prefix],
    local: name
  } : name;
}
},{"./namespaces":"../node_modules/d3-selection/src/namespaces.js"}],"../node_modules/d3-selection/src/creator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _namespace = _interopRequireDefault(require("./namespace"));

var _namespaces = require("./namespaces");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function creatorInherit(name) {
  return function () {
    var document = this.ownerDocument,
        uri = this.namespaceURI;
    return uri === _namespaces.xhtml && document.documentElement.namespaceURI === _namespaces.xhtml ? document.createElement(name) : document.createElementNS(uri, name);
  };
}

function creatorFixed(fullname) {
  return function () {
    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
  };
}

function _default(name) {
  var fullname = (0, _namespace.default)(name);
  return (fullname.local ? creatorFixed : creatorInherit)(fullname);
}
},{"./namespace":"../node_modules/d3-selection/src/namespace.js","./namespaces":"../node_modules/d3-selection/src/namespaces.js"}],"../node_modules/d3-selection/src/selector.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function none() {}

function _default(selector) {
  return selector == null ? none : function () {
    return this.querySelector(selector);
  };
}
},{}],"../node_modules/d3-selection/src/selection/select.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./index");

var _selector = _interopRequireDefault(require("../selector"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(select) {
  if (typeof select !== "function") select = (0, _selector.default)(select);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node) subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
      }
    }
  }

  return new _index.Selection(subgroups, this._parents);
}
},{"./index":"../node_modules/d3-selection/src/selection/index.js","../selector":"../node_modules/d3-selection/src/selector.js"}],"../node_modules/d3-selection/src/selectorAll.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function empty() {
  return [];
}

function _default(selector) {
  return selector == null ? empty : function () {
    return this.querySelectorAll(selector);
  };
}
},{}],"../node_modules/d3-selection/src/selection/selectAll.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./index");

var _selectorAll = _interopRequireDefault(require("../selectorAll"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(select) {
  if (typeof select !== "function") select = (0, _selectorAll.default)(select);

  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        subgroups.push(select.call(node, node.__data__, i, group));
        parents.push(node);
      }
    }
  }

  return new _index.Selection(subgroups, parents);
}
},{"./index":"../node_modules/d3-selection/src/selection/index.js","../selectorAll":"../node_modules/d3-selection/src/selectorAll.js"}],"../node_modules/d3-selection/src/matcher.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(selector) {
  return function () {
    return this.matches(selector);
  };
}
},{}],"../node_modules/d3-selection/src/selection/filter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./index");

var _matcher = _interopRequireDefault(require("../matcher"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(match) {
  if (typeof match !== "function") match = (0, _matcher.default)(match);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }

  return new _index.Selection(subgroups, this._parents);
}
},{"./index":"../node_modules/d3-selection/src/selection/index.js","../matcher":"../node_modules/d3-selection/src/matcher.js"}],"../node_modules/d3-selection/src/selection/sparse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(update) {
  return new Array(update.length);
}
},{}],"../node_modules/d3-selection/src/selection/enter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.EnterNode = EnterNode;

var _sparse = _interopRequireDefault(require("./sparse"));

var _index = require("./index");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  return new _index.Selection(this._enter || this._groups.map(_sparse.default), this._parents);
}

function EnterNode(parent, datum) {
  this.ownerDocument = parent.ownerDocument;
  this.namespaceURI = parent.namespaceURI;
  this._next = null;
  this._parent = parent;
  this.__data__ = datum;
}

EnterNode.prototype = {
  constructor: EnterNode,
  appendChild: function (child) {
    return this._parent.insertBefore(child, this._next);
  },
  insertBefore: function (child, next) {
    return this._parent.insertBefore(child, next);
  },
  querySelector: function (selector) {
    return this._parent.querySelector(selector);
  },
  querySelectorAll: function (selector) {
    return this._parent.querySelectorAll(selector);
  }
};
},{"./sparse":"../node_modules/d3-selection/src/selection/sparse.js","./index":"../node_modules/d3-selection/src/selection/index.js"}],"../node_modules/d3-selection/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"../node_modules/d3-selection/src/selection/data.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./index");

var _enter = require("./enter");

var _constant = _interopRequireDefault(require("../constant"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var keyPrefix = "$"; // Protect against keys like “__proto__”.

function bindIndex(parent, group, enter, update, exit, data) {
  var i = 0,
      node,
      groupLength = group.length,
      dataLength = data.length; // Put any non-null nodes that fit into update.
  // Put any null nodes into enter.
  // Put any remaining data into enter.

  for (; i < dataLength; ++i) {
    if (node = group[i]) {
      node.__data__ = data[i];
      update[i] = node;
    } else {
      enter[i] = new _enter.EnterNode(parent, data[i]);
    }
  } // Put any non-null nodes that don’t fit into exit.


  for (; i < groupLength; ++i) {
    if (node = group[i]) {
      exit[i] = node;
    }
  }
}

function bindKey(parent, group, enter, update, exit, data, key) {
  var i,
      node,
      nodeByKeyValue = {},
      groupLength = group.length,
      dataLength = data.length,
      keyValues = new Array(groupLength),
      keyValue; // Compute the key for each node.
  // If multiple nodes have the same key, the duplicates are added to exit.

  for (i = 0; i < groupLength; ++i) {
    if (node = group[i]) {
      keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);

      if (keyValue in nodeByKeyValue) {
        exit[i] = node;
      } else {
        nodeByKeyValue[keyValue] = node;
      }
    }
  } // Compute the key for each datum.
  // If there a node associated with this key, join and add it to update.
  // If there is not (or the key is a duplicate), add it to enter.


  for (i = 0; i < dataLength; ++i) {
    keyValue = keyPrefix + key.call(parent, data[i], i, data);

    if (node = nodeByKeyValue[keyValue]) {
      update[i] = node;
      node.__data__ = data[i];
      nodeByKeyValue[keyValue] = null;
    } else {
      enter[i] = new _enter.EnterNode(parent, data[i]);
    }
  } // Add any remaining nodes that were not bound to data to exit.


  for (i = 0; i < groupLength; ++i) {
    if ((node = group[i]) && nodeByKeyValue[keyValues[i]] === node) {
      exit[i] = node;
    }
  }
}

function _default(value, key) {
  if (!value) {
    data = new Array(this.size()), j = -1;
    this.each(function (d) {
      data[++j] = d;
    });
    return data;
  }

  var bind = key ? bindKey : bindIndex,
      parents = this._parents,
      groups = this._groups;
  if (typeof value !== "function") value = (0, _constant.default)(value);

  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
    var parent = parents[j],
        group = groups[j],
        groupLength = group.length,
        data = value.call(parent, parent && parent.__data__, j, parents),
        dataLength = data.length,
        enterGroup = enter[j] = new Array(dataLength),
        updateGroup = update[j] = new Array(dataLength),
        exitGroup = exit[j] = new Array(groupLength);
    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key); // Now connect the enter nodes to their following update node, such that
    // appendChild can insert the materialized enter node before this node,
    // rather than at the end of the parent node.

    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
      if (previous = enterGroup[i0]) {
        if (i0 >= i1) i1 = i0 + 1;

        while (!(next = updateGroup[i1]) && ++i1 < dataLength);

        previous._next = next || null;
      }
    }
  }

  update = new _index.Selection(update, parents);
  update._enter = enter;
  update._exit = exit;
  return update;
}
},{"./index":"../node_modules/d3-selection/src/selection/index.js","./enter":"../node_modules/d3-selection/src/selection/enter.js","../constant":"../node_modules/d3-selection/src/constant.js"}],"../node_modules/d3-selection/src/selection/exit.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _sparse = _interopRequireDefault(require("./sparse"));

var _index = require("./index");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  return new _index.Selection(this._exit || this._groups.map(_sparse.default), this._parents);
}
},{"./sparse":"../node_modules/d3-selection/src/selection/sparse.js","./index":"../node_modules/d3-selection/src/selection/index.js"}],"../node_modules/d3-selection/src/selection/join.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(onenter, onupdate, onexit) {
  var enter = this.enter(),
      update = this,
      exit = this.exit();
  enter = typeof onenter === "function" ? onenter(enter) : enter.append(onenter + "");
  if (onupdate != null) update = onupdate(update);
  if (onexit == null) exit.remove();else onexit(exit);
  return enter && update ? enter.merge(update).order() : update;
}
},{}],"../node_modules/d3-selection/src/selection/merge.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./index");

function _default(selection) {
  for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }

  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }

  return new _index.Selection(merges, this._parents);
}
},{"./index":"../node_modules/d3-selection/src/selection/index.js"}],"../node_modules/d3-selection/src/selection/order.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {
    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
      if (node = group[i]) {
        if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);
        next = node;
      }
    }
  }

  return this;
}
},{}],"../node_modules/d3-selection/src/selection/sort.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./index");

function _default(compare) {
  if (!compare) compare = ascending;

  function compareNode(a, b) {
    return a && b ? compare(a.__data__, b.__data__) : !a - !b;
  }

  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        sortgroup[i] = node;
      }
    }

    sortgroup.sort(compareNode);
  }

  return new _index.Selection(sortgroups, this._parents).order();
}

function ascending(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}
},{"./index":"../node_modules/d3-selection/src/selection/index.js"}],"../node_modules/d3-selection/src/selection/call.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var callback = arguments[0];
  arguments[0] = this;
  callback.apply(null, arguments);
  return this;
}
},{}],"../node_modules/d3-selection/src/selection/nodes.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var nodes = new Array(this.size()),
      i = -1;
  this.each(function () {
    nodes[++i] = this;
  });
  return nodes;
}
},{}],"../node_modules/d3-selection/src/selection/node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
      var node = group[i];
      if (node) return node;
    }
  }

  return null;
}
},{}],"../node_modules/d3-selection/src/selection/size.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var size = 0;
  this.each(function () {
    ++size;
  });
  return size;
}
},{}],"../node_modules/d3-selection/src/selection/empty.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  return !this.node();
}
},{}],"../node_modules/d3-selection/src/selection/each.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(callback) {
  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
      if (node = group[i]) callback.call(node, node.__data__, i, group);
    }
  }

  return this;
}
},{}],"../node_modules/d3-selection/src/selection/attr.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _namespace = _interopRequireDefault(require("../namespace"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function attrRemove(name) {
  return function () {
    this.removeAttribute(name);
  };
}

function attrRemoveNS(fullname) {
  return function () {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}

function attrConstant(name, value) {
  return function () {
    this.setAttribute(name, value);
  };
}

function attrConstantNS(fullname, value) {
  return function () {
    this.setAttributeNS(fullname.space, fullname.local, value);
  };
}

function attrFunction(name, value) {
  return function () {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttribute(name);else this.setAttribute(name, v);
  };
}

function attrFunctionNS(fullname, value) {
  return function () {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);else this.setAttributeNS(fullname.space, fullname.local, v);
  };
}

function _default(name, value) {
  var fullname = (0, _namespace.default)(name);

  if (arguments.length < 2) {
    var node = this.node();
    return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
  }

  return this.each((value == null ? fullname.local ? attrRemoveNS : attrRemove : typeof value === "function" ? fullname.local ? attrFunctionNS : attrFunction : fullname.local ? attrConstantNS : attrConstant)(fullname, value));
}
},{"../namespace":"../node_modules/d3-selection/src/namespace.js"}],"../node_modules/d3-selection/src/window.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(node) {
  return node.ownerDocument && node.ownerDocument.defaultView || // node is a Node
  node.document && node // node is a Window
  || node.defaultView; // node is a Document
}
},{}],"../node_modules/d3-selection/src/selection/style.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.styleValue = styleValue;

var _window = _interopRequireDefault(require("../window"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function styleRemove(name) {
  return function () {
    this.style.removeProperty(name);
  };
}

function styleConstant(name, value, priority) {
  return function () {
    this.style.setProperty(name, value, priority);
  };
}

function styleFunction(name, value, priority) {
  return function () {
    var v = value.apply(this, arguments);
    if (v == null) this.style.removeProperty(name);else this.style.setProperty(name, v, priority);
  };
}

function _default(name, value, priority) {
  return arguments.length > 1 ? this.each((value == null ? styleRemove : typeof value === "function" ? styleFunction : styleConstant)(name, value, priority == null ? "" : priority)) : styleValue(this.node(), name);
}

function styleValue(node, name) {
  return node.style.getPropertyValue(name) || (0, _window.default)(node).getComputedStyle(node, null).getPropertyValue(name);
}
},{"../window":"../node_modules/d3-selection/src/window.js"}],"../node_modules/d3-selection/src/selection/property.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function propertyRemove(name) {
  return function () {
    delete this[name];
  };
}

function propertyConstant(name, value) {
  return function () {
    this[name] = value;
  };
}

function propertyFunction(name, value) {
  return function () {
    var v = value.apply(this, arguments);
    if (v == null) delete this[name];else this[name] = v;
  };
}

function _default(name, value) {
  return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value === "function" ? propertyFunction : propertyConstant)(name, value)) : this.node()[name];
}
},{}],"../node_modules/d3-selection/src/selection/classed.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function classArray(string) {
  return string.trim().split(/^|\s+/);
}

function classList(node) {
  return node.classList || new ClassList(node);
}

function ClassList(node) {
  this._node = node;
  this._names = classArray(node.getAttribute("class") || "");
}

ClassList.prototype = {
  add: function (name) {
    var i = this._names.indexOf(name);

    if (i < 0) {
      this._names.push(name);

      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  remove: function (name) {
    var i = this._names.indexOf(name);

    if (i >= 0) {
      this._names.splice(i, 1);

      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  contains: function (name) {
    return this._names.indexOf(name) >= 0;
  }
};

function classedAdd(node, names) {
  var list = classList(node),
      i = -1,
      n = names.length;

  while (++i < n) list.add(names[i]);
}

function classedRemove(node, names) {
  var list = classList(node),
      i = -1,
      n = names.length;

  while (++i < n) list.remove(names[i]);
}

function classedTrue(names) {
  return function () {
    classedAdd(this, names);
  };
}

function classedFalse(names) {
  return function () {
    classedRemove(this, names);
  };
}

function classedFunction(names, value) {
  return function () {
    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
  };
}

function _default(name, value) {
  var names = classArray(name + "");

  if (arguments.length < 2) {
    var list = classList(this.node()),
        i = -1,
        n = names.length;

    while (++i < n) if (!list.contains(names[i])) return false;

    return true;
  }

  return this.each((typeof value === "function" ? classedFunction : value ? classedTrue : classedFalse)(names, value));
}
},{}],"../node_modules/d3-selection/src/selection/text.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function textRemove() {
  this.textContent = "";
}

function textConstant(value) {
  return function () {
    this.textContent = value;
  };
}

function textFunction(value) {
  return function () {
    var v = value.apply(this, arguments);
    this.textContent = v == null ? "" : v;
  };
}

function _default(value) {
  return arguments.length ? this.each(value == null ? textRemove : (typeof value === "function" ? textFunction : textConstant)(value)) : this.node().textContent;
}
},{}],"../node_modules/d3-selection/src/selection/html.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function htmlRemove() {
  this.innerHTML = "";
}

function htmlConstant(value) {
  return function () {
    this.innerHTML = value;
  };
}

function htmlFunction(value) {
  return function () {
    var v = value.apply(this, arguments);
    this.innerHTML = v == null ? "" : v;
  };
}

function _default(value) {
  return arguments.length ? this.each(value == null ? htmlRemove : (typeof value === "function" ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML;
}
},{}],"../node_modules/d3-selection/src/selection/raise.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function raise() {
  if (this.nextSibling) this.parentNode.appendChild(this);
}

function _default() {
  return this.each(raise);
}
},{}],"../node_modules/d3-selection/src/selection/lower.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function lower() {
  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
}

function _default() {
  return this.each(lower);
}
},{}],"../node_modules/d3-selection/src/selection/append.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _creator = _interopRequireDefault(require("../creator"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(name) {
  var create = typeof name === "function" ? name : (0, _creator.default)(name);
  return this.select(function () {
    return this.appendChild(create.apply(this, arguments));
  });
}
},{"../creator":"../node_modules/d3-selection/src/creator.js"}],"../node_modules/d3-selection/src/selection/insert.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _creator = _interopRequireDefault(require("../creator"));

var _selector = _interopRequireDefault(require("../selector"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function constantNull() {
  return null;
}

function _default(name, before) {
  var create = typeof name === "function" ? name : (0, _creator.default)(name),
      select = before == null ? constantNull : typeof before === "function" ? before : (0, _selector.default)(before);
  return this.select(function () {
    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
  });
}
},{"../creator":"../node_modules/d3-selection/src/creator.js","../selector":"../node_modules/d3-selection/src/selector.js"}],"../node_modules/d3-selection/src/selection/remove.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function remove() {
  var parent = this.parentNode;
  if (parent) parent.removeChild(this);
}

function _default() {
  return this.each(remove);
}
},{}],"../node_modules/d3-selection/src/selection/clone.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function selection_cloneShallow() {
  return this.parentNode.insertBefore(this.cloneNode(false), this.nextSibling);
}

function selection_cloneDeep() {
  return this.parentNode.insertBefore(this.cloneNode(true), this.nextSibling);
}

function _default(deep) {
  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
}
},{}],"../node_modules/d3-selection/src/selection/datum.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(value) {
  return arguments.length ? this.property("__data__", value) : this.node().__data__;
}
},{}],"../node_modules/d3-selection/src/selection/on.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.customEvent = customEvent;
exports.event = void 0;
var filterEvents = {};
var event = null;
exports.event = event;

if (typeof document !== "undefined") {
  var element = document.documentElement;

  if (!("onmouseenter" in element)) {
    filterEvents = {
      mouseenter: "mouseover",
      mouseleave: "mouseout"
    };
  }
}

function filterContextListener(listener, index, group) {
  listener = contextListener(listener, index, group);
  return function (event) {
    var related = event.relatedTarget;

    if (!related || related !== this && !(related.compareDocumentPosition(this) & 8)) {
      listener.call(this, event);
    }
  };
}

function contextListener(listener, index, group) {
  return function (event1) {
    var event0 = event; // Events can be reentrant (e.g., focus).

    exports.event = event = event1;

    try {
      listener.call(this, this.__data__, index, group);
    } finally {
      exports.event = event = event0;
    }
  };
}

function parseTypenames(typenames) {
  return typenames.trim().split(/^|\s+/).map(function (t) {
    var name = "",
        i = t.indexOf(".");
    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
    return {
      type: t,
      name: name
    };
  });
}

function onRemove(typename) {
  return function () {
    var on = this.__on;
    if (!on) return;

    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.capture);
      } else {
        on[++i] = o;
      }
    }

    if (++i) on.length = i;else delete this.__on;
  };
}

function onAdd(typename, value, capture) {
  var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;
  return function (d, i, group) {
    var on = this.__on,
        o,
        listener = wrap(value, i, group);
    if (on) for (var j = 0, m = on.length; j < m; ++j) {
      if ((o = on[j]).type === typename.type && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.capture);
        this.addEventListener(o.type, o.listener = listener, o.capture = capture);
        o.value = value;
        return;
      }
    }
    this.addEventListener(typename.type, listener, capture);
    o = {
      type: typename.type,
      name: typename.name,
      value: value,
      listener: listener,
      capture: capture
    };
    if (!on) this.__on = [o];else on.push(o);
  };
}

function _default(typename, value, capture) {
  var typenames = parseTypenames(typename + ""),
      i,
      n = typenames.length,
      t;

  if (arguments.length < 2) {
    var on = this.node().__on;

    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {
      for (i = 0, o = on[j]; i < n; ++i) {
        if ((t = typenames[i]).type === o.type && t.name === o.name) {
          return o.value;
        }
      }
    }
    return;
  }

  on = value ? onAdd : onRemove;
  if (capture == null) capture = false;

  for (i = 0; i < n; ++i) this.each(on(typenames[i], value, capture));

  return this;
}

function customEvent(event1, listener, that, args) {
  var event0 = event;
  event1.sourceEvent = event;
  exports.event = event = event1;

  try {
    return listener.apply(that, args);
  } finally {
    exports.event = event = event0;
  }
}
},{}],"../node_modules/d3-selection/src/selection/dispatch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _window = _interopRequireDefault(require("../window"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function dispatchEvent(node, type, params) {
  var window = (0, _window.default)(node),
      event = window.CustomEvent;

  if (typeof event === "function") {
    event = new event(type, params);
  } else {
    event = window.document.createEvent("Event");
    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;else event.initEvent(type, false, false);
  }

  node.dispatchEvent(event);
}

function dispatchConstant(type, params) {
  return function () {
    return dispatchEvent(this, type, params);
  };
}

function dispatchFunction(type, params) {
  return function () {
    return dispatchEvent(this, type, params.apply(this, arguments));
  };
}

function _default(type, params) {
  return this.each((typeof params === "function" ? dispatchFunction : dispatchConstant)(type, params));
}
},{"../window":"../node_modules/d3-selection/src/window.js"}],"../node_modules/d3-selection/src/selection/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Selection = Selection;
exports.default = exports.root = void 0;

var _select = _interopRequireDefault(require("./select"));

var _selectAll = _interopRequireDefault(require("./selectAll"));

var _filter = _interopRequireDefault(require("./filter"));

var _data = _interopRequireDefault(require("./data"));

var _enter = _interopRequireDefault(require("./enter"));

var _exit = _interopRequireDefault(require("./exit"));

var _join = _interopRequireDefault(require("./join"));

var _merge = _interopRequireDefault(require("./merge"));

var _order = _interopRequireDefault(require("./order"));

var _sort = _interopRequireDefault(require("./sort"));

var _call = _interopRequireDefault(require("./call"));

var _nodes = _interopRequireDefault(require("./nodes"));

var _node = _interopRequireDefault(require("./node"));

var _size = _interopRequireDefault(require("./size"));

var _empty = _interopRequireDefault(require("./empty"));

var _each = _interopRequireDefault(require("./each"));

var _attr = _interopRequireDefault(require("./attr"));

var _style = _interopRequireDefault(require("./style"));

var _property = _interopRequireDefault(require("./property"));

var _classed = _interopRequireDefault(require("./classed"));

var _text = _interopRequireDefault(require("./text"));

var _html = _interopRequireDefault(require("./html"));

var _raise = _interopRequireDefault(require("./raise"));

var _lower = _interopRequireDefault(require("./lower"));

var _append = _interopRequireDefault(require("./append"));

var _insert = _interopRequireDefault(require("./insert"));

var _remove = _interopRequireDefault(require("./remove"));

var _clone = _interopRequireDefault(require("./clone"));

var _datum = _interopRequireDefault(require("./datum"));

var _on = _interopRequireDefault(require("./on"));

var _dispatch = _interopRequireDefault(require("./dispatch"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var root = [null];
exports.root = root;

function Selection(groups, parents) {
  this._groups = groups;
  this._parents = parents;
}

function selection() {
  return new Selection([[document.documentElement]], root);
}

Selection.prototype = selection.prototype = {
  constructor: Selection,
  select: _select.default,
  selectAll: _selectAll.default,
  filter: _filter.default,
  data: _data.default,
  enter: _enter.default,
  exit: _exit.default,
  join: _join.default,
  merge: _merge.default,
  order: _order.default,
  sort: _sort.default,
  call: _call.default,
  nodes: _nodes.default,
  node: _node.default,
  size: _size.default,
  empty: _empty.default,
  each: _each.default,
  attr: _attr.default,
  style: _style.default,
  property: _property.default,
  classed: _classed.default,
  text: _text.default,
  html: _html.default,
  raise: _raise.default,
  lower: _lower.default,
  append: _append.default,
  insert: _insert.default,
  remove: _remove.default,
  clone: _clone.default,
  datum: _datum.default,
  on: _on.default,
  dispatch: _dispatch.default
};
var _default = selection;
exports.default = _default;
},{"./select":"../node_modules/d3-selection/src/selection/select.js","./selectAll":"../node_modules/d3-selection/src/selection/selectAll.js","./filter":"../node_modules/d3-selection/src/selection/filter.js","./data":"../node_modules/d3-selection/src/selection/data.js","./enter":"../node_modules/d3-selection/src/selection/enter.js","./exit":"../node_modules/d3-selection/src/selection/exit.js","./join":"../node_modules/d3-selection/src/selection/join.js","./merge":"../node_modules/d3-selection/src/selection/merge.js","./order":"../node_modules/d3-selection/src/selection/order.js","./sort":"../node_modules/d3-selection/src/selection/sort.js","./call":"../node_modules/d3-selection/src/selection/call.js","./nodes":"../node_modules/d3-selection/src/selection/nodes.js","./node":"../node_modules/d3-selection/src/selection/node.js","./size":"../node_modules/d3-selection/src/selection/size.js","./empty":"../node_modules/d3-selection/src/selection/empty.js","./each":"../node_modules/d3-selection/src/selection/each.js","./attr":"../node_modules/d3-selection/src/selection/attr.js","./style":"../node_modules/d3-selection/src/selection/style.js","./property":"../node_modules/d3-selection/src/selection/property.js","./classed":"../node_modules/d3-selection/src/selection/classed.js","./text":"../node_modules/d3-selection/src/selection/text.js","./html":"../node_modules/d3-selection/src/selection/html.js","./raise":"../node_modules/d3-selection/src/selection/raise.js","./lower":"../node_modules/d3-selection/src/selection/lower.js","./append":"../node_modules/d3-selection/src/selection/append.js","./insert":"../node_modules/d3-selection/src/selection/insert.js","./remove":"../node_modules/d3-selection/src/selection/remove.js","./clone":"../node_modules/d3-selection/src/selection/clone.js","./datum":"../node_modules/d3-selection/src/selection/datum.js","./on":"../node_modules/d3-selection/src/selection/on.js","./dispatch":"../node_modules/d3-selection/src/selection/dispatch.js"}],"../node_modules/d3-selection/src/select.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./selection/index");

function _default(selector) {
  return typeof selector === "string" ? new _index.Selection([[document.querySelector(selector)]], [document.documentElement]) : new _index.Selection([[selector]], _index.root);
}
},{"./selection/index":"../node_modules/d3-selection/src/selection/index.js"}],"../node_modules/d3-selection/src/create.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _creator = _interopRequireDefault(require("./creator"));

var _select = _interopRequireDefault(require("./select"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(name) {
  return (0, _select.default)((0, _creator.default)(name).call(document.documentElement));
}
},{"./creator":"../node_modules/d3-selection/src/creator.js","./select":"../node_modules/d3-selection/src/select.js"}],"../node_modules/d3-selection/src/local.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = local;
var nextId = 0;

function local() {
  return new Local();
}

function Local() {
  this._ = "@" + (++nextId).toString(36);
}

Local.prototype = local.prototype = {
  constructor: Local,
  get: function (node) {
    var id = this._;

    while (!(id in node)) if (!(node = node.parentNode)) return;

    return node[id];
  },
  set: function (node, value) {
    return node[this._] = value;
  },
  remove: function (node) {
    return this._ in node && delete node[this._];
  },
  toString: function () {
    return this._;
  }
};
},{}],"../node_modules/d3-selection/src/sourceEvent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _on = require("./selection/on");

function _default() {
  var current = _on.event,
      source;

  while (source = current.sourceEvent) current = source;

  return current;
}
},{"./selection/on":"../node_modules/d3-selection/src/selection/on.js"}],"../node_modules/d3-selection/src/point.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(node, event) {
  var svg = node.ownerSVGElement || node;

  if (svg.createSVGPoint) {
    var point = svg.createSVGPoint();
    point.x = event.clientX, point.y = event.clientY;
    point = point.matrixTransform(node.getScreenCTM().inverse());
    return [point.x, point.y];
  }

  var rect = node.getBoundingClientRect();
  return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
}
},{}],"../node_modules/d3-selection/src/mouse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _sourceEvent = _interopRequireDefault(require("./sourceEvent"));

var _point = _interopRequireDefault(require("./point"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(node) {
  var event = (0, _sourceEvent.default)();
  if (event.changedTouches) event = event.changedTouches[0];
  return (0, _point.default)(node, event);
}
},{"./sourceEvent":"../node_modules/d3-selection/src/sourceEvent.js","./point":"../node_modules/d3-selection/src/point.js"}],"../node_modules/d3-selection/src/selectAll.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./selection/index");

function _default(selector) {
  return typeof selector === "string" ? new _index.Selection([document.querySelectorAll(selector)], [document.documentElement]) : new _index.Selection([selector == null ? [] : selector], _index.root);
}
},{"./selection/index":"../node_modules/d3-selection/src/selection/index.js"}],"../node_modules/d3-selection/src/touch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _sourceEvent = _interopRequireDefault(require("./sourceEvent"));

var _point = _interopRequireDefault(require("./point"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(node, touches, identifier) {
  if (arguments.length < 3) identifier = touches, touches = (0, _sourceEvent.default)().changedTouches;

  for (var i = 0, n = touches ? touches.length : 0, touch; i < n; ++i) {
    if ((touch = touches[i]).identifier === identifier) {
      return (0, _point.default)(node, touch);
    }
  }

  return null;
}
},{"./sourceEvent":"../node_modules/d3-selection/src/sourceEvent.js","./point":"../node_modules/d3-selection/src/point.js"}],"../node_modules/d3-selection/src/touches.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _sourceEvent = _interopRequireDefault(require("./sourceEvent"));

var _point = _interopRequireDefault(require("./point"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(node, touches) {
  if (touches == null) touches = (0, _sourceEvent.default)().touches;

  for (var i = 0, n = touches ? touches.length : 0, points = new Array(n); i < n; ++i) {
    points[i] = (0, _point.default)(node, touches[i]);
  }

  return points;
}
},{"./sourceEvent":"../node_modules/d3-selection/src/sourceEvent.js","./point":"../node_modules/d3-selection/src/point.js"}],"../node_modules/d3-selection/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "create", {
  enumerable: true,
  get: function () {
    return _create.default;
  }
});
Object.defineProperty(exports, "creator", {
  enumerable: true,
  get: function () {
    return _creator.default;
  }
});
Object.defineProperty(exports, "local", {
  enumerable: true,
  get: function () {
    return _local.default;
  }
});
Object.defineProperty(exports, "matcher", {
  enumerable: true,
  get: function () {
    return _matcher.default;
  }
});
Object.defineProperty(exports, "mouse", {
  enumerable: true,
  get: function () {
    return _mouse.default;
  }
});
Object.defineProperty(exports, "namespace", {
  enumerable: true,
  get: function () {
    return _namespace.default;
  }
});
Object.defineProperty(exports, "namespaces", {
  enumerable: true,
  get: function () {
    return _namespaces.default;
  }
});
Object.defineProperty(exports, "clientPoint", {
  enumerable: true,
  get: function () {
    return _point.default;
  }
});
Object.defineProperty(exports, "select", {
  enumerable: true,
  get: function () {
    return _select.default;
  }
});
Object.defineProperty(exports, "selectAll", {
  enumerable: true,
  get: function () {
    return _selectAll.default;
  }
});
Object.defineProperty(exports, "selection", {
  enumerable: true,
  get: function () {
    return _index.default;
  }
});
Object.defineProperty(exports, "selector", {
  enumerable: true,
  get: function () {
    return _selector.default;
  }
});
Object.defineProperty(exports, "selectorAll", {
  enumerable: true,
  get: function () {
    return _selectorAll.default;
  }
});
Object.defineProperty(exports, "style", {
  enumerable: true,
  get: function () {
    return _style.styleValue;
  }
});
Object.defineProperty(exports, "touch", {
  enumerable: true,
  get: function () {
    return _touch.default;
  }
});
Object.defineProperty(exports, "touches", {
  enumerable: true,
  get: function () {
    return _touches.default;
  }
});
Object.defineProperty(exports, "window", {
  enumerable: true,
  get: function () {
    return _window.default;
  }
});
Object.defineProperty(exports, "event", {
  enumerable: true,
  get: function () {
    return _on.event;
  }
});
Object.defineProperty(exports, "customEvent", {
  enumerable: true,
  get: function () {
    return _on.customEvent;
  }
});

var _create = _interopRequireDefault(require("./create"));

var _creator = _interopRequireDefault(require("./creator"));

var _local = _interopRequireDefault(require("./local"));

var _matcher = _interopRequireDefault(require("./matcher"));

var _mouse = _interopRequireDefault(require("./mouse"));

var _namespace = _interopRequireDefault(require("./namespace"));

var _namespaces = _interopRequireDefault(require("./namespaces"));

var _point = _interopRequireDefault(require("./point"));

var _select = _interopRequireDefault(require("./select"));

var _selectAll = _interopRequireDefault(require("./selectAll"));

var _index = _interopRequireDefault(require("./selection/index"));

var _selector = _interopRequireDefault(require("./selector"));

var _selectorAll = _interopRequireDefault(require("./selectorAll"));

var _style = require("./selection/style");

var _touch = _interopRequireDefault(require("./touch"));

var _touches = _interopRequireDefault(require("./touches"));

var _window = _interopRequireDefault(require("./window"));

var _on = require("./selection/on");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./create":"../node_modules/d3-selection/src/create.js","./creator":"../node_modules/d3-selection/src/creator.js","./local":"../node_modules/d3-selection/src/local.js","./matcher":"../node_modules/d3-selection/src/matcher.js","./mouse":"../node_modules/d3-selection/src/mouse.js","./namespace":"../node_modules/d3-selection/src/namespace.js","./namespaces":"../node_modules/d3-selection/src/namespaces.js","./point":"../node_modules/d3-selection/src/point.js","./select":"../node_modules/d3-selection/src/select.js","./selectAll":"../node_modules/d3-selection/src/selectAll.js","./selection/index":"../node_modules/d3-selection/src/selection/index.js","./selector":"../node_modules/d3-selection/src/selector.js","./selectorAll":"../node_modules/d3-selection/src/selectorAll.js","./selection/style":"../node_modules/d3-selection/src/selection/style.js","./touch":"../node_modules/d3-selection/src/touch.js","./touches":"../node_modules/d3-selection/src/touches.js","./window":"../node_modules/d3-selection/src/window.js","./selection/on":"../node_modules/d3-selection/src/selection/on.js"}],"../node_modules/d3-drag/src/noevent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nopropagation = nopropagation;
exports.default = _default;

var _d3Selection = require("d3-selection");

function nopropagation() {
  _d3Selection.event.stopImmediatePropagation();
}

function _default() {
  _d3Selection.event.preventDefault();

  _d3Selection.event.stopImmediatePropagation();
}
},{"d3-selection":"../node_modules/d3-selection/src/index.js"}],"../node_modules/d3-drag/src/nodrag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.yesdrag = yesdrag;

var _d3Selection = require("d3-selection");

var _noevent = _interopRequireDefault(require("./noevent"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(view) {
  var root = view.document.documentElement,
      selection = (0, _d3Selection.select)(view).on("dragstart.drag", _noevent.default, true);

  if ("onselectstart" in root) {
    selection.on("selectstart.drag", _noevent.default, true);
  } else {
    root.__noselect = root.style.MozUserSelect;
    root.style.MozUserSelect = "none";
  }
}

function yesdrag(view, noclick) {
  var root = view.document.documentElement,
      selection = (0, _d3Selection.select)(view).on("dragstart.drag", null);

  if (noclick) {
    selection.on("click.drag", _noevent.default, true);
    setTimeout(function () {
      selection.on("click.drag", null);
    }, 0);
  }

  if ("onselectstart" in root) {
    selection.on("selectstart.drag", null);
  } else {
    root.style.MozUserSelect = root.__noselect;
    delete root.__noselect;
  }
}
},{"d3-selection":"../node_modules/d3-selection/src/index.js","./noevent":"../node_modules/d3-drag/src/noevent.js"}],"../node_modules/d3-drag/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"../node_modules/d3-drag/src/event.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = DragEvent;

function DragEvent(target, type, subject, id, active, x, y, dx, dy, dispatch) {
  this.target = target;
  this.type = type;
  this.subject = subject;
  this.identifier = id;
  this.active = active;
  this.x = x;
  this.y = y;
  this.dx = dx;
  this.dy = dy;
  this._ = dispatch;
}

DragEvent.prototype.on = function () {
  var value = this._.on.apply(this._, arguments);

  return value === this._ ? this : value;
};
},{}],"../node_modules/d3-drag/src/drag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Dispatch = require("d3-dispatch");

var _d3Selection = require("d3-selection");

var _nodrag = _interopRequireWildcard(require("./nodrag"));

var _noevent = _interopRequireWildcard(require("./noevent"));

var _constant = _interopRequireDefault(require("./constant"));

var _event = _interopRequireDefault(require("./event"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

// Ignore right-click, since that should open the context menu.
function defaultFilter() {
  return !_d3Selection.event.button;
}

function defaultContainer() {
  return this.parentNode;
}

function defaultSubject(d) {
  return d == null ? {
    x: _d3Selection.event.x,
    y: _d3Selection.event.y
  } : d;
}

function defaultTouchable() {
  return "ontouchstart" in this;
}

function _default() {
  var filter = defaultFilter,
      container = defaultContainer,
      subject = defaultSubject,
      touchable = defaultTouchable,
      gestures = {},
      listeners = (0, _d3Dispatch.dispatch)("start", "drag", "end"),
      active = 0,
      mousedownx,
      mousedowny,
      mousemoving,
      touchending,
      clickDistance2 = 0;

  function drag(selection) {
    selection.on("mousedown.drag", mousedowned).filter(touchable).on("touchstart.drag", touchstarted).on("touchmove.drag", touchmoved).on("touchend.drag touchcancel.drag", touchended).style("touch-action", "none").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }

  function mousedowned() {
    if (touchending || !filter.apply(this, arguments)) return;
    var gesture = beforestart("mouse", container.apply(this, arguments), _d3Selection.mouse, this, arguments);
    if (!gesture) return;
    (0, _d3Selection.select)(_d3Selection.event.view).on("mousemove.drag", mousemoved, true).on("mouseup.drag", mouseupped, true);
    (0, _nodrag.default)(_d3Selection.event.view);
    (0, _noevent.nopropagation)();
    mousemoving = false;
    mousedownx = _d3Selection.event.clientX;
    mousedowny = _d3Selection.event.clientY;
    gesture("start");
  }

  function mousemoved() {
    (0, _noevent.default)();

    if (!mousemoving) {
      var dx = _d3Selection.event.clientX - mousedownx,
          dy = _d3Selection.event.clientY - mousedowny;
      mousemoving = dx * dx + dy * dy > clickDistance2;
    }

    gestures.mouse("drag");
  }

  function mouseupped() {
    (0, _d3Selection.select)(_d3Selection.event.view).on("mousemove.drag mouseup.drag", null);
    (0, _nodrag.yesdrag)(_d3Selection.event.view, mousemoving);
    (0, _noevent.default)();
    gestures.mouse("end");
  }

  function touchstarted() {
    if (!filter.apply(this, arguments)) return;
    var touches = _d3Selection.event.changedTouches,
        c = container.apply(this, arguments),
        n = touches.length,
        i,
        gesture;

    for (i = 0; i < n; ++i) {
      if (gesture = beforestart(touches[i].identifier, c, _d3Selection.touch, this, arguments)) {
        (0, _noevent.nopropagation)();
        gesture("start");
      }
    }
  }

  function touchmoved() {
    var touches = _d3Selection.event.changedTouches,
        n = touches.length,
        i,
        gesture;

    for (i = 0; i < n; ++i) {
      if (gesture = gestures[touches[i].identifier]) {
        (0, _noevent.default)();
        gesture("drag");
      }
    }
  }

  function touchended() {
    var touches = _d3Selection.event.changedTouches,
        n = touches.length,
        i,
        gesture;
    if (touchending) clearTimeout(touchending);
    touchending = setTimeout(function () {
      touchending = null;
    }, 500); // Ghost clicks are delayed!

    for (i = 0; i < n; ++i) {
      if (gesture = gestures[touches[i].identifier]) {
        (0, _noevent.nopropagation)();
        gesture("end");
      }
    }
  }

  function beforestart(id, container, point, that, args) {
    var p = point(container, id),
        s,
        dx,
        dy,
        sublisteners = listeners.copy();
    if (!(0, _d3Selection.customEvent)(new _event.default(drag, "beforestart", s, id, active, p[0], p[1], 0, 0, sublisteners), function () {
      if ((_d3Selection.event.subject = s = subject.apply(that, args)) == null) return false;
      dx = s.x - p[0] || 0;
      dy = s.y - p[1] || 0;
      return true;
    })) return;
    return function gesture(type) {
      var p0 = p,
          n;

      switch (type) {
        case "start":
          gestures[id] = gesture, n = active++;
          break;

        case "end":
          delete gestures[id], --active;
        // nobreak

        case "drag":
          p = point(container, id), n = active;
          break;
      }

      (0, _d3Selection.customEvent)(new _event.default(drag, type, s, id, n, p[0] + dx, p[1] + dy, p[0] - p0[0], p[1] - p0[1], sublisteners), sublisteners.apply, sublisteners, [type, that, args]);
    };
  }

  drag.filter = function (_) {
    return arguments.length ? (filter = typeof _ === "function" ? _ : (0, _constant.default)(!!_), drag) : filter;
  };

  drag.container = function (_) {
    return arguments.length ? (container = typeof _ === "function" ? _ : (0, _constant.default)(_), drag) : container;
  };

  drag.subject = function (_) {
    return arguments.length ? (subject = typeof _ === "function" ? _ : (0, _constant.default)(_), drag) : subject;
  };

  drag.touchable = function (_) {
    return arguments.length ? (touchable = typeof _ === "function" ? _ : (0, _constant.default)(!!_), drag) : touchable;
  };

  drag.on = function () {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? drag : value;
  };

  drag.clickDistance = function (_) {
    return arguments.length ? (clickDistance2 = (_ = +_) * _, drag) : Math.sqrt(clickDistance2);
  };

  return drag;
}
},{"d3-dispatch":"../node_modules/d3-dispatch/src/index.js","d3-selection":"../node_modules/d3-selection/src/index.js","./nodrag":"../node_modules/d3-drag/src/nodrag.js","./noevent":"../node_modules/d3-drag/src/noevent.js","./constant":"../node_modules/d3-drag/src/constant.js","./event":"../node_modules/d3-drag/src/event.js"}],"../node_modules/d3-drag/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "drag", {
  enumerable: true,
  get: function () {
    return _drag.default;
  }
});
Object.defineProperty(exports, "dragDisable", {
  enumerable: true,
  get: function () {
    return _nodrag.default;
  }
});
Object.defineProperty(exports, "dragEnable", {
  enumerable: true,
  get: function () {
    return _nodrag.yesdrag;
  }
});

var _drag = _interopRequireDefault(require("./drag"));

var _nodrag = _interopRequireWildcard(require("./nodrag"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./drag":"../node_modules/d3-drag/src/drag.js","./nodrag":"../node_modules/d3-drag/src/nodrag.js"}],"../node_modules/d3-color/src/define.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.extend = extend;

function _default(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}

function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);

  for (var key in definition) prototype[key] = definition[key];

  return prototype;
}
},{}],"../node_modules/d3-color/src/color.js":[function(require,module,exports) {

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Color = Color;
exports.default = color;
exports.rgbConvert = rgbConvert;
exports.rgb = rgb;
exports.Rgb = Rgb;
exports.hslConvert = hslConvert;
exports.hsl = hsl;
exports.brighter = exports.darker = void 0;

var _define = _interopRequireWildcard(require("./define"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function Color() {}

var darker = 0.7;
exports.darker = darker;
var brighter = 1 / darker;
exports.brighter = brighter;
var reI = "\\s*([+-]?\\d+)\\s*",
    reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",
    reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
    reHex3 = /^#([0-9a-f]{3})$/,
    reHex6 = /^#([0-9a-f]{6})$/,
    reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$"),
    reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$"),
    reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$"),
    reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$"),
    reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$"),
    reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");
var named = {
  aliceblue: 0xf0f8ff,
  antiquewhite: 0xfaebd7,
  aqua: 0x00ffff,
  aquamarine: 0x7fffd4,
  azure: 0xf0ffff,
  beige: 0xf5f5dc,
  bisque: 0xffe4c4,
  black: 0x000000,
  blanchedalmond: 0xffebcd,
  blue: 0x0000ff,
  blueviolet: 0x8a2be2,
  brown: 0xa52a2a,
  burlywood: 0xdeb887,
  cadetblue: 0x5f9ea0,
  chartreuse: 0x7fff00,
  chocolate: 0xd2691e,
  coral: 0xff7f50,
  cornflowerblue: 0x6495ed,
  cornsilk: 0xfff8dc,
  crimson: 0xdc143c,
  cyan: 0x00ffff,
  darkblue: 0x00008b,
  darkcyan: 0x008b8b,
  darkgoldenrod: 0xb8860b,
  darkgray: 0xa9a9a9,
  darkgreen: 0x006400,
  darkgrey: 0xa9a9a9,
  darkkhaki: 0xbdb76b,
  darkmagenta: 0x8b008b,
  darkolivegreen: 0x556b2f,
  darkorange: 0xff8c00,
  darkorchid: 0x9932cc,
  darkred: 0x8b0000,
  darksalmon: 0xe9967a,
  darkseagreen: 0x8fbc8f,
  darkslateblue: 0x483d8b,
  darkslategray: 0x2f4f4f,
  darkslategrey: 0x2f4f4f,
  darkturquoise: 0x00ced1,
  darkviolet: 0x9400d3,
  deeppink: 0xff1493,
  deepskyblue: 0x00bfff,
  dimgray: 0x696969,
  dimgrey: 0x696969,
  dodgerblue: 0x1e90ff,
  firebrick: 0xb22222,
  floralwhite: 0xfffaf0,
  forestgreen: 0x228b22,
  fuchsia: 0xff00ff,
  gainsboro: 0xdcdcdc,
  ghostwhite: 0xf8f8ff,
  gold: 0xffd700,
  goldenrod: 0xdaa520,
  gray: 0x808080,
  green: 0x008000,
  greenyellow: 0xadff2f,
  grey: 0x808080,
  honeydew: 0xf0fff0,
  hotpink: 0xff69b4,
  indianred: 0xcd5c5c,
  indigo: 0x4b0082,
  ivory: 0xfffff0,
  khaki: 0xf0e68c,
  lavender: 0xe6e6fa,
  lavenderblush: 0xfff0f5,
  lawngreen: 0x7cfc00,
  lemonchiffon: 0xfffacd,
  lightblue: 0xadd8e6,
  lightcoral: 0xf08080,
  lightcyan: 0xe0ffff,
  lightgoldenrodyellow: 0xfafad2,
  lightgray: 0xd3d3d3,
  lightgreen: 0x90ee90,
  lightgrey: 0xd3d3d3,
  lightpink: 0xffb6c1,
  lightsalmon: 0xffa07a,
  lightseagreen: 0x20b2aa,
  lightskyblue: 0x87cefa,
  lightslategray: 0x778899,
  lightslategrey: 0x778899,
  lightsteelblue: 0xb0c4de,
  lightyellow: 0xffffe0,
  lime: 0x00ff00,
  limegreen: 0x32cd32,
  linen: 0xfaf0e6,
  magenta: 0xff00ff,
  maroon: 0x800000,
  mediumaquamarine: 0x66cdaa,
  mediumblue: 0x0000cd,
  mediumorchid: 0xba55d3,
  mediumpurple: 0x9370db,
  mediumseagreen: 0x3cb371,
  mediumslateblue: 0x7b68ee,
  mediumspringgreen: 0x00fa9a,
  mediumturquoise: 0x48d1cc,
  mediumvioletred: 0xc71585,
  midnightblue: 0x191970,
  mintcream: 0xf5fffa,
  mistyrose: 0xffe4e1,
  moccasin: 0xffe4b5,
  navajowhite: 0xffdead,
  navy: 0x000080,
  oldlace: 0xfdf5e6,
  olive: 0x808000,
  olivedrab: 0x6b8e23,
  orange: 0xffa500,
  orangered: 0xff4500,
  orchid: 0xda70d6,
  palegoldenrod: 0xeee8aa,
  palegreen: 0x98fb98,
  paleturquoise: 0xafeeee,
  palevioletred: 0xdb7093,
  papayawhip: 0xffefd5,
  peachpuff: 0xffdab9,
  peru: 0xcd853f,
  pink: 0xffc0cb,
  plum: 0xdda0dd,
  powderblue: 0xb0e0e6,
  purple: 0x800080,
  rebeccapurple: 0x663399,
  red: 0xff0000,
  rosybrown: 0xbc8f8f,
  royalblue: 0x4169e1,
  saddlebrown: 0x8b4513,
  salmon: 0xfa8072,
  sandybrown: 0xf4a460,
  seagreen: 0x2e8b57,
  seashell: 0xfff5ee,
  sienna: 0xa0522d,
  silver: 0xc0c0c0,
  skyblue: 0x87ceeb,
  slateblue: 0x6a5acd,
  slategray: 0x708090,
  slategrey: 0x708090,
  snow: 0xfffafa,
  springgreen: 0x00ff7f,
  steelblue: 0x4682b4,
  tan: 0xd2b48c,
  teal: 0x008080,
  thistle: 0xd8bfd8,
  tomato: 0xff6347,
  turquoise: 0x40e0d0,
  violet: 0xee82ee,
  wheat: 0xf5deb3,
  white: 0xffffff,
  whitesmoke: 0xf5f5f5,
  yellow: 0xffff00,
  yellowgreen: 0x9acd32
};
(0, _define.default)(Color, color, {
  displayable: function () {
    return this.rgb().displayable();
  },
  hex: function () {
    return this.rgb().hex();
  },
  toString: function () {
    return this.rgb() + "";
  }
});

function color(format) {
  var m;
  format = (format + "").trim().toLowerCase();
  return (m = reHex3.exec(format)) ? (m = parseInt(m[1], 16), new Rgb(m >> 8 & 0xf | m >> 4 & 0x0f0, m >> 4 & 0xf | m & 0xf0, (m & 0xf) << 4 | m & 0xf, 1) // #f00
  ) : (m = reHex6.exec(format)) ? rgbn(parseInt(m[1], 16)) // #ff0000
  : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
  : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
  : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
  : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
  : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
  : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
  : named.hasOwnProperty(format) ? rgbn(named[format]) : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
}

function rgbn(n) {
  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
}

function rgba(r, g, b, a) {
  if (a <= 0) r = g = b = NaN;
  return new Rgb(r, g, b, a);
}

function rgbConvert(o) {
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Rgb();
  o = o.rgb();
  return new Rgb(o.r, o.g, o.b, o.opacity);
}

function rgb(r, g, b, opacity) {
  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
}

function Rgb(r, g, b, opacity) {
  this.r = +r;
  this.g = +g;
  this.b = +b;
  this.opacity = +opacity;
}

(0, _define.default)(Rgb, rgb, (0, _define.extend)(Color, {
  brighter: function (k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  darker: function (k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  rgb: function () {
    return this;
  },
  displayable: function () {
    return 0 <= this.r && this.r <= 255 && 0 <= this.g && this.g <= 255 && 0 <= this.b && this.b <= 255 && 0 <= this.opacity && this.opacity <= 1;
  },
  hex: function () {
    return "#" + hex(this.r) + hex(this.g) + hex(this.b);
  },
  toString: function () {
    var a = this.opacity;
    a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
    return (a === 1 ? "rgb(" : "rgba(") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a === 1 ? ")" : ", " + a + ")");
  }
}));

function hex(value) {
  value = Math.max(0, Math.min(255, Math.round(value) || 0));
  return (value < 16 ? "0" : "") + value.toString(16);
}

function hsla(h, s, l, a) {
  if (a <= 0) h = s = l = NaN;else if (l <= 0 || l >= 1) h = s = NaN;else if (s <= 0) h = NaN;
  return new Hsl(h, s, l, a);
}

function hslConvert(o) {
  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Hsl();
  if (o instanceof Hsl) return o;
  o = o.rgb();
  var r = o.r / 255,
      g = o.g / 255,
      b = o.b / 255,
      min = Math.min(r, g, b),
      max = Math.max(r, g, b),
      h = NaN,
      s = max - min,
      l = (max + min) / 2;

  if (s) {
    if (r === max) h = (g - b) / s + (g < b) * 6;else if (g === max) h = (b - r) / s + 2;else h = (r - g) / s + 4;
    s /= l < 0.5 ? max + min : 2 - max - min;
    h *= 60;
  } else {
    s = l > 0 && l < 1 ? 0 : h;
  }

  return new Hsl(h, s, l, o.opacity);
}

function hsl(h, s, l, opacity) {
  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
}

function Hsl(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}

(0, _define.default)(Hsl, hsl, (0, _define.extend)(Color, {
  brighter: function (k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  darker: function (k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  rgb: function () {
    var h = this.h % 360 + (this.h < 0) * 360,
        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
        l = this.l,
        m2 = l + (l < 0.5 ? l : 1 - l) * s,
        m1 = 2 * l - m2;
    return new Rgb(hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb(h, m1, m2), hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);
  },
  displayable: function () {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && 0 <= this.l && this.l <= 1 && 0 <= this.opacity && this.opacity <= 1;
  }
}));
/* From FvD 13.37, CSS Color Module Level 3 */

function hsl2rgb(h, m1, m2) {
  return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
}
},{"./define":"../node_modules/d3-color/src/define.js"}],"../node_modules/d3-color/src/math.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rad2deg = exports.deg2rad = void 0;
var deg2rad = Math.PI / 180;
exports.deg2rad = deg2rad;
var rad2deg = 180 / Math.PI;
exports.rad2deg = rad2deg;
},{}],"../node_modules/d3-color/src/lab.js":[function(require,module,exports) {

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gray = gray;
exports.default = lab;
exports.Lab = Lab;
exports.lch = lch;
exports.hcl = hcl;
exports.Hcl = Hcl;

var _define = _interopRequireWildcard(require("./define"));

var _color = require("./color");

var _math = require("./math");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

// https://beta.observablehq.com/@mbostock/lab-and-rgb
var K = 18,
    Xn = 0.96422,
    Yn = 1,
    Zn = 0.82521,
    t0 = 4 / 29,
    t1 = 6 / 29,
    t2 = 3 * t1 * t1,
    t3 = t1 * t1 * t1;

function labConvert(o) {
  if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);

  if (o instanceof Hcl) {
    if (isNaN(o.h)) return new Lab(o.l, 0, 0, o.opacity);
    var h = o.h * _math.deg2rad;
    return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
  }

  if (!(o instanceof _color.Rgb)) o = (0, _color.rgbConvert)(o);
  var r = rgb2lrgb(o.r),
      g = rgb2lrgb(o.g),
      b = rgb2lrgb(o.b),
      y = xyz2lab((0.2225045 * r + 0.7168786 * g + 0.0606169 * b) / Yn),
      x,
      z;
  if (r === g && g === b) x = z = y;else {
    x = xyz2lab((0.4360747 * r + 0.3850649 * g + 0.1430804 * b) / Xn);
    z = xyz2lab((0.0139322 * r + 0.0971045 * g + 0.7141733 * b) / Zn);
  }
  return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
}

function gray(l, opacity) {
  return new Lab(l, 0, 0, opacity == null ? 1 : opacity);
}

function lab(l, a, b, opacity) {
  return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
}

function Lab(l, a, b, opacity) {
  this.l = +l;
  this.a = +a;
  this.b = +b;
  this.opacity = +opacity;
}

(0, _define.default)(Lab, lab, (0, _define.extend)(_color.Color, {
  brighter: function (k) {
    return new Lab(this.l + K * (k == null ? 1 : k), this.a, this.b, this.opacity);
  },
  darker: function (k) {
    return new Lab(this.l - K * (k == null ? 1 : k), this.a, this.b, this.opacity);
  },
  rgb: function () {
    var y = (this.l + 16) / 116,
        x = isNaN(this.a) ? y : y + this.a / 500,
        z = isNaN(this.b) ? y : y - this.b / 200;
    x = Xn * lab2xyz(x);
    y = Yn * lab2xyz(y);
    z = Zn * lab2xyz(z);
    return new _color.Rgb(lrgb2rgb(3.1338561 * x - 1.6168667 * y - 0.4906146 * z), lrgb2rgb(-0.9787684 * x + 1.9161415 * y + 0.0334540 * z), lrgb2rgb(0.0719453 * x - 0.2289914 * y + 1.4052427 * z), this.opacity);
  }
}));

function xyz2lab(t) {
  return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
}

function lab2xyz(t) {
  return t > t1 ? t * t * t : t2 * (t - t0);
}

function lrgb2rgb(x) {
  return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
}

function rgb2lrgb(x) {
  return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
}

function hclConvert(o) {
  if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
  if (!(o instanceof Lab)) o = labConvert(o);
  if (o.a === 0 && o.b === 0) return new Hcl(NaN, 0, o.l, o.opacity);

  var h = Math.atan2(o.b, o.a) * _math.rad2deg;

  return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
}

function lch(l, c, h, opacity) {
  return arguments.length === 1 ? hclConvert(l) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
}

function hcl(h, c, l, opacity) {
  return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
}

function Hcl(h, c, l, opacity) {
  this.h = +h;
  this.c = +c;
  this.l = +l;
  this.opacity = +opacity;
}

(0, _define.default)(Hcl, hcl, (0, _define.extend)(_color.Color, {
  brighter: function (k) {
    return new Hcl(this.h, this.c, this.l + K * (k == null ? 1 : k), this.opacity);
  },
  darker: function (k) {
    return new Hcl(this.h, this.c, this.l - K * (k == null ? 1 : k), this.opacity);
  },
  rgb: function () {
    return labConvert(this).rgb();
  }
}));
},{"./define":"../node_modules/d3-color/src/define.js","./color":"../node_modules/d3-color/src/color.js","./math":"../node_modules/d3-color/src/math.js"}],"../node_modules/d3-color/src/cubehelix.js":[function(require,module,exports) {

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = cubehelix;
exports.Cubehelix = Cubehelix;

var _define = _interopRequireWildcard(require("./define"));

var _color = require("./color");

var _math = require("./math");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

var A = -0.14861,
    B = +1.78277,
    C = -0.29227,
    D = -0.90649,
    E = +1.97294,
    ED = E * D,
    EB = E * B,
    BC_DA = B * C - D * A;

function cubehelixConvert(o) {
  if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof _color.Rgb)) o = (0, _color.rgbConvert)(o);
  var r = o.r / 255,
      g = o.g / 255,
      b = o.b / 255,
      l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),
      bl = b - l,
      k = (E * (g - l) - C * bl) / D,
      s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)),
      // NaN if l=0 or l=1
  h = s ? Math.atan2(k, bl) * _math.rad2deg - 120 : NaN;
  return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
}

function cubehelix(h, s, l, opacity) {
  return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
}

function Cubehelix(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}

(0, _define.default)(Cubehelix, cubehelix, (0, _define.extend)(_color.Color, {
  brighter: function (k) {
    k = k == null ? _color.brighter : Math.pow(_color.brighter, k);
    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
  },
  darker: function (k) {
    k = k == null ? _color.darker : Math.pow(_color.darker, k);
    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
  },
  rgb: function () {
    var h = isNaN(this.h) ? 0 : (this.h + 120) * _math.deg2rad,
        l = +this.l,
        a = isNaN(this.s) ? 0 : this.s * l * (1 - l),
        cosh = Math.cos(h),
        sinh = Math.sin(h);
    return new _color.Rgb(255 * (l + a * (A * cosh + B * sinh)), 255 * (l + a * (C * cosh + D * sinh)), 255 * (l + a * (E * cosh)), this.opacity);
  }
}));
},{"./define":"../node_modules/d3-color/src/define.js","./color":"../node_modules/d3-color/src/color.js","./math":"../node_modules/d3-color/src/math.js"}],"../node_modules/d3-color/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "color", {
  enumerable: true,
  get: function () {
    return _color.default;
  }
});
Object.defineProperty(exports, "rgb", {
  enumerable: true,
  get: function () {
    return _color.rgb;
  }
});
Object.defineProperty(exports, "hsl", {
  enumerable: true,
  get: function () {
    return _color.hsl;
  }
});
Object.defineProperty(exports, "lab", {
  enumerable: true,
  get: function () {
    return _lab.default;
  }
});
Object.defineProperty(exports, "hcl", {
  enumerable: true,
  get: function () {
    return _lab.hcl;
  }
});
Object.defineProperty(exports, "lch", {
  enumerable: true,
  get: function () {
    return _lab.lch;
  }
});
Object.defineProperty(exports, "gray", {
  enumerable: true,
  get: function () {
    return _lab.gray;
  }
});
Object.defineProperty(exports, "cubehelix", {
  enumerable: true,
  get: function () {
    return _cubehelix.default;
  }
});

var _color = _interopRequireWildcard(require("./color"));

var _lab = _interopRequireWildcard(require("./lab"));

var _cubehelix = _interopRequireDefault(require("./cubehelix"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }
},{"./color":"../node_modules/d3-color/src/color.js","./lab":"../node_modules/d3-color/src/lab.js","./cubehelix":"../node_modules/d3-color/src/cubehelix.js"}],"../node_modules/d3-interpolate/src/basis.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.basis = basis;
exports.default = _default;

function basis(t1, v0, v1, v2, v3) {
  var t2 = t1 * t1,
      t3 = t2 * t1;
  return ((1 - 3 * t1 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2 + t3 * v3) / 6;
}

function _default(values) {
  var n = values.length - 1;
  return function (t) {
    var i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),
        v1 = values[i],
        v2 = values[i + 1],
        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,
        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
    return basis((t - i / n) * n, v0, v1, v2, v3);
  };
}
},{}],"../node_modules/d3-interpolate/src/basisClosed.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _basis = require("./basis");

function _default(values) {
  var n = values.length;
  return function (t) {
    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),
        v0 = values[(i + n - 1) % n],
        v1 = values[i % n],
        v2 = values[(i + 1) % n],
        v3 = values[(i + 2) % n];
    return (0, _basis.basis)((t - i / n) * n, v0, v1, v2, v3);
  };
}
},{"./basis":"../node_modules/d3-interpolate/src/basis.js"}],"../node_modules/d3-interpolate/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"../node_modules/d3-interpolate/src/color.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hue = hue;
exports.gamma = gamma;
exports.default = nogamma;

var _constant = _interopRequireDefault(require("./constant"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function linear(a, d) {
  return function (t) {
    return a + t * d;
  };
}

function exponential(a, b, y) {
  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function (t) {
    return Math.pow(a + t * b, y);
  };
}

function hue(a, b) {
  var d = b - a;
  return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : (0, _constant.default)(isNaN(a) ? b : a);
}

function gamma(y) {
  return (y = +y) === 1 ? nogamma : function (a, b) {
    return b - a ? exponential(a, b, y) : (0, _constant.default)(isNaN(a) ? b : a);
  };
}

function nogamma(a, b) {
  var d = b - a;
  return d ? linear(a, d) : (0, _constant.default)(isNaN(a) ? b : a);
}
},{"./constant":"../node_modules/d3-interpolate/src/constant.js"}],"../node_modules/d3-interpolate/src/rgb.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rgbBasisClosed = exports.rgbBasis = exports.default = void 0;

var _d3Color = require("d3-color");

var _basis = _interopRequireDefault(require("./basis"));

var _basisClosed = _interopRequireDefault(require("./basisClosed"));

var _color = _interopRequireWildcard(require("./color"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = function rgbGamma(y) {
  var color = (0, _color.gamma)(y);

  function rgb(start, end) {
    var r = color((start = (0, _d3Color.rgb)(start)).r, (end = (0, _d3Color.rgb)(end)).r),
        g = color(start.g, end.g),
        b = color(start.b, end.b),
        opacity = (0, _color.default)(start.opacity, end.opacity);
    return function (t) {
      start.r = r(t);
      start.g = g(t);
      start.b = b(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }

  rgb.gamma = rgbGamma;
  return rgb;
}(1);

exports.default = _default;

function rgbSpline(spline) {
  return function (colors) {
    var n = colors.length,
        r = new Array(n),
        g = new Array(n),
        b = new Array(n),
        i,
        color;

    for (i = 0; i < n; ++i) {
      color = (0, _d3Color.rgb)(colors[i]);
      r[i] = color.r || 0;
      g[i] = color.g || 0;
      b[i] = color.b || 0;
    }

    r = spline(r);
    g = spline(g);
    b = spline(b);
    color.opacity = 1;
    return function (t) {
      color.r = r(t);
      color.g = g(t);
      color.b = b(t);
      return color + "";
    };
  };
}

var rgbBasis = rgbSpline(_basis.default);
exports.rgbBasis = rgbBasis;
var rgbBasisClosed = rgbSpline(_basisClosed.default);
exports.rgbBasisClosed = rgbBasisClosed;
},{"d3-color":"../node_modules/d3-color/src/index.js","./basis":"../node_modules/d3-interpolate/src/basis.js","./basisClosed":"../node_modules/d3-interpolate/src/basisClosed.js","./color":"../node_modules/d3-interpolate/src/color.js"}],"../node_modules/d3-interpolate/src/array.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _value = _interopRequireDefault(require("./value"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(a, b) {
  var nb = b ? b.length : 0,
      na = a ? Math.min(nb, a.length) : 0,
      x = new Array(na),
      c = new Array(nb),
      i;

  for (i = 0; i < na; ++i) x[i] = (0, _value.default)(a[i], b[i]);

  for (; i < nb; ++i) c[i] = b[i];

  return function (t) {
    for (i = 0; i < na; ++i) c[i] = x[i](t);

    return c;
  };
}
},{"./value":"../node_modules/d3-interpolate/src/value.js"}],"../node_modules/d3-interpolate/src/date.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  var d = new Date();
  return a = +a, b -= a, function (t) {
    return d.setTime(a + b * t), d;
  };
}
},{}],"../node_modules/d3-interpolate/src/number.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  return a = +a, b -= a, function (t) {
    return a + b * t;
  };
}
},{}],"../node_modules/d3-interpolate/src/object.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _value = _interopRequireDefault(require("./value"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(a, b) {
  var i = {},
      c = {},
      k;
  if (a === null || typeof a !== "object") a = {};
  if (b === null || typeof b !== "object") b = {};

  for (k in b) {
    if (k in a) {
      i[k] = (0, _value.default)(a[k], b[k]);
    } else {
      c[k] = b[k];
    }
  }

  return function (t) {
    for (k in i) c[k] = i[k](t);

    return c;
  };
}
},{"./value":"../node_modules/d3-interpolate/src/value.js"}],"../node_modules/d3-interpolate/src/string.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _number = _interopRequireDefault(require("./number"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
    reB = new RegExp(reA.source, "g");

function zero(b) {
  return function () {
    return b;
  };
}

function one(b) {
  return function (t) {
    return b(t) + "";
  };
}

function _default(a, b) {
  var bi = reA.lastIndex = reB.lastIndex = 0,
      // scan index for next number in b
  am,
      // current match in a
  bm,
      // current match in b
  bs,
      // string preceding current number in b, if any
  i = -1,
      // index in s
  s = [],
      // string constants and placeholders
  q = []; // number interpolators
  // Coerce inputs to strings.

  a = a + "", b = b + ""; // Interpolate pairs of numbers in a & b.

  while ((am = reA.exec(a)) && (bm = reB.exec(b))) {
    if ((bs = bm.index) > bi) {
      // a string precedes the next number in b
      bs = b.slice(bi, bs);
      if (s[i]) s[i] += bs; // coalesce with previous string
      else s[++i] = bs;
    }

    if ((am = am[0]) === (bm = bm[0])) {
      // numbers in a & b match
      if (s[i]) s[i] += bm; // coalesce with previous string
      else s[++i] = bm;
    } else {
      // interpolate non-matching numbers
      s[++i] = null;
      q.push({
        i: i,
        x: (0, _number.default)(am, bm)
      });
    }

    bi = reB.lastIndex;
  } // Add remains of b.


  if (bi < b.length) {
    bs = b.slice(bi);
    if (s[i]) s[i] += bs; // coalesce with previous string
    else s[++i] = bs;
  } // Special optimization for only a single match.
  // Otherwise, interpolate each of the numbers and rejoin the string.


  return s.length < 2 ? q[0] ? one(q[0].x) : zero(b) : (b = q.length, function (t) {
    for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);

    return s.join("");
  });
}
},{"./number":"../node_modules/d3-interpolate/src/number.js"}],"../node_modules/d3-interpolate/src/value.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Color = require("d3-color");

var _rgb = _interopRequireDefault(require("./rgb"));

var _array = _interopRequireDefault(require("./array"));

var _date = _interopRequireDefault(require("./date"));

var _number = _interopRequireDefault(require("./number"));

var _object = _interopRequireDefault(require("./object"));

var _string = _interopRequireDefault(require("./string"));

var _constant = _interopRequireDefault(require("./constant"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(a, b) {
  var t = typeof b,
      c;
  return b == null || t === "boolean" ? (0, _constant.default)(b) : (t === "number" ? _number.default : t === "string" ? (c = (0, _d3Color.color)(b)) ? (b = c, _rgb.default) : _string.default : b instanceof _d3Color.color ? _rgb.default : b instanceof Date ? _date.default : Array.isArray(b) ? _array.default : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? _object.default : _number.default)(a, b);
}
},{"d3-color":"../node_modules/d3-color/src/index.js","./rgb":"../node_modules/d3-interpolate/src/rgb.js","./array":"../node_modules/d3-interpolate/src/array.js","./date":"../node_modules/d3-interpolate/src/date.js","./number":"../node_modules/d3-interpolate/src/number.js","./object":"../node_modules/d3-interpolate/src/object.js","./string":"../node_modules/d3-interpolate/src/string.js","./constant":"../node_modules/d3-interpolate/src/constant.js"}],"../node_modules/d3-interpolate/src/discrete.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(range) {
  var n = range.length;
  return function (t) {
    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
  };
}
},{}],"../node_modules/d3-interpolate/src/hue.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _color = require("./color");

function _default(a, b) {
  var i = (0, _color.hue)(+a, +b);
  return function (t) {
    var x = i(t);
    return x - 360 * Math.floor(x / 360);
  };
}
},{"./color":"../node_modules/d3-interpolate/src/color.js"}],"../node_modules/d3-interpolate/src/round.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  return a = +a, b -= a, function (t) {
    return Math.round(a + b * t);
  };
}
},{}],"../node_modules/d3-interpolate/src/transform/decompose.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.identity = void 0;
var degrees = 180 / Math.PI;
var identity = {
  translateX: 0,
  translateY: 0,
  rotate: 0,
  skewX: 0,
  scaleX: 1,
  scaleY: 1
};
exports.identity = identity;

function _default(a, b, c, d, e, f) {
  var scaleX, scaleY, skewX;
  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e,
    translateY: f,
    rotate: Math.atan2(b, a) * degrees,
    skewX: Math.atan(skewX) * degrees,
    scaleX: scaleX,
    scaleY: scaleY
  };
}
},{}],"../node_modules/d3-interpolate/src/transform/parse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseCss = parseCss;
exports.parseSvg = parseSvg;

var _decompose = _interopRequireWildcard(require("./decompose"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

var cssNode, cssRoot, cssView, svgNode;

function parseCss(value) {
  if (value === "none") return _decompose.identity;
  if (!cssNode) cssNode = document.createElement("DIV"), cssRoot = document.documentElement, cssView = document.defaultView;
  cssNode.style.transform = value;
  value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue("transform");
  cssRoot.removeChild(cssNode);
  value = value.slice(7, -1).split(",");
  return (0, _decompose.default)(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);
}

function parseSvg(value) {
  if (value == null) return _decompose.identity;
  if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode.setAttribute("transform", value);
  if (!(value = svgNode.transform.baseVal.consolidate())) return _decompose.identity;
  value = value.matrix;
  return (0, _decompose.default)(value.a, value.b, value.c, value.d, value.e, value.f);
}
},{"./decompose":"../node_modules/d3-interpolate/src/transform/decompose.js"}],"../node_modules/d3-interpolate/src/transform/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.interpolateTransformSvg = exports.interpolateTransformCss = void 0;

var _number = _interopRequireDefault(require("../number"));

var _parse = require("./parse");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function interpolateTransform(parse, pxComma, pxParen, degParen) {
  function pop(s) {
    return s.length ? s.pop() + " " : "";
  }

  function translate(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push("translate(", null, pxComma, null, pxParen);
      q.push({
        i: i - 4,
        x: (0, _number.default)(xa, xb)
      }, {
        i: i - 2,
        x: (0, _number.default)(ya, yb)
      });
    } else if (xb || yb) {
      s.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }

  function rotate(a, b, s, q) {
    if (a !== b) {
      if (a - b > 180) b += 360;else if (b - a > 180) a += 360; // shortest path

      q.push({
        i: s.push(pop(s) + "rotate(", null, degParen) - 2,
        x: (0, _number.default)(a, b)
      });
    } else if (b) {
      s.push(pop(s) + "rotate(" + b + degParen);
    }
  }

  function skewX(a, b, s, q) {
    if (a !== b) {
      q.push({
        i: s.push(pop(s) + "skewX(", null, degParen) - 2,
        x: (0, _number.default)(a, b)
      });
    } else if (b) {
      s.push(pop(s) + "skewX(" + b + degParen);
    }
  }

  function scale(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push(pop(s) + "scale(", null, ",", null, ")");
      q.push({
        i: i - 4,
        x: (0, _number.default)(xa, xb)
      }, {
        i: i - 2,
        x: (0, _number.default)(ya, yb)
      });
    } else if (xb !== 1 || yb !== 1) {
      s.push(pop(s) + "scale(" + xb + "," + yb + ")");
    }
  }

  return function (a, b) {
    var s = [],
        // string constants and placeholders
    q = []; // number interpolators

    a = parse(a), b = parse(b);
    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
    rotate(a.rotate, b.rotate, s, q);
    skewX(a.skewX, b.skewX, s, q);
    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
    a = b = null; // gc

    return function (t) {
      var i = -1,
          n = q.length,
          o;

      while (++i < n) s[(o = q[i]).i] = o.x(t);

      return s.join("");
    };
  };
}

var interpolateTransformCss = interpolateTransform(_parse.parseCss, "px, ", "px)", "deg)");
exports.interpolateTransformCss = interpolateTransformCss;
var interpolateTransformSvg = interpolateTransform(_parse.parseSvg, ", ", ")", ")");
exports.interpolateTransformSvg = interpolateTransformSvg;
},{"../number":"../node_modules/d3-interpolate/src/number.js","./parse":"../node_modules/d3-interpolate/src/transform/parse.js"}],"../node_modules/d3-interpolate/src/zoom.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
var rho = Math.SQRT2,
    rho2 = 2,
    rho4 = 4,
    epsilon2 = 1e-12;

function cosh(x) {
  return ((x = Math.exp(x)) + 1 / x) / 2;
}

function sinh(x) {
  return ((x = Math.exp(x)) - 1 / x) / 2;
}

function tanh(x) {
  return ((x = Math.exp(2 * x)) - 1) / (x + 1);
} // p0 = [ux0, uy0, w0]
// p1 = [ux1, uy1, w1]


function _default(p0, p1) {
  var ux0 = p0[0],
      uy0 = p0[1],
      w0 = p0[2],
      ux1 = p1[0],
      uy1 = p1[1],
      w1 = p1[2],
      dx = ux1 - ux0,
      dy = uy1 - uy0,
      d2 = dx * dx + dy * dy,
      i,
      S; // Special case for u0 ≅ u1.

  if (d2 < epsilon2) {
    S = Math.log(w1 / w0) / rho;

    i = function (t) {
      return [ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(rho * t * S)];
    };
  } // General case.
  else {
      var d1 = Math.sqrt(d2),
          b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),
          b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),
          r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),
          r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
      S = (r1 - r0) / rho;

      i = function (t) {
        var s = t * S,
            coshr0 = cosh(r0),
            u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
        return [ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / cosh(rho * s + r0)];
      };
    }

  i.duration = S * 1000;
  return i;
}
},{}],"../node_modules/d3-interpolate/src/hsl.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hslLong = exports.default = void 0;

var _d3Color = require("d3-color");

var _color = _interopRequireWildcard(require("./color"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function hsl(hue) {
  return function (start, end) {
    var h = hue((start = (0, _d3Color.hsl)(start)).h, (end = (0, _d3Color.hsl)(end)).h),
        s = (0, _color.default)(start.s, end.s),
        l = (0, _color.default)(start.l, end.l),
        opacity = (0, _color.default)(start.opacity, end.opacity);
    return function (t) {
      start.h = h(t);
      start.s = s(t);
      start.l = l(t);
      start.opacity = opacity(t);
      return start + "";
    };
  };
}

var _default = hsl(_color.hue);

exports.default = _default;
var hslLong = hsl(_color.default);
exports.hslLong = hslLong;
},{"d3-color":"../node_modules/d3-color/src/index.js","./color":"../node_modules/d3-interpolate/src/color.js"}],"../node_modules/d3-interpolate/src/lab.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = lab;

var _d3Color = require("d3-color");

var _color = _interopRequireDefault(require("./color"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function lab(start, end) {
  var l = (0, _color.default)((start = (0, _d3Color.lab)(start)).l, (end = (0, _d3Color.lab)(end)).l),
      a = (0, _color.default)(start.a, end.a),
      b = (0, _color.default)(start.b, end.b),
      opacity = (0, _color.default)(start.opacity, end.opacity);
  return function (t) {
    start.l = l(t);
    start.a = a(t);
    start.b = b(t);
    start.opacity = opacity(t);
    return start + "";
  };
}
},{"d3-color":"../node_modules/d3-color/src/index.js","./color":"../node_modules/d3-interpolate/src/color.js"}],"../node_modules/d3-interpolate/src/hcl.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hclLong = exports.default = void 0;

var _d3Color = require("d3-color");

var _color = _interopRequireWildcard(require("./color"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function hcl(hue) {
  return function (start, end) {
    var h = hue((start = (0, _d3Color.hcl)(start)).h, (end = (0, _d3Color.hcl)(end)).h),
        c = (0, _color.default)(start.c, end.c),
        l = (0, _color.default)(start.l, end.l),
        opacity = (0, _color.default)(start.opacity, end.opacity);
    return function (t) {
      start.h = h(t);
      start.c = c(t);
      start.l = l(t);
      start.opacity = opacity(t);
      return start + "";
    };
  };
}

var _default = hcl(_color.hue);

exports.default = _default;
var hclLong = hcl(_color.default);
exports.hclLong = hclLong;
},{"d3-color":"../node_modules/d3-color/src/index.js","./color":"../node_modules/d3-interpolate/src/color.js"}],"../node_modules/d3-interpolate/src/cubehelix.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cubehelixLong = exports.default = void 0;

var _d3Color = require("d3-color");

var _color = _interopRequireWildcard(require("./color"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function cubehelix(hue) {
  return function cubehelixGamma(y) {
    y = +y;

    function cubehelix(start, end) {
      var h = hue((start = (0, _d3Color.cubehelix)(start)).h, (end = (0, _d3Color.cubehelix)(end)).h),
          s = (0, _color.default)(start.s, end.s),
          l = (0, _color.default)(start.l, end.l),
          opacity = (0, _color.default)(start.opacity, end.opacity);
      return function (t) {
        start.h = h(t);
        start.s = s(t);
        start.l = l(Math.pow(t, y));
        start.opacity = opacity(t);
        return start + "";
      };
    }

    cubehelix.gamma = cubehelixGamma;
    return cubehelix;
  }(1);
}

var _default = cubehelix(_color.hue);

exports.default = _default;
var cubehelixLong = cubehelix(_color.default);
exports.cubehelixLong = cubehelixLong;
},{"d3-color":"../node_modules/d3-color/src/index.js","./color":"../node_modules/d3-interpolate/src/color.js"}],"../node_modules/d3-interpolate/src/piecewise.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = piecewise;

function piecewise(interpolate, values) {
  var i = 0,
      n = values.length - 1,
      v = values[0],
      I = new Array(n < 0 ? 0 : n);

  while (i < n) I[i] = interpolate(v, v = values[++i]);

  return function (t) {
    var i = Math.max(0, Math.min(n - 1, Math.floor(t *= n)));
    return I[i](t - i);
  };
}
},{}],"../node_modules/d3-interpolate/src/quantize.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(interpolator, n) {
  var samples = new Array(n);

  for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));

  return samples;
}
},{}],"../node_modules/d3-interpolate/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "interpolate", {
  enumerable: true,
  get: function () {
    return _value.default;
  }
});
Object.defineProperty(exports, "interpolateArray", {
  enumerable: true,
  get: function () {
    return _array.default;
  }
});
Object.defineProperty(exports, "interpolateBasis", {
  enumerable: true,
  get: function () {
    return _basis.default;
  }
});
Object.defineProperty(exports, "interpolateBasisClosed", {
  enumerable: true,
  get: function () {
    return _basisClosed.default;
  }
});
Object.defineProperty(exports, "interpolateDate", {
  enumerable: true,
  get: function () {
    return _date.default;
  }
});
Object.defineProperty(exports, "interpolateDiscrete", {
  enumerable: true,
  get: function () {
    return _discrete.default;
  }
});
Object.defineProperty(exports, "interpolateHue", {
  enumerable: true,
  get: function () {
    return _hue.default;
  }
});
Object.defineProperty(exports, "interpolateNumber", {
  enumerable: true,
  get: function () {
    return _number.default;
  }
});
Object.defineProperty(exports, "interpolateObject", {
  enumerable: true,
  get: function () {
    return _object.default;
  }
});
Object.defineProperty(exports, "interpolateRound", {
  enumerable: true,
  get: function () {
    return _round.default;
  }
});
Object.defineProperty(exports, "interpolateString", {
  enumerable: true,
  get: function () {
    return _string.default;
  }
});
Object.defineProperty(exports, "interpolateTransformCss", {
  enumerable: true,
  get: function () {
    return _index.interpolateTransformCss;
  }
});
Object.defineProperty(exports, "interpolateTransformSvg", {
  enumerable: true,
  get: function () {
    return _index.interpolateTransformSvg;
  }
});
Object.defineProperty(exports, "interpolateZoom", {
  enumerable: true,
  get: function () {
    return _zoom.default;
  }
});
Object.defineProperty(exports, "interpolateRgb", {
  enumerable: true,
  get: function () {
    return _rgb.default;
  }
});
Object.defineProperty(exports, "interpolateRgbBasis", {
  enumerable: true,
  get: function () {
    return _rgb.rgbBasis;
  }
});
Object.defineProperty(exports, "interpolateRgbBasisClosed", {
  enumerable: true,
  get: function () {
    return _rgb.rgbBasisClosed;
  }
});
Object.defineProperty(exports, "interpolateHsl", {
  enumerable: true,
  get: function () {
    return _hsl.default;
  }
});
Object.defineProperty(exports, "interpolateHslLong", {
  enumerable: true,
  get: function () {
    return _hsl.hslLong;
  }
});
Object.defineProperty(exports, "interpolateLab", {
  enumerable: true,
  get: function () {
    return _lab.default;
  }
});
Object.defineProperty(exports, "interpolateHcl", {
  enumerable: true,
  get: function () {
    return _hcl.default;
  }
});
Object.defineProperty(exports, "interpolateHclLong", {
  enumerable: true,
  get: function () {
    return _hcl.hclLong;
  }
});
Object.defineProperty(exports, "interpolateCubehelix", {
  enumerable: true,
  get: function () {
    return _cubehelix.default;
  }
});
Object.defineProperty(exports, "interpolateCubehelixLong", {
  enumerable: true,
  get: function () {
    return _cubehelix.cubehelixLong;
  }
});
Object.defineProperty(exports, "piecewise", {
  enumerable: true,
  get: function () {
    return _piecewise.default;
  }
});
Object.defineProperty(exports, "quantize", {
  enumerable: true,
  get: function () {
    return _quantize.default;
  }
});

var _value = _interopRequireDefault(require("./value"));

var _array = _interopRequireDefault(require("./array"));

var _basis = _interopRequireDefault(require("./basis"));

var _basisClosed = _interopRequireDefault(require("./basisClosed"));

var _date = _interopRequireDefault(require("./date"));

var _discrete = _interopRequireDefault(require("./discrete"));

var _hue = _interopRequireDefault(require("./hue"));

var _number = _interopRequireDefault(require("./number"));

var _object = _interopRequireDefault(require("./object"));

var _round = _interopRequireDefault(require("./round"));

var _string = _interopRequireDefault(require("./string"));

var _index = require("./transform/index");

var _zoom = _interopRequireDefault(require("./zoom"));

var _rgb = _interopRequireWildcard(require("./rgb"));

var _hsl = _interopRequireWildcard(require("./hsl"));

var _lab = _interopRequireDefault(require("./lab"));

var _hcl = _interopRequireWildcard(require("./hcl"));

var _cubehelix = _interopRequireWildcard(require("./cubehelix"));

var _piecewise = _interopRequireDefault(require("./piecewise"));

var _quantize = _interopRequireDefault(require("./quantize"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./value":"../node_modules/d3-interpolate/src/value.js","./array":"../node_modules/d3-interpolate/src/array.js","./basis":"../node_modules/d3-interpolate/src/basis.js","./basisClosed":"../node_modules/d3-interpolate/src/basisClosed.js","./date":"../node_modules/d3-interpolate/src/date.js","./discrete":"../node_modules/d3-interpolate/src/discrete.js","./hue":"../node_modules/d3-interpolate/src/hue.js","./number":"../node_modules/d3-interpolate/src/number.js","./object":"../node_modules/d3-interpolate/src/object.js","./round":"../node_modules/d3-interpolate/src/round.js","./string":"../node_modules/d3-interpolate/src/string.js","./transform/index":"../node_modules/d3-interpolate/src/transform/index.js","./zoom":"../node_modules/d3-interpolate/src/zoom.js","./rgb":"../node_modules/d3-interpolate/src/rgb.js","./hsl":"../node_modules/d3-interpolate/src/hsl.js","./lab":"../node_modules/d3-interpolate/src/lab.js","./hcl":"../node_modules/d3-interpolate/src/hcl.js","./cubehelix":"../node_modules/d3-interpolate/src/cubehelix.js","./piecewise":"../node_modules/d3-interpolate/src/piecewise.js","./quantize":"../node_modules/d3-interpolate/src/quantize.js"}],"../node_modules/d3-timer/src/timer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.now = now;
exports.Timer = Timer;
exports.timer = timer;
exports.timerFlush = timerFlush;
var frame = 0,
    // is an animation frame pending?
timeout = 0,
    // is a timeout pending?
interval = 0,
    // are any timers active?
pokeDelay = 1000,
    // how frequently we check for clock skew
taskHead,
    taskTail,
    clockLast = 0,
    clockNow = 0,
    clockSkew = 0,
    clock = typeof performance === "object" && performance.now ? performance : Date,
    setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function (f) {
  setTimeout(f, 17);
};

function now() {
  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
}

function clearNow() {
  clockNow = 0;
}

function Timer() {
  this._call = this._time = this._next = null;
}

Timer.prototype = timer.prototype = {
  constructor: Timer,
  restart: function (callback, delay, time) {
    if (typeof callback !== "function") throw new TypeError("callback is not a function");
    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);

    if (!this._next && taskTail !== this) {
      if (taskTail) taskTail._next = this;else taskHead = this;
      taskTail = this;
    }

    this._call = callback;
    this._time = time;
    sleep();
  },
  stop: function () {
    if (this._call) {
      this._call = null;
      this._time = Infinity;
      sleep();
    }
  }
};

function timer(callback, delay, time) {
  var t = new Timer();
  t.restart(callback, delay, time);
  return t;
}

function timerFlush() {
  now(); // Get the current time, if not already set.

  ++frame; // Pretend we’ve set an alarm, if we haven’t already.

  var t = taskHead,
      e;

  while (t) {
    if ((e = clockNow - t._time) >= 0) t._call.call(null, e);
    t = t._next;
  }

  --frame;
}

function wake() {
  clockNow = (clockLast = clock.now()) + clockSkew;
  frame = timeout = 0;

  try {
    timerFlush();
  } finally {
    frame = 0;
    nap();
    clockNow = 0;
  }
}

function poke() {
  var now = clock.now(),
      delay = now - clockLast;
  if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
}

function nap() {
  var t0,
      t1 = taskHead,
      t2,
      time = Infinity;

  while (t1) {
    if (t1._call) {
      if (time > t1._time) time = t1._time;
      t0 = t1, t1 = t1._next;
    } else {
      t2 = t1._next, t1._next = null;
      t1 = t0 ? t0._next = t2 : taskHead = t2;
    }
  }

  taskTail = t0;
  sleep(time);
}

function sleep(time) {
  if (frame) return; // Soonest alarm already set, or will be.

  if (timeout) timeout = clearTimeout(timeout);
  var delay = time - clockNow; // Strictly less than if we recomputed clockNow.

  if (delay > 24) {
    if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);
    if (interval) interval = clearInterval(interval);
  } else {
    if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
    frame = 1, setFrame(wake);
  }
}
},{}],"../node_modules/d3-timer/src/timeout.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _timer = require("./timer");

function _default(callback, delay, time) {
  var t = new _timer.Timer();
  delay = delay == null ? 0 : +delay;
  t.restart(function (elapsed) {
    t.stop();
    callback(elapsed + delay);
  }, delay, time);
  return t;
}
},{"./timer":"../node_modules/d3-timer/src/timer.js"}],"../node_modules/d3-timer/src/interval.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _timer = require("./timer");

function _default(callback, delay, time) {
  var t = new _timer.Timer(),
      total = delay;
  if (delay == null) return t.restart(callback, delay, time), t;
  delay = +delay, time = time == null ? (0, _timer.now)() : +time;
  t.restart(function tick(elapsed) {
    elapsed += total;
    t.restart(tick, total += delay, time);
    callback(elapsed);
  }, delay, time);
  return t;
}
},{"./timer":"../node_modules/d3-timer/src/timer.js"}],"../node_modules/d3-timer/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "now", {
  enumerable: true,
  get: function () {
    return _timer.now;
  }
});
Object.defineProperty(exports, "timer", {
  enumerable: true,
  get: function () {
    return _timer.timer;
  }
});
Object.defineProperty(exports, "timerFlush", {
  enumerable: true,
  get: function () {
    return _timer.timerFlush;
  }
});
Object.defineProperty(exports, "timeout", {
  enumerable: true,
  get: function () {
    return _timeout.default;
  }
});
Object.defineProperty(exports, "interval", {
  enumerable: true,
  get: function () {
    return _interval.default;
  }
});

var _timer = require("./timer");

var _timeout = _interopRequireDefault(require("./timeout"));

var _interval = _interopRequireDefault(require("./interval"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./timer":"../node_modules/d3-timer/src/timer.js","./timeout":"../node_modules/d3-timer/src/timeout.js","./interval":"../node_modules/d3-timer/src/interval.js"}],"../node_modules/d3-transition/src/transition/schedule.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.init = init;
exports.set = set;
exports.get = get;
exports.ENDED = exports.ENDING = exports.RUNNING = exports.STARTED = exports.STARTING = exports.SCHEDULED = exports.CREATED = void 0;

var _d3Dispatch = require("d3-dispatch");

var _d3Timer = require("d3-timer");

var emptyOn = (0, _d3Dispatch.dispatch)("start", "end", "cancel", "interrupt");
var emptyTween = [];
var CREATED = 0;
exports.CREATED = CREATED;
var SCHEDULED = 1;
exports.SCHEDULED = SCHEDULED;
var STARTING = 2;
exports.STARTING = STARTING;
var STARTED = 3;
exports.STARTED = STARTED;
var RUNNING = 4;
exports.RUNNING = RUNNING;
var ENDING = 5;
exports.ENDING = ENDING;
var ENDED = 6;
exports.ENDED = ENDED;

function _default(node, name, id, index, group, timing) {
  var schedules = node.__transition;
  if (!schedules) node.__transition = {};else if (id in schedules) return;
  create(node, id, {
    name: name,
    index: index,
    // For context during callback.
    group: group,
    // For context during callback.
    on: emptyOn,
    tween: emptyTween,
    time: timing.time,
    delay: timing.delay,
    duration: timing.duration,
    ease: timing.ease,
    timer: null,
    state: CREATED
  });
}

function init(node, id) {
  var schedule = get(node, id);
  if (schedule.state > CREATED) throw new Error("too late; already scheduled");
  return schedule;
}

function set(node, id) {
  var schedule = get(node, id);
  if (schedule.state > STARTED) throw new Error("too late; already running");
  return schedule;
}

function get(node, id) {
  var schedule = node.__transition;
  if (!schedule || !(schedule = schedule[id])) throw new Error("transition not found");
  return schedule;
}

function create(node, id, self) {
  var schedules = node.__transition,
      tween; // Initialize the self timer when the transition is created.
  // Note the actual delay is not known until the first callback!

  schedules[id] = self;
  self.timer = (0, _d3Timer.timer)(schedule, 0, self.time);

  function schedule(elapsed) {
    self.state = SCHEDULED;
    self.timer.restart(start, self.delay, self.time); // If the elapsed delay is less than our first sleep, start immediately.

    if (self.delay <= elapsed) start(elapsed - self.delay);
  }

  function start(elapsed) {
    var i, j, n, o; // If the state is not SCHEDULED, then we previously errored on start.

    if (self.state !== SCHEDULED) return stop();

    for (i in schedules) {
      o = schedules[i];
      if (o.name !== self.name) continue; // While this element already has a starting transition during this frame,
      // defer starting an interrupting transition until that transition has a
      // chance to tick (and possibly end); see d3/d3-transition#54!

      if (o.state === STARTED) return (0, _d3Timer.timeout)(start); // Interrupt the active transition, if any.

      if (o.state === RUNNING) {
        o.state = ENDED;
        o.timer.stop();
        o.on.call("interrupt", node, node.__data__, o.index, o.group);
        delete schedules[i];
      } // Cancel any pre-empted transitions.
      else if (+i < id) {
          o.state = ENDED;
          o.timer.stop();
          o.on.call("cancel", node, node.__data__, o.index, o.group);
          delete schedules[i];
        }
    } // Defer the first tick to end of the current frame; see d3/d3#1576.
    // Note the transition may be canceled after start and before the first tick!
    // Note this must be scheduled before the start event; see d3/d3-transition#16!
    // Assuming this is successful, subsequent callbacks go straight to tick.


    (0, _d3Timer.timeout)(function () {
      if (self.state === STARTED) {
        self.state = RUNNING;
        self.timer.restart(tick, self.delay, self.time);
        tick(elapsed);
      }
    }); // Dispatch the start event.
    // Note this must be done before the tween are initialized.

    self.state = STARTING;
    self.on.call("start", node, node.__data__, self.index, self.group);
    if (self.state !== STARTING) return; // interrupted

    self.state = STARTED; // Initialize the tween, deleting null tween.

    tween = new Array(n = self.tween.length);

    for (i = 0, j = -1; i < n; ++i) {
      if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {
        tween[++j] = o;
      }
    }

    tween.length = j + 1;
  }

  function tick(elapsed) {
    var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1),
        i = -1,
        n = tween.length;

    while (++i < n) {
      tween[i].call(node, t);
    } // Dispatch the end event.


    if (self.state === ENDING) {
      self.on.call("end", node, node.__data__, self.index, self.group);
      stop();
    }
  }

  function stop() {
    self.state = ENDED;
    self.timer.stop();
    delete schedules[id];

    for (var i in schedules) return; // eslint-disable-line no-unused-vars


    delete node.__transition;
  }
}
},{"d3-dispatch":"../node_modules/d3-dispatch/src/index.js","d3-timer":"../node_modules/d3-timer/src/index.js"}],"../node_modules/d3-transition/src/interrupt.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _schedule = require("./transition/schedule");

function _default(node, name) {
  var schedules = node.__transition,
      schedule,
      active,
      empty = true,
      i;
  if (!schedules) return;
  name = name == null ? null : name + "";

  for (i in schedules) {
    if ((schedule = schedules[i]).name !== name) {
      empty = false;
      continue;
    }

    active = schedule.state > _schedule.STARTING && schedule.state < _schedule.ENDING;
    schedule.state = _schedule.ENDED;
    schedule.timer.stop();
    schedule.on.call(active ? "interrupt" : "cancel", node, node.__data__, schedule.index, schedule.group);
    delete schedules[i];
  }

  if (empty) delete node.__transition;
}
},{"./transition/schedule":"../node_modules/d3-transition/src/transition/schedule.js"}],"../node_modules/d3-transition/src/selection/interrupt.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _interrupt = _interopRequireDefault(require("../interrupt"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(name) {
  return this.each(function () {
    (0, _interrupt.default)(this, name);
  });
}
},{"../interrupt":"../node_modules/d3-transition/src/interrupt.js"}],"../node_modules/d3-transition/src/transition/tween.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.tweenValue = tweenValue;

var _schedule = require("./schedule");

function tweenRemove(id, name) {
  var tween0, tween1;
  return function () {
    var schedule = (0, _schedule.set)(this, id),
        tween = schedule.tween; // If this node shared tween with the previous node,
    // just assign the updated shared tween and we’re done!
    // Otherwise, copy-on-write.

    if (tween !== tween0) {
      tween1 = tween0 = tween;

      for (var i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name) {
          tween1 = tween1.slice();
          tween1.splice(i, 1);
          break;
        }
      }
    }

    schedule.tween = tween1;
  };
}

function tweenFunction(id, name, value) {
  var tween0, tween1;
  if (typeof value !== "function") throw new Error();
  return function () {
    var schedule = (0, _schedule.set)(this, id),
        tween = schedule.tween; // If this node shared tween with the previous node,
    // just assign the updated shared tween and we’re done!
    // Otherwise, copy-on-write.

    if (tween !== tween0) {
      tween1 = (tween0 = tween).slice();

      for (var t = {
        name: name,
        value: value
      }, i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name) {
          tween1[i] = t;
          break;
        }
      }

      if (i === n) tween1.push(t);
    }

    schedule.tween = tween1;
  };
}

function _default(name, value) {
  var id = this._id;
  name += "";

  if (arguments.length < 2) {
    var tween = (0, _schedule.get)(this.node(), id).tween;

    for (var i = 0, n = tween.length, t; i < n; ++i) {
      if ((t = tween[i]).name === name) {
        return t.value;
      }
    }

    return null;
  }

  return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));
}

function tweenValue(transition, name, value) {
  var id = transition._id;
  transition.each(function () {
    var schedule = (0, _schedule.set)(this, id);
    (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);
  });
  return function (node) {
    return (0, _schedule.get)(node, id).value[name];
  };
}
},{"./schedule":"../node_modules/d3-transition/src/transition/schedule.js"}],"../node_modules/d3-transition/src/transition/interpolate.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Color = require("d3-color");

var _d3Interpolate = require("d3-interpolate");

function _default(a, b) {
  var c;
  return (typeof b === "number" ? _d3Interpolate.interpolateNumber : b instanceof _d3Color.color ? _d3Interpolate.interpolateRgb : (c = (0, _d3Color.color)(b)) ? (b = c, _d3Interpolate.interpolateRgb) : _d3Interpolate.interpolateString)(a, b);
}
},{"d3-color":"../node_modules/d3-color/src/index.js","d3-interpolate":"../node_modules/d3-interpolate/src/index.js"}],"../node_modules/d3-transition/src/transition/attr.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Interpolate = require("d3-interpolate");

var _d3Selection = require("d3-selection");

var _tween = require("./tween");

var _interpolate = _interopRequireDefault(require("./interpolate"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function attrRemove(name) {
  return function () {
    this.removeAttribute(name);
  };
}

function attrRemoveNS(fullname) {
  return function () {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}

function attrConstant(name, interpolate, value1) {
  var string00,
      string1 = value1 + "",
      interpolate0;
  return function () {
    var string0 = this.getAttribute(name);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}

function attrConstantNS(fullname, interpolate, value1) {
  var string00,
      string1 = value1 + "",
      interpolate0;
  return function () {
    var string0 = this.getAttributeNS(fullname.space, fullname.local);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}

function attrFunction(name, interpolate, value) {
  var string00, string10, interpolate0;
  return function () {
    var string0,
        value1 = value(this),
        string1;
    if (value1 == null) return void this.removeAttribute(name);
    string0 = this.getAttribute(name);
    string1 = value1 + "";
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}

function attrFunctionNS(fullname, interpolate, value) {
  var string00, string10, interpolate0;
  return function () {
    var string0,
        value1 = value(this),
        string1;
    if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);
    string0 = this.getAttributeNS(fullname.space, fullname.local);
    string1 = value1 + "";
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}

function _default(name, value) {
  var fullname = (0, _d3Selection.namespace)(name),
      i = fullname === "transform" ? _d3Interpolate.interpolateTransformSvg : _interpolate.default;
  return this.attrTween(name, typeof value === "function" ? (fullname.local ? attrFunctionNS : attrFunction)(fullname, i, (0, _tween.tweenValue)(this, "attr." + name, value)) : value == null ? (fullname.local ? attrRemoveNS : attrRemove)(fullname) : (fullname.local ? attrConstantNS : attrConstant)(fullname, i, value));
}
},{"d3-interpolate":"../node_modules/d3-interpolate/src/index.js","d3-selection":"../node_modules/d3-selection/src/index.js","./tween":"../node_modules/d3-transition/src/transition/tween.js","./interpolate":"../node_modules/d3-transition/src/transition/interpolate.js"}],"../node_modules/d3-transition/src/transition/attrTween.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Selection = require("d3-selection");

function attrInterpolate(name, i) {
  return function (t) {
    this.setAttribute(name, i(t));
  };
}

function attrInterpolateNS(fullname, i) {
  return function (t) {
    this.setAttributeNS(fullname.space, fullname.local, i(t));
  };
}

function attrTweenNS(fullname, value) {
  var t0, i0;

  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t0 = (i0 = i) && attrInterpolateNS(fullname, i);
    return t0;
  }

  tween._value = value;
  return tween;
}

function attrTween(name, value) {
  var t0, i0;

  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t0 = (i0 = i) && attrInterpolate(name, i);
    return t0;
  }

  tween._value = value;
  return tween;
}

function _default(name, value) {
  var key = "attr." + name;
  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
  if (value == null) return this.tween(key, null);
  if (typeof value !== "function") throw new Error();
  var fullname = (0, _d3Selection.namespace)(name);
  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
}
},{"d3-selection":"../node_modules/d3-selection/src/index.js"}],"../node_modules/d3-transition/src/transition/delay.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _schedule = require("./schedule");

function delayFunction(id, value) {
  return function () {
    (0, _schedule.init)(this, id).delay = +value.apply(this, arguments);
  };
}

function delayConstant(id, value) {
  return value = +value, function () {
    (0, _schedule.init)(this, id).delay = value;
  };
}

function _default(value) {
  var id = this._id;
  return arguments.length ? this.each((typeof value === "function" ? delayFunction : delayConstant)(id, value)) : (0, _schedule.get)(this.node(), id).delay;
}
},{"./schedule":"../node_modules/d3-transition/src/transition/schedule.js"}],"../node_modules/d3-transition/src/transition/duration.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _schedule = require("./schedule");

function durationFunction(id, value) {
  return function () {
    (0, _schedule.set)(this, id).duration = +value.apply(this, arguments);
  };
}

function durationConstant(id, value) {
  return value = +value, function () {
    (0, _schedule.set)(this, id).duration = value;
  };
}

function _default(value) {
  var id = this._id;
  return arguments.length ? this.each((typeof value === "function" ? durationFunction : durationConstant)(id, value)) : (0, _schedule.get)(this.node(), id).duration;
}
},{"./schedule":"../node_modules/d3-transition/src/transition/schedule.js"}],"../node_modules/d3-transition/src/transition/ease.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _schedule = require("./schedule");

function easeConstant(id, value) {
  if (typeof value !== "function") throw new Error();
  return function () {
    (0, _schedule.set)(this, id).ease = value;
  };
}

function _default(value) {
  var id = this._id;
  return arguments.length ? this.each(easeConstant(id, value)) : (0, _schedule.get)(this.node(), id).ease;
}
},{"./schedule":"../node_modules/d3-transition/src/transition/schedule.js"}],"../node_modules/d3-transition/src/transition/filter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Selection = require("d3-selection");

var _index = require("./index");

function _default(match) {
  if (typeof match !== "function") match = (0, _d3Selection.matcher)(match);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }

  return new _index.Transition(subgroups, this._parents, this._name, this._id);
}
},{"d3-selection":"../node_modules/d3-selection/src/index.js","./index":"../node_modules/d3-transition/src/transition/index.js"}],"../node_modules/d3-transition/src/transition/merge.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./index");

function _default(transition) {
  if (transition._id !== this._id) throw new Error();

  for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }

  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }

  return new _index.Transition(merges, this._parents, this._name, this._id);
}
},{"./index":"../node_modules/d3-transition/src/transition/index.js"}],"../node_modules/d3-transition/src/transition/on.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _schedule = require("./schedule");

function start(name) {
  return (name + "").trim().split(/^|\s+/).every(function (t) {
    var i = t.indexOf(".");
    if (i >= 0) t = t.slice(0, i);
    return !t || t === "start";
  });
}

function onFunction(id, name, listener) {
  var on0,
      on1,
      sit = start(name) ? _schedule.init : _schedule.set;
  return function () {
    var schedule = sit(this, id),
        on = schedule.on; // If this node shared a dispatch with the previous node,
    // just assign the updated shared dispatch and we’re done!
    // Otherwise, copy-on-write.

    if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);
    schedule.on = on1;
  };
}

function _default(name, listener) {
  var id = this._id;
  return arguments.length < 2 ? (0, _schedule.get)(this.node(), id).on.on(name) : this.each(onFunction(id, name, listener));
}
},{"./schedule":"../node_modules/d3-transition/src/transition/schedule.js"}],"../node_modules/d3-transition/src/transition/remove.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function removeFunction(id) {
  return function () {
    var parent = this.parentNode;

    for (var i in this.__transition) if (+i !== id) return;

    if (parent) parent.removeChild(this);
  };
}

function _default() {
  return this.on("end.remove", removeFunction(this._id));
}
},{}],"../node_modules/d3-transition/src/transition/select.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Selection = require("d3-selection");

var _index = require("./index");

var _schedule = _interopRequireWildcard(require("./schedule"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _default(select) {
  var name = this._name,
      id = this._id;
  if (typeof select !== "function") select = (0, _d3Selection.selector)(select);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node) subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
        (0, _schedule.default)(subgroup[i], name, id, i, subgroup, (0, _schedule.get)(node, id));
      }
    }
  }

  return new _index.Transition(subgroups, this._parents, name, id);
}
},{"d3-selection":"../node_modules/d3-selection/src/index.js","./index":"../node_modules/d3-transition/src/transition/index.js","./schedule":"../node_modules/d3-transition/src/transition/schedule.js"}],"../node_modules/d3-transition/src/transition/selectAll.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Selection = require("d3-selection");

var _index = require("./index");

var _schedule = _interopRequireWildcard(require("./schedule"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _default(select) {
  var name = this._name,
      id = this._id;
  if (typeof select !== "function") select = (0, _d3Selection.selectorAll)(select);

  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        for (var children = select.call(node, node.__data__, i, group), child, inherit = (0, _schedule.get)(node, id), k = 0, l = children.length; k < l; ++k) {
          if (child = children[k]) {
            (0, _schedule.default)(child, name, id, k, children, inherit);
          }
        }

        subgroups.push(children);
        parents.push(node);
      }
    }
  }

  return new _index.Transition(subgroups, parents, name, id);
}
},{"d3-selection":"../node_modules/d3-selection/src/index.js","./index":"../node_modules/d3-transition/src/transition/index.js","./schedule":"../node_modules/d3-transition/src/transition/schedule.js"}],"../node_modules/d3-transition/src/transition/selection.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Selection = require("d3-selection");

var Selection = _d3Selection.selection.prototype.constructor;

function _default() {
  return new Selection(this._groups, this._parents);
}
},{"d3-selection":"../node_modules/d3-selection/src/index.js"}],"../node_modules/d3-transition/src/transition/style.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Interpolate = require("d3-interpolate");

var _d3Selection = require("d3-selection");

var _schedule = require("./schedule");

var _tween = require("./tween");

var _interpolate = _interopRequireDefault(require("./interpolate"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function styleNull(name, interpolate) {
  var string00, string10, interpolate0;
  return function () {
    var string0 = (0, _d3Selection.style)(this, name),
        string1 = (this.style.removeProperty(name), (0, _d3Selection.style)(this, name));
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : interpolate0 = interpolate(string00 = string0, string10 = string1);
  };
}

function styleRemove(name) {
  return function () {
    this.style.removeProperty(name);
  };
}

function styleConstant(name, interpolate, value1) {
  var string00,
      string1 = value1 + "",
      interpolate0;
  return function () {
    var string0 = (0, _d3Selection.style)(this, name);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}

function styleFunction(name, interpolate, value) {
  var string00, string10, interpolate0;
  return function () {
    var string0 = (0, _d3Selection.style)(this, name),
        value1 = value(this),
        string1 = value1 + "";
    if (value1 == null) string1 = value1 = (this.style.removeProperty(name), (0, _d3Selection.style)(this, name));
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}

function styleMaybeRemove(id, name) {
  var on0,
      on1,
      listener0,
      key = "style." + name,
      event = "end." + key,
      remove;
  return function () {
    var schedule = (0, _schedule.set)(this, id),
        on = schedule.on,
        listener = schedule.value[key] == null ? remove || (remove = styleRemove(name)) : undefined; // If this node shared a dispatch with the previous node,
    // just assign the updated shared dispatch and we’re done!
    // Otherwise, copy-on-write.

    if (on !== on0 || listener0 !== listener) (on1 = (on0 = on).copy()).on(event, listener0 = listener);
    schedule.on = on1;
  };
}

function _default(name, value, priority) {
  var i = (name += "") === "transform" ? _d3Interpolate.interpolateTransformCss : _interpolate.default;
  return value == null ? this.styleTween(name, styleNull(name, i)).on("end.style." + name, styleRemove(name)) : typeof value === "function" ? this.styleTween(name, styleFunction(name, i, (0, _tween.tweenValue)(this, "style." + name, value))).each(styleMaybeRemove(this._id, name)) : this.styleTween(name, styleConstant(name, i, value), priority).on("end.style." + name, null);
}
},{"d3-interpolate":"../node_modules/d3-interpolate/src/index.js","d3-selection":"../node_modules/d3-selection/src/index.js","./schedule":"../node_modules/d3-transition/src/transition/schedule.js","./tween":"../node_modules/d3-transition/src/transition/tween.js","./interpolate":"../node_modules/d3-transition/src/transition/interpolate.js"}],"../node_modules/d3-transition/src/transition/styleTween.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function styleInterpolate(name, i, priority) {
  return function (t) {
    this.style.setProperty(name, i(t), priority);
  };
}

function styleTween(name, value, priority) {
  var t, i0;

  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t = (i0 = i) && styleInterpolate(name, i, priority);
    return t;
  }

  tween._value = value;
  return tween;
}

function _default(name, value, priority) {
  var key = "style." + (name += "");
  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
  if (value == null) return this.tween(key, null);
  if (typeof value !== "function") throw new Error();
  return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
}
},{}],"../node_modules/d3-transition/src/transition/text.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _tween = require("./tween");

function textConstant(value) {
  return function () {
    this.textContent = value;
  };
}

function textFunction(value) {
  return function () {
    var value1 = value(this);
    this.textContent = value1 == null ? "" : value1;
  };
}

function _default(value) {
  return this.tween("text", typeof value === "function" ? textFunction((0, _tween.tweenValue)(this, "text", value)) : textConstant(value == null ? "" : value + ""));
}
},{"./tween":"../node_modules/d3-transition/src/transition/tween.js"}],"../node_modules/d3-transition/src/transition/transition.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./index");

var _schedule = _interopRequireWildcard(require("./schedule"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _default() {
  var name = this._name,
      id0 = this._id,
      id1 = (0, _index.newId)();

  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        var inherit = (0, _schedule.get)(node, id0);
        (0, _schedule.default)(node, name, id1, i, group, {
          time: inherit.time + inherit.delay + inherit.duration,
          delay: 0,
          duration: inherit.duration,
          ease: inherit.ease
        });
      }
    }
  }

  return new _index.Transition(groups, this._parents, name, id1);
}
},{"./index":"../node_modules/d3-transition/src/transition/index.js","./schedule":"../node_modules/d3-transition/src/transition/schedule.js"}],"../node_modules/d3-transition/src/transition/end.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _schedule = require("./schedule");

function _default() {
  var on0,
      on1,
      that = this,
      id = that._id,
      size = that.size();
  return new Promise(function (resolve, reject) {
    var cancel = {
      value: reject
    },
        end = {
      value: function () {
        if (--size === 0) resolve();
      }
    };
    that.each(function () {
      var schedule = (0, _schedule.set)(this, id),
          on = schedule.on; // If this node shared a dispatch with the previous node,
      // just assign the updated shared dispatch and we’re done!
      // Otherwise, copy-on-write.

      if (on !== on0) {
        on1 = (on0 = on).copy();

        on1._.cancel.push(cancel);

        on1._.interrupt.push(cancel);

        on1._.end.push(end);
      }

      schedule.on = on1;
    });
  });
}
},{"./schedule":"../node_modules/d3-transition/src/transition/schedule.js"}],"../node_modules/d3-transition/src/transition/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Transition = Transition;
exports.default = transition;
exports.newId = newId;

var _d3Selection = require("d3-selection");

var _attr = _interopRequireDefault(require("./attr"));

var _attrTween = _interopRequireDefault(require("./attrTween"));

var _delay = _interopRequireDefault(require("./delay"));

var _duration = _interopRequireDefault(require("./duration"));

var _ease = _interopRequireDefault(require("./ease"));

var _filter = _interopRequireDefault(require("./filter"));

var _merge = _interopRequireDefault(require("./merge"));

var _on = _interopRequireDefault(require("./on"));

var _remove = _interopRequireDefault(require("./remove"));

var _select = _interopRequireDefault(require("./select"));

var _selectAll = _interopRequireDefault(require("./selectAll"));

var _selection = _interopRequireDefault(require("./selection"));

var _style = _interopRequireDefault(require("./style"));

var _styleTween = _interopRequireDefault(require("./styleTween"));

var _text = _interopRequireDefault(require("./text"));

var _transition = _interopRequireDefault(require("./transition"));

var _tween = _interopRequireDefault(require("./tween"));

var _end = _interopRequireDefault(require("./end"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var id = 0;

function Transition(groups, parents, name, id) {
  this._groups = groups;
  this._parents = parents;
  this._name = name;
  this._id = id;
}

function transition(name) {
  return (0, _d3Selection.selection)().transition(name);
}

function newId() {
  return ++id;
}

var selection_prototype = _d3Selection.selection.prototype;
Transition.prototype = transition.prototype = {
  constructor: Transition,
  select: _select.default,
  selectAll: _selectAll.default,
  filter: _filter.default,
  merge: _merge.default,
  selection: _selection.default,
  transition: _transition.default,
  call: selection_prototype.call,
  nodes: selection_prototype.nodes,
  node: selection_prototype.node,
  size: selection_prototype.size,
  empty: selection_prototype.empty,
  each: selection_prototype.each,
  on: _on.default,
  attr: _attr.default,
  attrTween: _attrTween.default,
  style: _style.default,
  styleTween: _styleTween.default,
  text: _text.default,
  remove: _remove.default,
  tween: _tween.default,
  delay: _delay.default,
  duration: _duration.default,
  ease: _ease.default,
  end: _end.default
};
},{"d3-selection":"../node_modules/d3-selection/src/index.js","./attr":"../node_modules/d3-transition/src/transition/attr.js","./attrTween":"../node_modules/d3-transition/src/transition/attrTween.js","./delay":"../node_modules/d3-transition/src/transition/delay.js","./duration":"../node_modules/d3-transition/src/transition/duration.js","./ease":"../node_modules/d3-transition/src/transition/ease.js","./filter":"../node_modules/d3-transition/src/transition/filter.js","./merge":"../node_modules/d3-transition/src/transition/merge.js","./on":"../node_modules/d3-transition/src/transition/on.js","./remove":"../node_modules/d3-transition/src/transition/remove.js","./select":"../node_modules/d3-transition/src/transition/select.js","./selectAll":"../node_modules/d3-transition/src/transition/selectAll.js","./selection":"../node_modules/d3-transition/src/transition/selection.js","./style":"../node_modules/d3-transition/src/transition/style.js","./styleTween":"../node_modules/d3-transition/src/transition/styleTween.js","./text":"../node_modules/d3-transition/src/transition/text.js","./transition":"../node_modules/d3-transition/src/transition/transition.js","./tween":"../node_modules/d3-transition/src/transition/tween.js","./end":"../node_modules/d3-transition/src/transition/end.js"}],"../node_modules/d3-ease/src/linear.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.linear = linear;

function linear(t) {
  return +t;
}
},{}],"../node_modules/d3-ease/src/quad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.quadIn = quadIn;
exports.quadOut = quadOut;
exports.quadInOut = quadInOut;

function quadIn(t) {
  return t * t;
}

function quadOut(t) {
  return t * (2 - t);
}

function quadInOut(t) {
  return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;
}
},{}],"../node_modules/d3-ease/src/cubic.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cubicIn = cubicIn;
exports.cubicOut = cubicOut;
exports.cubicInOut = cubicInOut;

function cubicIn(t) {
  return t * t * t;
}

function cubicOut(t) {
  return --t * t * t + 1;
}

function cubicInOut(t) {
  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
}
},{}],"../node_modules/d3-ease/src/poly.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.polyInOut = exports.polyOut = exports.polyIn = void 0;
var exponent = 3;

var polyIn = function custom(e) {
  e = +e;

  function polyIn(t) {
    return Math.pow(t, e);
  }

  polyIn.exponent = custom;
  return polyIn;
}(exponent);

exports.polyIn = polyIn;

var polyOut = function custom(e) {
  e = +e;

  function polyOut(t) {
    return 1 - Math.pow(1 - t, e);
  }

  polyOut.exponent = custom;
  return polyOut;
}(exponent);

exports.polyOut = polyOut;

var polyInOut = function custom(e) {
  e = +e;

  function polyInOut(t) {
    return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;
  }

  polyInOut.exponent = custom;
  return polyInOut;
}(exponent);

exports.polyInOut = polyInOut;
},{}],"../node_modules/d3-ease/src/sin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sinIn = sinIn;
exports.sinOut = sinOut;
exports.sinInOut = sinInOut;
var pi = Math.PI,
    halfPi = pi / 2;

function sinIn(t) {
  return 1 - Math.cos(t * halfPi);
}

function sinOut(t) {
  return Math.sin(t * halfPi);
}

function sinInOut(t) {
  return (1 - Math.cos(pi * t)) / 2;
}
},{}],"../node_modules/d3-ease/src/exp.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.expIn = expIn;
exports.expOut = expOut;
exports.expInOut = expInOut;

function expIn(t) {
  return Math.pow(2, 10 * t - 10);
}

function expOut(t) {
  return 1 - Math.pow(2, -10 * t);
}

function expInOut(t) {
  return ((t *= 2) <= 1 ? Math.pow(2, 10 * t - 10) : 2 - Math.pow(2, 10 - 10 * t)) / 2;
}
},{}],"../node_modules/d3-ease/src/circle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.circleIn = circleIn;
exports.circleOut = circleOut;
exports.circleInOut = circleInOut;

function circleIn(t) {
  return 1 - Math.sqrt(1 - t * t);
}

function circleOut(t) {
  return Math.sqrt(1 - --t * t);
}

function circleInOut(t) {
  return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;
}
},{}],"../node_modules/d3-ease/src/bounce.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bounceIn = bounceIn;
exports.bounceOut = bounceOut;
exports.bounceInOut = bounceInOut;
var b1 = 4 / 11,
    b2 = 6 / 11,
    b3 = 8 / 11,
    b4 = 3 / 4,
    b5 = 9 / 11,
    b6 = 10 / 11,
    b7 = 15 / 16,
    b8 = 21 / 22,
    b9 = 63 / 64,
    b0 = 1 / b1 / b1;

function bounceIn(t) {
  return 1 - bounceOut(1 - t);
}

function bounceOut(t) {
  return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;
}

function bounceInOut(t) {
  return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;
}
},{}],"../node_modules/d3-ease/src/back.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.backInOut = exports.backOut = exports.backIn = void 0;
var overshoot = 1.70158;

var backIn = function custom(s) {
  s = +s;

  function backIn(t) {
    return t * t * ((s + 1) * t - s);
  }

  backIn.overshoot = custom;
  return backIn;
}(overshoot);

exports.backIn = backIn;

var backOut = function custom(s) {
  s = +s;

  function backOut(t) {
    return --t * t * ((s + 1) * t + s) + 1;
  }

  backOut.overshoot = custom;
  return backOut;
}(overshoot);

exports.backOut = backOut;

var backInOut = function custom(s) {
  s = +s;

  function backInOut(t) {
    return ((t *= 2) < 1 ? t * t * ((s + 1) * t - s) : (t -= 2) * t * ((s + 1) * t + s) + 2) / 2;
  }

  backInOut.overshoot = custom;
  return backInOut;
}(overshoot);

exports.backInOut = backInOut;
},{}],"../node_modules/d3-ease/src/elastic.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.elasticInOut = exports.elasticOut = exports.elasticIn = void 0;
var tau = 2 * Math.PI,
    amplitude = 1,
    period = 0.3;

var elasticIn = function custom(a, p) {
  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

  function elasticIn(t) {
    return a * Math.pow(2, 10 * --t) * Math.sin((s - t) / p);
  }

  elasticIn.amplitude = function (a) {
    return custom(a, p * tau);
  };

  elasticIn.period = function (p) {
    return custom(a, p);
  };

  return elasticIn;
}(amplitude, period);

exports.elasticIn = elasticIn;

var elasticOut = function custom(a, p) {
  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

  function elasticOut(t) {
    return 1 - a * Math.pow(2, -10 * (t = +t)) * Math.sin((t + s) / p);
  }

  elasticOut.amplitude = function (a) {
    return custom(a, p * tau);
  };

  elasticOut.period = function (p) {
    return custom(a, p);
  };

  return elasticOut;
}(amplitude, period);

exports.elasticOut = elasticOut;

var elasticInOut = function custom(a, p) {
  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

  function elasticInOut(t) {
    return ((t = t * 2 - 1) < 0 ? a * Math.pow(2, 10 * t) * Math.sin((s - t) / p) : 2 - a * Math.pow(2, -10 * t) * Math.sin((s + t) / p)) / 2;
  }

  elasticInOut.amplitude = function (a) {
    return custom(a, p * tau);
  };

  elasticInOut.period = function (p) {
    return custom(a, p);
  };

  return elasticInOut;
}(amplitude, period);

exports.elasticInOut = elasticInOut;
},{}],"../node_modules/d3-ease/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "easeLinear", {
  enumerable: true,
  get: function () {
    return _linear.linear;
  }
});
Object.defineProperty(exports, "easeQuad", {
  enumerable: true,
  get: function () {
    return _quad.quadInOut;
  }
});
Object.defineProperty(exports, "easeQuadIn", {
  enumerable: true,
  get: function () {
    return _quad.quadIn;
  }
});
Object.defineProperty(exports, "easeQuadOut", {
  enumerable: true,
  get: function () {
    return _quad.quadOut;
  }
});
Object.defineProperty(exports, "easeQuadInOut", {
  enumerable: true,
  get: function () {
    return _quad.quadInOut;
  }
});
Object.defineProperty(exports, "easeCubic", {
  enumerable: true,
  get: function () {
    return _cubic.cubicInOut;
  }
});
Object.defineProperty(exports, "easeCubicIn", {
  enumerable: true,
  get: function () {
    return _cubic.cubicIn;
  }
});
Object.defineProperty(exports, "easeCubicOut", {
  enumerable: true,
  get: function () {
    return _cubic.cubicOut;
  }
});
Object.defineProperty(exports, "easeCubicInOut", {
  enumerable: true,
  get: function () {
    return _cubic.cubicInOut;
  }
});
Object.defineProperty(exports, "easePoly", {
  enumerable: true,
  get: function () {
    return _poly.polyInOut;
  }
});
Object.defineProperty(exports, "easePolyIn", {
  enumerable: true,
  get: function () {
    return _poly.polyIn;
  }
});
Object.defineProperty(exports, "easePolyOut", {
  enumerable: true,
  get: function () {
    return _poly.polyOut;
  }
});
Object.defineProperty(exports, "easePolyInOut", {
  enumerable: true,
  get: function () {
    return _poly.polyInOut;
  }
});
Object.defineProperty(exports, "easeSin", {
  enumerable: true,
  get: function () {
    return _sin.sinInOut;
  }
});
Object.defineProperty(exports, "easeSinIn", {
  enumerable: true,
  get: function () {
    return _sin.sinIn;
  }
});
Object.defineProperty(exports, "easeSinOut", {
  enumerable: true,
  get: function () {
    return _sin.sinOut;
  }
});
Object.defineProperty(exports, "easeSinInOut", {
  enumerable: true,
  get: function () {
    return _sin.sinInOut;
  }
});
Object.defineProperty(exports, "easeExp", {
  enumerable: true,
  get: function () {
    return _exp.expInOut;
  }
});
Object.defineProperty(exports, "easeExpIn", {
  enumerable: true,
  get: function () {
    return _exp.expIn;
  }
});
Object.defineProperty(exports, "easeExpOut", {
  enumerable: true,
  get: function () {
    return _exp.expOut;
  }
});
Object.defineProperty(exports, "easeExpInOut", {
  enumerable: true,
  get: function () {
    return _exp.expInOut;
  }
});
Object.defineProperty(exports, "easeCircle", {
  enumerable: true,
  get: function () {
    return _circle.circleInOut;
  }
});
Object.defineProperty(exports, "easeCircleIn", {
  enumerable: true,
  get: function () {
    return _circle.circleIn;
  }
});
Object.defineProperty(exports, "easeCircleOut", {
  enumerable: true,
  get: function () {
    return _circle.circleOut;
  }
});
Object.defineProperty(exports, "easeCircleInOut", {
  enumerable: true,
  get: function () {
    return _circle.circleInOut;
  }
});
Object.defineProperty(exports, "easeBounce", {
  enumerable: true,
  get: function () {
    return _bounce.bounceOut;
  }
});
Object.defineProperty(exports, "easeBounceIn", {
  enumerable: true,
  get: function () {
    return _bounce.bounceIn;
  }
});
Object.defineProperty(exports, "easeBounceOut", {
  enumerable: true,
  get: function () {
    return _bounce.bounceOut;
  }
});
Object.defineProperty(exports, "easeBounceInOut", {
  enumerable: true,
  get: function () {
    return _bounce.bounceInOut;
  }
});
Object.defineProperty(exports, "easeBack", {
  enumerable: true,
  get: function () {
    return _back.backInOut;
  }
});
Object.defineProperty(exports, "easeBackIn", {
  enumerable: true,
  get: function () {
    return _back.backIn;
  }
});
Object.defineProperty(exports, "easeBackOut", {
  enumerable: true,
  get: function () {
    return _back.backOut;
  }
});
Object.defineProperty(exports, "easeBackInOut", {
  enumerable: true,
  get: function () {
    return _back.backInOut;
  }
});
Object.defineProperty(exports, "easeElastic", {
  enumerable: true,
  get: function () {
    return _elastic.elasticOut;
  }
});
Object.defineProperty(exports, "easeElasticIn", {
  enumerable: true,
  get: function () {
    return _elastic.elasticIn;
  }
});
Object.defineProperty(exports, "easeElasticOut", {
  enumerable: true,
  get: function () {
    return _elastic.elasticOut;
  }
});
Object.defineProperty(exports, "easeElasticInOut", {
  enumerable: true,
  get: function () {
    return _elastic.elasticInOut;
  }
});

var _linear = require("./linear");

var _quad = require("./quad");

var _cubic = require("./cubic");

var _poly = require("./poly");

var _sin = require("./sin");

var _exp = require("./exp");

var _circle = require("./circle");

var _bounce = require("./bounce");

var _back = require("./back");

var _elastic = require("./elastic");
},{"./linear":"../node_modules/d3-ease/src/linear.js","./quad":"../node_modules/d3-ease/src/quad.js","./cubic":"../node_modules/d3-ease/src/cubic.js","./poly":"../node_modules/d3-ease/src/poly.js","./sin":"../node_modules/d3-ease/src/sin.js","./exp":"../node_modules/d3-ease/src/exp.js","./circle":"../node_modules/d3-ease/src/circle.js","./bounce":"../node_modules/d3-ease/src/bounce.js","./back":"../node_modules/d3-ease/src/back.js","./elastic":"../node_modules/d3-ease/src/elastic.js"}],"../node_modules/d3-transition/src/selection/transition.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("../transition/index");

var _schedule = _interopRequireDefault(require("../transition/schedule"));

var _d3Ease = require("d3-ease");

var _d3Timer = require("d3-timer");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var defaultTiming = {
  time: null,
  // Set on use.
  delay: 0,
  duration: 250,
  ease: _d3Ease.easeCubicInOut
};

function inherit(node, id) {
  var timing;

  while (!(timing = node.__transition) || !(timing = timing[id])) {
    if (!(node = node.parentNode)) {
      return defaultTiming.time = (0, _d3Timer.now)(), defaultTiming;
    }
  }

  return timing;
}

function _default(name) {
  var id, timing;

  if (name instanceof _index.Transition) {
    id = name._id, name = name._name;
  } else {
    id = (0, _index.newId)(), (timing = defaultTiming).time = (0, _d3Timer.now)(), name = name == null ? null : name + "";
  }

  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        (0, _schedule.default)(node, name, id, i, group, timing || inherit(node, id));
      }
    }
  }

  return new _index.Transition(groups, this._parents, name, id);
}
},{"../transition/index":"../node_modules/d3-transition/src/transition/index.js","../transition/schedule":"../node_modules/d3-transition/src/transition/schedule.js","d3-ease":"../node_modules/d3-ease/src/index.js","d3-timer":"../node_modules/d3-timer/src/index.js"}],"../node_modules/d3-transition/src/selection/index.js":[function(require,module,exports) {
"use strict";

var _d3Selection = require("d3-selection");

var _interrupt = _interopRequireDefault(require("./interrupt"));

var _transition = _interopRequireDefault(require("./transition"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_d3Selection.selection.prototype.interrupt = _interrupt.default;
_d3Selection.selection.prototype.transition = _transition.default;
},{"d3-selection":"../node_modules/d3-selection/src/index.js","./interrupt":"../node_modules/d3-transition/src/selection/interrupt.js","./transition":"../node_modules/d3-transition/src/selection/transition.js"}],"../node_modules/d3-transition/src/active.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./transition/index");

var _schedule = require("./transition/schedule");

var root = [null];

function _default(node, name) {
  var schedules = node.__transition,
      schedule,
      i;

  if (schedules) {
    name = name == null ? null : name + "";

    for (i in schedules) {
      if ((schedule = schedules[i]).state > _schedule.SCHEDULED && schedule.name === name) {
        return new _index.Transition([[node]], root, name, +i);
      }
    }
  }

  return null;
}
},{"./transition/index":"../node_modules/d3-transition/src/transition/index.js","./transition/schedule":"../node_modules/d3-transition/src/transition/schedule.js"}],"../node_modules/d3-transition/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "transition", {
  enumerable: true,
  get: function () {
    return _index2.default;
  }
});
Object.defineProperty(exports, "active", {
  enumerable: true,
  get: function () {
    return _active.default;
  }
});
Object.defineProperty(exports, "interrupt", {
  enumerable: true,
  get: function () {
    return _interrupt.default;
  }
});

require("./selection/index");

var _index2 = _interopRequireDefault(require("./transition/index"));

var _active = _interopRequireDefault(require("./active"));

var _interrupt = _interopRequireDefault(require("./interrupt"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./selection/index":"../node_modules/d3-transition/src/selection/index.js","./transition/index":"../node_modules/d3-transition/src/transition/index.js","./active":"../node_modules/d3-transition/src/active.js","./interrupt":"../node_modules/d3-transition/src/interrupt.js"}],"../node_modules/d3-brush/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"../node_modules/d3-brush/src/event.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(target, type, selection) {
  this.target = target;
  this.type = type;
  this.selection = selection;
}
},{}],"../node_modules/d3-brush/src/noevent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nopropagation = nopropagation;
exports.default = _default;

var _d3Selection = require("d3-selection");

function nopropagation() {
  _d3Selection.event.stopImmediatePropagation();
}

function _default() {
  _d3Selection.event.preventDefault();

  _d3Selection.event.stopImmediatePropagation();
}
},{"d3-selection":"../node_modules/d3-selection/src/index.js"}],"../node_modules/d3-brush/src/brush.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.brushSelection = brushSelection;
exports.brushX = brushX;
exports.brushY = brushY;
exports.default = _default;

var _d3Dispatch = require("d3-dispatch");

var _d3Drag = require("d3-drag");

var _d3Interpolate = require("d3-interpolate");

var _d3Selection = require("d3-selection");

var _d3Transition = require("d3-transition");

var _constant = _interopRequireDefault(require("./constant"));

var _event = _interopRequireDefault(require("./event"));

var _noevent = _interopRequireWildcard(require("./noevent"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MODE_DRAG = {
  name: "drag"
},
    MODE_SPACE = {
  name: "space"
},
    MODE_HANDLE = {
  name: "handle"
},
    MODE_CENTER = {
  name: "center"
};
var X = {
  name: "x",
  handles: ["e", "w"].map(type),
  input: function (x, e) {
    return x && [[x[0], e[0][1]], [x[1], e[1][1]]];
  },
  output: function (xy) {
    return xy && [xy[0][0], xy[1][0]];
  }
};
var Y = {
  name: "y",
  handles: ["n", "s"].map(type),
  input: function (y, e) {
    return y && [[e[0][0], y[0]], [e[1][0], y[1]]];
  },
  output: function (xy) {
    return xy && [xy[0][1], xy[1][1]];
  }
};
var XY = {
  name: "xy",
  handles: ["n", "e", "s", "w", "nw", "ne", "se", "sw"].map(type),
  input: function (xy) {
    return xy;
  },
  output: function (xy) {
    return xy;
  }
};
var cursors = {
  overlay: "crosshair",
  selection: "move",
  n: "ns-resize",
  e: "ew-resize",
  s: "ns-resize",
  w: "ew-resize",
  nw: "nwse-resize",
  ne: "nesw-resize",
  se: "nwse-resize",
  sw: "nesw-resize"
};
var flipX = {
  e: "w",
  w: "e",
  nw: "ne",
  ne: "nw",
  se: "sw",
  sw: "se"
};
var flipY = {
  n: "s",
  s: "n",
  nw: "sw",
  ne: "se",
  se: "ne",
  sw: "nw"
};
var signsX = {
  overlay: +1,
  selection: +1,
  n: null,
  e: +1,
  s: null,
  w: -1,
  nw: -1,
  ne: +1,
  se: +1,
  sw: -1
};
var signsY = {
  overlay: +1,
  selection: +1,
  n: -1,
  e: null,
  s: +1,
  w: null,
  nw: -1,
  ne: -1,
  se: +1,
  sw: +1
};

function type(t) {
  return {
    type: t
  };
} // Ignore right-click, since that should open the context menu.


function defaultFilter() {
  return !_d3Selection.event.button;
}

function defaultExtent() {
  var svg = this.ownerSVGElement || this;
  return [[0, 0], [svg.width.baseVal.value, svg.height.baseVal.value]];
} // Like d3.local, but with the name “__brush” rather than auto-generated.


function local(node) {
  while (!node.__brush) if (!(node = node.parentNode)) return;

  return node.__brush;
}

function empty(extent) {
  return extent[0][0] === extent[1][0] || extent[0][1] === extent[1][1];
}

function brushSelection(node) {
  var state = node.__brush;
  return state ? state.dim.output(state.selection) : null;
}

function brushX() {
  return brush(X);
}

function brushY() {
  return brush(Y);
}

function _default() {
  return brush(XY);
}

function brush(dim) {
  var extent = defaultExtent,
      filter = defaultFilter,
      listeners = (0, _d3Dispatch.dispatch)(brush, "start", "brush", "end"),
      handleSize = 6,
      touchending;

  function brush(group) {
    var overlay = group.property("__brush", initialize).selectAll(".overlay").data([type("overlay")]);
    overlay.enter().append("rect").attr("class", "overlay").attr("pointer-events", "all").attr("cursor", cursors.overlay).merge(overlay).each(function () {
      var extent = local(this).extent;
      (0, _d3Selection.select)(this).attr("x", extent[0][0]).attr("y", extent[0][1]).attr("width", extent[1][0] - extent[0][0]).attr("height", extent[1][1] - extent[0][1]);
    });
    group.selectAll(".selection").data([type("selection")]).enter().append("rect").attr("class", "selection").attr("cursor", cursors.selection).attr("fill", "#777").attr("fill-opacity", 0.3).attr("stroke", "#fff").attr("shape-rendering", "crispEdges");
    var handle = group.selectAll(".handle").data(dim.handles, function (d) {
      return d.type;
    });
    handle.exit().remove();
    handle.enter().append("rect").attr("class", function (d) {
      return "handle handle--" + d.type;
    }).attr("cursor", function (d) {
      return cursors[d.type];
    });
    group.each(redraw).attr("fill", "none").attr("pointer-events", "all").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)").on("mousedown.brush touchstart.brush", started);
  }

  brush.move = function (group, selection) {
    if (group.selection) {
      group.on("start.brush", function () {
        emitter(this, arguments).beforestart().start();
      }).on("interrupt.brush end.brush", function () {
        emitter(this, arguments).end();
      }).tween("brush", function () {
        var that = this,
            state = that.__brush,
            emit = emitter(that, arguments),
            selection0 = state.selection,
            selection1 = dim.input(typeof selection === "function" ? selection.apply(this, arguments) : selection, state.extent),
            i = (0, _d3Interpolate.interpolate)(selection0, selection1);

        function tween(t) {
          state.selection = t === 1 && empty(selection1) ? null : i(t);
          redraw.call(that);
          emit.brush();
        }

        return selection0 && selection1 ? tween : tween(1);
      });
    } else {
      group.each(function () {
        var that = this,
            args = arguments,
            state = that.__brush,
            selection1 = dim.input(typeof selection === "function" ? selection.apply(that, args) : selection, state.extent),
            emit = emitter(that, args).beforestart();
        (0, _d3Transition.interrupt)(that);
        state.selection = selection1 == null || empty(selection1) ? null : selection1;
        redraw.call(that);
        emit.start().brush().end();
      });
    }
  };

  function redraw() {
    var group = (0, _d3Selection.select)(this),
        selection = local(this).selection;

    if (selection) {
      group.selectAll(".selection").style("display", null).attr("x", selection[0][0]).attr("y", selection[0][1]).attr("width", selection[1][0] - selection[0][0]).attr("height", selection[1][1] - selection[0][1]);
      group.selectAll(".handle").style("display", null).attr("x", function (d) {
        return d.type[d.type.length - 1] === "e" ? selection[1][0] - handleSize / 2 : selection[0][0] - handleSize / 2;
      }).attr("y", function (d) {
        return d.type[0] === "s" ? selection[1][1] - handleSize / 2 : selection[0][1] - handleSize / 2;
      }).attr("width", function (d) {
        return d.type === "n" || d.type === "s" ? selection[1][0] - selection[0][0] + handleSize : handleSize;
      }).attr("height", function (d) {
        return d.type === "e" || d.type === "w" ? selection[1][1] - selection[0][1] + handleSize : handleSize;
      });
    } else {
      group.selectAll(".selection,.handle").style("display", "none").attr("x", null).attr("y", null).attr("width", null).attr("height", null);
    }
  }

  function emitter(that, args) {
    return that.__brush.emitter || new Emitter(that, args);
  }

  function Emitter(that, args) {
    this.that = that;
    this.args = args;
    this.state = that.__brush;
    this.active = 0;
  }

  Emitter.prototype = {
    beforestart: function () {
      if (++this.active === 1) this.state.emitter = this, this.starting = true;
      return this;
    },
    start: function () {
      if (this.starting) this.starting = false, this.emit("start");
      return this;
    },
    brush: function () {
      this.emit("brush");
      return this;
    },
    end: function () {
      if (--this.active === 0) delete this.state.emitter, this.emit("end");
      return this;
    },
    emit: function (type) {
      (0, _d3Selection.customEvent)(new _event.default(brush, type, dim.output(this.state.selection)), listeners.apply, listeners, [type, this.that, this.args]);
    }
  };

  function started() {
    if (_d3Selection.event.touches) {
      if (_d3Selection.event.changedTouches.length < _d3Selection.event.touches.length) return (0, _noevent.default)();
    } else if (touchending) return;

    if (!filter.apply(this, arguments)) return;
    var that = this,
        type = _d3Selection.event.target.__data__.type,
        mode = (_d3Selection.event.metaKey ? type = "overlay" : type) === "selection" ? MODE_DRAG : _d3Selection.event.altKey ? MODE_CENTER : MODE_HANDLE,
        signX = dim === Y ? null : signsX[type],
        signY = dim === X ? null : signsY[type],
        state = local(that),
        extent = state.extent,
        selection = state.selection,
        W = extent[0][0],
        w0,
        w1,
        N = extent[0][1],
        n0,
        n1,
        E = extent[1][0],
        e0,
        e1,
        S = extent[1][1],
        s0,
        s1,
        dx,
        dy,
        moving,
        shifting = signX && signY && _d3Selection.event.shiftKey,
        lockX,
        lockY,
        point0 = (0, _d3Selection.mouse)(that),
        point = point0,
        emit = emitter(that, arguments).beforestart();

    if (type === "overlay") {
      state.selection = selection = [[w0 = dim === Y ? W : point0[0], n0 = dim === X ? N : point0[1]], [e0 = dim === Y ? E : w0, s0 = dim === X ? S : n0]];
    } else {
      w0 = selection[0][0];
      n0 = selection[0][1];
      e0 = selection[1][0];
      s0 = selection[1][1];
    }

    w1 = w0;
    n1 = n0;
    e1 = e0;
    s1 = s0;
    var group = (0, _d3Selection.select)(that).attr("pointer-events", "none");
    var overlay = group.selectAll(".overlay").attr("cursor", cursors[type]);

    if (_d3Selection.event.touches) {
      group.on("touchmove.brush", moved, true).on("touchend.brush touchcancel.brush", ended, true);
    } else {
      var view = (0, _d3Selection.select)(_d3Selection.event.view).on("keydown.brush", keydowned, true).on("keyup.brush", keyupped, true).on("mousemove.brush", moved, true).on("mouseup.brush", ended, true);
      (0, _d3Drag.dragDisable)(_d3Selection.event.view);
    }

    (0, _noevent.nopropagation)();
    (0, _d3Transition.interrupt)(that);
    redraw.call(that);
    emit.start();

    function moved() {
      var point1 = (0, _d3Selection.mouse)(that);

      if (shifting && !lockX && !lockY) {
        if (Math.abs(point1[0] - point[0]) > Math.abs(point1[1] - point[1])) lockY = true;else lockX = true;
      }

      point = point1;
      moving = true;
      (0, _noevent.default)();
      move();
    }

    function move() {
      var t;
      dx = point[0] - point0[0];
      dy = point[1] - point0[1];

      switch (mode) {
        case MODE_SPACE:
        case MODE_DRAG:
          {
            if (signX) dx = Math.max(W - w0, Math.min(E - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;
            if (signY) dy = Math.max(N - n0, Math.min(S - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;
            break;
          }

        case MODE_HANDLE:
          {
            if (signX < 0) dx = Math.max(W - w0, Math.min(E - w0, dx)), w1 = w0 + dx, e1 = e0;else if (signX > 0) dx = Math.max(W - e0, Math.min(E - e0, dx)), w1 = w0, e1 = e0 + dx;
            if (signY < 0) dy = Math.max(N - n0, Math.min(S - n0, dy)), n1 = n0 + dy, s1 = s0;else if (signY > 0) dy = Math.max(N - s0, Math.min(S - s0, dy)), n1 = n0, s1 = s0 + dy;
            break;
          }

        case MODE_CENTER:
          {
            if (signX) w1 = Math.max(W, Math.min(E, w0 - dx * signX)), e1 = Math.max(W, Math.min(E, e0 + dx * signX));
            if (signY) n1 = Math.max(N, Math.min(S, n0 - dy * signY)), s1 = Math.max(N, Math.min(S, s0 + dy * signY));
            break;
          }
      }

      if (e1 < w1) {
        signX *= -1;
        t = w0, w0 = e0, e0 = t;
        t = w1, w1 = e1, e1 = t;
        if (type in flipX) overlay.attr("cursor", cursors[type = flipX[type]]);
      }

      if (s1 < n1) {
        signY *= -1;
        t = n0, n0 = s0, s0 = t;
        t = n1, n1 = s1, s1 = t;
        if (type in flipY) overlay.attr("cursor", cursors[type = flipY[type]]);
      }

      if (state.selection) selection = state.selection; // May be set by brush.move!

      if (lockX) w1 = selection[0][0], e1 = selection[1][0];
      if (lockY) n1 = selection[0][1], s1 = selection[1][1];

      if (selection[0][0] !== w1 || selection[0][1] !== n1 || selection[1][0] !== e1 || selection[1][1] !== s1) {
        state.selection = [[w1, n1], [e1, s1]];
        redraw.call(that);
        emit.brush();
      }
    }

    function ended() {
      (0, _noevent.nopropagation)();

      if (_d3Selection.event.touches) {
        if (_d3Selection.event.touches.length) return;
        if (touchending) clearTimeout(touchending);
        touchending = setTimeout(function () {
          touchending = null;
        }, 500); // Ghost clicks are delayed!

        group.on("touchmove.brush touchend.brush touchcancel.brush", null);
      } else {
        (0, _d3Drag.dragEnable)(_d3Selection.event.view, moving);
        view.on("keydown.brush keyup.brush mousemove.brush mouseup.brush", null);
      }

      group.attr("pointer-events", "all");
      overlay.attr("cursor", cursors.overlay);
      if (state.selection) selection = state.selection; // May be set by brush.move (on start)!

      if (empty(selection)) state.selection = null, redraw.call(that);
      emit.end();
    }

    function keydowned() {
      switch (_d3Selection.event.keyCode) {
        case 16:
          {
            // SHIFT
            shifting = signX && signY;
            break;
          }

        case 18:
          {
            // ALT
            if (mode === MODE_HANDLE) {
              if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;
              if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;
              mode = MODE_CENTER;
              move();
            }

            break;
          }

        case 32:
          {
            // SPACE; takes priority over ALT
            if (mode === MODE_HANDLE || mode === MODE_CENTER) {
              if (signX < 0) e0 = e1 - dx;else if (signX > 0) w0 = w1 - dx;
              if (signY < 0) s0 = s1 - dy;else if (signY > 0) n0 = n1 - dy;
              mode = MODE_SPACE;
              overlay.attr("cursor", cursors.selection);
              move();
            }

            break;
          }

        default:
          return;
      }

      (0, _noevent.default)();
    }

    function keyupped() {
      switch (_d3Selection.event.keyCode) {
        case 16:
          {
            // SHIFT
            if (shifting) {
              lockX = lockY = shifting = false;
              move();
            }

            break;
          }

        case 18:
          {
            // ALT
            if (mode === MODE_CENTER) {
              if (signX < 0) e0 = e1;else if (signX > 0) w0 = w1;
              if (signY < 0) s0 = s1;else if (signY > 0) n0 = n1;
              mode = MODE_HANDLE;
              move();
            }

            break;
          }

        case 32:
          {
            // SPACE
            if (mode === MODE_SPACE) {
              if (_d3Selection.event.altKey) {
                if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;
                if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;
                mode = MODE_CENTER;
              } else {
                if (signX < 0) e0 = e1;else if (signX > 0) w0 = w1;
                if (signY < 0) s0 = s1;else if (signY > 0) n0 = n1;
                mode = MODE_HANDLE;
              }

              overlay.attr("cursor", cursors[type]);
              move();
            }

            break;
          }

        default:
          return;
      }

      (0, _noevent.default)();
    }
  }

  function initialize() {
    var state = this.__brush || {
      selection: null
    };
    state.extent = extent.apply(this, arguments);
    state.dim = dim;
    return state;
  }

  brush.extent = function (_) {
    return arguments.length ? (extent = typeof _ === "function" ? _ : (0, _constant.default)([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), brush) : extent;
  };

  brush.filter = function (_) {
    return arguments.length ? (filter = typeof _ === "function" ? _ : (0, _constant.default)(!!_), brush) : filter;
  };

  brush.handleSize = function (_) {
    return arguments.length ? (handleSize = +_, brush) : handleSize;
  };

  brush.on = function () {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? brush : value;
  };

  return brush;
}
},{"d3-dispatch":"../node_modules/d3-dispatch/src/index.js","d3-drag":"../node_modules/d3-drag/src/index.js","d3-interpolate":"../node_modules/d3-interpolate/src/index.js","d3-selection":"../node_modules/d3-selection/src/index.js","d3-transition":"../node_modules/d3-transition/src/index.js","./constant":"../node_modules/d3-brush/src/constant.js","./event":"../node_modules/d3-brush/src/event.js","./noevent":"../node_modules/d3-brush/src/noevent.js"}],"../node_modules/d3-brush/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "brush", {
  enumerable: true,
  get: function () {
    return _brush.default;
  }
});
Object.defineProperty(exports, "brushX", {
  enumerable: true,
  get: function () {
    return _brush.brushX;
  }
});
Object.defineProperty(exports, "brushY", {
  enumerable: true,
  get: function () {
    return _brush.brushY;
  }
});
Object.defineProperty(exports, "brushSelection", {
  enumerable: true,
  get: function () {
    return _brush.brushSelection;
  }
});

var _brush = _interopRequireWildcard(require("./brush"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }
},{"./brush":"../node_modules/d3-brush/src/brush.js"}],"../node_modules/d3-chord/src/math.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.max = exports.tau = exports.halfPi = exports.pi = exports.sin = exports.cos = void 0;
var cos = Math.cos;
exports.cos = cos;
var sin = Math.sin;
exports.sin = sin;
var pi = Math.PI;
exports.pi = pi;
var halfPi = pi / 2;
exports.halfPi = halfPi;
var tau = pi * 2;
exports.tau = tau;
var max = Math.max;
exports.max = max;
},{}],"../node_modules/d3-chord/src/chord.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Array = require("d3-array");

var _math = require("./math");

function compareValue(compare) {
  return function (a, b) {
    return compare(a.source.value + a.target.value, b.source.value + b.target.value);
  };
}

function _default() {
  var padAngle = 0,
      sortGroups = null,
      sortSubgroups = null,
      sortChords = null;

  function chord(matrix) {
    var n = matrix.length,
        groupSums = [],
        groupIndex = (0, _d3Array.range)(n),
        subgroupIndex = [],
        chords = [],
        groups = chords.groups = new Array(n),
        subgroups = new Array(n * n),
        k,
        x,
        x0,
        dx,
        i,
        j; // Compute the sum.

    k = 0, i = -1;

    while (++i < n) {
      x = 0, j = -1;

      while (++j < n) {
        x += matrix[i][j];
      }

      groupSums.push(x);
      subgroupIndex.push((0, _d3Array.range)(n));
      k += x;
    } // Sort groups…


    if (sortGroups) groupIndex.sort(function (a, b) {
      return sortGroups(groupSums[a], groupSums[b]);
    }); // Sort subgroups…

    if (sortSubgroups) subgroupIndex.forEach(function (d, i) {
      d.sort(function (a, b) {
        return sortSubgroups(matrix[i][a], matrix[i][b]);
      });
    }); // Convert the sum to scaling factor for [0, 2pi].
    // TODO Allow start and end angle to be specified?
    // TODO Allow padding to be specified as percentage?

    k = (0, _math.max)(0, _math.tau - padAngle * n) / k;
    dx = k ? padAngle : _math.tau / n; // Compute the start and end angle for each group and subgroup.
    // Note: Opera has a bug reordering object literal properties!

    x = 0, i = -1;

    while (++i < n) {
      x0 = x, j = -1;

      while (++j < n) {
        var di = groupIndex[i],
            dj = subgroupIndex[di][j],
            v = matrix[di][dj],
            a0 = x,
            a1 = x += v * k;
        subgroups[dj * n + di] = {
          index: di,
          subindex: dj,
          startAngle: a0,
          endAngle: a1,
          value: v
        };
      }

      groups[di] = {
        index: di,
        startAngle: x0,
        endAngle: x,
        value: groupSums[di]
      };
      x += dx;
    } // Generate chords for each (non-empty) subgroup-subgroup link.


    i = -1;

    while (++i < n) {
      j = i - 1;

      while (++j < n) {
        var source = subgroups[j * n + i],
            target = subgroups[i * n + j];

        if (source.value || target.value) {
          chords.push(source.value < target.value ? {
            source: target,
            target: source
          } : {
            source: source,
            target: target
          });
        }
      }
    }

    return sortChords ? chords.sort(sortChords) : chords;
  }

  chord.padAngle = function (_) {
    return arguments.length ? (padAngle = (0, _math.max)(0, _), chord) : padAngle;
  };

  chord.sortGroups = function (_) {
    return arguments.length ? (sortGroups = _, chord) : sortGroups;
  };

  chord.sortSubgroups = function (_) {
    return arguments.length ? (sortSubgroups = _, chord) : sortSubgroups;
  };

  chord.sortChords = function (_) {
    return arguments.length ? (_ == null ? sortChords = null : (sortChords = compareValue(_))._ = _, chord) : sortChords && sortChords._;
  };

  return chord;
}
},{"d3-array":"../node_modules/d3-array/src/index.js","./math":"../node_modules/d3-chord/src/math.js"}],"../node_modules/d3-chord/src/array.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.slice = void 0;
var slice = Array.prototype.slice;
exports.slice = slice;
},{}],"../node_modules/d3-chord/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"../node_modules/d3-path/src/path.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var pi = Math.PI,
    tau = 2 * pi,
    epsilon = 1e-6,
    tauEpsilon = tau - epsilon;

function Path() {
  this._x0 = this._y0 = // start of current subpath
  this._x1 = this._y1 = null; // end of current subpath

  this._ = "";
}

function path() {
  return new Path();
}

Path.prototype = path.prototype = {
  constructor: Path,
  moveTo: function (x, y) {
    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y);
  },
  closePath: function () {
    if (this._x1 !== null) {
      this._x1 = this._x0, this._y1 = this._y0;
      this._ += "Z";
    }
  },
  lineTo: function (x, y) {
    this._ += "L" + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  quadraticCurveTo: function (x1, y1, x, y) {
    this._ += "Q" + +x1 + "," + +y1 + "," + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  bezierCurveTo: function (x1, y1, x2, y2, x, y) {
    this._ += "C" + +x1 + "," + +y1 + "," + +x2 + "," + +y2 + "," + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  arcTo: function (x1, y1, x2, y2, r) {
    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
    var x0 = this._x1,
        y0 = this._y1,
        x21 = x2 - x1,
        y21 = y2 - y1,
        x01 = x0 - x1,
        y01 = y0 - y1,
        l01_2 = x01 * x01 + y01 * y01; // Is the radius negative? Error.

    if (r < 0) throw new Error("negative radius: " + r); // Is this path empty? Move to (x1,y1).

    if (this._x1 === null) {
      this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
    } // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
    else if (!(l01_2 > epsilon)) ; // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?
      // Equivalently, is (x1,y1) coincident with (x2,y2)?
      // Or, is the radius zero? Line to (x1,y1).
      else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {
          this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
        } // Otherwise, draw an arc!
        else {
            var x20 = x2 - x0,
                y20 = y2 - y0,
                l21_2 = x21 * x21 + y21 * y21,
                l20_2 = x20 * x20 + y20 * y20,
                l21 = Math.sqrt(l21_2),
                l01 = Math.sqrt(l01_2),
                l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),
                t01 = l / l01,
                t21 = l / l21; // If the start tangent is not coincident with (x0,y0), line to.

            if (Math.abs(t01 - 1) > epsilon) {
              this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
            }

            this._ += "A" + r + "," + r + ",0,0," + +(y01 * x20 > x01 * y20) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
          }
  },
  arc: function (x, y, r, a0, a1, ccw) {
    x = +x, y = +y, r = +r;
    var dx = r * Math.cos(a0),
        dy = r * Math.sin(a0),
        x0 = x + dx,
        y0 = y + dy,
        cw = 1 ^ ccw,
        da = ccw ? a0 - a1 : a1 - a0; // Is the radius negative? Error.

    if (r < 0) throw new Error("negative radius: " + r); // Is this path empty? Move to (x0,y0).

    if (this._x1 === null) {
      this._ += "M" + x0 + "," + y0;
    } // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
        this._ += "L" + x0 + "," + y0;
      } // Is this arc empty? We’re done.


    if (!r) return; // Does the angle go the wrong way? Flip the direction.

    if (da < 0) da = da % tau + tau; // Is this a complete circle? Draw two arcs to complete the circle.

    if (da > tauEpsilon) {
      this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
    } // Is this arc non-empty? Draw an arc!
    else if (da > epsilon) {
        this._ += "A" + r + "," + r + ",0," + +(da >= pi) + "," + cw + "," + (this._x1 = x + r * Math.cos(a1)) + "," + (this._y1 = y + r * Math.sin(a1));
      }
  },
  rect: function (x, y, w, h) {
    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y) + "h" + +w + "v" + +h + "h" + -w + "Z";
  },
  toString: function () {
    return this._;
  }
};
var _default = path;
exports.default = _default;
},{}],"../node_modules/d3-path/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "path", {
  enumerable: true,
  get: function () {
    return _path.default;
  }
});

var _path = _interopRequireDefault(require("./path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./path":"../node_modules/d3-path/src/path.js"}],"../node_modules/d3-chord/src/ribbon.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _array = require("./array");

var _constant = _interopRequireDefault(require("./constant"));

var _math = require("./math");

var _d3Path = require("d3-path");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function defaultSource(d) {
  return d.source;
}

function defaultTarget(d) {
  return d.target;
}

function defaultRadius(d) {
  return d.radius;
}

function defaultStartAngle(d) {
  return d.startAngle;
}

function defaultEndAngle(d) {
  return d.endAngle;
}

function _default() {
  var source = defaultSource,
      target = defaultTarget,
      radius = defaultRadius,
      startAngle = defaultStartAngle,
      endAngle = defaultEndAngle,
      context = null;

  function ribbon() {
    var buffer,
        argv = _array.slice.call(arguments),
        s = source.apply(this, argv),
        t = target.apply(this, argv),
        sr = +radius.apply(this, (argv[0] = s, argv)),
        sa0 = startAngle.apply(this, argv) - _math.halfPi,
        sa1 = endAngle.apply(this, argv) - _math.halfPi,
        sx0 = sr * (0, _math.cos)(sa0),
        sy0 = sr * (0, _math.sin)(sa0),
        tr = +radius.apply(this, (argv[0] = t, argv)),
        ta0 = startAngle.apply(this, argv) - _math.halfPi,
        ta1 = endAngle.apply(this, argv) - _math.halfPi;

    if (!context) context = buffer = (0, _d3Path.path)();
    context.moveTo(sx0, sy0);
    context.arc(0, 0, sr, sa0, sa1);

    if (sa0 !== ta0 || sa1 !== ta1) {
      // TODO sr !== tr?
      context.quadraticCurveTo(0, 0, tr * (0, _math.cos)(ta0), tr * (0, _math.sin)(ta0));
      context.arc(0, 0, tr, ta0, ta1);
    }

    context.quadraticCurveTo(0, 0, sx0, sy0);
    context.closePath();
    if (buffer) return context = null, buffer + "" || null;
  }

  ribbon.radius = function (_) {
    return arguments.length ? (radius = typeof _ === "function" ? _ : (0, _constant.default)(+_), ribbon) : radius;
  };

  ribbon.startAngle = function (_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : (0, _constant.default)(+_), ribbon) : startAngle;
  };

  ribbon.endAngle = function (_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : (0, _constant.default)(+_), ribbon) : endAngle;
  };

  ribbon.source = function (_) {
    return arguments.length ? (source = _, ribbon) : source;
  };

  ribbon.target = function (_) {
    return arguments.length ? (target = _, ribbon) : target;
  };

  ribbon.context = function (_) {
    return arguments.length ? (context = _ == null ? null : _, ribbon) : context;
  };

  return ribbon;
}
},{"./array":"../node_modules/d3-chord/src/array.js","./constant":"../node_modules/d3-chord/src/constant.js","./math":"../node_modules/d3-chord/src/math.js","d3-path":"../node_modules/d3-path/src/index.js"}],"../node_modules/d3-chord/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "chord", {
  enumerable: true,
  get: function () {
    return _chord.default;
  }
});
Object.defineProperty(exports, "ribbon", {
  enumerable: true,
  get: function () {
    return _ribbon.default;
  }
});

var _chord = _interopRequireDefault(require("./chord"));

var _ribbon = _interopRequireDefault(require("./ribbon"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./chord":"../node_modules/d3-chord/src/chord.js","./ribbon":"../node_modules/d3-chord/src/ribbon.js"}],"../node_modules/d3-collection/src/map.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.prefix = void 0;
var prefix = "$";
exports.prefix = prefix;

function Map() {}

Map.prototype = map.prototype = {
  constructor: Map,
  has: function (key) {
    return prefix + key in this;
  },
  get: function (key) {
    return this[prefix + key];
  },
  set: function (key, value) {
    this[prefix + key] = value;
    return this;
  },
  remove: function (key) {
    var property = prefix + key;
    return property in this && delete this[property];
  },
  clear: function () {
    for (var property in this) if (property[0] === prefix) delete this[property];
  },
  keys: function () {
    var keys = [];

    for (var property in this) if (property[0] === prefix) keys.push(property.slice(1));

    return keys;
  },
  values: function () {
    var values = [];

    for (var property in this) if (property[0] === prefix) values.push(this[property]);

    return values;
  },
  entries: function () {
    var entries = [];

    for (var property in this) if (property[0] === prefix) entries.push({
      key: property.slice(1),
      value: this[property]
    });

    return entries;
  },
  size: function () {
    var size = 0;

    for (var property in this) if (property[0] === prefix) ++size;

    return size;
  },
  empty: function () {
    for (var property in this) if (property[0] === prefix) return false;

    return true;
  },
  each: function (f) {
    for (var property in this) if (property[0] === prefix) f(this[property], property.slice(1), this);
  }
};

function map(object, f) {
  var map = new Map(); // Copy constructor.

  if (object instanceof Map) object.each(function (value, key) {
    map.set(key, value);
  }); // Index array by numeric index or specified key function.
  else if (Array.isArray(object)) {
      var i = -1,
          n = object.length,
          o;
      if (f == null) while (++i < n) map.set(i, object[i]);else while (++i < n) map.set(f(o = object[i], i, object), o);
    } // Convert object to map.
    else if (object) for (var key in object) map.set(key, object[key]);
  return map;
}

var _default = map;
exports.default = _default;
},{}],"../node_modules/d3-collection/src/nest.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _map = _interopRequireDefault(require("./map"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var keys = [],
      sortKeys = [],
      sortValues,
      rollup,
      nest;

  function apply(array, depth, createResult, setResult) {
    if (depth >= keys.length) {
      if (sortValues != null) array.sort(sortValues);
      return rollup != null ? rollup(array) : array;
    }

    var i = -1,
        n = array.length,
        key = keys[depth++],
        keyValue,
        value,
        valuesByKey = (0, _map.default)(),
        values,
        result = createResult();

    while (++i < n) {
      if (values = valuesByKey.get(keyValue = key(value = array[i]) + "")) {
        values.push(value);
      } else {
        valuesByKey.set(keyValue, [value]);
      }
    }

    valuesByKey.each(function (values, key) {
      setResult(result, key, apply(values, depth, createResult, setResult));
    });
    return result;
  }

  function entries(map, depth) {
    if (++depth > keys.length) return map;
    var array,
        sortKey = sortKeys[depth - 1];
    if (rollup != null && depth >= keys.length) array = map.entries();else array = [], map.each(function (v, k) {
      array.push({
        key: k,
        values: entries(v, depth)
      });
    });
    return sortKey != null ? array.sort(function (a, b) {
      return sortKey(a.key, b.key);
    }) : array;
  }

  return nest = {
    object: function (array) {
      return apply(array, 0, createObject, setObject);
    },
    map: function (array) {
      return apply(array, 0, createMap, setMap);
    },
    entries: function (array) {
      return entries(apply(array, 0, createMap, setMap), 0);
    },
    key: function (d) {
      keys.push(d);
      return nest;
    },
    sortKeys: function (order) {
      sortKeys[keys.length - 1] = order;
      return nest;
    },
    sortValues: function (order) {
      sortValues = order;
      return nest;
    },
    rollup: function (f) {
      rollup = f;
      return nest;
    }
  };
}

function createObject() {
  return {};
}

function setObject(object, key, value) {
  object[key] = value;
}

function createMap() {
  return (0, _map.default)();
}

function setMap(map, key, value) {
  map.set(key, value);
}
},{"./map":"../node_modules/d3-collection/src/map.js"}],"../node_modules/d3-collection/src/set.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _map = _interopRequireWildcard(require("./map"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function Set() {}

var proto = _map.default.prototype;
Set.prototype = set.prototype = {
  constructor: Set,
  has: proto.has,
  add: function (value) {
    value += "";
    this[_map.prefix + value] = value;
    return this;
  },
  remove: proto.remove,
  clear: proto.clear,
  values: proto.keys,
  size: proto.size,
  empty: proto.empty,
  each: proto.each
};

function set(object, f) {
  var set = new Set(); // Copy constructor.

  if (object instanceof Set) object.each(function (value) {
    set.add(value);
  }); // Otherwise, assume it’s an array.
  else if (object) {
      var i = -1,
          n = object.length;
      if (f == null) while (++i < n) set.add(object[i]);else while (++i < n) set.add(f(object[i], i, object));
    }
  return set;
}

var _default = set;
exports.default = _default;
},{"./map":"../node_modules/d3-collection/src/map.js"}],"../node_modules/d3-collection/src/keys.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(map) {
  var keys = [];

  for (var key in map) keys.push(key);

  return keys;
}
},{}],"../node_modules/d3-collection/src/values.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(map) {
  var values = [];

  for (var key in map) values.push(map[key]);

  return values;
}
},{}],"../node_modules/d3-collection/src/entries.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(map) {
  var entries = [];

  for (var key in map) entries.push({
    key: key,
    value: map[key]
  });

  return entries;
}
},{}],"../node_modules/d3-collection/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "nest", {
  enumerable: true,
  get: function () {
    return _nest.default;
  }
});
Object.defineProperty(exports, "set", {
  enumerable: true,
  get: function () {
    return _set.default;
  }
});
Object.defineProperty(exports, "map", {
  enumerable: true,
  get: function () {
    return _map.default;
  }
});
Object.defineProperty(exports, "keys", {
  enumerable: true,
  get: function () {
    return _keys.default;
  }
});
Object.defineProperty(exports, "values", {
  enumerable: true,
  get: function () {
    return _values.default;
  }
});
Object.defineProperty(exports, "entries", {
  enumerable: true,
  get: function () {
    return _entries.default;
  }
});

var _nest = _interopRequireDefault(require("./nest"));

var _set = _interopRequireDefault(require("./set"));

var _map = _interopRequireDefault(require("./map"));

var _keys = _interopRequireDefault(require("./keys"));

var _values = _interopRequireDefault(require("./values"));

var _entries = _interopRequireDefault(require("./entries"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./nest":"../node_modules/d3-collection/src/nest.js","./set":"../node_modules/d3-collection/src/set.js","./map":"../node_modules/d3-collection/src/map.js","./keys":"../node_modules/d3-collection/src/keys.js","./values":"../node_modules/d3-collection/src/values.js","./entries":"../node_modules/d3-collection/src/entries.js"}],"../node_modules/d3-contour/src/array.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.slice = void 0;
var array = Array.prototype;
var slice = array.slice;
exports.slice = slice;
},{}],"../node_modules/d3-contour/src/ascending.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  return a - b;
}
},{}],"../node_modules/d3-contour/src/area.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(ring) {
  var i = 0,
      n = ring.length,
      area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];

  while (++i < n) area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];

  return area;
}
},{}],"../node_modules/d3-contour/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"../node_modules/d3-contour/src/contains.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(ring, hole) {
  var i = -1,
      n = hole.length,
      c;

  while (++i < n) if (c = ringContains(ring, hole[i])) return c;

  return 0;
}

function ringContains(ring, point) {
  var x = point[0],
      y = point[1],
      contains = -1;

  for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {
    var pi = ring[i],
        xi = pi[0],
        yi = pi[1],
        pj = ring[j],
        xj = pj[0],
        yj = pj[1];
    if (segmentContains(pi, pj, point)) return 0;
    if (yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi) contains = -contains;
  }

  return contains;
}

function segmentContains(a, b, c) {
  var i;
  return collinear(a, b, c) && within(a[i = +(a[0] === b[0])], c[i], b[i]);
}

function collinear(a, b, c) {
  return (b[0] - a[0]) * (c[1] - a[1]) === (c[0] - a[0]) * (b[1] - a[1]);
}

function within(p, q, r) {
  return p <= q && q <= r || r <= q && q <= p;
}
},{}],"../node_modules/d3-contour/src/noop.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {}
},{}],"../node_modules/d3-contour/src/contours.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Array = require("d3-array");

var _array = require("./array");

var _ascending = _interopRequireDefault(require("./ascending"));

var _area = _interopRequireDefault(require("./area"));

var _constant = _interopRequireDefault(require("./constant"));

var _contains = _interopRequireDefault(require("./contains"));

var _noop = _interopRequireDefault(require("./noop"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var cases = [[], [[[1.0, 1.5], [0.5, 1.0]]], [[[1.5, 1.0], [1.0, 1.5]]], [[[1.5, 1.0], [0.5, 1.0]]], [[[1.0, 0.5], [1.5, 1.0]]], [[[1.0, 1.5], [0.5, 1.0]], [[1.0, 0.5], [1.5, 1.0]]], [[[1.0, 0.5], [1.0, 1.5]]], [[[1.0, 0.5], [0.5, 1.0]]], [[[0.5, 1.0], [1.0, 0.5]]], [[[1.0, 1.5], [1.0, 0.5]]], [[[0.5, 1.0], [1.0, 0.5]], [[1.5, 1.0], [1.0, 1.5]]], [[[1.5, 1.0], [1.0, 0.5]]], [[[0.5, 1.0], [1.5, 1.0]]], [[[1.0, 1.5], [1.5, 1.0]]], [[[0.5, 1.0], [1.0, 1.5]]], []];

function _default() {
  var dx = 1,
      dy = 1,
      threshold = _d3Array.thresholdSturges,
      smooth = smoothLinear;

  function contours(values) {
    var tz = threshold(values); // Convert number of thresholds into uniform thresholds.

    if (!Array.isArray(tz)) {
      var domain = (0, _d3Array.extent)(values),
          start = domain[0],
          stop = domain[1];
      tz = (0, _d3Array.tickStep)(start, stop, tz);
      tz = (0, _d3Array.range)(Math.floor(start / tz) * tz, Math.floor(stop / tz) * tz, tz);
    } else {
      tz = tz.slice().sort(_ascending.default);
    }

    return tz.map(function (value) {
      return contour(values, value);
    });
  } // Accumulate, smooth contour rings, assign holes to exterior rings.
  // Based on https://github.com/mbostock/shapefile/blob/v0.6.2/shp/polygon.js


  function contour(values, value) {
    var polygons = [],
        holes = [];
    isorings(values, value, function (ring) {
      smooth(ring, values, value);
      if ((0, _area.default)(ring) > 0) polygons.push([ring]);else holes.push(ring);
    });
    holes.forEach(function (hole) {
      for (var i = 0, n = polygons.length, polygon; i < n; ++i) {
        if ((0, _contains.default)((polygon = polygons[i])[0], hole) !== -1) {
          polygon.push(hole);
          return;
        }
      }
    });
    return {
      type: "MultiPolygon",
      value: value,
      coordinates: polygons
    };
  } // Marching squares with isolines stitched into rings.
  // Based on https://github.com/topojson/topojson-client/blob/v3.0.0/src/stitch.js


  function isorings(values, value, callback) {
    var fragmentByStart = new Array(),
        fragmentByEnd = new Array(),
        x,
        y,
        t0,
        t1,
        t2,
        t3; // Special case for the first row (y = -1, t2 = t3 = 0).

    x = y = -1;
    t1 = values[0] >= value;
    cases[t1 << 1].forEach(stitch);

    while (++x < dx - 1) {
      t0 = t1, t1 = values[x + 1] >= value;
      cases[t0 | t1 << 1].forEach(stitch);
    }

    cases[t1 << 0].forEach(stitch); // General case for the intermediate rows.

    while (++y < dy - 1) {
      x = -1;
      t1 = values[y * dx + dx] >= value;
      t2 = values[y * dx] >= value;
      cases[t1 << 1 | t2 << 2].forEach(stitch);

      while (++x < dx - 1) {
        t0 = t1, t1 = values[y * dx + dx + x + 1] >= value;
        t3 = t2, t2 = values[y * dx + x + 1] >= value;
        cases[t0 | t1 << 1 | t2 << 2 | t3 << 3].forEach(stitch);
      }

      cases[t1 | t2 << 3].forEach(stitch);
    } // Special case for the last row (y = dy - 1, t0 = t1 = 0).


    x = -1;
    t2 = values[y * dx] >= value;
    cases[t2 << 2].forEach(stitch);

    while (++x < dx - 1) {
      t3 = t2, t2 = values[y * dx + x + 1] >= value;
      cases[t2 << 2 | t3 << 3].forEach(stitch);
    }

    cases[t2 << 3].forEach(stitch);

    function stitch(line) {
      var start = [line[0][0] + x, line[0][1] + y],
          end = [line[1][0] + x, line[1][1] + y],
          startIndex = index(start),
          endIndex = index(end),
          f,
          g;

      if (f = fragmentByEnd[startIndex]) {
        if (g = fragmentByStart[endIndex]) {
          delete fragmentByEnd[f.end];
          delete fragmentByStart[g.start];

          if (f === g) {
            f.ring.push(end);
            callback(f.ring);
          } else {
            fragmentByStart[f.start] = fragmentByEnd[g.end] = {
              start: f.start,
              end: g.end,
              ring: f.ring.concat(g.ring)
            };
          }
        } else {
          delete fragmentByEnd[f.end];
          f.ring.push(end);
          fragmentByEnd[f.end = endIndex] = f;
        }
      } else if (f = fragmentByStart[endIndex]) {
        if (g = fragmentByEnd[startIndex]) {
          delete fragmentByStart[f.start];
          delete fragmentByEnd[g.end];

          if (f === g) {
            f.ring.push(end);
            callback(f.ring);
          } else {
            fragmentByStart[g.start] = fragmentByEnd[f.end] = {
              start: g.start,
              end: f.end,
              ring: g.ring.concat(f.ring)
            };
          }
        } else {
          delete fragmentByStart[f.start];
          f.ring.unshift(start);
          fragmentByStart[f.start = startIndex] = f;
        }
      } else {
        fragmentByStart[startIndex] = fragmentByEnd[endIndex] = {
          start: startIndex,
          end: endIndex,
          ring: [start, end]
        };
      }
    }
  }

  function index(point) {
    return point[0] * 2 + point[1] * (dx + 1) * 4;
  }

  function smoothLinear(ring, values, value) {
    ring.forEach(function (point) {
      var x = point[0],
          y = point[1],
          xt = x | 0,
          yt = y | 0,
          v0,
          v1 = values[yt * dx + xt];

      if (x > 0 && x < dx && xt === x) {
        v0 = values[yt * dx + xt - 1];
        point[0] = x + (value - v0) / (v1 - v0) - 0.5;
      }

      if (y > 0 && y < dy && yt === y) {
        v0 = values[(yt - 1) * dx + xt];
        point[1] = y + (value - v0) / (v1 - v0) - 0.5;
      }
    });
  }

  contours.contour = contour;

  contours.size = function (_) {
    if (!arguments.length) return [dx, dy];

    var _0 = Math.ceil(_[0]),
        _1 = Math.ceil(_[1]);

    if (!(_0 > 0) || !(_1 > 0)) throw new Error("invalid size");
    return dx = _0, dy = _1, contours;
  };

  contours.thresholds = function (_) {
    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? (0, _constant.default)(_array.slice.call(_)) : (0, _constant.default)(_), contours) : threshold;
  };

  contours.smooth = function (_) {
    return arguments.length ? (smooth = _ ? smoothLinear : _noop.default, contours) : smooth === smoothLinear;
  };

  return contours;
}
},{"d3-array":"../node_modules/d3-array/src/index.js","./array":"../node_modules/d3-contour/src/array.js","./ascending":"../node_modules/d3-contour/src/ascending.js","./area":"../node_modules/d3-contour/src/area.js","./constant":"../node_modules/d3-contour/src/constant.js","./contains":"../node_modules/d3-contour/src/contains.js","./noop":"../node_modules/d3-contour/src/noop.js"}],"../node_modules/d3-contour/src/blur.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.blurX = blurX;
exports.blurY = blurY;

// TODO Optimize edge cases.
// TODO Optimize index calculation.
// TODO Optimize arguments.
function blurX(source, target, r) {
  var n = source.width,
      m = source.height,
      w = (r << 1) + 1;

  for (var j = 0; j < m; ++j) {
    for (var i = 0, sr = 0; i < n + r; ++i) {
      if (i < n) {
        sr += source.data[i + j * n];
      }

      if (i >= r) {
        if (i >= w) {
          sr -= source.data[i - w + j * n];
        }

        target.data[i - r + j * n] = sr / Math.min(i + 1, n - 1 + w - i, w);
      }
    }
  }
} // TODO Optimize edge cases.
// TODO Optimize index calculation.
// TODO Optimize arguments.


function blurY(source, target, r) {
  var n = source.width,
      m = source.height,
      w = (r << 1) + 1;

  for (var i = 0; i < n; ++i) {
    for (var j = 0, sr = 0; j < m + r; ++j) {
      if (j < m) {
        sr += source.data[i + j * n];
      }

      if (j >= r) {
        if (j >= w) {
          sr -= source.data[i + (j - w) * n];
        }

        target.data[i + (j - r) * n] = sr / Math.min(j + 1, m - 1 + w - j, w);
      }
    }
  }
}
},{}],"../node_modules/d3-contour/src/density.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Array = require("d3-array");

var _array = require("./array");

var _blur = require("./blur");

var _constant = _interopRequireDefault(require("./constant"));

var _contours = _interopRequireDefault(require("./contours"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function defaultX(d) {
  return d[0];
}

function defaultY(d) {
  return d[1];
}

function defaultWeight() {
  return 1;
}

function _default() {
  var x = defaultX,
      y = defaultY,
      weight = defaultWeight,
      dx = 960,
      dy = 500,
      r = 20,
      // blur radius
  k = 2,
      // log2(grid cell size)
  o = r * 3,
      // grid offset, to pad for blur
  n = dx + o * 2 >> k,
      // grid width
  m = dy + o * 2 >> k,
      // grid height
  threshold = (0, _constant.default)(20);

  function density(data) {
    var values0 = new Float32Array(n * m),
        values1 = new Float32Array(n * m);
    data.forEach(function (d, i, data) {
      var xi = +x(d, i, data) + o >> k,
          yi = +y(d, i, data) + o >> k,
          wi = +weight(d, i, data);

      if (xi >= 0 && xi < n && yi >= 0 && yi < m) {
        values0[xi + yi * n] += wi;
      }
    }); // TODO Optimize.

    (0, _blur.blurX)({
      width: n,
      height: m,
      data: values0
    }, {
      width: n,
      height: m,
      data: values1
    }, r >> k);
    (0, _blur.blurY)({
      width: n,
      height: m,
      data: values1
    }, {
      width: n,
      height: m,
      data: values0
    }, r >> k);
    (0, _blur.blurX)({
      width: n,
      height: m,
      data: values0
    }, {
      width: n,
      height: m,
      data: values1
    }, r >> k);
    (0, _blur.blurY)({
      width: n,
      height: m,
      data: values1
    }, {
      width: n,
      height: m,
      data: values0
    }, r >> k);
    (0, _blur.blurX)({
      width: n,
      height: m,
      data: values0
    }, {
      width: n,
      height: m,
      data: values1
    }, r >> k);
    (0, _blur.blurY)({
      width: n,
      height: m,
      data: values1
    }, {
      width: n,
      height: m,
      data: values0
    }, r >> k);
    var tz = threshold(values0); // Convert number of thresholds into uniform thresholds.

    if (!Array.isArray(tz)) {
      var stop = (0, _d3Array.max)(values0);
      tz = (0, _d3Array.tickStep)(0, stop, tz);
      tz = (0, _d3Array.range)(0, Math.floor(stop / tz) * tz, tz);
      tz.shift();
    }

    return (0, _contours.default)().thresholds(tz).size([n, m])(values0).map(transform);
  }

  function transform(geometry) {
    geometry.value *= Math.pow(2, -2 * k); // Density in points per square pixel.

    geometry.coordinates.forEach(transformPolygon);
    return geometry;
  }

  function transformPolygon(coordinates) {
    coordinates.forEach(transformRing);
  }

  function transformRing(coordinates) {
    coordinates.forEach(transformPoint);
  } // TODO Optimize.


  function transformPoint(coordinates) {
    coordinates[0] = coordinates[0] * Math.pow(2, k) - o;
    coordinates[1] = coordinates[1] * Math.pow(2, k) - o;
  }

  function resize() {
    o = r * 3;
    n = dx + o * 2 >> k;
    m = dy + o * 2 >> k;
    return density;
  }

  density.x = function (_) {
    return arguments.length ? (x = typeof _ === "function" ? _ : (0, _constant.default)(+_), density) : x;
  };

  density.y = function (_) {
    return arguments.length ? (y = typeof _ === "function" ? _ : (0, _constant.default)(+_), density) : y;
  };

  density.weight = function (_) {
    return arguments.length ? (weight = typeof _ === "function" ? _ : (0, _constant.default)(+_), density) : weight;
  };

  density.size = function (_) {
    if (!arguments.length) return [dx, dy];

    var _0 = Math.ceil(_[0]),
        _1 = Math.ceil(_[1]);

    if (!(_0 >= 0) && !(_0 >= 0)) throw new Error("invalid size");
    return dx = _0, dy = _1, resize();
  };

  density.cellSize = function (_) {
    if (!arguments.length) return 1 << k;
    if (!((_ = +_) >= 1)) throw new Error("invalid cell size");
    return k = Math.floor(Math.log(_) / Math.LN2), resize();
  };

  density.thresholds = function (_) {
    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? (0, _constant.default)(_array.slice.call(_)) : (0, _constant.default)(_), density) : threshold;
  };

  density.bandwidth = function (_) {
    if (!arguments.length) return Math.sqrt(r * (r + 1));
    if (!((_ = +_) >= 0)) throw new Error("invalid bandwidth");
    return r = Math.round((Math.sqrt(4 * _ * _ + 1) - 1) / 2), resize();
  };

  return density;
}
},{"d3-array":"../node_modules/d3-array/src/index.js","./array":"../node_modules/d3-contour/src/array.js","./blur":"../node_modules/d3-contour/src/blur.js","./constant":"../node_modules/d3-contour/src/constant.js","./contours":"../node_modules/d3-contour/src/contours.js"}],"../node_modules/d3-contour/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "contours", {
  enumerable: true,
  get: function () {
    return _contours.default;
  }
});
Object.defineProperty(exports, "contourDensity", {
  enumerable: true,
  get: function () {
    return _density.default;
  }
});

var _contours = _interopRequireDefault(require("./contours"));

var _density = _interopRequireDefault(require("./density"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./contours":"../node_modules/d3-contour/src/contours.js","./density":"../node_modules/d3-contour/src/density.js"}],"../node_modules/d3-dsv/src/dsv.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
var EOL = {},
    EOF = {},
    QUOTE = 34,
    NEWLINE = 10,
    RETURN = 13;

function objectConverter(columns) {
  return new Function("d", "return {" + columns.map(function (name, i) {
    return JSON.stringify(name) + ": d[" + i + "]";
  }).join(",") + "}");
}

function customConverter(columns, f) {
  var object = objectConverter(columns);
  return function (row, i) {
    return f(object(row), i, columns);
  };
} // Compute unique columns in order of discovery.


function inferColumns(rows) {
  var columnSet = Object.create(null),
      columns = [];
  rows.forEach(function (row) {
    for (var column in row) {
      if (!(column in columnSet)) {
        columns.push(columnSet[column] = column);
      }
    }
  });
  return columns;
}

function pad(value, width) {
  var s = value + "",
      length = s.length;
  return length < width ? new Array(width - length + 1).join(0) + s : s;
}

function formatYear(year) {
  return year < 0 ? "-" + pad(-year, 6) : year > 9999 ? "+" + pad(year, 6) : pad(year, 4);
}

function formatDate(date) {
  var hours = date.getUTCHours(),
      minutes = date.getUTCMinutes(),
      seconds = date.getUTCSeconds(),
      milliseconds = date.getUTCMilliseconds();
  return isNaN(date) ? "Invalid Date" : formatYear(date.getUTCFullYear(), 4) + "-" + pad(date.getUTCMonth() + 1, 2) + "-" + pad(date.getUTCDate(), 2) + (milliseconds ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + ":" + pad(seconds, 2) + "." + pad(milliseconds, 3) + "Z" : seconds ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + ":" + pad(seconds, 2) + "Z" : minutes || hours ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + "Z" : "");
}

function _default(delimiter) {
  var reFormat = new RegExp("[\"" + delimiter + "\n\r]"),
      DELIMITER = delimiter.charCodeAt(0);

  function parse(text, f) {
    var convert,
        columns,
        rows = parseRows(text, function (row, i) {
      if (convert) return convert(row, i - 1);
      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);
    });
    rows.columns = columns || [];
    return rows;
  }

  function parseRows(text, f) {
    var rows = [],
        // output rows
    N = text.length,
        I = 0,
        // current character index
    n = 0,
        // current line number
    t,
        // current token
    eof = N <= 0,
        // current token followed by EOF?
    eol = false; // current token followed by EOL?
    // Strip the trailing newline.

    if (text.charCodeAt(N - 1) === NEWLINE) --N;
    if (text.charCodeAt(N - 1) === RETURN) --N;

    function token() {
      if (eof) return EOF;
      if (eol) return eol = false, EOL; // Unescape quotes.

      var i,
          j = I,
          c;

      if (text.charCodeAt(j) === QUOTE) {
        while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);

        if ((i = I) >= N) eof = true;else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;else if (c === RETURN) {
          eol = true;
          if (text.charCodeAt(I) === NEWLINE) ++I;
        }
        return text.slice(j + 1, i - 1).replace(/""/g, "\"");
      } // Find next delimiter or newline.


      while (I < N) {
        if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;else if (c === RETURN) {
          eol = true;
          if (text.charCodeAt(I) === NEWLINE) ++I;
        } else if (c !== DELIMITER) continue;
        return text.slice(j, i);
      } // Return last token before EOF.


      return eof = true, text.slice(j, N);
    }

    while ((t = token()) !== EOF) {
      var row = [];

      while (t !== EOL && t !== EOF) row.push(t), t = token();

      if (f && (row = f(row, n++)) == null) continue;
      rows.push(row);
    }

    return rows;
  }

  function preformatBody(rows, columns) {
    return rows.map(function (row) {
      return columns.map(function (column) {
        return formatValue(row[column]);
      }).join(delimiter);
    });
  }

  function format(rows, columns) {
    if (columns == null) columns = inferColumns(rows);
    return [columns.map(formatValue).join(delimiter)].concat(preformatBody(rows, columns)).join("\n");
  }

  function formatBody(rows, columns) {
    if (columns == null) columns = inferColumns(rows);
    return preformatBody(rows, columns).join("\n");
  }

  function formatRows(rows) {
    return rows.map(formatRow).join("\n");
  }

  function formatRow(row) {
    return row.map(formatValue).join(delimiter);
  }

  function formatValue(value) {
    return value == null ? "" : value instanceof Date ? formatDate(value) : reFormat.test(value += "") ? "\"" + value.replace(/"/g, "\"\"") + "\"" : value;
  }

  return {
    parse: parse,
    parseRows: parseRows,
    format: format,
    formatBody: formatBody,
    formatRows: formatRows
  };
}
},{}],"../node_modules/d3-dsv/src/csv.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.csvFormatRows = exports.csvFormatBody = exports.csvFormat = exports.csvParseRows = exports.csvParse = void 0;

var _dsv = _interopRequireDefault(require("./dsv"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var csv = (0, _dsv.default)(",");
var csvParse = csv.parse;
exports.csvParse = csvParse;
var csvParseRows = csv.parseRows;
exports.csvParseRows = csvParseRows;
var csvFormat = csv.format;
exports.csvFormat = csvFormat;
var csvFormatBody = csv.formatBody;
exports.csvFormatBody = csvFormatBody;
var csvFormatRows = csv.formatRows;
exports.csvFormatRows = csvFormatRows;
},{"./dsv":"../node_modules/d3-dsv/src/dsv.js"}],"../node_modules/d3-dsv/src/tsv.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tsvFormatRows = exports.tsvFormatBody = exports.tsvFormat = exports.tsvParseRows = exports.tsvParse = void 0;

var _dsv = _interopRequireDefault(require("./dsv"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var tsv = (0, _dsv.default)("\t");
var tsvParse = tsv.parse;
exports.tsvParse = tsvParse;
var tsvParseRows = tsv.parseRows;
exports.tsvParseRows = tsvParseRows;
var tsvFormat = tsv.format;
exports.tsvFormat = tsvFormat;
var tsvFormatBody = tsv.formatBody;
exports.tsvFormatBody = tsvFormatBody;
var tsvFormatRows = tsv.formatRows;
exports.tsvFormatRows = tsvFormatRows;
},{"./dsv":"../node_modules/d3-dsv/src/dsv.js"}],"../node_modules/d3-dsv/src/autoType.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = autoType;

function autoType(object) {
  for (var key in object) {
    var value = object[key].trim(),
        number;
    if (!value) value = null;else if (value === "true") value = true;else if (value === "false") value = false;else if (value === "NaN") value = NaN;else if (!isNaN(number = +value)) value = number;else if (/^([-+]\d{2})?\d{4}(-\d{2}(-\d{2})?)?(T\d{2}:\d{2}(:\d{2}(\.\d{3})?)?(Z|[-+]\d{2}:\d{2})?)?$/.test(value)) value = new Date(value);else continue;
    object[key] = value;
  }

  return object;
}
},{}],"../node_modules/d3-dsv/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "dsvFormat", {
  enumerable: true,
  get: function () {
    return _dsv.default;
  }
});
Object.defineProperty(exports, "csvParse", {
  enumerable: true,
  get: function () {
    return _csv.csvParse;
  }
});
Object.defineProperty(exports, "csvParseRows", {
  enumerable: true,
  get: function () {
    return _csv.csvParseRows;
  }
});
Object.defineProperty(exports, "csvFormat", {
  enumerable: true,
  get: function () {
    return _csv.csvFormat;
  }
});
Object.defineProperty(exports, "csvFormatBody", {
  enumerable: true,
  get: function () {
    return _csv.csvFormatBody;
  }
});
Object.defineProperty(exports, "csvFormatRows", {
  enumerable: true,
  get: function () {
    return _csv.csvFormatRows;
  }
});
Object.defineProperty(exports, "tsvParse", {
  enumerable: true,
  get: function () {
    return _tsv.tsvParse;
  }
});
Object.defineProperty(exports, "tsvParseRows", {
  enumerable: true,
  get: function () {
    return _tsv.tsvParseRows;
  }
});
Object.defineProperty(exports, "tsvFormat", {
  enumerable: true,
  get: function () {
    return _tsv.tsvFormat;
  }
});
Object.defineProperty(exports, "tsvFormatBody", {
  enumerable: true,
  get: function () {
    return _tsv.tsvFormatBody;
  }
});
Object.defineProperty(exports, "tsvFormatRows", {
  enumerable: true,
  get: function () {
    return _tsv.tsvFormatRows;
  }
});
Object.defineProperty(exports, "autoType", {
  enumerable: true,
  get: function () {
    return _autoType.default;
  }
});

var _dsv = _interopRequireDefault(require("./dsv"));

var _csv = require("./csv");

var _tsv = require("./tsv");

var _autoType = _interopRequireDefault(require("./autoType"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./dsv":"../node_modules/d3-dsv/src/dsv.js","./csv":"../node_modules/d3-dsv/src/csv.js","./tsv":"../node_modules/d3-dsv/src/tsv.js","./autoType":"../node_modules/d3-dsv/src/autoType.js"}],"../node_modules/d3-fetch/src/blob.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function responseBlob(response) {
  if (!response.ok) throw new Error(response.status + " " + response.statusText);
  return response.blob();
}

function _default(input, init) {
  return fetch(input, init).then(responseBlob);
}
},{}],"../node_modules/d3-fetch/src/buffer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function responseArrayBuffer(response) {
  if (!response.ok) throw new Error(response.status + " " + response.statusText);
  return response.arrayBuffer();
}

function _default(input, init) {
  return fetch(input, init).then(responseArrayBuffer);
}
},{}],"../node_modules/d3-fetch/src/text.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function responseText(response) {
  if (!response.ok) throw new Error(response.status + " " + response.statusText);
  return response.text();
}

function _default(input, init) {
  return fetch(input, init).then(responseText);
}
},{}],"../node_modules/d3-fetch/src/dsv.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = dsv;
exports.tsv = exports.csv = void 0;

var _d3Dsv = require("d3-dsv");

var _text = _interopRequireDefault(require("./text"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function dsvParse(parse) {
  return function (input, init, row) {
    if (arguments.length === 2 && typeof init === "function") row = init, init = undefined;
    return (0, _text.default)(input, init).then(function (response) {
      return parse(response, row);
    });
  };
}

function dsv(delimiter, input, init, row) {
  if (arguments.length === 3 && typeof init === "function") row = init, init = undefined;
  var format = (0, _d3Dsv.dsvFormat)(delimiter);
  return (0, _text.default)(input, init).then(function (response) {
    return format.parse(response, row);
  });
}

var csv = dsvParse(_d3Dsv.csvParse);
exports.csv = csv;
var tsv = dsvParse(_d3Dsv.tsvParse);
exports.tsv = tsv;
},{"d3-dsv":"../node_modules/d3-dsv/src/index.js","./text":"../node_modules/d3-fetch/src/text.js"}],"../node_modules/d3-fetch/src/image.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(input, init) {
  return new Promise(function (resolve, reject) {
    var image = new Image();

    for (var key in init) image[key] = init[key];

    image.onerror = reject;

    image.onload = function () {
      resolve(image);
    };

    image.src = input;
  });
}
},{}],"../node_modules/d3-fetch/src/json.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function responseJson(response) {
  if (!response.ok) throw new Error(response.status + " " + response.statusText);
  return response.json();
}

function _default(input, init) {
  return fetch(input, init).then(responseJson);
}
},{}],"../node_modules/d3-fetch/src/xml.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.svg = exports.html = exports.default = void 0;

var _text = _interopRequireDefault(require("./text"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function parser(type) {
  return function (input, init) {
    return (0, _text.default)(input, init).then(function (text) {
      return new DOMParser().parseFromString(text, type);
    });
  };
}

var _default = parser("application/xml");

exports.default = _default;
var html = parser("text/html");
exports.html = html;
var svg = parser("image/svg+xml");
exports.svg = svg;
},{"./text":"../node_modules/d3-fetch/src/text.js"}],"../node_modules/d3-fetch/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "blob", {
  enumerable: true,
  get: function () {
    return _blob.default;
  }
});
Object.defineProperty(exports, "buffer", {
  enumerable: true,
  get: function () {
    return _buffer.default;
  }
});
Object.defineProperty(exports, "dsv", {
  enumerable: true,
  get: function () {
    return _dsv.default;
  }
});
Object.defineProperty(exports, "csv", {
  enumerable: true,
  get: function () {
    return _dsv.csv;
  }
});
Object.defineProperty(exports, "tsv", {
  enumerable: true,
  get: function () {
    return _dsv.tsv;
  }
});
Object.defineProperty(exports, "image", {
  enumerable: true,
  get: function () {
    return _image.default;
  }
});
Object.defineProperty(exports, "json", {
  enumerable: true,
  get: function () {
    return _json.default;
  }
});
Object.defineProperty(exports, "text", {
  enumerable: true,
  get: function () {
    return _text.default;
  }
});
Object.defineProperty(exports, "xml", {
  enumerable: true,
  get: function () {
    return _xml.default;
  }
});
Object.defineProperty(exports, "html", {
  enumerable: true,
  get: function () {
    return _xml.html;
  }
});
Object.defineProperty(exports, "svg", {
  enumerable: true,
  get: function () {
    return _xml.svg;
  }
});

var _blob = _interopRequireDefault(require("./blob"));

var _buffer = _interopRequireDefault(require("./buffer"));

var _dsv = _interopRequireWildcard(require("./dsv"));

var _image = _interopRequireDefault(require("./image"));

var _json = _interopRequireDefault(require("./json"));

var _text = _interopRequireDefault(require("./text"));

var _xml = _interopRequireWildcard(require("./xml"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./blob":"../node_modules/d3-fetch/src/blob.js","./buffer":"../node_modules/d3-fetch/src/buffer.js","./dsv":"../node_modules/d3-fetch/src/dsv.js","./image":"../node_modules/d3-fetch/src/image.js","./json":"../node_modules/d3-fetch/src/json.js","./text":"../node_modules/d3-fetch/src/text.js","./xml":"../node_modules/d3-fetch/src/xml.js"}],"../node_modules/d3-force/src/center.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x, y) {
  var nodes;
  if (x == null) x = 0;
  if (y == null) y = 0;

  function force() {
    var i,
        n = nodes.length,
        node,
        sx = 0,
        sy = 0;

    for (i = 0; i < n; ++i) {
      node = nodes[i], sx += node.x, sy += node.y;
    }

    for (sx = sx / n - x, sy = sy / n - y, i = 0; i < n; ++i) {
      node = nodes[i], node.x -= sx, node.y -= sy;
    }
  }

  force.initialize = function (_) {
    nodes = _;
  };

  force.x = function (_) {
    return arguments.length ? (x = +_, force) : x;
  };

  force.y = function (_) {
    return arguments.length ? (y = +_, force) : y;
  };

  return force;
}
},{}],"../node_modules/d3-force/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"../node_modules/d3-force/src/jiggle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  return (Math.random() - 0.5) * 1e-6;
}
},{}],"../node_modules/d3-quadtree/src/add.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.addAll = addAll;

function _default(d) {
  var x = +this._x.call(null, d),
      y = +this._y.call(null, d);
  return add(this.cover(x, y), x, y, d);
}

function add(tree, x, y, d) {
  if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points

  var parent,
      node = tree._root,
      leaf = {
    data: d
  },
      x0 = tree._x0,
      y0 = tree._y0,
      x1 = tree._x1,
      y1 = tree._y1,
      xm,
      ym,
      xp,
      yp,
      right,
      bottom,
      i,
      j; // If the tree is empty, initialize the root as a leaf.

  if (!node) return tree._root = leaf, tree; // Find the existing leaf for the new point, or add it.

  while (node.length) {
    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;else x1 = xm;
    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;else y1 = ym;
    if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;
  } // Is the new point is exactly coincident with the existing point?


  xp = +tree._x.call(null, node.data);
  yp = +tree._y.call(null, node.data);
  if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree; // Otherwise, split the leaf node until the old and new point are separated.

  do {
    parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);
    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;else x1 = xm;
    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;else y1 = ym;
  } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | xp >= xm));

  return parent[j] = node, parent[i] = leaf, tree;
}

function addAll(data) {
  var d,
      i,
      n = data.length,
      x,
      y,
      xz = new Array(n),
      yz = new Array(n),
      x0 = Infinity,
      y0 = Infinity,
      x1 = -Infinity,
      y1 = -Infinity; // Compute the points and their extent.

  for (i = 0; i < n; ++i) {
    if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;
    xz[i] = x;
    yz[i] = y;
    if (x < x0) x0 = x;
    if (x > x1) x1 = x;
    if (y < y0) y0 = y;
    if (y > y1) y1 = y;
  } // If there were no (valid) points, abort.


  if (x0 > x1 || y0 > y1) return this; // Expand the tree to cover the new points.

  this.cover(x0, y0).cover(x1, y1); // Add the new points.

  for (i = 0; i < n; ++i) {
    add(this, xz[i], yz[i], data[i]);
  }

  return this;
}
},{}],"../node_modules/d3-quadtree/src/cover.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x, y) {
  if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points

  var x0 = this._x0,
      y0 = this._y0,
      x1 = this._x1,
      y1 = this._y1; // If the quadtree has no extent, initialize them.
  // Integer extent are necessary so that if we later double the extent,
  // the existing quadrant boundaries don’t change due to floating point error!

  if (isNaN(x0)) {
    x1 = (x0 = Math.floor(x)) + 1;
    y1 = (y0 = Math.floor(y)) + 1;
  } // Otherwise, double repeatedly to cover.
  else {
      var z = x1 - x0,
          node = this._root,
          parent,
          i;

      while (x0 > x || x >= x1 || y0 > y || y >= y1) {
        i = (y < y0) << 1 | x < x0;
        parent = new Array(4), parent[i] = node, node = parent, z *= 2;

        switch (i) {
          case 0:
            x1 = x0 + z, y1 = y0 + z;
            break;

          case 1:
            x0 = x1 - z, y1 = y0 + z;
            break;

          case 2:
            x1 = x0 + z, y0 = y1 - z;
            break;

          case 3:
            x0 = x1 - z, y0 = y1 - z;
            break;
        }
      }

      if (this._root && this._root.length) this._root = node;
    }

  this._x0 = x0;
  this._y0 = y0;
  this._x1 = x1;
  this._y1 = y1;
  return this;
}
},{}],"../node_modules/d3-quadtree/src/data.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var data = [];
  this.visit(function (node) {
    if (!node.length) do data.push(node.data); while (node = node.next);
  });
  return data;
}
},{}],"../node_modules/d3-quadtree/src/extent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(_) {
  return arguments.length ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1]) : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];
}
},{}],"../node_modules/d3-quadtree/src/quad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(node, x0, y0, x1, y1) {
  this.node = node;
  this.x0 = x0;
  this.y0 = y0;
  this.x1 = x1;
  this.y1 = y1;
}
},{}],"../node_modules/d3-quadtree/src/find.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _quad = _interopRequireDefault(require("./quad"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(x, y, radius) {
  var data,
      x0 = this._x0,
      y0 = this._y0,
      x1,
      y1,
      x2,
      y2,
      x3 = this._x1,
      y3 = this._y1,
      quads = [],
      node = this._root,
      q,
      i;
  if (node) quads.push(new _quad.default(node, x0, y0, x3, y3));
  if (radius == null) radius = Infinity;else {
    x0 = x - radius, y0 = y - radius;
    x3 = x + radius, y3 = y + radius;
    radius *= radius;
  }

  while (q = quads.pop()) {
    // Stop searching if this quadrant can’t contain a closer node.
    if (!(node = q.node) || (x1 = q.x0) > x3 || (y1 = q.y0) > y3 || (x2 = q.x1) < x0 || (y2 = q.y1) < y0) continue; // Bisect the current quadrant.

    if (node.length) {
      var xm = (x1 + x2) / 2,
          ym = (y1 + y2) / 2;
      quads.push(new _quad.default(node[3], xm, ym, x2, y2), new _quad.default(node[2], x1, ym, xm, y2), new _quad.default(node[1], xm, y1, x2, ym), new _quad.default(node[0], x1, y1, xm, ym)); // Visit the closest quadrant first.

      if (i = (y >= ym) << 1 | x >= xm) {
        q = quads[quads.length - 1];
        quads[quads.length - 1] = quads[quads.length - 1 - i];
        quads[quads.length - 1 - i] = q;
      }
    } // Visit this point. (Visiting coincident points isn’t necessary!)
    else {
        var dx = x - +this._x.call(null, node.data),
            dy = y - +this._y.call(null, node.data),
            d2 = dx * dx + dy * dy;

        if (d2 < radius) {
          var d = Math.sqrt(radius = d2);
          x0 = x - d, y0 = y - d;
          x3 = x + d, y3 = y + d;
          data = node.data;
        }
      }
  }

  return data;
}
},{"./quad":"../node_modules/d3-quadtree/src/quad.js"}],"../node_modules/d3-quadtree/src/remove.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.removeAll = removeAll;

function _default(d) {
  if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points

  var parent,
      node = this._root,
      retainer,
      previous,
      next,
      x0 = this._x0,
      y0 = this._y0,
      x1 = this._x1,
      y1 = this._y1,
      x,
      y,
      xm,
      ym,
      right,
      bottom,
      i,
      j; // If the tree is empty, initialize the root as a leaf.

  if (!node) return this; // Find the leaf node for the point.
  // While descending, also retain the deepest parent with a non-removed sibling.

  if (node.length) while (true) {
    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;else x1 = xm;
    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;else y1 = ym;
    if (!(parent = node, node = node[i = bottom << 1 | right])) return this;
    if (!node.length) break;
    if (parent[i + 1 & 3] || parent[i + 2 & 3] || parent[i + 3 & 3]) retainer = parent, j = i;
  } // Find the point to remove.

  while (node.data !== d) if (!(previous = node, node = node.next)) return this;

  if (next = node.next) delete node.next; // If there are multiple coincident points, remove just the point.

  if (previous) return next ? previous.next = next : delete previous.next, this; // If this is the root point, remove it.

  if (!parent) return this._root = next, this; // Remove this leaf.

  next ? parent[i] = next : delete parent[i]; // If the parent now contains exactly one leaf, collapse superfluous parents.

  if ((node = parent[0] || parent[1] || parent[2] || parent[3]) && node === (parent[3] || parent[2] || parent[1] || parent[0]) && !node.length) {
    if (retainer) retainer[j] = node;else this._root = node;
  }

  return this;
}

function removeAll(data) {
  for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);

  return this;
}
},{}],"../node_modules/d3-quadtree/src/root.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  return this._root;
}
},{}],"../node_modules/d3-quadtree/src/size.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var size = 0;
  this.visit(function (node) {
    if (!node.length) do ++size; while (node = node.next);
  });
  return size;
}
},{}],"../node_modules/d3-quadtree/src/visit.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _quad = _interopRequireDefault(require("./quad"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(callback) {
  var quads = [],
      q,
      node = this._root,
      child,
      x0,
      y0,
      x1,
      y1;
  if (node) quads.push(new _quad.default(node, this._x0, this._y0, this._x1, this._y1));

  while (q = quads.pop()) {
    if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {
      var xm = (x0 + x1) / 2,
          ym = (y0 + y1) / 2;
      if (child = node[3]) quads.push(new _quad.default(child, xm, ym, x1, y1));
      if (child = node[2]) quads.push(new _quad.default(child, x0, ym, xm, y1));
      if (child = node[1]) quads.push(new _quad.default(child, xm, y0, x1, ym));
      if (child = node[0]) quads.push(new _quad.default(child, x0, y0, xm, ym));
    }
  }

  return this;
}
},{"./quad":"../node_modules/d3-quadtree/src/quad.js"}],"../node_modules/d3-quadtree/src/visitAfter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _quad = _interopRequireDefault(require("./quad"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(callback) {
  var quads = [],
      next = [],
      q;
  if (this._root) quads.push(new _quad.default(this._root, this._x0, this._y0, this._x1, this._y1));

  while (q = quads.pop()) {
    var node = q.node;

    if (node.length) {
      var child,
          x0 = q.x0,
          y0 = q.y0,
          x1 = q.x1,
          y1 = q.y1,
          xm = (x0 + x1) / 2,
          ym = (y0 + y1) / 2;
      if (child = node[0]) quads.push(new _quad.default(child, x0, y0, xm, ym));
      if (child = node[1]) quads.push(new _quad.default(child, xm, y0, x1, ym));
      if (child = node[2]) quads.push(new _quad.default(child, x0, ym, xm, y1));
      if (child = node[3]) quads.push(new _quad.default(child, xm, ym, x1, y1));
    }

    next.push(q);
  }

  while (q = next.pop()) {
    callback(q.node, q.x0, q.y0, q.x1, q.y1);
  }

  return this;
}
},{"./quad":"../node_modules/d3-quadtree/src/quad.js"}],"../node_modules/d3-quadtree/src/x.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultX = defaultX;
exports.default = _default;

function defaultX(d) {
  return d[0];
}

function _default(_) {
  return arguments.length ? (this._x = _, this) : this._x;
}
},{}],"../node_modules/d3-quadtree/src/y.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultY = defaultY;
exports.default = _default;

function defaultY(d) {
  return d[1];
}

function _default(_) {
  return arguments.length ? (this._y = _, this) : this._y;
}
},{}],"../node_modules/d3-quadtree/src/quadtree.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = quadtree;

var _add = _interopRequireWildcard(require("./add"));

var _cover = _interopRequireDefault(require("./cover"));

var _data = _interopRequireDefault(require("./data"));

var _extent = _interopRequireDefault(require("./extent"));

var _find = _interopRequireDefault(require("./find"));

var _remove = _interopRequireWildcard(require("./remove"));

var _root = _interopRequireDefault(require("./root"));

var _size = _interopRequireDefault(require("./size"));

var _visit = _interopRequireDefault(require("./visit"));

var _visitAfter = _interopRequireDefault(require("./visitAfter"));

var _x = _interopRequireWildcard(require("./x"));

var _y = _interopRequireWildcard(require("./y"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function quadtree(nodes, x, y) {
  var tree = new Quadtree(x == null ? _x.defaultX : x, y == null ? _y.defaultY : y, NaN, NaN, NaN, NaN);
  return nodes == null ? tree : tree.addAll(nodes);
}

function Quadtree(x, y, x0, y0, x1, y1) {
  this._x = x;
  this._y = y;
  this._x0 = x0;
  this._y0 = y0;
  this._x1 = x1;
  this._y1 = y1;
  this._root = undefined;
}

function leaf_copy(leaf) {
  var copy = {
    data: leaf.data
  },
      next = copy;

  while (leaf = leaf.next) next = next.next = {
    data: leaf.data
  };

  return copy;
}

var treeProto = quadtree.prototype = Quadtree.prototype;

treeProto.copy = function () {
  var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),
      node = this._root,
      nodes,
      child;
  if (!node) return copy;
  if (!node.length) return copy._root = leaf_copy(node), copy;
  nodes = [{
    source: node,
    target: copy._root = new Array(4)
  }];

  while (node = nodes.pop()) {
    for (var i = 0; i < 4; ++i) {
      if (child = node.source[i]) {
        if (child.length) nodes.push({
          source: child,
          target: node.target[i] = new Array(4)
        });else node.target[i] = leaf_copy(child);
      }
    }
  }

  return copy;
};

treeProto.add = _add.default;
treeProto.addAll = _add.addAll;
treeProto.cover = _cover.default;
treeProto.data = _data.default;
treeProto.extent = _extent.default;
treeProto.find = _find.default;
treeProto.remove = _remove.default;
treeProto.removeAll = _remove.removeAll;
treeProto.root = _root.default;
treeProto.size = _size.default;
treeProto.visit = _visit.default;
treeProto.visitAfter = _visitAfter.default;
treeProto.x = _x.default;
treeProto.y = _y.default;
},{"./add":"../node_modules/d3-quadtree/src/add.js","./cover":"../node_modules/d3-quadtree/src/cover.js","./data":"../node_modules/d3-quadtree/src/data.js","./extent":"../node_modules/d3-quadtree/src/extent.js","./find":"../node_modules/d3-quadtree/src/find.js","./remove":"../node_modules/d3-quadtree/src/remove.js","./root":"../node_modules/d3-quadtree/src/root.js","./size":"../node_modules/d3-quadtree/src/size.js","./visit":"../node_modules/d3-quadtree/src/visit.js","./visitAfter":"../node_modules/d3-quadtree/src/visitAfter.js","./x":"../node_modules/d3-quadtree/src/x.js","./y":"../node_modules/d3-quadtree/src/y.js"}],"../node_modules/d3-quadtree/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "quadtree", {
  enumerable: true,
  get: function () {
    return _quadtree.default;
  }
});

var _quadtree = _interopRequireDefault(require("./quadtree"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./quadtree":"../node_modules/d3-quadtree/src/quadtree.js"}],"../node_modules/d3-force/src/collide.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constant = _interopRequireDefault(require("./constant"));

var _jiggle = _interopRequireDefault(require("./jiggle"));

var _d3Quadtree = require("d3-quadtree");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function x(d) {
  return d.x + d.vx;
}

function y(d) {
  return d.y + d.vy;
}

function _default(radius) {
  var nodes,
      radii,
      strength = 1,
      iterations = 1;
  if (typeof radius !== "function") radius = (0, _constant.default)(radius == null ? 1 : +radius);

  function force() {
    var i,
        n = nodes.length,
        tree,
        node,
        xi,
        yi,
        ri,
        ri2;

    for (var k = 0; k < iterations; ++k) {
      tree = (0, _d3Quadtree.quadtree)(nodes, x, y).visitAfter(prepare);

      for (i = 0; i < n; ++i) {
        node = nodes[i];
        ri = radii[node.index], ri2 = ri * ri;
        xi = node.x + node.vx;
        yi = node.y + node.vy;
        tree.visit(apply);
      }
    }

    function apply(quad, x0, y0, x1, y1) {
      var data = quad.data,
          rj = quad.r,
          r = ri + rj;

      if (data) {
        if (data.index > node.index) {
          var x = xi - data.x - data.vx,
              y = yi - data.y - data.vy,
              l = x * x + y * y;

          if (l < r * r) {
            if (x === 0) x = (0, _jiggle.default)(), l += x * x;
            if (y === 0) y = (0, _jiggle.default)(), l += y * y;
            l = (r - (l = Math.sqrt(l))) / l * strength;
            node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));
            node.vy += (y *= l) * r;
            data.vx -= x * (r = 1 - r);
            data.vy -= y * r;
          }
        }

        return;
      }

      return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;
    }
  }

  function prepare(quad) {
    if (quad.data) return quad.r = radii[quad.data.index];

    for (var i = quad.r = 0; i < 4; ++i) {
      if (quad[i] && quad[i].r > quad.r) {
        quad.r = quad[i].r;
      }
    }
  }

  function initialize() {
    if (!nodes) return;
    var i,
        n = nodes.length,
        node;
    radii = new Array(n);

    for (i = 0; i < n; ++i) node = nodes[i], radii[node.index] = +radius(node, i, nodes);
  }

  force.initialize = function (_) {
    nodes = _;
    initialize();
  };

  force.iterations = function (_) {
    return arguments.length ? (iterations = +_, force) : iterations;
  };

  force.strength = function (_) {
    return arguments.length ? (strength = +_, force) : strength;
  };

  force.radius = function (_) {
    return arguments.length ? (radius = typeof _ === "function" ? _ : (0, _constant.default)(+_), initialize(), force) : radius;
  };

  return force;
}
},{"./constant":"../node_modules/d3-force/src/constant.js","./jiggle":"../node_modules/d3-force/src/jiggle.js","d3-quadtree":"../node_modules/d3-quadtree/src/index.js"}],"../node_modules/d3-force/src/link.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constant = _interopRequireDefault(require("./constant"));

var _jiggle = _interopRequireDefault(require("./jiggle"));

var _d3Collection = require("d3-collection");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function index(d) {
  return d.index;
}

function find(nodeById, nodeId) {
  var node = nodeById.get(nodeId);
  if (!node) throw new Error("missing: " + nodeId);
  return node;
}

function _default(links) {
  var id = index,
      strength = defaultStrength,
      strengths,
      distance = (0, _constant.default)(30),
      distances,
      nodes,
      count,
      bias,
      iterations = 1;
  if (links == null) links = [];

  function defaultStrength(link) {
    return 1 / Math.min(count[link.source.index], count[link.target.index]);
  }

  function force(alpha) {
    for (var k = 0, n = links.length; k < iterations; ++k) {
      for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {
        link = links[i], source = link.source, target = link.target;
        x = target.x + target.vx - source.x - source.vx || (0, _jiggle.default)();
        y = target.y + target.vy - source.y - source.vy || (0, _jiggle.default)();
        l = Math.sqrt(x * x + y * y);
        l = (l - distances[i]) / l * alpha * strengths[i];
        x *= l, y *= l;
        target.vx -= x * (b = bias[i]);
        target.vy -= y * b;
        source.vx += x * (b = 1 - b);
        source.vy += y * b;
      }
    }
  }

  function initialize() {
    if (!nodes) return;
    var i,
        n = nodes.length,
        m = links.length,
        nodeById = (0, _d3Collection.map)(nodes, id),
        link;

    for (i = 0, count = new Array(n); i < m; ++i) {
      link = links[i], link.index = i;
      if (typeof link.source !== "object") link.source = find(nodeById, link.source);
      if (typeof link.target !== "object") link.target = find(nodeById, link.target);
      count[link.source.index] = (count[link.source.index] || 0) + 1;
      count[link.target.index] = (count[link.target.index] || 0) + 1;
    }

    for (i = 0, bias = new Array(m); i < m; ++i) {
      link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);
    }

    strengths = new Array(m), initializeStrength();
    distances = new Array(m), initializeDistance();
  }

  function initializeStrength() {
    if (!nodes) return;

    for (var i = 0, n = links.length; i < n; ++i) {
      strengths[i] = +strength(links[i], i, links);
    }
  }

  function initializeDistance() {
    if (!nodes) return;

    for (var i = 0, n = links.length; i < n; ++i) {
      distances[i] = +distance(links[i], i, links);
    }
  }

  force.initialize = function (_) {
    nodes = _;
    initialize();
  };

  force.links = function (_) {
    return arguments.length ? (links = _, initialize(), force) : links;
  };

  force.id = function (_) {
    return arguments.length ? (id = _, force) : id;
  };

  force.iterations = function (_) {
    return arguments.length ? (iterations = +_, force) : iterations;
  };

  force.strength = function (_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : (0, _constant.default)(+_), initializeStrength(), force) : strength;
  };

  force.distance = function (_) {
    return arguments.length ? (distance = typeof _ === "function" ? _ : (0, _constant.default)(+_), initializeDistance(), force) : distance;
  };

  return force;
}
},{"./constant":"../node_modules/d3-force/src/constant.js","./jiggle":"../node_modules/d3-force/src/jiggle.js","d3-collection":"../node_modules/d3-collection/src/index.js"}],"../node_modules/d3-force/src/simulation.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.x = x;
exports.y = y;
exports.default = _default;

var _d3Dispatch = require("d3-dispatch");

var _d3Collection = require("d3-collection");

var _d3Timer = require("d3-timer");

function x(d) {
  return d.x;
}

function y(d) {
  return d.y;
}

var initialRadius = 10,
    initialAngle = Math.PI * (3 - Math.sqrt(5));

function _default(nodes) {
  var simulation,
      alpha = 1,
      alphaMin = 0.001,
      alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),
      alphaTarget = 0,
      velocityDecay = 0.6,
      forces = (0, _d3Collection.map)(),
      stepper = (0, _d3Timer.timer)(step),
      event = (0, _d3Dispatch.dispatch)("tick", "end");
  if (nodes == null) nodes = [];

  function step() {
    tick();
    event.call("tick", simulation);

    if (alpha < alphaMin) {
      stepper.stop();
      event.call("end", simulation);
    }
  }

  function tick(iterations) {
    var i,
        n = nodes.length,
        node;
    if (iterations === undefined) iterations = 1;

    for (var k = 0; k < iterations; ++k) {
      alpha += (alphaTarget - alpha) * alphaDecay;
      forces.each(function (force) {
        force(alpha);
      });

      for (i = 0; i < n; ++i) {
        node = nodes[i];
        if (node.fx == null) node.x += node.vx *= velocityDecay;else node.x = node.fx, node.vx = 0;
        if (node.fy == null) node.y += node.vy *= velocityDecay;else node.y = node.fy, node.vy = 0;
      }
    }

    return simulation;
  }

  function initializeNodes() {
    for (var i = 0, n = nodes.length, node; i < n; ++i) {
      node = nodes[i], node.index = i;
      if (node.fx != null) node.x = node.fx;
      if (node.fy != null) node.y = node.fy;

      if (isNaN(node.x) || isNaN(node.y)) {
        var radius = initialRadius * Math.sqrt(i),
            angle = i * initialAngle;
        node.x = radius * Math.cos(angle);
        node.y = radius * Math.sin(angle);
      }

      if (isNaN(node.vx) || isNaN(node.vy)) {
        node.vx = node.vy = 0;
      }
    }
  }

  function initializeForce(force) {
    if (force.initialize) force.initialize(nodes);
    return force;
  }

  initializeNodes();
  return simulation = {
    tick: tick,
    restart: function () {
      return stepper.restart(step), simulation;
    },
    stop: function () {
      return stepper.stop(), simulation;
    },
    nodes: function (_) {
      return arguments.length ? (nodes = _, initializeNodes(), forces.each(initializeForce), simulation) : nodes;
    },
    alpha: function (_) {
      return arguments.length ? (alpha = +_, simulation) : alpha;
    },
    alphaMin: function (_) {
      return arguments.length ? (alphaMin = +_, simulation) : alphaMin;
    },
    alphaDecay: function (_) {
      return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;
    },
    alphaTarget: function (_) {
      return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;
    },
    velocityDecay: function (_) {
      return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;
    },
    force: function (name, _) {
      return arguments.length > 1 ? (_ == null ? forces.remove(name) : forces.set(name, initializeForce(_)), simulation) : forces.get(name);
    },
    find: function (x, y, radius) {
      var i = 0,
          n = nodes.length,
          dx,
          dy,
          d2,
          node,
          closest;
      if (radius == null) radius = Infinity;else radius *= radius;

      for (i = 0; i < n; ++i) {
        node = nodes[i];
        dx = x - node.x;
        dy = y - node.y;
        d2 = dx * dx + dy * dy;
        if (d2 < radius) closest = node, radius = d2;
      }

      return closest;
    },
    on: function (name, _) {
      return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);
    }
  };
}
},{"d3-dispatch":"../node_modules/d3-dispatch/src/index.js","d3-collection":"../node_modules/d3-collection/src/index.js","d3-timer":"../node_modules/d3-timer/src/index.js"}],"../node_modules/d3-force/src/manyBody.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constant = _interopRequireDefault(require("./constant"));

var _jiggle = _interopRequireDefault(require("./jiggle"));

var _d3Quadtree = require("d3-quadtree");

var _simulation = require("./simulation");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var nodes,
      node,
      alpha,
      strength = (0, _constant.default)(-30),
      strengths,
      distanceMin2 = 1,
      distanceMax2 = Infinity,
      theta2 = 0.81;

  function force(_) {
    var i,
        n = nodes.length,
        tree = (0, _d3Quadtree.quadtree)(nodes, _simulation.x, _simulation.y).visitAfter(accumulate);

    for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);
  }

  function initialize() {
    if (!nodes) return;
    var i,
        n = nodes.length,
        node;
    strengths = new Array(n);

    for (i = 0; i < n; ++i) node = nodes[i], strengths[node.index] = +strength(node, i, nodes);
  }

  function accumulate(quad) {
    var strength = 0,
        q,
        c,
        weight = 0,
        x,
        y,
        i; // For internal nodes, accumulate forces from child quadrants.

    if (quad.length) {
      for (x = y = i = 0; i < 4; ++i) {
        if ((q = quad[i]) && (c = Math.abs(q.value))) {
          strength += q.value, weight += c, x += c * q.x, y += c * q.y;
        }
      }

      quad.x = x / weight;
      quad.y = y / weight;
    } // For leaf nodes, accumulate forces from coincident quadrants.
    else {
        q = quad;
        q.x = q.data.x;
        q.y = q.data.y;

        do strength += strengths[q.data.index]; while (q = q.next);
      }

    quad.value = strength;
  }

  function apply(quad, x1, _, x2) {
    if (!quad.value) return true;
    var x = quad.x - node.x,
        y = quad.y - node.y,
        w = x2 - x1,
        l = x * x + y * y; // Apply the Barnes-Hut approximation if possible.
    // Limit forces for very close nodes; randomize direction if coincident.

    if (w * w / theta2 < l) {
      if (l < distanceMax2) {
        if (x === 0) x = (0, _jiggle.default)(), l += x * x;
        if (y === 0) y = (0, _jiggle.default)(), l += y * y;
        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
        node.vx += x * quad.value * alpha / l;
        node.vy += y * quad.value * alpha / l;
      }

      return true;
    } // Otherwise, process points directly.
    else if (quad.length || l >= distanceMax2) return; // Limit forces for very close nodes; randomize direction if coincident.


    if (quad.data !== node || quad.next) {
      if (x === 0) x = (0, _jiggle.default)(), l += x * x;
      if (y === 0) y = (0, _jiggle.default)(), l += y * y;
      if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
    }

    do if (quad.data !== node) {
      w = strengths[quad.data.index] * alpha / l;
      node.vx += x * w;
      node.vy += y * w;
    } while (quad = quad.next);
  }

  force.initialize = function (_) {
    nodes = _;
    initialize();
  };

  force.strength = function (_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : (0, _constant.default)(+_), initialize(), force) : strength;
  };

  force.distanceMin = function (_) {
    return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);
  };

  force.distanceMax = function (_) {
    return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);
  };

  force.theta = function (_) {
    return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);
  };

  return force;
}
},{"./constant":"../node_modules/d3-force/src/constant.js","./jiggle":"../node_modules/d3-force/src/jiggle.js","d3-quadtree":"../node_modules/d3-quadtree/src/index.js","./simulation":"../node_modules/d3-force/src/simulation.js"}],"../node_modules/d3-force/src/radial.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constant = _interopRequireDefault(require("./constant"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(radius, x, y) {
  var nodes,
      strength = (0, _constant.default)(0.1),
      strengths,
      radiuses;
  if (typeof radius !== "function") radius = (0, _constant.default)(+radius);
  if (x == null) x = 0;
  if (y == null) y = 0;

  function force(alpha) {
    for (var i = 0, n = nodes.length; i < n; ++i) {
      var node = nodes[i],
          dx = node.x - x || 1e-6,
          dy = node.y - y || 1e-6,
          r = Math.sqrt(dx * dx + dy * dy),
          k = (radiuses[i] - r) * strengths[i] * alpha / r;
      node.vx += dx * k;
      node.vy += dy * k;
    }
  }

  function initialize() {
    if (!nodes) return;
    var i,
        n = nodes.length;
    strengths = new Array(n);
    radiuses = new Array(n);

    for (i = 0; i < n; ++i) {
      radiuses[i] = +radius(nodes[i], i, nodes);
      strengths[i] = isNaN(radiuses[i]) ? 0 : +strength(nodes[i], i, nodes);
    }
  }

  force.initialize = function (_) {
    nodes = _, initialize();
  };

  force.strength = function (_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : (0, _constant.default)(+_), initialize(), force) : strength;
  };

  force.radius = function (_) {
    return arguments.length ? (radius = typeof _ === "function" ? _ : (0, _constant.default)(+_), initialize(), force) : radius;
  };

  force.x = function (_) {
    return arguments.length ? (x = +_, force) : x;
  };

  force.y = function (_) {
    return arguments.length ? (y = +_, force) : y;
  };

  return force;
}
},{"./constant":"../node_modules/d3-force/src/constant.js"}],"../node_modules/d3-force/src/x.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constant = _interopRequireDefault(require("./constant"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(x) {
  var strength = (0, _constant.default)(0.1),
      nodes,
      strengths,
      xz;
  if (typeof x !== "function") x = (0, _constant.default)(x == null ? 0 : +x);

  function force(alpha) {
    for (var i = 0, n = nodes.length, node; i < n; ++i) {
      node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;
    }
  }

  function initialize() {
    if (!nodes) return;
    var i,
        n = nodes.length;
    strengths = new Array(n);
    xz = new Array(n);

    for (i = 0; i < n; ++i) {
      strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
    }
  }

  force.initialize = function (_) {
    nodes = _;
    initialize();
  };

  force.strength = function (_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : (0, _constant.default)(+_), initialize(), force) : strength;
  };

  force.x = function (_) {
    return arguments.length ? (x = typeof _ === "function" ? _ : (0, _constant.default)(+_), initialize(), force) : x;
  };

  return force;
}
},{"./constant":"../node_modules/d3-force/src/constant.js"}],"../node_modules/d3-force/src/y.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constant = _interopRequireDefault(require("./constant"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(y) {
  var strength = (0, _constant.default)(0.1),
      nodes,
      strengths,
      yz;
  if (typeof y !== "function") y = (0, _constant.default)(y == null ? 0 : +y);

  function force(alpha) {
    for (var i = 0, n = nodes.length, node; i < n; ++i) {
      node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;
    }
  }

  function initialize() {
    if (!nodes) return;
    var i,
        n = nodes.length;
    strengths = new Array(n);
    yz = new Array(n);

    for (i = 0; i < n; ++i) {
      strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
    }
  }

  force.initialize = function (_) {
    nodes = _;
    initialize();
  };

  force.strength = function (_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : (0, _constant.default)(+_), initialize(), force) : strength;
  };

  force.y = function (_) {
    return arguments.length ? (y = typeof _ === "function" ? _ : (0, _constant.default)(+_), initialize(), force) : y;
  };

  return force;
}
},{"./constant":"../node_modules/d3-force/src/constant.js"}],"../node_modules/d3-force/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "forceCenter", {
  enumerable: true,
  get: function () {
    return _center.default;
  }
});
Object.defineProperty(exports, "forceCollide", {
  enumerable: true,
  get: function () {
    return _collide.default;
  }
});
Object.defineProperty(exports, "forceLink", {
  enumerable: true,
  get: function () {
    return _link.default;
  }
});
Object.defineProperty(exports, "forceManyBody", {
  enumerable: true,
  get: function () {
    return _manyBody.default;
  }
});
Object.defineProperty(exports, "forceRadial", {
  enumerable: true,
  get: function () {
    return _radial.default;
  }
});
Object.defineProperty(exports, "forceSimulation", {
  enumerable: true,
  get: function () {
    return _simulation.default;
  }
});
Object.defineProperty(exports, "forceX", {
  enumerable: true,
  get: function () {
    return _x.default;
  }
});
Object.defineProperty(exports, "forceY", {
  enumerable: true,
  get: function () {
    return _y.default;
  }
});

var _center = _interopRequireDefault(require("./center"));

var _collide = _interopRequireDefault(require("./collide"));

var _link = _interopRequireDefault(require("./link"));

var _manyBody = _interopRequireDefault(require("./manyBody"));

var _radial = _interopRequireDefault(require("./radial"));

var _simulation = _interopRequireDefault(require("./simulation"));

var _x = _interopRequireDefault(require("./x"));

var _y = _interopRequireDefault(require("./y"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./center":"../node_modules/d3-force/src/center.js","./collide":"../node_modules/d3-force/src/collide.js","./link":"../node_modules/d3-force/src/link.js","./manyBody":"../node_modules/d3-force/src/manyBody.js","./radial":"../node_modules/d3-force/src/radial.js","./simulation":"../node_modules/d3-force/src/simulation.js","./x":"../node_modules/d3-force/src/x.js","./y":"../node_modules/d3-force/src/y.js"}],"../node_modules/d3-format/src/formatDecimal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

// Computes the decimal coefficient and exponent of the specified number x with
// significant digits p, where x is positive and p is in [1, 21] or undefined.
// For example, formatDecimal(1.23) returns ["123", 0].
function _default(x, p) {
  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity

  var i,
      coefficient = x.slice(0, i); // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
  // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).

  return [coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient, +x.slice(i + 1)];
}
},{}],"../node_modules/d3-format/src/exponent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _formatDecimal = _interopRequireDefault(require("./formatDecimal"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(x) {
  return x = (0, _formatDecimal.default)(Math.abs(x)), x ? x[1] : NaN;
}
},{"./formatDecimal":"../node_modules/d3-format/src/formatDecimal.js"}],"../node_modules/d3-format/src/formatGroup.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(grouping, thousands) {
  return function (value, width) {
    var i = value.length,
        t = [],
        j = 0,
        g = grouping[0],
        length = 0;

    while (i > 0 && g > 0) {
      if (length + g + 1 > width) g = Math.max(1, width - length);
      t.push(value.substring(i -= g, i + g));
      if ((length += g + 1) > width) break;
      g = grouping[j = (j + 1) % grouping.length];
    }

    return t.reverse().join(thousands);
  };
}
},{}],"../node_modules/d3-format/src/formatNumerals.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(numerals) {
  return function (value) {
    return value.replace(/[0-9]/g, function (i) {
      return numerals[+i];
    });
  };
}
},{}],"../node_modules/d3-format/src/formatSpecifier.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = formatSpecifier;
// [[fill]align][sign][symbol][0][width][,][.precision][~][type]
var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;

function formatSpecifier(specifier) {
  return new FormatSpecifier(specifier);
}

formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof

function FormatSpecifier(specifier) {
  if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
  var match;
  this.fill = match[1] || " ";
  this.align = match[2] || ">";
  this.sign = match[3] || "-";
  this.symbol = match[4] || "";
  this.zero = !!match[5];
  this.width = match[6] && +match[6];
  this.comma = !!match[7];
  this.precision = match[8] && +match[8].slice(1);
  this.trim = !!match[9];
  this.type = match[10] || "";
}

FormatSpecifier.prototype.toString = function () {
  return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width == null ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision == null ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
};
},{}],"../node_modules/d3-format/src/formatTrim.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
function _default(s) {
  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
    switch (s[i]) {
      case ".":
        i0 = i1 = i;
        break;

      case "0":
        if (i0 === 0) i0 = i;
        i1 = i;
        break;

      default:
        if (i0 > 0) {
          if (!+s[i]) break out;
          i0 = 0;
        }

        break;
    }
  }

  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
}
},{}],"../node_modules/d3-format/src/formatPrefixAuto.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.prefixExponent = void 0;

var _formatDecimal = _interopRequireDefault(require("./formatDecimal"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var prefixExponent;
exports.prefixExponent = prefixExponent;

function _default(x, p) {
  var d = (0, _formatDecimal.default)(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
      exponent = d[1],
      i = exponent - (exports.prefixExponent = prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
      n = coefficient.length;
  return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join("0") : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i) : "0." + new Array(1 - i).join("0") + (0, _formatDecimal.default)(x, Math.max(0, p + i - 1))[0]; // less than 1y!
}
},{"./formatDecimal":"../node_modules/d3-format/src/formatDecimal.js"}],"../node_modules/d3-format/src/formatRounded.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _formatDecimal = _interopRequireDefault(require("./formatDecimal"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(x, p) {
  var d = (0, _formatDecimal.default)(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
      exponent = d[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}
},{"./formatDecimal":"../node_modules/d3-format/src/formatDecimal.js"}],"../node_modules/d3-format/src/formatTypes.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _formatPrefixAuto = _interopRequireDefault(require("./formatPrefixAuto"));

var _formatRounded = _interopRequireDefault(require("./formatRounded"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = {
  "%": function (x, p) {
    return (x * 100).toFixed(p);
  },
  "b": function (x) {
    return Math.round(x).toString(2);
  },
  "c": function (x) {
    return x + "";
  },
  "d": function (x) {
    return Math.round(x).toString(10);
  },
  "e": function (x, p) {
    return x.toExponential(p);
  },
  "f": function (x, p) {
    return x.toFixed(p);
  },
  "g": function (x, p) {
    return x.toPrecision(p);
  },
  "o": function (x) {
    return Math.round(x).toString(8);
  },
  "p": function (x, p) {
    return (0, _formatRounded.default)(x * 100, p);
  },
  "r": _formatRounded.default,
  "s": _formatPrefixAuto.default,
  "X": function (x) {
    return Math.round(x).toString(16).toUpperCase();
  },
  "x": function (x) {
    return Math.round(x).toString(16);
  }
};
exports.default = _default;
},{"./formatPrefixAuto":"../node_modules/d3-format/src/formatPrefixAuto.js","./formatRounded":"../node_modules/d3-format/src/formatRounded.js"}],"../node_modules/d3-format/src/identity.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return x;
}
},{}],"../node_modules/d3-format/src/locale.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _exponent = _interopRequireDefault(require("./exponent"));

var _formatGroup = _interopRequireDefault(require("./formatGroup"));

var _formatNumerals = _interopRequireDefault(require("./formatNumerals"));

var _formatSpecifier = _interopRequireDefault(require("./formatSpecifier"));

var _formatTrim = _interopRequireDefault(require("./formatTrim"));

var _formatTypes = _interopRequireDefault(require("./formatTypes"));

var _formatPrefixAuto = require("./formatPrefixAuto");

var _identity = _interopRequireDefault(require("./identity"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var prefixes = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];

function _default(locale) {
  var group = locale.grouping && locale.thousands ? (0, _formatGroup.default)(locale.grouping, locale.thousands) : _identity.default,
      currency = locale.currency,
      decimal = locale.decimal,
      numerals = locale.numerals ? (0, _formatNumerals.default)(locale.numerals) : _identity.default,
      percent = locale.percent || "%";

  function newFormat(specifier) {
    specifier = (0, _formatSpecifier.default)(specifier);
    var fill = specifier.fill,
        align = specifier.align,
        sign = specifier.sign,
        symbol = specifier.symbol,
        zero = specifier.zero,
        width = specifier.width,
        comma = specifier.comma,
        precision = specifier.precision,
        trim = specifier.trim,
        type = specifier.type; // The "n" type is an alias for ",g".

    if (type === "n") comma = true, type = "g"; // The "" type, and any invalid type, is an alias for ".12~g".
    else if (!_formatTypes.default[type]) precision == null && (precision = 12), trim = true, type = "g"; // If zero fill is specified, padding goes after sign and before digits.

    if (zero || fill === "0" && align === "=") zero = true, fill = "0", align = "="; // Compute the prefix and suffix.
    // For SI-prefix, the suffix is lazily computed.

    var prefix = symbol === "$" ? currency[0] : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
        suffix = symbol === "$" ? currency[1] : /[%p]/.test(type) ? percent : ""; // What format function should we use?
    // Is this an integer type?
    // Can this type generate exponential notation?

    var formatType = _formatTypes.default[type],
        maybeSuffix = /[defgprs%]/.test(type); // Set the default precision if not specified,
    // or clamp the specified precision to the supported range.
    // For significant precision, it must be in [1, 21].
    // For fixed precision, it must be in [0, 20].

    precision = precision == null ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));

    function format(value) {
      var valuePrefix = prefix,
          valueSuffix = suffix,
          i,
          n,
          c;

      if (type === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value; // Perform the initial formatting.

        var valueNegative = value < 0;
        value = formatType(Math.abs(value), precision); // Trim insignificant zeros.

        if (trim) value = (0, _formatTrim.default)(value); // If a negative value rounds to zero during formatting, treat as positive.

        if (valueNegative && +value === 0) valueNegative = false; // Compute the prefix and suffix.

        valuePrefix = (valueNegative ? sign === "(" ? sign : "-" : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
        valueSuffix = (type === "s" ? prefixes[8 + _formatPrefixAuto.prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : ""); // Break the formatted value into the integer “value” part that can be
        // grouped, and fractional or exponential “suffix” part that is not.

        if (maybeSuffix) {
          i = -1, n = value.length;

          while (++i < n) {
            if (c = value.charCodeAt(i), 48 > c || c > 57) {
              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
              value = value.slice(0, i);
              break;
            }
          }
        }
      } // If the fill character is not "0", grouping is applied before padding.


      if (comma && !zero) value = group(value, Infinity); // Compute the padding.

      var length = valuePrefix.length + value.length + valueSuffix.length,
          padding = length < width ? new Array(width - length + 1).join(fill) : ""; // If the fill character is "0", grouping is applied after padding.

      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = ""; // Reconstruct the final output based on the desired alignment.

      switch (align) {
        case "<":
          value = valuePrefix + value + valueSuffix + padding;
          break;

        case "=":
          value = valuePrefix + padding + value + valueSuffix;
          break;

        case "^":
          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
          break;

        default:
          value = padding + valuePrefix + value + valueSuffix;
          break;
      }

      return numerals(value);
    }

    format.toString = function () {
      return specifier + "";
    };

    return format;
  }

  function formatPrefix(specifier, value) {
    var f = newFormat((specifier = (0, _formatSpecifier.default)(specifier), specifier.type = "f", specifier)),
        e = Math.max(-8, Math.min(8, Math.floor((0, _exponent.default)(value) / 3))) * 3,
        k = Math.pow(10, -e),
        prefix = prefixes[8 + e / 3];
    return function (value) {
      return f(k * value) + prefix;
    };
  }

  return {
    format: newFormat,
    formatPrefix: formatPrefix
  };
}
},{"./exponent":"../node_modules/d3-format/src/exponent.js","./formatGroup":"../node_modules/d3-format/src/formatGroup.js","./formatNumerals":"../node_modules/d3-format/src/formatNumerals.js","./formatSpecifier":"../node_modules/d3-format/src/formatSpecifier.js","./formatTrim":"../node_modules/d3-format/src/formatTrim.js","./formatTypes":"../node_modules/d3-format/src/formatTypes.js","./formatPrefixAuto":"../node_modules/d3-format/src/formatPrefixAuto.js","./identity":"../node_modules/d3-format/src/identity.js"}],"../node_modules/d3-format/src/defaultLocale.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = defaultLocale;
exports.formatPrefix = exports.format = void 0;

var _locale = _interopRequireDefault(require("./locale"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var locale;
var format;
exports.format = format;
var formatPrefix;
exports.formatPrefix = formatPrefix;
defaultLocale({
  decimal: ".",
  thousands: ",",
  grouping: [3],
  currency: ["$", ""]
});

function defaultLocale(definition) {
  locale = (0, _locale.default)(definition);
  exports.format = format = locale.format;
  exports.formatPrefix = formatPrefix = locale.formatPrefix;
  return locale;
}
},{"./locale":"../node_modules/d3-format/src/locale.js"}],"../node_modules/d3-format/src/precisionFixed.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _exponent = _interopRequireDefault(require("./exponent"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(step) {
  return Math.max(0, -(0, _exponent.default)(Math.abs(step)));
}
},{"./exponent":"../node_modules/d3-format/src/exponent.js"}],"../node_modules/d3-format/src/precisionPrefix.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _exponent = _interopRequireDefault(require("./exponent"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(step, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor((0, _exponent.default)(value) / 3))) * 3 - (0, _exponent.default)(Math.abs(step)));
}
},{"./exponent":"../node_modules/d3-format/src/exponent.js"}],"../node_modules/d3-format/src/precisionRound.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _exponent = _interopRequireDefault(require("./exponent"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(step, max) {
  step = Math.abs(step), max = Math.abs(max) - step;
  return Math.max(0, (0, _exponent.default)(max) - (0, _exponent.default)(step)) + 1;
}
},{"./exponent":"../node_modules/d3-format/src/exponent.js"}],"../node_modules/d3-format/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "formatDefaultLocale", {
  enumerable: true,
  get: function () {
    return _defaultLocale.default;
  }
});
Object.defineProperty(exports, "format", {
  enumerable: true,
  get: function () {
    return _defaultLocale.format;
  }
});
Object.defineProperty(exports, "formatPrefix", {
  enumerable: true,
  get: function () {
    return _defaultLocale.formatPrefix;
  }
});
Object.defineProperty(exports, "formatLocale", {
  enumerable: true,
  get: function () {
    return _locale.default;
  }
});
Object.defineProperty(exports, "formatSpecifier", {
  enumerable: true,
  get: function () {
    return _formatSpecifier.default;
  }
});
Object.defineProperty(exports, "precisionFixed", {
  enumerable: true,
  get: function () {
    return _precisionFixed.default;
  }
});
Object.defineProperty(exports, "precisionPrefix", {
  enumerable: true,
  get: function () {
    return _precisionPrefix.default;
  }
});
Object.defineProperty(exports, "precisionRound", {
  enumerable: true,
  get: function () {
    return _precisionRound.default;
  }
});

var _defaultLocale = _interopRequireWildcard(require("./defaultLocale"));

var _locale = _interopRequireDefault(require("./locale"));

var _formatSpecifier = _interopRequireDefault(require("./formatSpecifier"));

var _precisionFixed = _interopRequireDefault(require("./precisionFixed"));

var _precisionPrefix = _interopRequireDefault(require("./precisionPrefix"));

var _precisionRound = _interopRequireDefault(require("./precisionRound"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }
},{"./defaultLocale":"../node_modules/d3-format/src/defaultLocale.js","./locale":"../node_modules/d3-format/src/locale.js","./formatSpecifier":"../node_modules/d3-format/src/formatSpecifier.js","./precisionFixed":"../node_modules/d3-format/src/precisionFixed.js","./precisionPrefix":"../node_modules/d3-format/src/precisionPrefix.js","./precisionRound":"../node_modules/d3-format/src/precisionRound.js"}],"../node_modules/d3-geo/src/adder.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

// Adds floating point numbers with twice the normal precision.
// Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and
// Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)
// 305–363 (1997).
// Code adapted from GeographicLib by Charles F. F. Karney,
// http://geographiclib.sourceforge.net/
function _default() {
  return new Adder();
}

function Adder() {
  this.reset();
}

Adder.prototype = {
  constructor: Adder,
  reset: function () {
    this.s = // rounded value
    this.t = 0; // exact error
  },
  add: function (y) {
    add(temp, y, this.t);
    add(this, temp.s, this.s);
    if (this.s) this.t += temp.t;else this.s = temp.t;
  },
  valueOf: function () {
    return this.s;
  }
};
var temp = new Adder();

function add(adder, a, b) {
  var x = adder.s = a + b,
      bv = x - a,
      av = x - bv;
  adder.t = a - av + (b - bv);
}
},{}],"../node_modules/d3-geo/src/math.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.acos = acos;
exports.asin = asin;
exports.haversin = haversin;
exports.tan = exports.sqrt = exports.sign = exports.sin = exports.pow = exports.log = exports.floor = exports.exp = exports.ceil = exports.cos = exports.atan2 = exports.atan = exports.abs = exports.radians = exports.degrees = exports.tau = exports.quarterPi = exports.halfPi = exports.pi = exports.epsilon2 = exports.epsilon = void 0;
var epsilon = 1e-6;
exports.epsilon = epsilon;
var epsilon2 = 1e-12;
exports.epsilon2 = epsilon2;
var pi = Math.PI;
exports.pi = pi;
var halfPi = pi / 2;
exports.halfPi = halfPi;
var quarterPi = pi / 4;
exports.quarterPi = quarterPi;
var tau = pi * 2;
exports.tau = tau;
var degrees = 180 / pi;
exports.degrees = degrees;
var radians = pi / 180;
exports.radians = radians;
var abs = Math.abs;
exports.abs = abs;
var atan = Math.atan;
exports.atan = atan;
var atan2 = Math.atan2;
exports.atan2 = atan2;
var cos = Math.cos;
exports.cos = cos;
var ceil = Math.ceil;
exports.ceil = ceil;
var exp = Math.exp;
exports.exp = exp;
var floor = Math.floor;
exports.floor = floor;
var log = Math.log;
exports.log = log;
var pow = Math.pow;
exports.pow = pow;
var sin = Math.sin;
exports.sin = sin;

var sign = Math.sign || function (x) {
  return x > 0 ? 1 : x < 0 ? -1 : 0;
};

exports.sign = sign;
var sqrt = Math.sqrt;
exports.sqrt = sqrt;
var tan = Math.tan;
exports.tan = tan;

function acos(x) {
  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
}

function asin(x) {
  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);
}

function haversin(x) {
  return (x = sin(x / 2)) * x;
}
},{}],"../node_modules/d3-geo/src/noop.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = noop;

function noop() {}
},{}],"../node_modules/d3-geo/src/stream.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function streamGeometry(geometry, stream) {
  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
    streamGeometryType[geometry.type](geometry, stream);
  }
}

var streamObjectType = {
  Feature: function (object, stream) {
    streamGeometry(object.geometry, stream);
  },
  FeatureCollection: function (object, stream) {
    var features = object.features,
        i = -1,
        n = features.length;

    while (++i < n) streamGeometry(features[i].geometry, stream);
  }
};
var streamGeometryType = {
  Sphere: function (object, stream) {
    stream.sphere();
  },
  Point: function (object, stream) {
    object = object.coordinates;
    stream.point(object[0], object[1], object[2]);
  },
  MultiPoint: function (object, stream) {
    var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;

    while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);
  },
  LineString: function (object, stream) {
    streamLine(object.coordinates, stream, 0);
  },
  MultiLineString: function (object, stream) {
    var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;

    while (++i < n) streamLine(coordinates[i], stream, 0);
  },
  Polygon: function (object, stream) {
    streamPolygon(object.coordinates, stream);
  },
  MultiPolygon: function (object, stream) {
    var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;

    while (++i < n) streamPolygon(coordinates[i], stream);
  },
  GeometryCollection: function (object, stream) {
    var geometries = object.geometries,
        i = -1,
        n = geometries.length;

    while (++i < n) streamGeometry(geometries[i], stream);
  }
};

function streamLine(coordinates, stream, closed) {
  var i = -1,
      n = coordinates.length - closed,
      coordinate;
  stream.lineStart();

  while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);

  stream.lineEnd();
}

function streamPolygon(coordinates, stream) {
  var i = -1,
      n = coordinates.length;
  stream.polygonStart();

  while (++i < n) streamLine(coordinates[i], stream, 1);

  stream.polygonEnd();
}

function _default(object, stream) {
  if (object && streamObjectType.hasOwnProperty(object.type)) {
    streamObjectType[object.type](object, stream);
  } else {
    streamGeometry(object, stream);
  }
}
},{}],"../node_modules/d3-geo/src/area.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.areaStream = exports.areaRingSum = void 0;

var _adder = _interopRequireDefault(require("./adder"));

var _math = require("./math");

var _noop = _interopRequireDefault(require("./noop"));

var _stream = _interopRequireDefault(require("./stream"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var areaRingSum = (0, _adder.default)();
exports.areaRingSum = areaRingSum;
var areaSum = (0, _adder.default)(),
    lambda00,
    phi00,
    lambda0,
    cosPhi0,
    sinPhi0;
var areaStream = {
  point: _noop.default,
  lineStart: _noop.default,
  lineEnd: _noop.default,
  polygonStart: function () {
    areaRingSum.reset();
    areaStream.lineStart = areaRingStart;
    areaStream.lineEnd = areaRingEnd;
  },
  polygonEnd: function () {
    var areaRing = +areaRingSum;
    areaSum.add(areaRing < 0 ? _math.tau + areaRing : areaRing);
    this.lineStart = this.lineEnd = this.point = _noop.default;
  },
  sphere: function () {
    areaSum.add(_math.tau);
  }
};
exports.areaStream = areaStream;

function areaRingStart() {
  areaStream.point = areaPointFirst;
}

function areaRingEnd() {
  areaPoint(lambda00, phi00);
}

function areaPointFirst(lambda, phi) {
  areaStream.point = areaPoint;
  lambda00 = lambda, phi00 = phi;
  lambda *= _math.radians, phi *= _math.radians;
  lambda0 = lambda, cosPhi0 = (0, _math.cos)(phi = phi / 2 + _math.quarterPi), sinPhi0 = (0, _math.sin)(phi);
}

function areaPoint(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  phi = phi / 2 + _math.quarterPi; // half the angular distance from south pole
  // Spherical excess E for a spherical triangle with vertices: south pole,
  // previous point, current point.  Uses a formula derived from Cagnoli’s
  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).

  var dLambda = lambda - lambda0,
      sdLambda = dLambda >= 0 ? 1 : -1,
      adLambda = sdLambda * dLambda,
      cosPhi = (0, _math.cos)(phi),
      sinPhi = (0, _math.sin)(phi),
      k = sinPhi0 * sinPhi,
      u = cosPhi0 * cosPhi + k * (0, _math.cos)(adLambda),
      v = k * sdLambda * (0, _math.sin)(adLambda);
  areaRingSum.add((0, _math.atan2)(v, u)); // Advance the previous points.

  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;
}

function _default(object) {
  areaSum.reset();
  (0, _stream.default)(object, areaStream);
  return areaSum * 2;
}
},{"./adder":"../node_modules/d3-geo/src/adder.js","./math":"../node_modules/d3-geo/src/math.js","./noop":"../node_modules/d3-geo/src/noop.js","./stream":"../node_modules/d3-geo/src/stream.js"}],"../node_modules/d3-geo/src/cartesian.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.spherical = spherical;
exports.cartesian = cartesian;
exports.cartesianDot = cartesianDot;
exports.cartesianCross = cartesianCross;
exports.cartesianAddInPlace = cartesianAddInPlace;
exports.cartesianScale = cartesianScale;
exports.cartesianNormalizeInPlace = cartesianNormalizeInPlace;

var _math = require("./math");

function spherical(cartesian) {
  return [(0, _math.atan2)(cartesian[1], cartesian[0]), (0, _math.asin)(cartesian[2])];
}

function cartesian(spherical) {
  var lambda = spherical[0],
      phi = spherical[1],
      cosPhi = (0, _math.cos)(phi);
  return [cosPhi * (0, _math.cos)(lambda), cosPhi * (0, _math.sin)(lambda), (0, _math.sin)(phi)];
}

function cartesianDot(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}

function cartesianCross(a, b) {
  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
} // TODO return a


function cartesianAddInPlace(a, b) {
  a[0] += b[0], a[1] += b[1], a[2] += b[2];
}

function cartesianScale(vector, k) {
  return [vector[0] * k, vector[1] * k, vector[2] * k];
} // TODO return d


function cartesianNormalizeInPlace(d) {
  var l = (0, _math.sqrt)(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
  d[0] /= l, d[1] /= l, d[2] /= l;
}
},{"./math":"../node_modules/d3-geo/src/math.js"}],"../node_modules/d3-geo/src/bounds.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _adder = _interopRequireDefault(require("./adder"));

var _area = require("./area");

var _cartesian = require("./cartesian");

var _math = require("./math");

var _stream = _interopRequireDefault(require("./stream"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var lambda0,
    phi0,
    lambda1,
    phi1,
    // bounds
lambda2,
    // previous lambda-coordinate
lambda00,
    phi00,
    // first point
p0,
    // previous 3D point
deltaSum = (0, _adder.default)(),
    ranges,
    range;
var boundsStream = {
  point: boundsPoint,
  lineStart: boundsLineStart,
  lineEnd: boundsLineEnd,
  polygonStart: function () {
    boundsStream.point = boundsRingPoint;
    boundsStream.lineStart = boundsRingStart;
    boundsStream.lineEnd = boundsRingEnd;
    deltaSum.reset();

    _area.areaStream.polygonStart();
  },
  polygonEnd: function () {
    _area.areaStream.polygonEnd();

    boundsStream.point = boundsPoint;
    boundsStream.lineStart = boundsLineStart;
    boundsStream.lineEnd = boundsLineEnd;
    if (_area.areaRingSum < 0) lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);else if (deltaSum > _math.epsilon) phi1 = 90;else if (deltaSum < -_math.epsilon) phi0 = -90;
    range[0] = lambda0, range[1] = lambda1;
  },
  sphere: function () {
    lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);
  }
};

function boundsPoint(lambda, phi) {
  ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);
  if (phi < phi0) phi0 = phi;
  if (phi > phi1) phi1 = phi;
}

function linePoint(lambda, phi) {
  var p = (0, _cartesian.cartesian)([lambda * _math.radians, phi * _math.radians]);

  if (p0) {
    var normal = (0, _cartesian.cartesianCross)(p0, p),
        equatorial = [normal[1], -normal[0], 0],
        inflection = (0, _cartesian.cartesianCross)(equatorial, normal);
    (0, _cartesian.cartesianNormalizeInPlace)(inflection);
    inflection = (0, _cartesian.spherical)(inflection);
    var delta = lambda - lambda2,
        sign = delta > 0 ? 1 : -1,
        lambdai = inflection[0] * _math.degrees * sign,
        phii,
        antimeridian = (0, _math.abs)(delta) > 180;

    if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {
      phii = inflection[1] * _math.degrees;
      if (phii > phi1) phi1 = phii;
    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {
      phii = -inflection[1] * _math.degrees;
      if (phii < phi0) phi0 = phii;
    } else {
      if (phi < phi0) phi0 = phi;
      if (phi > phi1) phi1 = phi;
    }

    if (antimeridian) {
      if (lambda < lambda2) {
        if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;
      } else {
        if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;
      }
    } else {
      if (lambda1 >= lambda0) {
        if (lambda < lambda0) lambda0 = lambda;
        if (lambda > lambda1) lambda1 = lambda;
      } else {
        if (lambda > lambda2) {
          if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;
        } else {
          if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;
        }
      }
    }
  } else {
    ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);
  }

  if (phi < phi0) phi0 = phi;
  if (phi > phi1) phi1 = phi;
  p0 = p, lambda2 = lambda;
}

function boundsLineStart() {
  boundsStream.point = linePoint;
}

function boundsLineEnd() {
  range[0] = lambda0, range[1] = lambda1;
  boundsStream.point = boundsPoint;
  p0 = null;
}

function boundsRingPoint(lambda, phi) {
  if (p0) {
    var delta = lambda - lambda2;
    deltaSum.add((0, _math.abs)(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);
  } else {
    lambda00 = lambda, phi00 = phi;
  }

  _area.areaStream.point(lambda, phi);

  linePoint(lambda, phi);
}

function boundsRingStart() {
  _area.areaStream.lineStart();
}

function boundsRingEnd() {
  boundsRingPoint(lambda00, phi00);

  _area.areaStream.lineEnd();

  if ((0, _math.abs)(deltaSum) > _math.epsilon) lambda0 = -(lambda1 = 180);
  range[0] = lambda0, range[1] = lambda1;
  p0 = null;
} // Finds the left-right distance between two longitudes.
// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want
// the distance between ±180° to be 360°.


function angle(lambda0, lambda1) {
  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;
}

function rangeCompare(a, b) {
  return a[0] - b[0];
}

function rangeContains(range, x) {
  return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
}

function _default(feature) {
  var i, n, a, b, merged, deltaMax, delta;
  phi1 = lambda1 = -(lambda0 = phi0 = Infinity);
  ranges = [];
  (0, _stream.default)(feature, boundsStream); // First, sort ranges by their minimum longitudes.

  if (n = ranges.length) {
    ranges.sort(rangeCompare); // Then, merge any ranges that overlap.

    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {
      b = ranges[i];

      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {
        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
      } else {
        merged.push(a = b);
      }
    } // Finally, find the largest gap between the merged ranges.
    // The final bounding box will be the inverse of this gap.


    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {
      b = merged[i];
      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0 = b[0], lambda1 = a[1];
    }
  }

  ranges = range = null;
  return lambda0 === Infinity || phi0 === Infinity ? [[NaN, NaN], [NaN, NaN]] : [[lambda0, phi0], [lambda1, phi1]];
}
},{"./adder":"../node_modules/d3-geo/src/adder.js","./area":"../node_modules/d3-geo/src/area.js","./cartesian":"../node_modules/d3-geo/src/cartesian.js","./math":"../node_modules/d3-geo/src/math.js","./stream":"../node_modules/d3-geo/src/stream.js"}],"../node_modules/d3-geo/src/centroid.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _math = require("./math");

var _noop = _interopRequireDefault(require("./noop"));

var _stream = _interopRequireDefault(require("./stream"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var W0, W1, X0, Y0, Z0, X1, Y1, Z1, X2, Y2, Z2, lambda00, phi00, // first point
x0, y0, z0; // previous point

var centroidStream = {
  sphere: _noop.default,
  point: centroidPoint,
  lineStart: centroidLineStart,
  lineEnd: centroidLineEnd,
  polygonStart: function () {
    centroidStream.lineStart = centroidRingStart;
    centroidStream.lineEnd = centroidRingEnd;
  },
  polygonEnd: function () {
    centroidStream.lineStart = centroidLineStart;
    centroidStream.lineEnd = centroidLineEnd;
  }
}; // Arithmetic mean of Cartesian vectors.

function centroidPoint(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  var cosPhi = (0, _math.cos)(phi);
  centroidPointCartesian(cosPhi * (0, _math.cos)(lambda), cosPhi * (0, _math.sin)(lambda), (0, _math.sin)(phi));
}

function centroidPointCartesian(x, y, z) {
  ++W0;
  X0 += (x - X0) / W0;
  Y0 += (y - Y0) / W0;
  Z0 += (z - Z0) / W0;
}

function centroidLineStart() {
  centroidStream.point = centroidLinePointFirst;
}

function centroidLinePointFirst(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  var cosPhi = (0, _math.cos)(phi);
  x0 = cosPhi * (0, _math.cos)(lambda);
  y0 = cosPhi * (0, _math.sin)(lambda);
  z0 = (0, _math.sin)(phi);
  centroidStream.point = centroidLinePoint;
  centroidPointCartesian(x0, y0, z0);
}

function centroidLinePoint(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  var cosPhi = (0, _math.cos)(phi),
      x = cosPhi * (0, _math.cos)(lambda),
      y = cosPhi * (0, _math.sin)(lambda),
      z = (0, _math.sin)(phi),
      w = (0, _math.atan2)((0, _math.sqrt)((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
  W1 += w;
  X1 += w * (x0 + (x0 = x));
  Y1 += w * (y0 + (y0 = y));
  Z1 += w * (z0 + (z0 = z));
  centroidPointCartesian(x0, y0, z0);
}

function centroidLineEnd() {
  centroidStream.point = centroidPoint;
} // See J. E. Brock, The Inertia Tensor for a Spherical Triangle,
// J. Applied Mechanics 42, 239 (1975).


function centroidRingStart() {
  centroidStream.point = centroidRingPointFirst;
}

function centroidRingEnd() {
  centroidRingPoint(lambda00, phi00);
  centroidStream.point = centroidPoint;
}

function centroidRingPointFirst(lambda, phi) {
  lambda00 = lambda, phi00 = phi;
  lambda *= _math.radians, phi *= _math.radians;
  centroidStream.point = centroidRingPoint;
  var cosPhi = (0, _math.cos)(phi);
  x0 = cosPhi * (0, _math.cos)(lambda);
  y0 = cosPhi * (0, _math.sin)(lambda);
  z0 = (0, _math.sin)(phi);
  centroidPointCartesian(x0, y0, z0);
}

function centroidRingPoint(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  var cosPhi = (0, _math.cos)(phi),
      x = cosPhi * (0, _math.cos)(lambda),
      y = cosPhi * (0, _math.sin)(lambda),
      z = (0, _math.sin)(phi),
      cx = y0 * z - z0 * y,
      cy = z0 * x - x0 * z,
      cz = x0 * y - y0 * x,
      m = (0, _math.sqrt)(cx * cx + cy * cy + cz * cz),
      w = (0, _math.asin)(m),
      // line weight = angle
  v = m && -w / m; // area weight multiplier

  X2 += v * cx;
  Y2 += v * cy;
  Z2 += v * cz;
  W1 += w;
  X1 += w * (x0 + (x0 = x));
  Y1 += w * (y0 + (y0 = y));
  Z1 += w * (z0 + (z0 = z));
  centroidPointCartesian(x0, y0, z0);
}

function _default(object) {
  W0 = W1 = X0 = Y0 = Z0 = X1 = Y1 = Z1 = X2 = Y2 = Z2 = 0;
  (0, _stream.default)(object, centroidStream);
  var x = X2,
      y = Y2,
      z = Z2,
      m = x * x + y * y + z * z; // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.

  if (m < _math.epsilon2) {
    x = X1, y = Y1, z = Z1; // If the feature has zero length, fall back to arithmetic mean of point vectors.

    if (W1 < _math.epsilon) x = X0, y = Y0, z = Z0;
    m = x * x + y * y + z * z; // If the feature still has an undefined ccentroid, then return.

    if (m < _math.epsilon2) return [NaN, NaN];
  }

  return [(0, _math.atan2)(y, x) * _math.degrees, (0, _math.asin)(z / (0, _math.sqrt)(m)) * _math.degrees];
}
},{"./math":"../node_modules/d3-geo/src/math.js","./noop":"../node_modules/d3-geo/src/noop.js","./stream":"../node_modules/d3-geo/src/stream.js"}],"../node_modules/d3-geo/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"../node_modules/d3-geo/src/compose.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  function compose(x, y) {
    return x = a(x, y), b(x[0], x[1]);
  }

  if (a.invert && b.invert) compose.invert = function (x, y) {
    return x = b.invert(x, y), x && a.invert(x[0], x[1]);
  };
  return compose;
}
},{}],"../node_modules/d3-geo/src/rotation.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rotateRadians = rotateRadians;
exports.default = _default;

var _compose = _interopRequireDefault(require("./compose"));

var _math = require("./math");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function rotationIdentity(lambda, phi) {
  return [(0, _math.abs)(lambda) > _math.pi ? lambda + Math.round(-lambda / _math.tau) * _math.tau : lambda, phi];
}

rotationIdentity.invert = rotationIdentity;

function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
  return (deltaLambda %= _math.tau) ? deltaPhi || deltaGamma ? (0, _compose.default)(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma)) : rotationLambda(deltaLambda) : deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma) : rotationIdentity;
}

function forwardRotationLambda(deltaLambda) {
  return function (lambda, phi) {
    return lambda += deltaLambda, [lambda > _math.pi ? lambda - _math.tau : lambda < -_math.pi ? lambda + _math.tau : lambda, phi];
  };
}

function rotationLambda(deltaLambda) {
  var rotation = forwardRotationLambda(deltaLambda);
  rotation.invert = forwardRotationLambda(-deltaLambda);
  return rotation;
}

function rotationPhiGamma(deltaPhi, deltaGamma) {
  var cosDeltaPhi = (0, _math.cos)(deltaPhi),
      sinDeltaPhi = (0, _math.sin)(deltaPhi),
      cosDeltaGamma = (0, _math.cos)(deltaGamma),
      sinDeltaGamma = (0, _math.sin)(deltaGamma);

  function rotation(lambda, phi) {
    var cosPhi = (0, _math.cos)(phi),
        x = (0, _math.cos)(lambda) * cosPhi,
        y = (0, _math.sin)(lambda) * cosPhi,
        z = (0, _math.sin)(phi),
        k = z * cosDeltaPhi + x * sinDeltaPhi;
    return [(0, _math.atan2)(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi), (0, _math.asin)(k * cosDeltaGamma + y * sinDeltaGamma)];
  }

  rotation.invert = function (lambda, phi) {
    var cosPhi = (0, _math.cos)(phi),
        x = (0, _math.cos)(lambda) * cosPhi,
        y = (0, _math.sin)(lambda) * cosPhi,
        z = (0, _math.sin)(phi),
        k = z * cosDeltaGamma - y * sinDeltaGamma;
    return [(0, _math.atan2)(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi), (0, _math.asin)(k * cosDeltaPhi - x * sinDeltaPhi)];
  };

  return rotation;
}

function _default(rotate) {
  rotate = rotateRadians(rotate[0] * _math.radians, rotate[1] * _math.radians, rotate.length > 2 ? rotate[2] * _math.radians : 0);

  function forward(coordinates) {
    coordinates = rotate(coordinates[0] * _math.radians, coordinates[1] * _math.radians);
    return coordinates[0] *= _math.degrees, coordinates[1] *= _math.degrees, coordinates;
  }

  forward.invert = function (coordinates) {
    coordinates = rotate.invert(coordinates[0] * _math.radians, coordinates[1] * _math.radians);
    return coordinates[0] *= _math.degrees, coordinates[1] *= _math.degrees, coordinates;
  };

  return forward;
}
},{"./compose":"../node_modules/d3-geo/src/compose.js","./math":"../node_modules/d3-geo/src/math.js"}],"../node_modules/d3-geo/src/circle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.circleStream = circleStream;
exports.default = _default;

var _cartesian = require("./cartesian");

var _constant = _interopRequireDefault(require("./constant"));

var _math = require("./math");

var _rotation = require("./rotation");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Generates a circle centered at [0°, 0°], with a given radius and precision.
function circleStream(stream, radius, delta, direction, t0, t1) {
  if (!delta) return;
  var cosRadius = (0, _math.cos)(radius),
      sinRadius = (0, _math.sin)(radius),
      step = direction * delta;

  if (t0 == null) {
    t0 = radius + direction * _math.tau;
    t1 = radius - step / 2;
  } else {
    t0 = circleRadius(cosRadius, t0);
    t1 = circleRadius(cosRadius, t1);
    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * _math.tau;
  }

  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {
    point = (0, _cartesian.spherical)([cosRadius, -sinRadius * (0, _math.cos)(t), -sinRadius * (0, _math.sin)(t)]);
    stream.point(point[0], point[1]);
  }
} // Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].


function circleRadius(cosRadius, point) {
  point = (0, _cartesian.cartesian)(point), point[0] -= cosRadius;
  (0, _cartesian.cartesianNormalizeInPlace)(point);
  var radius = (0, _math.acos)(-point[1]);
  return ((-point[2] < 0 ? -radius : radius) + _math.tau - _math.epsilon) % _math.tau;
}

function _default() {
  var center = (0, _constant.default)([0, 0]),
      radius = (0, _constant.default)(90),
      precision = (0, _constant.default)(6),
      ring,
      rotate,
      stream = {
    point: point
  };

  function point(x, y) {
    ring.push(x = rotate(x, y));
    x[0] *= _math.degrees, x[1] *= _math.degrees;
  }

  function circle() {
    var c = center.apply(this, arguments),
        r = radius.apply(this, arguments) * _math.radians,
        p = precision.apply(this, arguments) * _math.radians;

    ring = [];
    rotate = (0, _rotation.rotateRadians)(-c[0] * _math.radians, -c[1] * _math.radians, 0).invert;
    circleStream(stream, r, p, 1);
    c = {
      type: "Polygon",
      coordinates: [ring]
    };
    ring = rotate = null;
    return c;
  }

  circle.center = function (_) {
    return arguments.length ? (center = typeof _ === "function" ? _ : (0, _constant.default)([+_[0], +_[1]]), circle) : center;
  };

  circle.radius = function (_) {
    return arguments.length ? (radius = typeof _ === "function" ? _ : (0, _constant.default)(+_), circle) : radius;
  };

  circle.precision = function (_) {
    return arguments.length ? (precision = typeof _ === "function" ? _ : (0, _constant.default)(+_), circle) : precision;
  };

  return circle;
}
},{"./cartesian":"../node_modules/d3-geo/src/cartesian.js","./constant":"../node_modules/d3-geo/src/constant.js","./math":"../node_modules/d3-geo/src/math.js","./rotation":"../node_modules/d3-geo/src/rotation.js"}],"../node_modules/d3-geo/src/clip/buffer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _noop = _interopRequireDefault(require("../noop"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var lines = [],
      line;
  return {
    point: function (x, y) {
      line.push([x, y]);
    },
    lineStart: function () {
      lines.push(line = []);
    },
    lineEnd: _noop.default,
    rejoin: function () {
      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
    },
    result: function () {
      var result = lines;
      lines = [];
      line = null;
      return result;
    }
  };
}
},{"../noop":"../node_modules/d3-geo/src/noop.js"}],"../node_modules/d3-geo/src/pointEqual.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _math = require("./math");

function _default(a, b) {
  return (0, _math.abs)(a[0] - b[0]) < _math.epsilon && (0, _math.abs)(a[1] - b[1]) < _math.epsilon;
}
},{"./math":"../node_modules/d3-geo/src/math.js"}],"../node_modules/d3-geo/src/clip/rejoin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _pointEqual = _interopRequireDefault(require("../pointEqual"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function Intersection(point, points, other, entry) {
  this.x = point;
  this.z = points;
  this.o = other; // another intersection

  this.e = entry; // is an entry?

  this.v = false; // visited

  this.n = this.p = null; // next & previous
} // A generalized polygon clipping algorithm: given a polygon that has been cut
// into its visible line segments, and rejoins the segments by interpolating
// along the clip edge.


function _default(segments, compareIntersection, startInside, interpolate, stream) {
  var subject = [],
      clip = [],
      i,
      n;
  segments.forEach(function (segment) {
    if ((n = segment.length - 1) <= 0) return;
    var n,
        p0 = segment[0],
        p1 = segment[n],
        x; // If the first and last points of a segment are coincident, then treat as a
    // closed ring. TODO if all rings are closed, then the winding order of the
    // exterior ring should be checked.

    if ((0, _pointEqual.default)(p0, p1)) {
      stream.lineStart();

      for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);

      stream.lineEnd();
      return;
    }

    subject.push(x = new Intersection(p0, segment, null, true));
    clip.push(x.o = new Intersection(p0, null, x, false));
    subject.push(x = new Intersection(p1, segment, null, false));
    clip.push(x.o = new Intersection(p1, null, x, true));
  });
  if (!subject.length) return;
  clip.sort(compareIntersection);
  link(subject);
  link(clip);

  for (i = 0, n = clip.length; i < n; ++i) {
    clip[i].e = startInside = !startInside;
  }

  var start = subject[0],
      points,
      point;

  while (1) {
    // Find first unvisited intersection.
    var current = start,
        isSubject = true;

    while (current.v) if ((current = current.n) === start) return;

    points = current.z;
    stream.lineStart();

    do {
      current.v = current.o.v = true;

      if (current.e) {
        if (isSubject) {
          for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);
        } else {
          interpolate(current.x, current.n.x, 1, stream);
        }

        current = current.n;
      } else {
        if (isSubject) {
          points = current.p.z;

          for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);
        } else {
          interpolate(current.x, current.p.x, -1, stream);
        }

        current = current.p;
      }

      current = current.o;
      points = current.z;
      isSubject = !isSubject;
    } while (!current.v);

    stream.lineEnd();
  }
}

function link(array) {
  if (!(n = array.length)) return;
  var n,
      i = 0,
      a = array[0],
      b;

  while (++i < n) {
    a.n = b = array[i];
    b.p = a;
    a = b;
  }

  a.n = b = array[0];
  b.p = a;
}
},{"../pointEqual":"../node_modules/d3-geo/src/pointEqual.js"}],"../node_modules/d3-geo/src/polygonContains.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _adder = _interopRequireDefault(require("./adder"));

var _cartesian = require("./cartesian");

var _math = require("./math");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var sum = (0, _adder.default)();

function longitude(point) {
  if ((0, _math.abs)(point[0]) <= _math.pi) return point[0];else return (0, _math.sign)(point[0]) * (((0, _math.abs)(point[0]) + _math.pi) % _math.tau - _math.pi);
}

function _default(polygon, point) {
  var lambda = longitude(point),
      phi = point[1],
      sinPhi = (0, _math.sin)(phi),
      normal = [(0, _math.sin)(lambda), -(0, _math.cos)(lambda), 0],
      angle = 0,
      winding = 0;
  sum.reset();
  if (sinPhi === 1) phi = _math.halfPi + _math.epsilon;else if (sinPhi === -1) phi = -_math.halfPi - _math.epsilon;

  for (var i = 0, n = polygon.length; i < n; ++i) {
    if (!(m = (ring = polygon[i]).length)) continue;
    var ring,
        m,
        point0 = ring[m - 1],
        lambda0 = longitude(point0),
        phi0 = point0[1] / 2 + _math.quarterPi,
        sinPhi0 = (0, _math.sin)(phi0),
        cosPhi0 = (0, _math.cos)(phi0);

    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {
      var point1 = ring[j],
          lambda1 = longitude(point1),
          phi1 = point1[1] / 2 + _math.quarterPi,
          sinPhi1 = (0, _math.sin)(phi1),
          cosPhi1 = (0, _math.cos)(phi1),
          delta = lambda1 - lambda0,
          sign = delta >= 0 ? 1 : -1,
          absDelta = sign * delta,
          antimeridian = absDelta > _math.pi,
          k = sinPhi0 * sinPhi1;
      sum.add((0, _math.atan2)(k * sign * (0, _math.sin)(absDelta), cosPhi0 * cosPhi1 + k * (0, _math.cos)(absDelta)));
      angle += antimeridian ? delta + sign * _math.tau : delta; // Are the longitudes either side of the point’s meridian (lambda),
      // and are the latitudes smaller than the parallel (phi)?

      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {
        var arc = (0, _cartesian.cartesianCross)((0, _cartesian.cartesian)(point0), (0, _cartesian.cartesian)(point1));
        (0, _cartesian.cartesianNormalizeInPlace)(arc);
        var intersection = (0, _cartesian.cartesianCross)(normal, arc);
        (0, _cartesian.cartesianNormalizeInPlace)(intersection);
        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * (0, _math.asin)(intersection[2]);

        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {
          winding += antimeridian ^ delta >= 0 ? 1 : -1;
        }
      }
    }
  } // First, determine whether the South pole is inside or outside:
  //
  // It is inside if:
  // * the polygon winds around it in a clockwise direction.
  // * the polygon does not (cumulatively) wind around it, but has a negative
  //   (counter-clockwise) area.
  //
  // Second, count the (signed) number of times a segment crosses a lambda
  // from the point to the South pole.  If it is zero, then the point is the
  // same side as the South pole.


  return (angle < -_math.epsilon || angle < _math.epsilon && sum < -_math.epsilon) ^ winding & 1;
}
},{"./adder":"../node_modules/d3-geo/src/adder.js","./cartesian":"../node_modules/d3-geo/src/cartesian.js","./math":"../node_modules/d3-geo/src/math.js"}],"../node_modules/d3-geo/src/clip/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _buffer = _interopRequireDefault(require("./buffer"));

var _rejoin = _interopRequireDefault(require("./rejoin"));

var _math = require("../math");

var _polygonContains = _interopRequireDefault(require("../polygonContains"));

var _d3Array = require("d3-array");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(pointVisible, clipLine, interpolate, start) {
  return function (sink) {
    var line = clipLine(sink),
        ringBuffer = (0, _buffer.default)(),
        ringSink = clipLine(ringBuffer),
        polygonStarted = false,
        polygon,
        segments,
        ring;
    var clip = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: function () {
        clip.point = pointRing;
        clip.lineStart = ringStart;
        clip.lineEnd = ringEnd;
        segments = [];
        polygon = [];
      },
      polygonEnd: function () {
        clip.point = point;
        clip.lineStart = lineStart;
        clip.lineEnd = lineEnd;
        segments = (0, _d3Array.merge)(segments);
        var startInside = (0, _polygonContains.default)(polygon, start);

        if (segments.length) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          (0, _rejoin.default)(segments, compareIntersection, startInside, interpolate, sink);
        } else if (startInside) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          sink.lineStart();
          interpolate(null, null, 1, sink);
          sink.lineEnd();
        }

        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;
        segments = polygon = null;
      },
      sphere: function () {
        sink.polygonStart();
        sink.lineStart();
        interpolate(null, null, 1, sink);
        sink.lineEnd();
        sink.polygonEnd();
      }
    };

    function point(lambda, phi) {
      if (pointVisible(lambda, phi)) sink.point(lambda, phi);
    }

    function pointLine(lambda, phi) {
      line.point(lambda, phi);
    }

    function lineStart() {
      clip.point = pointLine;
      line.lineStart();
    }

    function lineEnd() {
      clip.point = point;
      line.lineEnd();
    }

    function pointRing(lambda, phi) {
      ring.push([lambda, phi]);
      ringSink.point(lambda, phi);
    }

    function ringStart() {
      ringSink.lineStart();
      ring = [];
    }

    function ringEnd() {
      pointRing(ring[0][0], ring[0][1]);
      ringSink.lineEnd();
      var clean = ringSink.clean(),
          ringSegments = ringBuffer.result(),
          i,
          n = ringSegments.length,
          m,
          segment,
          point;
      ring.pop();
      polygon.push(ring);
      ring = null;
      if (!n) return; // No intersections.

      if (clean & 1) {
        segment = ringSegments[0];

        if ((m = segment.length - 1) > 0) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          sink.lineStart();

          for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);

          sink.lineEnd();
        }

        return;
      } // Rejoin connected segments.
      // TODO reuse ringBuffer.rejoin()?


      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
      segments.push(ringSegments.filter(validSegment));
    }

    return clip;
  };
}

function validSegment(segment) {
  return segment.length > 1;
} // Intersections are sorted along the clip edge. For both antimeridian cutting
// and circle clipping, the same comparison is used.


function compareIntersection(a, b) {
  return ((a = a.x)[0] < 0 ? a[1] - _math.halfPi - _math.epsilon : _math.halfPi - a[1]) - ((b = b.x)[0] < 0 ? b[1] - _math.halfPi - _math.epsilon : _math.halfPi - b[1]);
}
},{"./buffer":"../node_modules/d3-geo/src/clip/buffer.js","./rejoin":"../node_modules/d3-geo/src/clip/rejoin.js","../math":"../node_modules/d3-geo/src/math.js","../polygonContains":"../node_modules/d3-geo/src/polygonContains.js","d3-array":"../node_modules/d3-array/src/index.js"}],"../node_modules/d3-geo/src/clip/antimeridian.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _index = _interopRequireDefault(require("./index"));

var _math = require("../math");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _index.default)(function () {
  return true;
}, clipAntimeridianLine, clipAntimeridianInterpolate, [-_math.pi, -_math.halfPi]); // Takes a line and cuts into visible segments. Return values: 0 - there were
// intersections or the line was empty; 1 - no intersections; 2 - there were
// intersections, and the first and last segments should be rejoined.


exports.default = _default;

function clipAntimeridianLine(stream) {
  var lambda0 = NaN,
      phi0 = NaN,
      sign0 = NaN,
      clean; // no intersections

  return {
    lineStart: function () {
      stream.lineStart();
      clean = 1;
    },
    point: function (lambda1, phi1) {
      var sign1 = lambda1 > 0 ? _math.pi : -_math.pi,
          delta = (0, _math.abs)(lambda1 - lambda0);

      if ((0, _math.abs)(delta - _math.pi) < _math.epsilon) {
        // line crosses a pole
        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? _math.halfPi : -_math.halfPi);
        stream.point(sign0, phi0);
        stream.lineEnd();
        stream.lineStart();
        stream.point(sign1, phi0);
        stream.point(lambda1, phi0);
        clean = 0;
      } else if (sign0 !== sign1 && delta >= _math.pi) {
        // line crosses antimeridian
        if ((0, _math.abs)(lambda0 - sign0) < _math.epsilon) lambda0 -= sign0 * _math.epsilon; // handle degeneracies

        if ((0, _math.abs)(lambda1 - sign1) < _math.epsilon) lambda1 -= sign1 * _math.epsilon;
        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);
        stream.point(sign0, phi0);
        stream.lineEnd();
        stream.lineStart();
        stream.point(sign1, phi0);
        clean = 0;
      }

      stream.point(lambda0 = lambda1, phi0 = phi1);
      sign0 = sign1;
    },
    lineEnd: function () {
      stream.lineEnd();
      lambda0 = phi0 = NaN;
    },
    clean: function () {
      return 2 - clean; // if intersections, rejoin first and last segments
    }
  };
}

function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {
  var cosPhi0,
      cosPhi1,
      sinLambda0Lambda1 = (0, _math.sin)(lambda0 - lambda1);
  return (0, _math.abs)(sinLambda0Lambda1) > _math.epsilon ? (0, _math.atan)(((0, _math.sin)(phi0) * (cosPhi1 = (0, _math.cos)(phi1)) * (0, _math.sin)(lambda1) - (0, _math.sin)(phi1) * (cosPhi0 = (0, _math.cos)(phi0)) * (0, _math.sin)(lambda0)) / (cosPhi0 * cosPhi1 * sinLambda0Lambda1)) : (phi0 + phi1) / 2;
}

function clipAntimeridianInterpolate(from, to, direction, stream) {
  var phi;

  if (from == null) {
    phi = direction * _math.halfPi;
    stream.point(-_math.pi, phi);
    stream.point(0, phi);
    stream.point(_math.pi, phi);
    stream.point(_math.pi, 0);
    stream.point(_math.pi, -phi);
    stream.point(0, -phi);
    stream.point(-_math.pi, -phi);
    stream.point(-_math.pi, 0);
    stream.point(-_math.pi, phi);
  } else if ((0, _math.abs)(from[0] - to[0]) > _math.epsilon) {
    var lambda = from[0] < to[0] ? _math.pi : -_math.pi;
    phi = direction * lambda / 2;
    stream.point(-lambda, phi);
    stream.point(0, phi);
    stream.point(lambda, phi);
  } else {
    stream.point(to[0], to[1]);
  }
}
},{"./index":"../node_modules/d3-geo/src/clip/index.js","../math":"../node_modules/d3-geo/src/math.js"}],"../node_modules/d3-geo/src/clip/circle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _cartesian = require("../cartesian");

var _circle = require("../circle");

var _math = require("../math");

var _pointEqual = _interopRequireDefault(require("../pointEqual"));

var _index = _interopRequireDefault(require("./index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(radius) {
  var cr = (0, _math.cos)(radius),
      delta = 6 * _math.radians,
      smallRadius = cr > 0,
      notHemisphere = (0, _math.abs)(cr) > _math.epsilon; // TODO optimise for this common case


  function interpolate(from, to, direction, stream) {
    (0, _circle.circleStream)(stream, radius, delta, direction, from, to);
  }

  function visible(lambda, phi) {
    return (0, _math.cos)(lambda) * (0, _math.cos)(phi) > cr;
  } // Takes a line and cuts into visible segments. Return values used for polygon
  // clipping: 0 - there were intersections or the line was empty; 1 - no
  // intersections 2 - there were intersections, and the first and last segments
  // should be rejoined.


  function clipLine(stream) {
    var point0, // previous point
    c0, // code for previous point
    v0, // visibility of previous point
    v00, // visibility of first point
    clean; // no intersections

    return {
      lineStart: function () {
        v00 = v0 = false;
        clean = 1;
      },
      point: function (lambda, phi) {
        var point1 = [lambda, phi],
            point2,
            v = visible(lambda, phi),
            c = smallRadius ? v ? 0 : code(lambda, phi) : v ? code(lambda + (lambda < 0 ? _math.pi : -_math.pi), phi) : 0;
        if (!point0 && (v00 = v0 = v)) stream.lineStart(); // Handle degeneracies.
        // TODO ignore if not clipping polygons.

        if (v !== v0) {
          point2 = intersect(point0, point1);

          if (!point2 || (0, _pointEqual.default)(point0, point2) || (0, _pointEqual.default)(point1, point2)) {
            point1[0] += _math.epsilon;
            point1[1] += _math.epsilon;
            v = visible(point1[0], point1[1]);
          }
        }

        if (v !== v0) {
          clean = 0;

          if (v) {
            // outside going in
            stream.lineStart();
            point2 = intersect(point1, point0);
            stream.point(point2[0], point2[1]);
          } else {
            // inside going out
            point2 = intersect(point0, point1);
            stream.point(point2[0], point2[1]);
            stream.lineEnd();
          }

          point0 = point2;
        } else if (notHemisphere && point0 && smallRadius ^ v) {
          var t; // If the codes for two points are different, or are both zero,
          // and there this segment intersects with the small circle.

          if (!(c & c0) && (t = intersect(point1, point0, true))) {
            clean = 0;

            if (smallRadius) {
              stream.lineStart();
              stream.point(t[0][0], t[0][1]);
              stream.point(t[1][0], t[1][1]);
              stream.lineEnd();
            } else {
              stream.point(t[1][0], t[1][1]);
              stream.lineEnd();
              stream.lineStart();
              stream.point(t[0][0], t[0][1]);
            }
          }
        }

        if (v && (!point0 || !(0, _pointEqual.default)(point0, point1))) {
          stream.point(point1[0], point1[1]);
        }

        point0 = point1, v0 = v, c0 = c;
      },
      lineEnd: function () {
        if (v0) stream.lineEnd();
        point0 = null;
      },
      // Rejoin first and last segments if there were intersections and the first
      // and last points were visible.
      clean: function () {
        return clean | (v00 && v0) << 1;
      }
    };
  } // Intersects the great circle between a and b with the clip circle.


  function intersect(a, b, two) {
    var pa = (0, _cartesian.cartesian)(a),
        pb = (0, _cartesian.cartesian)(b); // We have two planes, n1.p = d1 and n2.p = d2.
    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).

    var n1 = [1, 0, 0],
        // normal
    n2 = (0, _cartesian.cartesianCross)(pa, pb),
        n2n2 = (0, _cartesian.cartesianDot)(n2, n2),
        n1n2 = n2[0],
        // cartesianDot(n1, n2),
    determinant = n2n2 - n1n2 * n1n2; // Two polar points.

    if (!determinant) return !two && a;
    var c1 = cr * n2n2 / determinant,
        c2 = -cr * n1n2 / determinant,
        n1xn2 = (0, _cartesian.cartesianCross)(n1, n2),
        A = (0, _cartesian.cartesianScale)(n1, c1),
        B = (0, _cartesian.cartesianScale)(n2, c2);
    (0, _cartesian.cartesianAddInPlace)(A, B); // Solve |p(t)|^2 = 1.

    var u = n1xn2,
        w = (0, _cartesian.cartesianDot)(A, u),
        uu = (0, _cartesian.cartesianDot)(u, u),
        t2 = w * w - uu * ((0, _cartesian.cartesianDot)(A, A) - 1);
    if (t2 < 0) return;
    var t = (0, _math.sqrt)(t2),
        q = (0, _cartesian.cartesianScale)(u, (-w - t) / uu);
    (0, _cartesian.cartesianAddInPlace)(q, A);
    q = (0, _cartesian.spherical)(q);
    if (!two) return q; // Two intersection points.

    var lambda0 = a[0],
        lambda1 = b[0],
        phi0 = a[1],
        phi1 = b[1],
        z;
    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;

    var delta = lambda1 - lambda0,
        polar = (0, _math.abs)(delta - _math.pi) < _math.epsilon,
        meridian = polar || delta < _math.epsilon;

    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z; // Check that the first point is between a and b.

    if (meridian ? polar ? phi0 + phi1 > 0 ^ q[1] < ((0, _math.abs)(q[0] - lambda0) < _math.epsilon ? phi0 : phi1) : phi0 <= q[1] && q[1] <= phi1 : delta > _math.pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {
      var q1 = (0, _cartesian.cartesianScale)(u, (-w + t) / uu);
      (0, _cartesian.cartesianAddInPlace)(q1, A);
      return [q, (0, _cartesian.spherical)(q1)];
    }
  } // Generates a 4-bit vector representing the location of a point relative to
  // the small circle's bounding box.


  function code(lambda, phi) {
    var r = smallRadius ? radius : _math.pi - radius,
        code = 0;
    if (lambda < -r) code |= 1; // left
    else if (lambda > r) code |= 2; // right

    if (phi < -r) code |= 4; // below
    else if (phi > r) code |= 8; // above

    return code;
  }

  return (0, _index.default)(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-_math.pi, radius - _math.pi]);
}
},{"../cartesian":"../node_modules/d3-geo/src/cartesian.js","../circle":"../node_modules/d3-geo/src/circle.js","../math":"../node_modules/d3-geo/src/math.js","../pointEqual":"../node_modules/d3-geo/src/pointEqual.js","./index":"../node_modules/d3-geo/src/clip/index.js"}],"../node_modules/d3-geo/src/clip/line.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b, x0, y0, x1, y1) {
  var ax = a[0],
      ay = a[1],
      bx = b[0],
      by = b[1],
      t0 = 0,
      t1 = 1,
      dx = bx - ax,
      dy = by - ay,
      r;
  r = x0 - ax;
  if (!dx && r > 0) return;
  r /= dx;

  if (dx < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dx > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = x1 - ax;
  if (!dx && r < 0) return;
  r /= dx;

  if (dx < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dx > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  r = y0 - ay;
  if (!dy && r > 0) return;
  r /= dy;

  if (dy < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dy > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = y1 - ay;
  if (!dy && r < 0) return;
  r /= dy;

  if (dy < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dy > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;
  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;
  return true;
}
},{}],"../node_modules/d3-geo/src/clip/rectangle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = clipRectangle;

var _math = require("../math");

var _buffer = _interopRequireDefault(require("./buffer"));

var _line = _interopRequireDefault(require("./line"));

var _rejoin = _interopRequireDefault(require("./rejoin"));

var _d3Array = require("d3-array");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var clipMax = 1e9,
    clipMin = -clipMax; // TODO Use d3-polygon’s polygonContains here for the ring check?
// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?

function clipRectangle(x0, y0, x1, y1) {
  function visible(x, y) {
    return x0 <= x && x <= x1 && y0 <= y && y <= y1;
  }

  function interpolate(from, to, direction, stream) {
    var a = 0,
        a1 = 0;

    if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoint(from, to) < 0 ^ direction > 0) {
      do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0); while ((a = (a + direction + 4) % 4) !== a1);
    } else {
      stream.point(to[0], to[1]);
    }
  }

  function corner(p, direction) {
    return (0, _math.abs)(p[0] - x0) < _math.epsilon ? direction > 0 ? 0 : 3 : (0, _math.abs)(p[0] - x1) < _math.epsilon ? direction > 0 ? 2 : 1 : (0, _math.abs)(p[1] - y0) < _math.epsilon ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon
  }

  function compareIntersection(a, b) {
    return comparePoint(a.x, b.x);
  }

  function comparePoint(a, b) {
    var ca = corner(a, 1),
        cb = corner(b, 1);
    return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
  }

  return function (stream) {
    var activeStream = stream,
        bufferStream = (0, _buffer.default)(),
        segments,
        polygon,
        ring,
        x__,
        y__,
        v__,
        // first point
    x_,
        y_,
        v_,
        // previous point
    first,
        clean;
    var clipStream = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: polygonStart,
      polygonEnd: polygonEnd
    };

    function point(x, y) {
      if (visible(x, y)) activeStream.point(x, y);
    }

    function polygonInside() {
      var winding = 0;

      for (var i = 0, n = polygon.length; i < n; ++i) {
        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {
          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];

          if (a1 <= y1) {
            if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding;
          } else {
            if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding;
          }
        }
      }

      return winding;
    } // Buffer geometry within a polygon and then clip it en masse.


    function polygonStart() {
      activeStream = bufferStream, segments = [], polygon = [], clean = true;
    }

    function polygonEnd() {
      var startInside = polygonInside(),
          cleanInside = clean && startInside,
          visible = (segments = (0, _d3Array.merge)(segments)).length;

      if (cleanInside || visible) {
        stream.polygonStart();

        if (cleanInside) {
          stream.lineStart();
          interpolate(null, null, 1, stream);
          stream.lineEnd();
        }

        if (visible) {
          (0, _rejoin.default)(segments, compareIntersection, startInside, interpolate, stream);
        }

        stream.polygonEnd();
      }

      activeStream = stream, segments = polygon = ring = null;
    }

    function lineStart() {
      clipStream.point = linePoint;
      if (polygon) polygon.push(ring = []);
      first = true;
      v_ = false;
      x_ = y_ = NaN;
    } // TODO rather than special-case polygons, simply handle them separately.
    // Ideally, coincident intersection points should be jittered to avoid
    // clipping issues.


    function lineEnd() {
      if (segments) {
        linePoint(x__, y__);
        if (v__ && v_) bufferStream.rejoin();
        segments.push(bufferStream.result());
      }

      clipStream.point = point;
      if (v_) activeStream.lineEnd();
    }

    function linePoint(x, y) {
      var v = visible(x, y);
      if (polygon) ring.push([x, y]);

      if (first) {
        x__ = x, y__ = y, v__ = v;
        first = false;

        if (v) {
          activeStream.lineStart();
          activeStream.point(x, y);
        }
      } else {
        if (v && v_) activeStream.point(x, y);else {
          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],
              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];

          if ((0, _line.default)(a, b, x0, y0, x1, y1)) {
            if (!v_) {
              activeStream.lineStart();
              activeStream.point(a[0], a[1]);
            }

            activeStream.point(b[0], b[1]);
            if (!v) activeStream.lineEnd();
            clean = false;
          } else if (v) {
            activeStream.lineStart();
            activeStream.point(x, y);
            clean = false;
          }
        }
      }

      x_ = x, y_ = y, v_ = v;
    }

    return clipStream;
  };
}
},{"../math":"../node_modules/d3-geo/src/math.js","./buffer":"../node_modules/d3-geo/src/clip/buffer.js","./line":"../node_modules/d3-geo/src/clip/line.js","./rejoin":"../node_modules/d3-geo/src/clip/rejoin.js","d3-array":"../node_modules/d3-array/src/index.js"}],"../node_modules/d3-geo/src/clip/extent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _rectangle = _interopRequireDefault(require("./rectangle"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var x0 = 0,
      y0 = 0,
      x1 = 960,
      y1 = 500,
      cache,
      cacheStream,
      clip;
  return clip = {
    stream: function (stream) {
      return cache && cacheStream === stream ? cache : cache = (0, _rectangle.default)(x0, y0, x1, y1)(cacheStream = stream);
    },
    extent: function (_) {
      return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];
    }
  };
}
},{"./rectangle":"../node_modules/d3-geo/src/clip/rectangle.js"}],"../node_modules/d3-geo/src/length.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _adder = _interopRequireDefault(require("./adder"));

var _math = require("./math");

var _noop = _interopRequireDefault(require("./noop"));

var _stream = _interopRequireDefault(require("./stream"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var lengthSum = (0, _adder.default)(),
    lambda0,
    sinPhi0,
    cosPhi0;
var lengthStream = {
  sphere: _noop.default,
  point: _noop.default,
  lineStart: lengthLineStart,
  lineEnd: _noop.default,
  polygonStart: _noop.default,
  polygonEnd: _noop.default
};

function lengthLineStart() {
  lengthStream.point = lengthPointFirst;
  lengthStream.lineEnd = lengthLineEnd;
}

function lengthLineEnd() {
  lengthStream.point = lengthStream.lineEnd = _noop.default;
}

function lengthPointFirst(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  lambda0 = lambda, sinPhi0 = (0, _math.sin)(phi), cosPhi0 = (0, _math.cos)(phi);
  lengthStream.point = lengthPoint;
}

function lengthPoint(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  var sinPhi = (0, _math.sin)(phi),
      cosPhi = (0, _math.cos)(phi),
      delta = (0, _math.abs)(lambda - lambda0),
      cosDelta = (0, _math.cos)(delta),
      sinDelta = (0, _math.sin)(delta),
      x = cosPhi * sinDelta,
      y = cosPhi0 * sinPhi - sinPhi0 * cosPhi * cosDelta,
      z = sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosDelta;
  lengthSum.add((0, _math.atan2)((0, _math.sqrt)(x * x + y * y), z));
  lambda0 = lambda, sinPhi0 = sinPhi, cosPhi0 = cosPhi;
}

function _default(object) {
  lengthSum.reset();
  (0, _stream.default)(object, lengthStream);
  return +lengthSum;
}
},{"./adder":"../node_modules/d3-geo/src/adder.js","./math":"../node_modules/d3-geo/src/math.js","./noop":"../node_modules/d3-geo/src/noop.js","./stream":"../node_modules/d3-geo/src/stream.js"}],"../node_modules/d3-geo/src/distance.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _length = _interopRequireDefault(require("./length"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var coordinates = [null, null],
    object = {
  type: "LineString",
  coordinates: coordinates
};

function _default(a, b) {
  coordinates[0] = a;
  coordinates[1] = b;
  return (0, _length.default)(object);
}
},{"./length":"../node_modules/d3-geo/src/length.js"}],"../node_modules/d3-geo/src/contains.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _polygonContains = _interopRequireDefault(require("./polygonContains"));

var _distance = _interopRequireDefault(require("./distance"));

var _math = require("./math");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var containsObjectType = {
  Feature: function (object, point) {
    return containsGeometry(object.geometry, point);
  },
  FeatureCollection: function (object, point) {
    var features = object.features,
        i = -1,
        n = features.length;

    while (++i < n) if (containsGeometry(features[i].geometry, point)) return true;

    return false;
  }
};
var containsGeometryType = {
  Sphere: function () {
    return true;
  },
  Point: function (object, point) {
    return containsPoint(object.coordinates, point);
  },
  MultiPoint: function (object, point) {
    var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;

    while (++i < n) if (containsPoint(coordinates[i], point)) return true;

    return false;
  },
  LineString: function (object, point) {
    return containsLine(object.coordinates, point);
  },
  MultiLineString: function (object, point) {
    var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;

    while (++i < n) if (containsLine(coordinates[i], point)) return true;

    return false;
  },
  Polygon: function (object, point) {
    return containsPolygon(object.coordinates, point);
  },
  MultiPolygon: function (object, point) {
    var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;

    while (++i < n) if (containsPolygon(coordinates[i], point)) return true;

    return false;
  },
  GeometryCollection: function (object, point) {
    var geometries = object.geometries,
        i = -1,
        n = geometries.length;

    while (++i < n) if (containsGeometry(geometries[i], point)) return true;

    return false;
  }
};

function containsGeometry(geometry, point) {
  return geometry && containsGeometryType.hasOwnProperty(geometry.type) ? containsGeometryType[geometry.type](geometry, point) : false;
}

function containsPoint(coordinates, point) {
  return (0, _distance.default)(coordinates, point) === 0;
}

function containsLine(coordinates, point) {
  var ao, bo, ab;

  for (var i = 0, n = coordinates.length; i < n; i++) {
    bo = (0, _distance.default)(coordinates[i], point);
    if (bo === 0) return true;

    if (i > 0) {
      ab = (0, _distance.default)(coordinates[i], coordinates[i - 1]);
      if (ab > 0 && ao <= ab && bo <= ab && (ao + bo - ab) * (1 - Math.pow((ao - bo) / ab, 2)) < _math.epsilon2 * ab) return true;
    }

    ao = bo;
  }

  return false;
}

function containsPolygon(coordinates, point) {
  return !!(0, _polygonContains.default)(coordinates.map(ringRadians), pointRadians(point));
}

function ringRadians(ring) {
  return ring = ring.map(pointRadians), ring.pop(), ring;
}

function pointRadians(point) {
  return [point[0] * _math.radians, point[1] * _math.radians];
}

function _default(object, point) {
  return (object && containsObjectType.hasOwnProperty(object.type) ? containsObjectType[object.type] : containsGeometry)(object, point);
}
},{"./polygonContains":"../node_modules/d3-geo/src/polygonContains.js","./distance":"../node_modules/d3-geo/src/distance.js","./math":"../node_modules/d3-geo/src/math.js"}],"../node_modules/d3-geo/src/graticule.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = graticule;
exports.graticule10 = graticule10;

var _d3Array = require("d3-array");

var _math = require("./math");

function graticuleX(y0, y1, dy) {
  var y = (0, _d3Array.range)(y0, y1 - _math.epsilon, dy).concat(y1);
  return function (x) {
    return y.map(function (y) {
      return [x, y];
    });
  };
}

function graticuleY(x0, x1, dx) {
  var x = (0, _d3Array.range)(x0, x1 - _math.epsilon, dx).concat(x1);
  return function (y) {
    return x.map(function (x) {
      return [x, y];
    });
  };
}

function graticule() {
  var x1,
      x0,
      X1,
      X0,
      y1,
      y0,
      Y1,
      Y0,
      dx = 10,
      dy = dx,
      DX = 90,
      DY = 360,
      x,
      y,
      X,
      Y,
      precision = 2.5;

  function graticule() {
    return {
      type: "MultiLineString",
      coordinates: lines()
    };
  }

  function lines() {
    return (0, _d3Array.range)((0, _math.ceil)(X0 / DX) * DX, X1, DX).map(X).concat((0, _d3Array.range)((0, _math.ceil)(Y0 / DY) * DY, Y1, DY).map(Y)).concat((0, _d3Array.range)((0, _math.ceil)(x0 / dx) * dx, x1, dx).filter(function (x) {
      return (0, _math.abs)(x % DX) > _math.epsilon;
    }).map(x)).concat((0, _d3Array.range)((0, _math.ceil)(y0 / dy) * dy, y1, dy).filter(function (y) {
      return (0, _math.abs)(y % DY) > _math.epsilon;
    }).map(y));
  }

  graticule.lines = function () {
    return lines().map(function (coordinates) {
      return {
        type: "LineString",
        coordinates: coordinates
      };
    });
  };

  graticule.outline = function () {
    return {
      type: "Polygon",
      coordinates: [X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1))]
    };
  };

  graticule.extent = function (_) {
    if (!arguments.length) return graticule.extentMinor();
    return graticule.extentMajor(_).extentMinor(_);
  };

  graticule.extentMajor = function (_) {
    if (!arguments.length) return [[X0, Y0], [X1, Y1]];
    X0 = +_[0][0], X1 = +_[1][0];
    Y0 = +_[0][1], Y1 = +_[1][1];
    if (X0 > X1) _ = X0, X0 = X1, X1 = _;
    if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
    return graticule.precision(precision);
  };

  graticule.extentMinor = function (_) {
    if (!arguments.length) return [[x0, y0], [x1, y1]];
    x0 = +_[0][0], x1 = +_[1][0];
    y0 = +_[0][1], y1 = +_[1][1];
    if (x0 > x1) _ = x0, x0 = x1, x1 = _;
    if (y0 > y1) _ = y0, y0 = y1, y1 = _;
    return graticule.precision(precision);
  };

  graticule.step = function (_) {
    if (!arguments.length) return graticule.stepMinor();
    return graticule.stepMajor(_).stepMinor(_);
  };

  graticule.stepMajor = function (_) {
    if (!arguments.length) return [DX, DY];
    DX = +_[0], DY = +_[1];
    return graticule;
  };

  graticule.stepMinor = function (_) {
    if (!arguments.length) return [dx, dy];
    dx = +_[0], dy = +_[1];
    return graticule;
  };

  graticule.precision = function (_) {
    if (!arguments.length) return precision;
    precision = +_;
    x = graticuleX(y0, y1, 90);
    y = graticuleY(x0, x1, precision);
    X = graticuleX(Y0, Y1, 90);
    Y = graticuleY(X0, X1, precision);
    return graticule;
  };

  return graticule.extentMajor([[-180, -90 + _math.epsilon], [180, 90 - _math.epsilon]]).extentMinor([[-180, -80 - _math.epsilon], [180, 80 + _math.epsilon]]);
}

function graticule10() {
  return graticule()();
}
},{"d3-array":"../node_modules/d3-array/src/index.js","./math":"../node_modules/d3-geo/src/math.js"}],"../node_modules/d3-geo/src/interpolate.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _math = require("./math");

function _default(a, b) {
  var x0 = a[0] * _math.radians,
      y0 = a[1] * _math.radians,
      x1 = b[0] * _math.radians,
      y1 = b[1] * _math.radians,
      cy0 = (0, _math.cos)(y0),
      sy0 = (0, _math.sin)(y0),
      cy1 = (0, _math.cos)(y1),
      sy1 = (0, _math.sin)(y1),
      kx0 = cy0 * (0, _math.cos)(x0),
      ky0 = cy0 * (0, _math.sin)(x0),
      kx1 = cy1 * (0, _math.cos)(x1),
      ky1 = cy1 * (0, _math.sin)(x1),
      d = 2 * (0, _math.asin)((0, _math.sqrt)((0, _math.haversin)(y1 - y0) + cy0 * cy1 * (0, _math.haversin)(x1 - x0))),
      k = (0, _math.sin)(d);
  var interpolate = d ? function (t) {
    var B = (0, _math.sin)(t *= d) / k,
        A = (0, _math.sin)(d - t) / k,
        x = A * kx0 + B * kx1,
        y = A * ky0 + B * ky1,
        z = A * sy0 + B * sy1;
    return [(0, _math.atan2)(y, x) * _math.degrees, (0, _math.atan2)(z, (0, _math.sqrt)(x * x + y * y)) * _math.degrees];
  } : function () {
    return [x0 * _math.degrees, y0 * _math.degrees];
  };
  interpolate.distance = d;
  return interpolate;
}
},{"./math":"../node_modules/d3-geo/src/math.js"}],"../node_modules/d3-geo/src/identity.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return x;
}
},{}],"../node_modules/d3-geo/src/path/area.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _adder = _interopRequireDefault(require("../adder"));

var _math = require("../math");

var _noop = _interopRequireDefault(require("../noop"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var areaSum = (0, _adder.default)(),
    areaRingSum = (0, _adder.default)(),
    x00,
    y00,
    x0,
    y0;
var areaStream = {
  point: _noop.default,
  lineStart: _noop.default,
  lineEnd: _noop.default,
  polygonStart: function () {
    areaStream.lineStart = areaRingStart;
    areaStream.lineEnd = areaRingEnd;
  },
  polygonEnd: function () {
    areaStream.lineStart = areaStream.lineEnd = areaStream.point = _noop.default;
    areaSum.add((0, _math.abs)(areaRingSum));
    areaRingSum.reset();
  },
  result: function () {
    var area = areaSum / 2;
    areaSum.reset();
    return area;
  }
};

function areaRingStart() {
  areaStream.point = areaPointFirst;
}

function areaPointFirst(x, y) {
  areaStream.point = areaPoint;
  x00 = x0 = x, y00 = y0 = y;
}

function areaPoint(x, y) {
  areaRingSum.add(y0 * x - x0 * y);
  x0 = x, y0 = y;
}

function areaRingEnd() {
  areaPoint(x00, y00);
}

var _default = areaStream;
exports.default = _default;
},{"../adder":"../node_modules/d3-geo/src/adder.js","../math":"../node_modules/d3-geo/src/math.js","../noop":"../node_modules/d3-geo/src/noop.js"}],"../node_modules/d3-geo/src/path/bounds.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _noop = _interopRequireDefault(require("../noop"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var x0 = Infinity,
    y0 = x0,
    x1 = -x0,
    y1 = x1;
var boundsStream = {
  point: boundsPoint,
  lineStart: _noop.default,
  lineEnd: _noop.default,
  polygonStart: _noop.default,
  polygonEnd: _noop.default,
  result: function () {
    var bounds = [[x0, y0], [x1, y1]];
    x1 = y1 = -(y0 = x0 = Infinity);
    return bounds;
  }
};

function boundsPoint(x, y) {
  if (x < x0) x0 = x;
  if (x > x1) x1 = x;
  if (y < y0) y0 = y;
  if (y > y1) y1 = y;
}

var _default = boundsStream;
exports.default = _default;
},{"../noop":"../node_modules/d3-geo/src/noop.js"}],"../node_modules/d3-geo/src/path/centroid.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _math = require("../math");

// TODO Enforce positive area for exterior, negative area for interior?
var X0 = 0,
    Y0 = 0,
    Z0 = 0,
    X1 = 0,
    Y1 = 0,
    Z1 = 0,
    X2 = 0,
    Y2 = 0,
    Z2 = 0,
    x00,
    y00,
    x0,
    y0;
var centroidStream = {
  point: centroidPoint,
  lineStart: centroidLineStart,
  lineEnd: centroidLineEnd,
  polygonStart: function () {
    centroidStream.lineStart = centroidRingStart;
    centroidStream.lineEnd = centroidRingEnd;
  },
  polygonEnd: function () {
    centroidStream.point = centroidPoint;
    centroidStream.lineStart = centroidLineStart;
    centroidStream.lineEnd = centroidLineEnd;
  },
  result: function () {
    var centroid = Z2 ? [X2 / Z2, Y2 / Z2] : Z1 ? [X1 / Z1, Y1 / Z1] : Z0 ? [X0 / Z0, Y0 / Z0] : [NaN, NaN];
    X0 = Y0 = Z0 = X1 = Y1 = Z1 = X2 = Y2 = Z2 = 0;
    return centroid;
  }
};

function centroidPoint(x, y) {
  X0 += x;
  Y0 += y;
  ++Z0;
}

function centroidLineStart() {
  centroidStream.point = centroidPointFirstLine;
}

function centroidPointFirstLine(x, y) {
  centroidStream.point = centroidPointLine;
  centroidPoint(x0 = x, y0 = y);
}

function centroidPointLine(x, y) {
  var dx = x - x0,
      dy = y - y0,
      z = (0, _math.sqrt)(dx * dx + dy * dy);
  X1 += z * (x0 + x) / 2;
  Y1 += z * (y0 + y) / 2;
  Z1 += z;
  centroidPoint(x0 = x, y0 = y);
}

function centroidLineEnd() {
  centroidStream.point = centroidPoint;
}

function centroidRingStart() {
  centroidStream.point = centroidPointFirstRing;
}

function centroidRingEnd() {
  centroidPointRing(x00, y00);
}

function centroidPointFirstRing(x, y) {
  centroidStream.point = centroidPointRing;
  centroidPoint(x00 = x0 = x, y00 = y0 = y);
}

function centroidPointRing(x, y) {
  var dx = x - x0,
      dy = y - y0,
      z = (0, _math.sqrt)(dx * dx + dy * dy);
  X1 += z * (x0 + x) / 2;
  Y1 += z * (y0 + y) / 2;
  Z1 += z;
  z = y0 * x - x0 * y;
  X2 += z * (x0 + x);
  Y2 += z * (y0 + y);
  Z2 += z * 3;
  centroidPoint(x0 = x, y0 = y);
}

var _default = centroidStream;
exports.default = _default;
},{"../math":"../node_modules/d3-geo/src/math.js"}],"../node_modules/d3-geo/src/path/context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PathContext;

var _math = require("../math");

var _noop = _interopRequireDefault(require("../noop"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function PathContext(context) {
  this._context = context;
}

PathContext.prototype = {
  _radius: 4.5,
  pointRadius: function (_) {
    return this._radius = _, this;
  },
  polygonStart: function () {
    this._line = 0;
  },
  polygonEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._point = 0;
  },
  lineEnd: function () {
    if (this._line === 0) this._context.closePath();
    this._point = NaN;
  },
  point: function (x, y) {
    switch (this._point) {
      case 0:
        {
          this._context.moveTo(x, y);

          this._point = 1;
          break;
        }

      case 1:
        {
          this._context.lineTo(x, y);

          break;
        }

      default:
        {
          this._context.moveTo(x + this._radius, y);

          this._context.arc(x, y, this._radius, 0, _math.tau);

          break;
        }
    }
  },
  result: _noop.default
};
},{"../math":"../node_modules/d3-geo/src/math.js","../noop":"../node_modules/d3-geo/src/noop.js"}],"../node_modules/d3-geo/src/path/measure.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _adder = _interopRequireDefault(require("../adder"));

var _math = require("../math");

var _noop = _interopRequireDefault(require("../noop"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var lengthSum = (0, _adder.default)(),
    lengthRing,
    x00,
    y00,
    x0,
    y0;
var lengthStream = {
  point: _noop.default,
  lineStart: function () {
    lengthStream.point = lengthPointFirst;
  },
  lineEnd: function () {
    if (lengthRing) lengthPoint(x00, y00);
    lengthStream.point = _noop.default;
  },
  polygonStart: function () {
    lengthRing = true;
  },
  polygonEnd: function () {
    lengthRing = null;
  },
  result: function () {
    var length = +lengthSum;
    lengthSum.reset();
    return length;
  }
};

function lengthPointFirst(x, y) {
  lengthStream.point = lengthPoint;
  x00 = x0 = x, y00 = y0 = y;
}

function lengthPoint(x, y) {
  x0 -= x, y0 -= y;
  lengthSum.add((0, _math.sqrt)(x0 * x0 + y0 * y0));
  x0 = x, y0 = y;
}

var _default = lengthStream;
exports.default = _default;
},{"../adder":"../node_modules/d3-geo/src/adder.js","../math":"../node_modules/d3-geo/src/math.js","../noop":"../node_modules/d3-geo/src/noop.js"}],"../node_modules/d3-geo/src/path/string.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PathString;

function PathString() {
  this._string = [];
}

PathString.prototype = {
  _radius: 4.5,
  _circle: circle(4.5),
  pointRadius: function (_) {
    if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;
    return this;
  },
  polygonStart: function () {
    this._line = 0;
  },
  polygonEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._point = 0;
  },
  lineEnd: function () {
    if (this._line === 0) this._string.push("Z");
    this._point = NaN;
  },
  point: function (x, y) {
    switch (this._point) {
      case 0:
        {
          this._string.push("M", x, ",", y);

          this._point = 1;
          break;
        }

      case 1:
        {
          this._string.push("L", x, ",", y);

          break;
        }

      default:
        {
          if (this._circle == null) this._circle = circle(this._radius);

          this._string.push("M", x, ",", y, this._circle);

          break;
        }
    }
  },
  result: function () {
    if (this._string.length) {
      var result = this._string.join("");

      this._string = [];
      return result;
    } else {
      return null;
    }
  }
};

function circle(radius) {
  return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
}
},{}],"../node_modules/d3-geo/src/path/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _identity = _interopRequireDefault(require("../identity"));

var _stream = _interopRequireDefault(require("../stream"));

var _area = _interopRequireDefault(require("./area"));

var _bounds = _interopRequireDefault(require("./bounds"));

var _centroid = _interopRequireDefault(require("./centroid"));

var _context = _interopRequireDefault(require("./context"));

var _measure = _interopRequireDefault(require("./measure"));

var _string = _interopRequireDefault(require("./string"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(projection, context) {
  var pointRadius = 4.5,
      projectionStream,
      contextStream;

  function path(object) {
    if (object) {
      if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
      (0, _stream.default)(object, projectionStream(contextStream));
    }

    return contextStream.result();
  }

  path.area = function (object) {
    (0, _stream.default)(object, projectionStream(_area.default));
    return _area.default.result();
  };

  path.measure = function (object) {
    (0, _stream.default)(object, projectionStream(_measure.default));
    return _measure.default.result();
  };

  path.bounds = function (object) {
    (0, _stream.default)(object, projectionStream(_bounds.default));
    return _bounds.default.result();
  };

  path.centroid = function (object) {
    (0, _stream.default)(object, projectionStream(_centroid.default));
    return _centroid.default.result();
  };

  path.projection = function (_) {
    return arguments.length ? (projectionStream = _ == null ? (projection = null, _identity.default) : (projection = _).stream, path) : projection;
  };

  path.context = function (_) {
    if (!arguments.length) return context;
    contextStream = _ == null ? (context = null, new _string.default()) : new _context.default(context = _);
    if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
    return path;
  };

  path.pointRadius = function (_) {
    if (!arguments.length) return pointRadius;
    pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
    return path;
  };

  return path.projection(projection).context(context);
}
},{"../identity":"../node_modules/d3-geo/src/identity.js","../stream":"../node_modules/d3-geo/src/stream.js","./area":"../node_modules/d3-geo/src/path/area.js","./bounds":"../node_modules/d3-geo/src/path/bounds.js","./centroid":"../node_modules/d3-geo/src/path/centroid.js","./context":"../node_modules/d3-geo/src/path/context.js","./measure":"../node_modules/d3-geo/src/path/measure.js","./string":"../node_modules/d3-geo/src/path/string.js"}],"../node_modules/d3-geo/src/transform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.transformer = transformer;

function _default(methods) {
  return {
    stream: transformer(methods)
  };
}

function transformer(methods) {
  return function (stream) {
    var s = new TransformStream();

    for (var key in methods) s[key] = methods[key];

    s.stream = stream;
    return s;
  };
}

function TransformStream() {}

TransformStream.prototype = {
  constructor: TransformStream,
  point: function (x, y) {
    this.stream.point(x, y);
  },
  sphere: function () {
    this.stream.sphere();
  },
  lineStart: function () {
    this.stream.lineStart();
  },
  lineEnd: function () {
    this.stream.lineEnd();
  },
  polygonStart: function () {
    this.stream.polygonStart();
  },
  polygonEnd: function () {
    this.stream.polygonEnd();
  }
};
},{}],"../node_modules/d3-geo/src/projection/fit.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fitExtent = fitExtent;
exports.fitSize = fitSize;
exports.fitWidth = fitWidth;
exports.fitHeight = fitHeight;

var _stream = _interopRequireDefault(require("../stream"));

var _bounds = _interopRequireDefault(require("../path/bounds"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function fit(projection, fitBounds, object) {
  var clip = projection.clipExtent && projection.clipExtent();
  projection.scale(150).translate([0, 0]);
  if (clip != null) projection.clipExtent(null);
  (0, _stream.default)(object, projection.stream(_bounds.default));
  fitBounds(_bounds.default.result());
  if (clip != null) projection.clipExtent(clip);
  return projection;
}

function fitExtent(projection, extent, object) {
  return fit(projection, function (b) {
    var w = extent[1][0] - extent[0][0],
        h = extent[1][1] - extent[0][1],
        k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),
        x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,
        y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;
    projection.scale(150 * k).translate([x, y]);
  }, object);
}

function fitSize(projection, size, object) {
  return fitExtent(projection, [[0, 0], size], object);
}

function fitWidth(projection, width, object) {
  return fit(projection, function (b) {
    var w = +width,
        k = w / (b[1][0] - b[0][0]),
        x = (w - k * (b[1][0] + b[0][0])) / 2,
        y = -k * b[0][1];
    projection.scale(150 * k).translate([x, y]);
  }, object);
}

function fitHeight(projection, height, object) {
  return fit(projection, function (b) {
    var h = +height,
        k = h / (b[1][1] - b[0][1]),
        x = -k * b[0][0],
        y = (h - k * (b[1][1] + b[0][1])) / 2;
    projection.scale(150 * k).translate([x, y]);
  }, object);
}
},{"../stream":"../node_modules/d3-geo/src/stream.js","../path/bounds":"../node_modules/d3-geo/src/path/bounds.js"}],"../node_modules/d3-geo/src/projection/resample.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _cartesian = require("../cartesian");

var _math = require("../math");

var _transform = require("../transform");

var maxDepth = 16,
    // maximum depth of subdivision
cosMinDistance = (0, _math.cos)(30 * _math.radians); // cos(minimum angular distance)

function _default(project, delta2) {
  return +delta2 ? resample(project, delta2) : resampleNone(project);
}

function resampleNone(project) {
  return (0, _transform.transformer)({
    point: function (x, y) {
      x = project(x, y);
      this.stream.point(x[0], x[1]);
    }
  });
}

function resample(project, delta2) {
  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {
    var dx = x1 - x0,
        dy = y1 - y0,
        d2 = dx * dx + dy * dy;

    if (d2 > 4 * delta2 && depth--) {
      var a = a0 + a1,
          b = b0 + b1,
          c = c0 + c1,
          m = (0, _math.sqrt)(a * a + b * b + c * c),
          phi2 = (0, _math.asin)(c /= m),
          lambda2 = (0, _math.abs)((0, _math.abs)(c) - 1) < _math.epsilon || (0, _math.abs)(lambda0 - lambda1) < _math.epsilon ? (lambda0 + lambda1) / 2 : (0, _math.atan2)(b, a),
          p = project(lambda2, phi2),
          x2 = p[0],
          y2 = p[1],
          dx2 = x2 - x0,
          dy2 = y2 - y0,
          dz = dy * dx2 - dx * dy2;

      if (dz * dz / d2 > delta2 // perpendicular projected distance
      || (0, _math.abs)((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end
      || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
        // angular distance
        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);
        stream.point(x2, y2);
        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);
      }
    }
  }

  return function (stream) {
    var lambda00, x00, y00, a00, b00, c00, // first point
    lambda0, x0, y0, a0, b0, c0; // previous point

    var resampleStream = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: function () {
        stream.polygonStart();
        resampleStream.lineStart = ringStart;
      },
      polygonEnd: function () {
        stream.polygonEnd();
        resampleStream.lineStart = lineStart;
      }
    };

    function point(x, y) {
      x = project(x, y);
      stream.point(x[0], x[1]);
    }

    function lineStart() {
      x0 = NaN;
      resampleStream.point = linePoint;
      stream.lineStart();
    }

    function linePoint(lambda, phi) {
      var c = (0, _cartesian.cartesian)([lambda, phi]),
          p = project(lambda, phi);
      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
      stream.point(x0, y0);
    }

    function lineEnd() {
      resampleStream.point = point;
      stream.lineEnd();
    }

    function ringStart() {
      lineStart();
      resampleStream.point = ringPoint;
      resampleStream.lineEnd = ringEnd;
    }

    function ringPoint(lambda, phi) {
      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
      resampleStream.point = linePoint;
    }

    function ringEnd() {
      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);
      resampleStream.lineEnd = lineEnd;
      lineEnd();
    }

    return resampleStream;
  };
}
},{"../cartesian":"../node_modules/d3-geo/src/cartesian.js","../math":"../node_modules/d3-geo/src/math.js","../transform":"../node_modules/d3-geo/src/transform.js"}],"../node_modules/d3-geo/src/projection/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = projection;
exports.projectionMutator = projectionMutator;

var _antimeridian = _interopRequireDefault(require("../clip/antimeridian"));

var _circle = _interopRequireDefault(require("../clip/circle"));

var _rectangle = _interopRequireDefault(require("../clip/rectangle"));

var _compose = _interopRequireDefault(require("../compose"));

var _identity = _interopRequireDefault(require("../identity"));

var _math = require("../math");

var _rotation = require("../rotation");

var _transform = require("../transform");

var _fit = require("./fit");

var _resample = _interopRequireDefault(require("./resample"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var transformRadians = (0, _transform.transformer)({
  point: function (x, y) {
    this.stream.point(x * _math.radians, y * _math.radians);
  }
});

function transformRotate(rotate) {
  return (0, _transform.transformer)({
    point: function (x, y) {
      var r = rotate(x, y);
      return this.stream.point(r[0], r[1]);
    }
  });
}

function scaleTranslate(k, dx, dy) {
  function transform(x, y) {
    return [dx + k * x, dy - k * y];
  }

  transform.invert = function (x, y) {
    return [(x - dx) / k, (dy - y) / k];
  };

  return transform;
}

function scaleTranslateRotate(k, dx, dy, alpha) {
  var cosAlpha = (0, _math.cos)(alpha),
      sinAlpha = (0, _math.sin)(alpha),
      a = cosAlpha * k,
      b = sinAlpha * k,
      ai = cosAlpha / k,
      bi = sinAlpha / k,
      ci = (sinAlpha * dy - cosAlpha * dx) / k,
      fi = (sinAlpha * dx + cosAlpha * dy) / k;

  function transform(x, y) {
    return [a * x - b * y + dx, dy - b * x - a * y];
  }

  transform.invert = function (x, y) {
    return [ai * x - bi * y + ci, fi - bi * x - ai * y];
  };

  return transform;
}

function projection(project) {
  return projectionMutator(function () {
    return project;
  })();
}

function projectionMutator(projectAt) {
  var project,
      k = 150,
      // scale
  x = 480,
      y = 250,
      // translate
  lambda = 0,
      phi = 0,
      // center
  deltaLambda = 0,
      deltaPhi = 0,
      deltaGamma = 0,
      rotate,
      // pre-rotate
  alpha = 0,
      // post-rotate
  theta = null,
      preclip = _antimeridian.default,
      // pre-clip angle
  x0 = null,
      y0,
      x1,
      y1,
      postclip = _identity.default,
      // post-clip extent
  delta2 = 0.5,
      // precision
  projectResample,
      projectTransform,
      projectRotateTransform,
      cache,
      cacheStream;

  function projection(point) {
    return projectRotateTransform(point[0] * _math.radians, point[1] * _math.radians);
  }

  function invert(point) {
    point = projectRotateTransform.invert(point[0], point[1]);
    return point && [point[0] * _math.degrees, point[1] * _math.degrees];
  }

  projection.stream = function (stream) {
    return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));
  };

  projection.preclip = function (_) {
    return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;
  };

  projection.postclip = function (_) {
    return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
  };

  projection.clipAngle = function (_) {
    return arguments.length ? (preclip = +_ ? (0, _circle.default)(theta = _ * _math.radians) : (theta = null, _antimeridian.default), reset()) : theta * _math.degrees;
  };

  projection.clipExtent = function (_) {
    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, _identity.default) : (0, _rectangle.default)(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
  };

  projection.scale = function (_) {
    return arguments.length ? (k = +_, recenter()) : k;
  };

  projection.translate = function (_) {
    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];
  };

  projection.center = function (_) {
    return arguments.length ? (lambda = _[0] % 360 * _math.radians, phi = _[1] % 360 * _math.radians, recenter()) : [lambda * _math.degrees, phi * _math.degrees];
  };

  projection.rotate = function (_) {
    return arguments.length ? (deltaLambda = _[0] % 360 * _math.radians, deltaPhi = _[1] % 360 * _math.radians, deltaGamma = _.length > 2 ? _[2] % 360 * _math.radians : 0, recenter()) : [deltaLambda * _math.degrees, deltaPhi * _math.degrees, deltaGamma * _math.degrees];
  };

  projection.angle = function (_) {
    return arguments.length ? (alpha = _ % 360 * _math.radians, recenter()) : alpha * _math.degrees;
  };

  projection.precision = function (_) {
    return arguments.length ? (projectResample = (0, _resample.default)(projectTransform, delta2 = _ * _), reset()) : (0, _math.sqrt)(delta2);
  };

  projection.fitExtent = function (extent, object) {
    return (0, _fit.fitExtent)(projection, extent, object);
  };

  projection.fitSize = function (size, object) {
    return (0, _fit.fitSize)(projection, size, object);
  };

  projection.fitWidth = function (width, object) {
    return (0, _fit.fitWidth)(projection, width, object);
  };

  projection.fitHeight = function (height, object) {
    return (0, _fit.fitHeight)(projection, height, object);
  };

  function recenter() {
    var center = scaleTranslateRotate(k, 0, 0, alpha).apply(null, project(lambda, phi)),
        transform = (alpha ? scaleTranslateRotate : scaleTranslate)(k, x - center[0], y - center[1], alpha);
    rotate = (0, _rotation.rotateRadians)(deltaLambda, deltaPhi, deltaGamma);
    projectTransform = (0, _compose.default)(project, transform);
    projectRotateTransform = (0, _compose.default)(rotate, projectTransform);
    projectResample = (0, _resample.default)(projectTransform, delta2);
    return reset();
  }

  function reset() {
    cache = cacheStream = null;
    return projection;
  }

  return function () {
    project = projectAt.apply(this, arguments);
    projection.invert = project.invert && invert;
    return recenter();
  };
}
},{"../clip/antimeridian":"../node_modules/d3-geo/src/clip/antimeridian.js","../clip/circle":"../node_modules/d3-geo/src/clip/circle.js","../clip/rectangle":"../node_modules/d3-geo/src/clip/rectangle.js","../compose":"../node_modules/d3-geo/src/compose.js","../identity":"../node_modules/d3-geo/src/identity.js","../math":"../node_modules/d3-geo/src/math.js","../rotation":"../node_modules/d3-geo/src/rotation.js","../transform":"../node_modules/d3-geo/src/transform.js","./fit":"../node_modules/d3-geo/src/projection/fit.js","./resample":"../node_modules/d3-geo/src/projection/resample.js"}],"../node_modules/d3-geo/src/projection/conic.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conicProjection = conicProjection;

var _math = require("../math");

var _index = require("./index");

function conicProjection(projectAt) {
  var phi0 = 0,
      phi1 = _math.pi / 3,
      m = (0, _index.projectionMutator)(projectAt),
      p = m(phi0, phi1);

  p.parallels = function (_) {
    return arguments.length ? m(phi0 = _[0] * _math.radians, phi1 = _[1] * _math.radians) : [phi0 * _math.degrees, phi1 * _math.degrees];
  };

  return p;
}
},{"../math":"../node_modules/d3-geo/src/math.js","./index":"../node_modules/d3-geo/src/projection/index.js"}],"../node_modules/d3-geo/src/projection/cylindricalEqualArea.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cylindricalEqualAreaRaw = cylindricalEqualAreaRaw;

var _math = require("../math");

function cylindricalEqualAreaRaw(phi0) {
  var cosPhi0 = (0, _math.cos)(phi0);

  function forward(lambda, phi) {
    return [lambda * cosPhi0, (0, _math.sin)(phi) / cosPhi0];
  }

  forward.invert = function (x, y) {
    return [x / cosPhi0, (0, _math.asin)(y * cosPhi0)];
  };

  return forward;
}
},{"../math":"../node_modules/d3-geo/src/math.js"}],"../node_modules/d3-geo/src/projection/conicEqualArea.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conicEqualAreaRaw = conicEqualAreaRaw;
exports.default = _default;

var _math = require("../math");

var _conic = require("./conic");

var _cylindricalEqualArea = require("./cylindricalEqualArea");

function conicEqualAreaRaw(y0, y1) {
  var sy0 = (0, _math.sin)(y0),
      n = (sy0 + (0, _math.sin)(y1)) / 2; // Are the parallels symmetrical around the Equator?

  if ((0, _math.abs)(n) < _math.epsilon) return (0, _cylindricalEqualArea.cylindricalEqualAreaRaw)(y0);
  var c = 1 + sy0 * (2 * n - sy0),
      r0 = (0, _math.sqrt)(c) / n;

  function project(x, y) {
    var r = (0, _math.sqrt)(c - 2 * n * (0, _math.sin)(y)) / n;
    return [r * (0, _math.sin)(x *= n), r0 - r * (0, _math.cos)(x)];
  }

  project.invert = function (x, y) {
    var r0y = r0 - y;
    return [(0, _math.atan2)(x, (0, _math.abs)(r0y)) / n * (0, _math.sign)(r0y), (0, _math.asin)((c - (x * x + r0y * r0y) * n * n) / (2 * n))];
  };

  return project;
}

function _default() {
  return (0, _conic.conicProjection)(conicEqualAreaRaw).scale(155.424).center([0, 33.6442]);
}
},{"../math":"../node_modules/d3-geo/src/math.js","./conic":"../node_modules/d3-geo/src/projection/conic.js","./cylindricalEqualArea":"../node_modules/d3-geo/src/projection/cylindricalEqualArea.js"}],"../node_modules/d3-geo/src/projection/albers.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _conicEqualArea = _interopRequireDefault(require("./conicEqualArea"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  return (0, _conicEqualArea.default)().parallels([29.5, 45.5]).scale(1070).translate([480, 250]).rotate([96, 0]).center([-0.6, 38.7]);
}
},{"./conicEqualArea":"../node_modules/d3-geo/src/projection/conicEqualArea.js"}],"../node_modules/d3-geo/src/projection/albersUsa.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _math = require("../math");

var _albers = _interopRequireDefault(require("./albers"));

var _conicEqualArea = _interopRequireDefault(require("./conicEqualArea"));

var _fit = require("./fit");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// The projections must have mutually exclusive clip regions on the sphere,
// as this will avoid emitting interleaving lines and polygons.
function multiplex(streams) {
  var n = streams.length;
  return {
    point: function (x, y) {
      var i = -1;

      while (++i < n) streams[i].point(x, y);
    },
    sphere: function () {
      var i = -1;

      while (++i < n) streams[i].sphere();
    },
    lineStart: function () {
      var i = -1;

      while (++i < n) streams[i].lineStart();
    },
    lineEnd: function () {
      var i = -1;

      while (++i < n) streams[i].lineEnd();
    },
    polygonStart: function () {
      var i = -1;

      while (++i < n) streams[i].polygonStart();
    },
    polygonEnd: function () {
      var i = -1;

      while (++i < n) streams[i].polygonEnd();
    }
  };
} // A composite projection for the United States, configured by default for
// 960×500. The projection also works quite well at 960×600 if you change the
// scale to 1285 and adjust the translate accordingly. The set of standard
// parallels for each region comes from USGS, which is published here:
// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers


function _default() {
  var cache,
      cacheStream,
      lower48 = (0, _albers.default)(),
      lower48Point,
      alaska = (0, _conicEqualArea.default)().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]),
      alaskaPoint,
      // EPSG:3338
  hawaii = (0, _conicEqualArea.default)().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]),
      hawaiiPoint,
      // ESRI:102007
  point,
      pointStream = {
    point: function (x, y) {
      point = [x, y];
    }
  };

  function albersUsa(coordinates) {
    var x = coordinates[0],
        y = coordinates[1];
    return point = null, (lower48Point.point(x, y), point) || (alaskaPoint.point(x, y), point) || (hawaiiPoint.point(x, y), point);
  }

  albersUsa.invert = function (coordinates) {
    var k = lower48.scale(),
        t = lower48.translate(),
        x = (coordinates[0] - t[0]) / k,
        y = (coordinates[1] - t[1]) / k;
    return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii : lower48).invert(coordinates);
  };

  albersUsa.stream = function (stream) {
    return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);
  };

  albersUsa.precision = function (_) {
    if (!arguments.length) return lower48.precision();
    lower48.precision(_), alaska.precision(_), hawaii.precision(_);
    return reset();
  };

  albersUsa.scale = function (_) {
    if (!arguments.length) return lower48.scale();
    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);
    return albersUsa.translate(lower48.translate());
  };

  albersUsa.translate = function (_) {
    if (!arguments.length) return lower48.translate();
    var k = lower48.scale(),
        x = +_[0],
        y = +_[1];
    lower48Point = lower48.translate(_).clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]]).stream(pointStream);
    alaskaPoint = alaska.translate([x - 0.307 * k, y + 0.201 * k]).clipExtent([[x - 0.425 * k + _math.epsilon, y + 0.120 * k + _math.epsilon], [x - 0.214 * k - _math.epsilon, y + 0.234 * k - _math.epsilon]]).stream(pointStream);
    hawaiiPoint = hawaii.translate([x - 0.205 * k, y + 0.212 * k]).clipExtent([[x - 0.214 * k + _math.epsilon, y + 0.166 * k + _math.epsilon], [x - 0.115 * k - _math.epsilon, y + 0.234 * k - _math.epsilon]]).stream(pointStream);
    return reset();
  };

  albersUsa.fitExtent = function (extent, object) {
    return (0, _fit.fitExtent)(albersUsa, extent, object);
  };

  albersUsa.fitSize = function (size, object) {
    return (0, _fit.fitSize)(albersUsa, size, object);
  };

  albersUsa.fitWidth = function (width, object) {
    return (0, _fit.fitWidth)(albersUsa, width, object);
  };

  albersUsa.fitHeight = function (height, object) {
    return (0, _fit.fitHeight)(albersUsa, height, object);
  };

  function reset() {
    cache = cacheStream = null;
    return albersUsa;
  }

  return albersUsa.scale(1070);
}
},{"../math":"../node_modules/d3-geo/src/math.js","./albers":"../node_modules/d3-geo/src/projection/albers.js","./conicEqualArea":"../node_modules/d3-geo/src/projection/conicEqualArea.js","./fit":"../node_modules/d3-geo/src/projection/fit.js"}],"../node_modules/d3-geo/src/projection/azimuthal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.azimuthalRaw = azimuthalRaw;
exports.azimuthalInvert = azimuthalInvert;

var _math = require("../math");

function azimuthalRaw(scale) {
  return function (x, y) {
    var cx = (0, _math.cos)(x),
        cy = (0, _math.cos)(y),
        k = scale(cx * cy);
    return [k * cy * (0, _math.sin)(x), k * (0, _math.sin)(y)];
  };
}

function azimuthalInvert(angle) {
  return function (x, y) {
    var z = (0, _math.sqrt)(x * x + y * y),
        c = angle(z),
        sc = (0, _math.sin)(c),
        cc = (0, _math.cos)(c);
    return [(0, _math.atan2)(x * sc, z * cc), (0, _math.asin)(z && y * sc / z)];
  };
}
},{"../math":"../node_modules/d3-geo/src/math.js"}],"../node_modules/d3-geo/src/projection/azimuthalEqualArea.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.azimuthalEqualAreaRaw = void 0;

var _math = require("../math");

var _azimuthal = require("./azimuthal");

var _index = _interopRequireDefault(require("./index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var azimuthalEqualAreaRaw = (0, _azimuthal.azimuthalRaw)(function (cxcy) {
  return (0, _math.sqrt)(2 / (1 + cxcy));
});
exports.azimuthalEqualAreaRaw = azimuthalEqualAreaRaw;
azimuthalEqualAreaRaw.invert = (0, _azimuthal.azimuthalInvert)(function (z) {
  return 2 * (0, _math.asin)(z / 2);
});

function _default() {
  return (0, _index.default)(azimuthalEqualAreaRaw).scale(124.75).clipAngle(180 - 1e-3);
}
},{"../math":"../node_modules/d3-geo/src/math.js","./azimuthal":"../node_modules/d3-geo/src/projection/azimuthal.js","./index":"../node_modules/d3-geo/src/projection/index.js"}],"../node_modules/d3-geo/src/projection/azimuthalEquidistant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.azimuthalEquidistantRaw = void 0;

var _math = require("../math");

var _azimuthal = require("./azimuthal");

var _index = _interopRequireDefault(require("./index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var azimuthalEquidistantRaw = (0, _azimuthal.azimuthalRaw)(function (c) {
  return (c = (0, _math.acos)(c)) && c / (0, _math.sin)(c);
});
exports.azimuthalEquidistantRaw = azimuthalEquidistantRaw;
azimuthalEquidistantRaw.invert = (0, _azimuthal.azimuthalInvert)(function (z) {
  return z;
});

function _default() {
  return (0, _index.default)(azimuthalEquidistantRaw).scale(79.4188).clipAngle(180 - 1e-3);
}
},{"../math":"../node_modules/d3-geo/src/math.js","./azimuthal":"../node_modules/d3-geo/src/projection/azimuthal.js","./index":"../node_modules/d3-geo/src/projection/index.js"}],"../node_modules/d3-geo/src/projection/mercator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mercatorRaw = mercatorRaw;
exports.default = _default;
exports.mercatorProjection = mercatorProjection;

var _math = require("../math");

var _rotation = _interopRequireDefault(require("../rotation"));

var _index = _interopRequireDefault(require("./index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function mercatorRaw(lambda, phi) {
  return [lambda, (0, _math.log)((0, _math.tan)((_math.halfPi + phi) / 2))];
}

mercatorRaw.invert = function (x, y) {
  return [x, 2 * (0, _math.atan)((0, _math.exp)(y)) - _math.halfPi];
};

function _default() {
  return mercatorProjection(mercatorRaw).scale(961 / _math.tau);
}

function mercatorProjection(project) {
  var m = (0, _index.default)(project),
      center = m.center,
      scale = m.scale,
      translate = m.translate,
      clipExtent = m.clipExtent,
      x0 = null,
      y0,
      x1,
      y1; // clip extent

  m.scale = function (_) {
    return arguments.length ? (scale(_), reclip()) : scale();
  };

  m.translate = function (_) {
    return arguments.length ? (translate(_), reclip()) : translate();
  };

  m.center = function (_) {
    return arguments.length ? (center(_), reclip()) : center();
  };

  m.clipExtent = function (_) {
    return arguments.length ? (_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];
  };

  function reclip() {
    var k = _math.pi * scale(),
        t = m((0, _rotation.default)(m.rotate()).invert([0, 0]));
    return clipExtent(x0 == null ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]] : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);
  }

  return reclip();
}
},{"../math":"../node_modules/d3-geo/src/math.js","../rotation":"../node_modules/d3-geo/src/rotation.js","./index":"../node_modules/d3-geo/src/projection/index.js"}],"../node_modules/d3-geo/src/projection/conicConformal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conicConformalRaw = conicConformalRaw;
exports.default = _default;

var _math = require("../math");

var _conic = require("./conic");

var _mercator = require("./mercator");

function tany(y) {
  return (0, _math.tan)((_math.halfPi + y) / 2);
}

function conicConformalRaw(y0, y1) {
  var cy0 = (0, _math.cos)(y0),
      n = y0 === y1 ? (0, _math.sin)(y0) : (0, _math.log)(cy0 / (0, _math.cos)(y1)) / (0, _math.log)(tany(y1) / tany(y0)),
      f = cy0 * (0, _math.pow)(tany(y0), n) / n;
  if (!n) return _mercator.mercatorRaw;

  function project(x, y) {
    if (f > 0) {
      if (y < -_math.halfPi + _math.epsilon) y = -_math.halfPi + _math.epsilon;
    } else {
      if (y > _math.halfPi - _math.epsilon) y = _math.halfPi - _math.epsilon;
    }

    var r = f / (0, _math.pow)(tany(y), n);
    return [r * (0, _math.sin)(n * x), f - r * (0, _math.cos)(n * x)];
  }

  project.invert = function (x, y) {
    var fy = f - y,
        r = (0, _math.sign)(n) * (0, _math.sqrt)(x * x + fy * fy);
    return [(0, _math.atan2)(x, (0, _math.abs)(fy)) / n * (0, _math.sign)(fy), 2 * (0, _math.atan)((0, _math.pow)(f / r, 1 / n)) - _math.halfPi];
  };

  return project;
}

function _default() {
  return (0, _conic.conicProjection)(conicConformalRaw).scale(109.5).parallels([30, 30]);
}
},{"../math":"../node_modules/d3-geo/src/math.js","./conic":"../node_modules/d3-geo/src/projection/conic.js","./mercator":"../node_modules/d3-geo/src/projection/mercator.js"}],"../node_modules/d3-geo/src/projection/equirectangular.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.equirectangularRaw = equirectangularRaw;
exports.default = _default;

var _index = _interopRequireDefault(require("./index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function equirectangularRaw(lambda, phi) {
  return [lambda, phi];
}

equirectangularRaw.invert = equirectangularRaw;

function _default() {
  return (0, _index.default)(equirectangularRaw).scale(152.63);
}
},{"./index":"../node_modules/d3-geo/src/projection/index.js"}],"../node_modules/d3-geo/src/projection/conicEquidistant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conicEquidistantRaw = conicEquidistantRaw;
exports.default = _default;

var _math = require("../math");

var _conic = require("./conic");

var _equirectangular = require("./equirectangular");

function conicEquidistantRaw(y0, y1) {
  var cy0 = (0, _math.cos)(y0),
      n = y0 === y1 ? (0, _math.sin)(y0) : (cy0 - (0, _math.cos)(y1)) / (y1 - y0),
      g = cy0 / n + y0;
  if ((0, _math.abs)(n) < _math.epsilon) return _equirectangular.equirectangularRaw;

  function project(x, y) {
    var gy = g - y,
        nx = n * x;
    return [gy * (0, _math.sin)(nx), g - gy * (0, _math.cos)(nx)];
  }

  project.invert = function (x, y) {
    var gy = g - y;
    return [(0, _math.atan2)(x, (0, _math.abs)(gy)) / n * (0, _math.sign)(gy), g - (0, _math.sign)(n) * (0, _math.sqrt)(x * x + gy * gy)];
  };

  return project;
}

function _default() {
  return (0, _conic.conicProjection)(conicEquidistantRaw).scale(131.154).center([0, 13.9389]);
}
},{"../math":"../node_modules/d3-geo/src/math.js","./conic":"../node_modules/d3-geo/src/projection/conic.js","./equirectangular":"../node_modules/d3-geo/src/projection/equirectangular.js"}],"../node_modules/d3-geo/src/projection/equalEarth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.equalEarthRaw = equalEarthRaw;
exports.default = _default;

var _index = _interopRequireDefault(require("./index.js"));

var _math = require("../math.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var A1 = 1.340264,
    A2 = -0.081106,
    A3 = 0.000893,
    A4 = 0.003796,
    M = (0, _math.sqrt)(3) / 2,
    iterations = 12;

function equalEarthRaw(lambda, phi) {
  var l = (0, _math.asin)(M * (0, _math.sin)(phi)),
      l2 = l * l,
      l6 = l2 * l2 * l2;
  return [lambda * (0, _math.cos)(l) / (M * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2))), l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2))];
}

equalEarthRaw.invert = function (x, y) {
  var l = y,
      l2 = l * l,
      l6 = l2 * l2 * l2;

  for (var i = 0, delta, fy, fpy; i < iterations; ++i) {
    fy = l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2)) - y;
    fpy = A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2);
    l -= delta = fy / fpy, l2 = l * l, l6 = l2 * l2 * l2;
    if ((0, _math.abs)(delta) < _math.epsilon2) break;
  }

  return [M * x * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2)) / (0, _math.cos)(l), (0, _math.asin)((0, _math.sin)(l) / M)];
};

function _default() {
  return (0, _index.default)(equalEarthRaw).scale(177.158);
}
},{"./index.js":"../node_modules/d3-geo/src/projection/index.js","../math.js":"../node_modules/d3-geo/src/math.js"}],"../node_modules/d3-geo/src/projection/gnomonic.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gnomonicRaw = gnomonicRaw;
exports.default = _default;

var _math = require("../math");

var _azimuthal = require("./azimuthal");

var _index = _interopRequireDefault(require("./index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function gnomonicRaw(x, y) {
  var cy = (0, _math.cos)(y),
      k = (0, _math.cos)(x) * cy;
  return [cy * (0, _math.sin)(x) / k, (0, _math.sin)(y) / k];
}

gnomonicRaw.invert = (0, _azimuthal.azimuthalInvert)(_math.atan);

function _default() {
  return (0, _index.default)(gnomonicRaw).scale(144.049).clipAngle(60);
}
},{"../math":"../node_modules/d3-geo/src/math.js","./azimuthal":"../node_modules/d3-geo/src/projection/azimuthal.js","./index":"../node_modules/d3-geo/src/projection/index.js"}],"../node_modules/d3-geo/src/projection/identity.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _rectangle = _interopRequireDefault(require("../clip/rectangle"));

var _identity = _interopRequireDefault(require("../identity"));

var _transform = require("../transform");

var _fit = require("./fit");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function scaleTranslate(kx, ky, tx, ty) {
  return kx === 1 && ky === 1 && tx === 0 && ty === 0 ? _identity.default : (0, _transform.transformer)({
    point: function (x, y) {
      this.stream.point(x * kx + tx, y * ky + ty);
    }
  });
}

function _default() {
  var k = 1,
      tx = 0,
      ty = 0,
      sx = 1,
      sy = 1,
      transform = _identity.default,
      // scale, translate and reflect
  x0 = null,
      y0,
      x1,
      y1,
      // clip extent
  postclip = _identity.default,
      cache,
      cacheStream,
      projection;

  function reset() {
    cache = cacheStream = null;
    return projection;
  }

  return projection = {
    stream: function (stream) {
      return cache && cacheStream === stream ? cache : cache = transform(postclip(cacheStream = stream));
    },
    postclip: function (_) {
      return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
    },
    clipExtent: function (_) {
      return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, _identity.default) : (0, _rectangle.default)(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
    },
    scale: function (_) {
      return arguments.length ? (transform = scaleTranslate((k = +_) * sx, k * sy, tx, ty), reset()) : k;
    },
    translate: function (_) {
      return arguments.length ? (transform = scaleTranslate(k * sx, k * sy, tx = +_[0], ty = +_[1]), reset()) : [tx, ty];
    },
    reflectX: function (_) {
      return arguments.length ? (transform = scaleTranslate(k * (sx = _ ? -1 : 1), k * sy, tx, ty), reset()) : sx < 0;
    },
    reflectY: function (_) {
      return arguments.length ? (transform = scaleTranslate(k * sx, k * (sy = _ ? -1 : 1), tx, ty), reset()) : sy < 0;
    },
    fitExtent: function (extent, object) {
      return (0, _fit.fitExtent)(projection, extent, object);
    },
    fitSize: function (size, object) {
      return (0, _fit.fitSize)(projection, size, object);
    },
    fitWidth: function (width, object) {
      return (0, _fit.fitWidth)(projection, width, object);
    },
    fitHeight: function (height, object) {
      return (0, _fit.fitHeight)(projection, height, object);
    }
  };
}
},{"../clip/rectangle":"../node_modules/d3-geo/src/clip/rectangle.js","../identity":"../node_modules/d3-geo/src/identity.js","../transform":"../node_modules/d3-geo/src/transform.js","./fit":"../node_modules/d3-geo/src/projection/fit.js"}],"../node_modules/d3-geo/src/projection/naturalEarth1.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.naturalEarth1Raw = naturalEarth1Raw;
exports.default = _default;

var _index = _interopRequireDefault(require("./index"));

var _math = require("../math");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function naturalEarth1Raw(lambda, phi) {
  var phi2 = phi * phi,
      phi4 = phi2 * phi2;
  return [lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))), phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))];
}

naturalEarth1Raw.invert = function (x, y) {
  var phi = y,
      i = 25,
      delta;

  do {
    var phi2 = phi * phi,
        phi4 = phi2 * phi2;
    phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) / (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));
  } while ((0, _math.abs)(delta) > _math.epsilon && --i > 0);

  return [x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))), phi];
};

function _default() {
  return (0, _index.default)(naturalEarth1Raw).scale(175.295);
}
},{"./index":"../node_modules/d3-geo/src/projection/index.js","../math":"../node_modules/d3-geo/src/math.js"}],"../node_modules/d3-geo/src/projection/orthographic.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.orthographicRaw = orthographicRaw;
exports.default = _default;

var _math = require("../math");

var _azimuthal = require("./azimuthal");

var _index = _interopRequireDefault(require("./index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function orthographicRaw(x, y) {
  return [(0, _math.cos)(y) * (0, _math.sin)(x), (0, _math.sin)(y)];
}

orthographicRaw.invert = (0, _azimuthal.azimuthalInvert)(_math.asin);

function _default() {
  return (0, _index.default)(orthographicRaw).scale(249.5).clipAngle(90 + _math.epsilon);
}
},{"../math":"../node_modules/d3-geo/src/math.js","./azimuthal":"../node_modules/d3-geo/src/projection/azimuthal.js","./index":"../node_modules/d3-geo/src/projection/index.js"}],"../node_modules/d3-geo/src/projection/stereographic.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stereographicRaw = stereographicRaw;
exports.default = _default;

var _math = require("../math");

var _azimuthal = require("./azimuthal");

var _index = _interopRequireDefault(require("./index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function stereographicRaw(x, y) {
  var cy = (0, _math.cos)(y),
      k = 1 + (0, _math.cos)(x) * cy;
  return [cy * (0, _math.sin)(x) / k, (0, _math.sin)(y) / k];
}

stereographicRaw.invert = (0, _azimuthal.azimuthalInvert)(function (z) {
  return 2 * (0, _math.atan)(z);
});

function _default() {
  return (0, _index.default)(stereographicRaw).scale(250).clipAngle(142);
}
},{"../math":"../node_modules/d3-geo/src/math.js","./azimuthal":"../node_modules/d3-geo/src/projection/azimuthal.js","./index":"../node_modules/d3-geo/src/projection/index.js"}],"../node_modules/d3-geo/src/projection/transverseMercator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transverseMercatorRaw = transverseMercatorRaw;
exports.default = _default;

var _math = require("../math");

var _mercator = require("./mercator");

function transverseMercatorRaw(lambda, phi) {
  return [(0, _math.log)((0, _math.tan)((_math.halfPi + phi) / 2)), -lambda];
}

transverseMercatorRaw.invert = function (x, y) {
  return [-y, 2 * (0, _math.atan)((0, _math.exp)(x)) - _math.halfPi];
};

function _default() {
  var m = (0, _mercator.mercatorProjection)(transverseMercatorRaw),
      center = m.center,
      rotate = m.rotate;

  m.center = function (_) {
    return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);
  };

  m.rotate = function (_) {
    return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);
  };

  return rotate([0, 0, 90]).scale(159.155);
}
},{"../math":"../node_modules/d3-geo/src/math.js","./mercator":"../node_modules/d3-geo/src/projection/mercator.js"}],"../node_modules/d3-geo/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "geoArea", {
  enumerable: true,
  get: function () {
    return _area.default;
  }
});
Object.defineProperty(exports, "geoBounds", {
  enumerable: true,
  get: function () {
    return _bounds.default;
  }
});
Object.defineProperty(exports, "geoCentroid", {
  enumerable: true,
  get: function () {
    return _centroid.default;
  }
});
Object.defineProperty(exports, "geoCircle", {
  enumerable: true,
  get: function () {
    return _circle.default;
  }
});
Object.defineProperty(exports, "geoClipAntimeridian", {
  enumerable: true,
  get: function () {
    return _antimeridian.default;
  }
});
Object.defineProperty(exports, "geoClipCircle", {
  enumerable: true,
  get: function () {
    return _circle2.default;
  }
});
Object.defineProperty(exports, "geoClipExtent", {
  enumerable: true,
  get: function () {
    return _extent.default;
  }
});
Object.defineProperty(exports, "geoClipRectangle", {
  enumerable: true,
  get: function () {
    return _rectangle.default;
  }
});
Object.defineProperty(exports, "geoContains", {
  enumerable: true,
  get: function () {
    return _contains.default;
  }
});
Object.defineProperty(exports, "geoDistance", {
  enumerable: true,
  get: function () {
    return _distance.default;
  }
});
Object.defineProperty(exports, "geoGraticule", {
  enumerable: true,
  get: function () {
    return _graticule.default;
  }
});
Object.defineProperty(exports, "geoGraticule10", {
  enumerable: true,
  get: function () {
    return _graticule.graticule10;
  }
});
Object.defineProperty(exports, "geoInterpolate", {
  enumerable: true,
  get: function () {
    return _interpolate.default;
  }
});
Object.defineProperty(exports, "geoLength", {
  enumerable: true,
  get: function () {
    return _length.default;
  }
});
Object.defineProperty(exports, "geoPath", {
  enumerable: true,
  get: function () {
    return _index.default;
  }
});
Object.defineProperty(exports, "geoAlbers", {
  enumerable: true,
  get: function () {
    return _albers.default;
  }
});
Object.defineProperty(exports, "geoAlbersUsa", {
  enumerable: true,
  get: function () {
    return _albersUsa.default;
  }
});
Object.defineProperty(exports, "geoAzimuthalEqualArea", {
  enumerable: true,
  get: function () {
    return _azimuthalEqualArea.default;
  }
});
Object.defineProperty(exports, "geoAzimuthalEqualAreaRaw", {
  enumerable: true,
  get: function () {
    return _azimuthalEqualArea.azimuthalEqualAreaRaw;
  }
});
Object.defineProperty(exports, "geoAzimuthalEquidistant", {
  enumerable: true,
  get: function () {
    return _azimuthalEquidistant.default;
  }
});
Object.defineProperty(exports, "geoAzimuthalEquidistantRaw", {
  enumerable: true,
  get: function () {
    return _azimuthalEquidistant.azimuthalEquidistantRaw;
  }
});
Object.defineProperty(exports, "geoConicConformal", {
  enumerable: true,
  get: function () {
    return _conicConformal.default;
  }
});
Object.defineProperty(exports, "geoConicConformalRaw", {
  enumerable: true,
  get: function () {
    return _conicConformal.conicConformalRaw;
  }
});
Object.defineProperty(exports, "geoConicEqualArea", {
  enumerable: true,
  get: function () {
    return _conicEqualArea.default;
  }
});
Object.defineProperty(exports, "geoConicEqualAreaRaw", {
  enumerable: true,
  get: function () {
    return _conicEqualArea.conicEqualAreaRaw;
  }
});
Object.defineProperty(exports, "geoConicEquidistant", {
  enumerable: true,
  get: function () {
    return _conicEquidistant.default;
  }
});
Object.defineProperty(exports, "geoConicEquidistantRaw", {
  enumerable: true,
  get: function () {
    return _conicEquidistant.conicEquidistantRaw;
  }
});
Object.defineProperty(exports, "geoEqualEarth", {
  enumerable: true,
  get: function () {
    return _equalEarth.default;
  }
});
Object.defineProperty(exports, "geoEqualEarthRaw", {
  enumerable: true,
  get: function () {
    return _equalEarth.equalEarthRaw;
  }
});
Object.defineProperty(exports, "geoEquirectangular", {
  enumerable: true,
  get: function () {
    return _equirectangular.default;
  }
});
Object.defineProperty(exports, "geoEquirectangularRaw", {
  enumerable: true,
  get: function () {
    return _equirectangular.equirectangularRaw;
  }
});
Object.defineProperty(exports, "geoGnomonic", {
  enumerable: true,
  get: function () {
    return _gnomonic.default;
  }
});
Object.defineProperty(exports, "geoGnomonicRaw", {
  enumerable: true,
  get: function () {
    return _gnomonic.gnomonicRaw;
  }
});
Object.defineProperty(exports, "geoIdentity", {
  enumerable: true,
  get: function () {
    return _identity.default;
  }
});
Object.defineProperty(exports, "geoProjection", {
  enumerable: true,
  get: function () {
    return _index2.default;
  }
});
Object.defineProperty(exports, "geoProjectionMutator", {
  enumerable: true,
  get: function () {
    return _index2.projectionMutator;
  }
});
Object.defineProperty(exports, "geoMercator", {
  enumerable: true,
  get: function () {
    return _mercator.default;
  }
});
Object.defineProperty(exports, "geoMercatorRaw", {
  enumerable: true,
  get: function () {
    return _mercator.mercatorRaw;
  }
});
Object.defineProperty(exports, "geoNaturalEarth1", {
  enumerable: true,
  get: function () {
    return _naturalEarth.default;
  }
});
Object.defineProperty(exports, "geoNaturalEarth1Raw", {
  enumerable: true,
  get: function () {
    return _naturalEarth.naturalEarth1Raw;
  }
});
Object.defineProperty(exports, "geoOrthographic", {
  enumerable: true,
  get: function () {
    return _orthographic.default;
  }
});
Object.defineProperty(exports, "geoOrthographicRaw", {
  enumerable: true,
  get: function () {
    return _orthographic.orthographicRaw;
  }
});
Object.defineProperty(exports, "geoStereographic", {
  enumerable: true,
  get: function () {
    return _stereographic.default;
  }
});
Object.defineProperty(exports, "geoStereographicRaw", {
  enumerable: true,
  get: function () {
    return _stereographic.stereographicRaw;
  }
});
Object.defineProperty(exports, "geoTransverseMercator", {
  enumerable: true,
  get: function () {
    return _transverseMercator.default;
  }
});
Object.defineProperty(exports, "geoTransverseMercatorRaw", {
  enumerable: true,
  get: function () {
    return _transverseMercator.transverseMercatorRaw;
  }
});
Object.defineProperty(exports, "geoRotation", {
  enumerable: true,
  get: function () {
    return _rotation.default;
  }
});
Object.defineProperty(exports, "geoStream", {
  enumerable: true,
  get: function () {
    return _stream.default;
  }
});
Object.defineProperty(exports, "geoTransform", {
  enumerable: true,
  get: function () {
    return _transform.default;
  }
});

var _area = _interopRequireDefault(require("./area"));

var _bounds = _interopRequireDefault(require("./bounds"));

var _centroid = _interopRequireDefault(require("./centroid"));

var _circle = _interopRequireDefault(require("./circle"));

var _antimeridian = _interopRequireDefault(require("./clip/antimeridian"));

var _circle2 = _interopRequireDefault(require("./clip/circle"));

var _extent = _interopRequireDefault(require("./clip/extent"));

var _rectangle = _interopRequireDefault(require("./clip/rectangle"));

var _contains = _interopRequireDefault(require("./contains"));

var _distance = _interopRequireDefault(require("./distance"));

var _graticule = _interopRequireWildcard(require("./graticule"));

var _interpolate = _interopRequireDefault(require("./interpolate"));

var _length = _interopRequireDefault(require("./length"));

var _index = _interopRequireDefault(require("./path/index"));

var _albers = _interopRequireDefault(require("./projection/albers"));

var _albersUsa = _interopRequireDefault(require("./projection/albersUsa"));

var _azimuthalEqualArea = _interopRequireWildcard(require("./projection/azimuthalEqualArea"));

var _azimuthalEquidistant = _interopRequireWildcard(require("./projection/azimuthalEquidistant"));

var _conicConformal = _interopRequireWildcard(require("./projection/conicConformal"));

var _conicEqualArea = _interopRequireWildcard(require("./projection/conicEqualArea"));

var _conicEquidistant = _interopRequireWildcard(require("./projection/conicEquidistant"));

var _equalEarth = _interopRequireWildcard(require("./projection/equalEarth"));

var _equirectangular = _interopRequireWildcard(require("./projection/equirectangular"));

var _gnomonic = _interopRequireWildcard(require("./projection/gnomonic"));

var _identity = _interopRequireDefault(require("./projection/identity"));

var _index2 = _interopRequireWildcard(require("./projection/index"));

var _mercator = _interopRequireWildcard(require("./projection/mercator"));

var _naturalEarth = _interopRequireWildcard(require("./projection/naturalEarth1"));

var _orthographic = _interopRequireWildcard(require("./projection/orthographic"));

var _stereographic = _interopRequireWildcard(require("./projection/stereographic"));

var _transverseMercator = _interopRequireWildcard(require("./projection/transverseMercator"));

var _rotation = _interopRequireDefault(require("./rotation"));

var _stream = _interopRequireDefault(require("./stream"));

var _transform = _interopRequireDefault(require("./transform"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./area":"../node_modules/d3-geo/src/area.js","./bounds":"../node_modules/d3-geo/src/bounds.js","./centroid":"../node_modules/d3-geo/src/centroid.js","./circle":"../node_modules/d3-geo/src/circle.js","./clip/antimeridian":"../node_modules/d3-geo/src/clip/antimeridian.js","./clip/circle":"../node_modules/d3-geo/src/clip/circle.js","./clip/extent":"../node_modules/d3-geo/src/clip/extent.js","./clip/rectangle":"../node_modules/d3-geo/src/clip/rectangle.js","./contains":"../node_modules/d3-geo/src/contains.js","./distance":"../node_modules/d3-geo/src/distance.js","./graticule":"../node_modules/d3-geo/src/graticule.js","./interpolate":"../node_modules/d3-geo/src/interpolate.js","./length":"../node_modules/d3-geo/src/length.js","./path/index":"../node_modules/d3-geo/src/path/index.js","./projection/albers":"../node_modules/d3-geo/src/projection/albers.js","./projection/albersUsa":"../node_modules/d3-geo/src/projection/albersUsa.js","./projection/azimuthalEqualArea":"../node_modules/d3-geo/src/projection/azimuthalEqualArea.js","./projection/azimuthalEquidistant":"../node_modules/d3-geo/src/projection/azimuthalEquidistant.js","./projection/conicConformal":"../node_modules/d3-geo/src/projection/conicConformal.js","./projection/conicEqualArea":"../node_modules/d3-geo/src/projection/conicEqualArea.js","./projection/conicEquidistant":"../node_modules/d3-geo/src/projection/conicEquidistant.js","./projection/equalEarth":"../node_modules/d3-geo/src/projection/equalEarth.js","./projection/equirectangular":"../node_modules/d3-geo/src/projection/equirectangular.js","./projection/gnomonic":"../node_modules/d3-geo/src/projection/gnomonic.js","./projection/identity":"../node_modules/d3-geo/src/projection/identity.js","./projection/index":"../node_modules/d3-geo/src/projection/index.js","./projection/mercator":"../node_modules/d3-geo/src/projection/mercator.js","./projection/naturalEarth1":"../node_modules/d3-geo/src/projection/naturalEarth1.js","./projection/orthographic":"../node_modules/d3-geo/src/projection/orthographic.js","./projection/stereographic":"../node_modules/d3-geo/src/projection/stereographic.js","./projection/transverseMercator":"../node_modules/d3-geo/src/projection/transverseMercator.js","./rotation":"../node_modules/d3-geo/src/rotation.js","./stream":"../node_modules/d3-geo/src/stream.js","./transform":"../node_modules/d3-geo/src/transform.js"}],"../node_modules/d3-hierarchy/src/cluster.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function defaultSeparation(a, b) {
  return a.parent === b.parent ? 1 : 2;
}

function meanX(children) {
  return children.reduce(meanXReduce, 0) / children.length;
}

function meanXReduce(x, c) {
  return x + c.x;
}

function maxY(children) {
  return 1 + children.reduce(maxYReduce, 0);
}

function maxYReduce(y, c) {
  return Math.max(y, c.y);
}

function leafLeft(node) {
  var children;

  while (children = node.children) node = children[0];

  return node;
}

function leafRight(node) {
  var children;

  while (children = node.children) node = children[children.length - 1];

  return node;
}

function _default() {
  var separation = defaultSeparation,
      dx = 1,
      dy = 1,
      nodeSize = false;

  function cluster(root) {
    var previousNode,
        x = 0; // First walk, computing the initial x & y values.

    root.eachAfter(function (node) {
      var children = node.children;

      if (children) {
        node.x = meanX(children);
        node.y = maxY(children);
      } else {
        node.x = previousNode ? x += separation(node, previousNode) : 0;
        node.y = 0;
        previousNode = node;
      }
    });
    var left = leafLeft(root),
        right = leafRight(root),
        x0 = left.x - separation(left, right) / 2,
        x1 = right.x + separation(right, left) / 2; // Second walk, normalizing x & y to the desired size.

    return root.eachAfter(nodeSize ? function (node) {
      node.x = (node.x - root.x) * dx;
      node.y = (root.y - node.y) * dy;
    } : function (node) {
      node.x = (node.x - x0) / (x1 - x0) * dx;
      node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;
    });
  }

  cluster.separation = function (x) {
    return arguments.length ? (separation = x, cluster) : separation;
  };

  cluster.size = function (x) {
    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : nodeSize ? null : [dx, dy];
  };

  cluster.nodeSize = function (x) {
    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : nodeSize ? [dx, dy] : null;
  };

  return cluster;
}
},{}],"../node_modules/d3-hierarchy/src/hierarchy/count.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function count(node) {
  var sum = 0,
      children = node.children,
      i = children && children.length;
  if (!i) sum = 1;else while (--i >= 0) sum += children[i].value;
  node.value = sum;
}

function _default() {
  return this.eachAfter(count);
}
},{}],"../node_modules/d3-hierarchy/src/hierarchy/each.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(callback) {
  var node = this,
      current,
      next = [node],
      children,
      i,
      n;

  do {
    current = next.reverse(), next = [];

    while (node = current.pop()) {
      callback(node), children = node.children;
      if (children) for (i = 0, n = children.length; i < n; ++i) {
        next.push(children[i]);
      }
    }
  } while (next.length);

  return this;
}
},{}],"../node_modules/d3-hierarchy/src/hierarchy/eachBefore.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(callback) {
  var node = this,
      nodes = [node],
      children,
      i;

  while (node = nodes.pop()) {
    callback(node), children = node.children;
    if (children) for (i = children.length - 1; i >= 0; --i) {
      nodes.push(children[i]);
    }
  }

  return this;
}
},{}],"../node_modules/d3-hierarchy/src/hierarchy/eachAfter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(callback) {
  var node = this,
      nodes = [node],
      next = [],
      children,
      i,
      n;

  while (node = nodes.pop()) {
    next.push(node), children = node.children;
    if (children) for (i = 0, n = children.length; i < n; ++i) {
      nodes.push(children[i]);
    }
  }

  while (node = next.pop()) {
    callback(node);
  }

  return this;
}
},{}],"../node_modules/d3-hierarchy/src/hierarchy/sum.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(value) {
  return this.eachAfter(function (node) {
    var sum = +value(node.data) || 0,
        children = node.children,
        i = children && children.length;

    while (--i >= 0) sum += children[i].value;

    node.value = sum;
  });
}
},{}],"../node_modules/d3-hierarchy/src/hierarchy/sort.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(compare) {
  return this.eachBefore(function (node) {
    if (node.children) {
      node.children.sort(compare);
    }
  });
}
},{}],"../node_modules/d3-hierarchy/src/hierarchy/path.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(end) {
  var start = this,
      ancestor = leastCommonAncestor(start, end),
      nodes = [start];

  while (start !== ancestor) {
    start = start.parent;
    nodes.push(start);
  }

  var k = nodes.length;

  while (end !== ancestor) {
    nodes.splice(k, 0, end);
    end = end.parent;
  }

  return nodes;
}

function leastCommonAncestor(a, b) {
  if (a === b) return a;
  var aNodes = a.ancestors(),
      bNodes = b.ancestors(),
      c = null;
  a = aNodes.pop();
  b = bNodes.pop();

  while (a === b) {
    c = a;
    a = aNodes.pop();
    b = bNodes.pop();
  }

  return c;
}
},{}],"../node_modules/d3-hierarchy/src/hierarchy/ancestors.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var node = this,
      nodes = [node];

  while (node = node.parent) {
    nodes.push(node);
  }

  return nodes;
}
},{}],"../node_modules/d3-hierarchy/src/hierarchy/descendants.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var nodes = [];
  this.each(function (node) {
    nodes.push(node);
  });
  return nodes;
}
},{}],"../node_modules/d3-hierarchy/src/hierarchy/leaves.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var leaves = [];
  this.eachBefore(function (node) {
    if (!node.children) {
      leaves.push(node);
    }
  });
  return leaves;
}
},{}],"../node_modules/d3-hierarchy/src/hierarchy/links.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var root = this,
      links = [];
  root.each(function (node) {
    if (node !== root) {
      // Don’t include the root’s parent, if any.
      links.push({
        source: node.parent,
        target: node
      });
    }
  });
  return links;
}
},{}],"../node_modules/d3-hierarchy/src/hierarchy/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = hierarchy;
exports.computeHeight = computeHeight;
exports.Node = Node;

var _count = _interopRequireDefault(require("./count"));

var _each = _interopRequireDefault(require("./each"));

var _eachBefore = _interopRequireDefault(require("./eachBefore"));

var _eachAfter = _interopRequireDefault(require("./eachAfter"));

var _sum = _interopRequireDefault(require("./sum"));

var _sort = _interopRequireDefault(require("./sort"));

var _path = _interopRequireDefault(require("./path"));

var _ancestors = _interopRequireDefault(require("./ancestors"));

var _descendants = _interopRequireDefault(require("./descendants"));

var _leaves = _interopRequireDefault(require("./leaves"));

var _links = _interopRequireDefault(require("./links"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function hierarchy(data, children) {
  var root = new Node(data),
      valued = +data.value && (root.value = data.value),
      node,
      nodes = [root],
      child,
      childs,
      i,
      n;
  if (children == null) children = defaultChildren;

  while (node = nodes.pop()) {
    if (valued) node.value = +node.data.value;

    if ((childs = children(node.data)) && (n = childs.length)) {
      node.children = new Array(n);

      for (i = n - 1; i >= 0; --i) {
        nodes.push(child = node.children[i] = new Node(childs[i]));
        child.parent = node;
        child.depth = node.depth + 1;
      }
    }
  }

  return root.eachBefore(computeHeight);
}

function node_copy() {
  return hierarchy(this).eachBefore(copyData);
}

function defaultChildren(d) {
  return d.children;
}

function copyData(node) {
  node.data = node.data.data;
}

function computeHeight(node) {
  var height = 0;

  do node.height = height; while ((node = node.parent) && node.height < ++height);
}

function Node(data) {
  this.data = data;
  this.depth = this.height = 0;
  this.parent = null;
}

Node.prototype = hierarchy.prototype = {
  constructor: Node,
  count: _count.default,
  each: _each.default,
  eachAfter: _eachAfter.default,
  eachBefore: _eachBefore.default,
  sum: _sum.default,
  sort: _sort.default,
  path: _path.default,
  ancestors: _ancestors.default,
  descendants: _descendants.default,
  leaves: _leaves.default,
  links: _links.default,
  copy: node_copy
};
},{"./count":"../node_modules/d3-hierarchy/src/hierarchy/count.js","./each":"../node_modules/d3-hierarchy/src/hierarchy/each.js","./eachBefore":"../node_modules/d3-hierarchy/src/hierarchy/eachBefore.js","./eachAfter":"../node_modules/d3-hierarchy/src/hierarchy/eachAfter.js","./sum":"../node_modules/d3-hierarchy/src/hierarchy/sum.js","./sort":"../node_modules/d3-hierarchy/src/hierarchy/sort.js","./path":"../node_modules/d3-hierarchy/src/hierarchy/path.js","./ancestors":"../node_modules/d3-hierarchy/src/hierarchy/ancestors.js","./descendants":"../node_modules/d3-hierarchy/src/hierarchy/descendants.js","./leaves":"../node_modules/d3-hierarchy/src/hierarchy/leaves.js","./links":"../node_modules/d3-hierarchy/src/hierarchy/links.js"}],"../node_modules/d3-hierarchy/src/array.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shuffle = shuffle;
exports.slice = void 0;
var slice = Array.prototype.slice;
exports.slice = slice;

function shuffle(array) {
  var m = array.length,
      t,
      i;

  while (m) {
    i = Math.random() * m-- | 0;
    t = array[m];
    array[m] = array[i];
    array[i] = t;
  }

  return array;
}
},{}],"../node_modules/d3-hierarchy/src/pack/enclose.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _array = require("../array");

function _default(circles) {
  var i = 0,
      n = (circles = (0, _array.shuffle)(_array.slice.call(circles))).length,
      B = [],
      p,
      e;

  while (i < n) {
    p = circles[i];
    if (e && enclosesWeak(e, p)) ++i;else e = encloseBasis(B = extendBasis(B, p)), i = 0;
  }

  return e;
}

function extendBasis(B, p) {
  var i, j;
  if (enclosesWeakAll(p, B)) return [p]; // If we get here then B must have at least one element.

  for (i = 0; i < B.length; ++i) {
    if (enclosesNot(p, B[i]) && enclosesWeakAll(encloseBasis2(B[i], p), B)) {
      return [B[i], p];
    }
  } // If we get here then B must have at least two elements.


  for (i = 0; i < B.length - 1; ++i) {
    for (j = i + 1; j < B.length; ++j) {
      if (enclosesNot(encloseBasis2(B[i], B[j]), p) && enclosesNot(encloseBasis2(B[i], p), B[j]) && enclosesNot(encloseBasis2(B[j], p), B[i]) && enclosesWeakAll(encloseBasis3(B[i], B[j], p), B)) {
        return [B[i], B[j], p];
      }
    }
  } // If we get here then something is very wrong.


  throw new Error();
}

function enclosesNot(a, b) {
  var dr = a.r - b.r,
      dx = b.x - a.x,
      dy = b.y - a.y;
  return dr < 0 || dr * dr < dx * dx + dy * dy;
}

function enclosesWeak(a, b) {
  var dr = a.r - b.r + 1e-6,
      dx = b.x - a.x,
      dy = b.y - a.y;
  return dr > 0 && dr * dr > dx * dx + dy * dy;
}

function enclosesWeakAll(a, B) {
  for (var i = 0; i < B.length; ++i) {
    if (!enclosesWeak(a, B[i])) {
      return false;
    }
  }

  return true;
}

function encloseBasis(B) {
  switch (B.length) {
    case 1:
      return encloseBasis1(B[0]);

    case 2:
      return encloseBasis2(B[0], B[1]);

    case 3:
      return encloseBasis3(B[0], B[1], B[2]);
  }
}

function encloseBasis1(a) {
  return {
    x: a.x,
    y: a.y,
    r: a.r
  };
}

function encloseBasis2(a, b) {
  var x1 = a.x,
      y1 = a.y,
      r1 = a.r,
      x2 = b.x,
      y2 = b.y,
      r2 = b.r,
      x21 = x2 - x1,
      y21 = y2 - y1,
      r21 = r2 - r1,
      l = Math.sqrt(x21 * x21 + y21 * y21);
  return {
    x: (x1 + x2 + x21 / l * r21) / 2,
    y: (y1 + y2 + y21 / l * r21) / 2,
    r: (l + r1 + r2) / 2
  };
}

function encloseBasis3(a, b, c) {
  var x1 = a.x,
      y1 = a.y,
      r1 = a.r,
      x2 = b.x,
      y2 = b.y,
      r2 = b.r,
      x3 = c.x,
      y3 = c.y,
      r3 = c.r,
      a2 = x1 - x2,
      a3 = x1 - x3,
      b2 = y1 - y2,
      b3 = y1 - y3,
      c2 = r2 - r1,
      c3 = r3 - r1,
      d1 = x1 * x1 + y1 * y1 - r1 * r1,
      d2 = d1 - x2 * x2 - y2 * y2 + r2 * r2,
      d3 = d1 - x3 * x3 - y3 * y3 + r3 * r3,
      ab = a3 * b2 - a2 * b3,
      xa = (b2 * d3 - b3 * d2) / (ab * 2) - x1,
      xb = (b3 * c2 - b2 * c3) / ab,
      ya = (a3 * d2 - a2 * d3) / (ab * 2) - y1,
      yb = (a2 * c3 - a3 * c2) / ab,
      A = xb * xb + yb * yb - 1,
      B = 2 * (r1 + xa * xb + ya * yb),
      C = xa * xa + ya * ya - r1 * r1,
      r = -(A ? (B + Math.sqrt(B * B - 4 * A * C)) / (2 * A) : C / B);
  return {
    x: x1 + xa + xb * r,
    y: y1 + ya + yb * r,
    r: r
  };
}
},{"../array":"../node_modules/d3-hierarchy/src/array.js"}],"../node_modules/d3-hierarchy/src/pack/siblings.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.packEnclose = packEnclose;
exports.default = _default;

var _enclose = _interopRequireDefault(require("./enclose"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function place(b, a, c) {
  var dx = b.x - a.x,
      x,
      a2,
      dy = b.y - a.y,
      y,
      b2,
      d2 = dx * dx + dy * dy;

  if (d2) {
    a2 = a.r + c.r, a2 *= a2;
    b2 = b.r + c.r, b2 *= b2;

    if (a2 > b2) {
      x = (d2 + b2 - a2) / (2 * d2);
      y = Math.sqrt(Math.max(0, b2 / d2 - x * x));
      c.x = b.x - x * dx - y * dy;
      c.y = b.y - x * dy + y * dx;
    } else {
      x = (d2 + a2 - b2) / (2 * d2);
      y = Math.sqrt(Math.max(0, a2 / d2 - x * x));
      c.x = a.x + x * dx - y * dy;
      c.y = a.y + x * dy + y * dx;
    }
  } else {
    c.x = a.x + c.r;
    c.y = a.y;
  }
}

function intersects(a, b) {
  var dr = a.r + b.r - 1e-6,
      dx = b.x - a.x,
      dy = b.y - a.y;
  return dr > 0 && dr * dr > dx * dx + dy * dy;
}

function score(node) {
  var a = node._,
      b = node.next._,
      ab = a.r + b.r,
      dx = (a.x * b.r + b.x * a.r) / ab,
      dy = (a.y * b.r + b.y * a.r) / ab;
  return dx * dx + dy * dy;
}

function Node(circle) {
  this._ = circle;
  this.next = null;
  this.previous = null;
}

function packEnclose(circles) {
  if (!(n = circles.length)) return 0;
  var a, b, c, n, aa, ca, i, j, k, sj, sk; // Place the first circle.

  a = circles[0], a.x = 0, a.y = 0;
  if (!(n > 1)) return a.r; // Place the second circle.

  b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;
  if (!(n > 2)) return a.r + b.r; // Place the third circle.

  place(b, a, c = circles[2]); // Initialize the front-chain using the first three circles a, b and c.

  a = new Node(a), b = new Node(b), c = new Node(c);
  a.next = c.previous = b;
  b.next = a.previous = c;
  c.next = b.previous = a; // Attempt to place each remaining circle…

  pack: for (i = 3; i < n; ++i) {
    place(a._, b._, c = circles[i]), c = new Node(c); // Find the closest intersecting circle on the front-chain, if any.
    // “Closeness” is determined by linear distance along the front-chain.
    // “Ahead” or “behind” is likewise determined by linear distance.

    j = b.next, k = a.previous, sj = b._.r, sk = a._.r;

    do {
      if (sj <= sk) {
        if (intersects(j._, c._)) {
          b = j, a.next = b, b.previous = a, --i;
          continue pack;
        }

        sj += j._.r, j = j.next;
      } else {
        if (intersects(k._, c._)) {
          a = k, a.next = b, b.previous = a, --i;
          continue pack;
        }

        sk += k._.r, k = k.previous;
      }
    } while (j !== k.next); // Success! Insert the new circle c between a and b.


    c.previous = a, c.next = b, a.next = b.previous = b = c; // Compute the new closest circle pair to the centroid.

    aa = score(a);

    while ((c = c.next) !== b) {
      if ((ca = score(c)) < aa) {
        a = c, aa = ca;
      }
    }

    b = a.next;
  } // Compute the enclosing circle of the front chain.


  a = [b._], c = b;

  while ((c = c.next) !== b) a.push(c._);

  c = (0, _enclose.default)(a); // Translate the circles to put the enclosing circle around the origin.

  for (i = 0; i < n; ++i) a = circles[i], a.x -= c.x, a.y -= c.y;

  return c.r;
}

function _default(circles) {
  packEnclose(circles);
  return circles;
}
},{"./enclose":"../node_modules/d3-hierarchy/src/pack/enclose.js"}],"../node_modules/d3-hierarchy/src/accessors.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.optional = optional;
exports.required = required;

function optional(f) {
  return f == null ? null : required(f);
}

function required(f) {
  if (typeof f !== "function") throw new Error();
  return f;
}
},{}],"../node_modules/d3-hierarchy/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.constantZero = constantZero;
exports.default = _default;

function constantZero() {
  return 0;
}

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"../node_modules/d3-hierarchy/src/pack/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _siblings = require("./siblings");

var _accessors = require("../accessors");

var _constant = _interopRequireWildcard(require("../constant"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function defaultRadius(d) {
  return Math.sqrt(d.value);
}

function _default() {
  var radius = null,
      dx = 1,
      dy = 1,
      padding = _constant.constantZero;

  function pack(root) {
    root.x = dx / 2, root.y = dy / 2;

    if (radius) {
      root.eachBefore(radiusLeaf(radius)).eachAfter(packChildren(padding, 0.5)).eachBefore(translateChild(1));
    } else {
      root.eachBefore(radiusLeaf(defaultRadius)).eachAfter(packChildren(_constant.constantZero, 1)).eachAfter(packChildren(padding, root.r / Math.min(dx, dy))).eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));
    }

    return root;
  }

  pack.radius = function (x) {
    return arguments.length ? (radius = (0, _accessors.optional)(x), pack) : radius;
  };

  pack.size = function (x) {
    return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [dx, dy];
  };

  pack.padding = function (x) {
    return arguments.length ? (padding = typeof x === "function" ? x : (0, _constant.default)(+x), pack) : padding;
  };

  return pack;
}

function radiusLeaf(radius) {
  return function (node) {
    if (!node.children) {
      node.r = Math.max(0, +radius(node) || 0);
    }
  };
}

function packChildren(padding, k) {
  return function (node) {
    if (children = node.children) {
      var children,
          i,
          n = children.length,
          r = padding(node) * k || 0,
          e;
      if (r) for (i = 0; i < n; ++i) children[i].r += r;
      e = (0, _siblings.packEnclose)(children);
      if (r) for (i = 0; i < n; ++i) children[i].r -= r;
      node.r = e + r;
    }
  };
}

function translateChild(k) {
  return function (node) {
    var parent = node.parent;
    node.r *= k;

    if (parent) {
      node.x = parent.x + k * node.x;
      node.y = parent.y + k * node.y;
    }
  };
}
},{"./siblings":"../node_modules/d3-hierarchy/src/pack/siblings.js","../accessors":"../node_modules/d3-hierarchy/src/accessors.js","../constant":"../node_modules/d3-hierarchy/src/constant.js"}],"../node_modules/d3-hierarchy/src/treemap/round.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(node) {
  node.x0 = Math.round(node.x0);
  node.y0 = Math.round(node.y0);
  node.x1 = Math.round(node.x1);
  node.y1 = Math.round(node.y1);
}
},{}],"../node_modules/d3-hierarchy/src/treemap/dice.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(parent, x0, y0, x1, y1) {
  var nodes = parent.children,
      node,
      i = -1,
      n = nodes.length,
      k = parent.value && (x1 - x0) / parent.value;

  while (++i < n) {
    node = nodes[i], node.y0 = y0, node.y1 = y1;
    node.x0 = x0, node.x1 = x0 += node.value * k;
  }
}
},{}],"../node_modules/d3-hierarchy/src/partition.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _round = _interopRequireDefault(require("./treemap/round"));

var _dice = _interopRequireDefault(require("./treemap/dice"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var dx = 1,
      dy = 1,
      padding = 0,
      round = false;

  function partition(root) {
    var n = root.height + 1;
    root.x0 = root.y0 = padding;
    root.x1 = dx;
    root.y1 = dy / n;
    root.eachBefore(positionNode(dy, n));
    if (round) root.eachBefore(_round.default);
    return root;
  }

  function positionNode(dy, n) {
    return function (node) {
      if (node.children) {
        (0, _dice.default)(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);
      }

      var x0 = node.x0,
          y0 = node.y0,
          x1 = node.x1 - padding,
          y1 = node.y1 - padding;
      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
      node.x0 = x0;
      node.y0 = y0;
      node.x1 = x1;
      node.y1 = y1;
    };
  }

  partition.round = function (x) {
    return arguments.length ? (round = !!x, partition) : round;
  };

  partition.size = function (x) {
    return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];
  };

  partition.padding = function (x) {
    return arguments.length ? (padding = +x, partition) : padding;
  };

  return partition;
}
},{"./treemap/round":"../node_modules/d3-hierarchy/src/treemap/round.js","./treemap/dice":"../node_modules/d3-hierarchy/src/treemap/dice.js"}],"../node_modules/d3-hierarchy/src/stratify.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _accessors = require("./accessors");

var _index = require("./hierarchy/index");

var keyPrefix = "$",
    // Protect against keys like “__proto__”.
preroot = {
  depth: -1
},
    ambiguous = {};

function defaultId(d) {
  return d.id;
}

function defaultParentId(d) {
  return d.parentId;
}

function _default() {
  var id = defaultId,
      parentId = defaultParentId;

  function stratify(data) {
    var d,
        i,
        n = data.length,
        root,
        parent,
        node,
        nodes = new Array(n),
        nodeId,
        nodeKey,
        nodeByKey = {};

    for (i = 0; i < n; ++i) {
      d = data[i], node = nodes[i] = new _index.Node(d);

      if ((nodeId = id(d, i, data)) != null && (nodeId += "")) {
        nodeKey = keyPrefix + (node.id = nodeId);
        nodeByKey[nodeKey] = nodeKey in nodeByKey ? ambiguous : node;
      }
    }

    for (i = 0; i < n; ++i) {
      node = nodes[i], nodeId = parentId(data[i], i, data);

      if (nodeId == null || !(nodeId += "")) {
        if (root) throw new Error("multiple roots");
        root = node;
      } else {
        parent = nodeByKey[keyPrefix + nodeId];
        if (!parent) throw new Error("missing: " + nodeId);
        if (parent === ambiguous) throw new Error("ambiguous: " + nodeId);
        if (parent.children) parent.children.push(node);else parent.children = [node];
        node.parent = parent;
      }
    }

    if (!root) throw new Error("no root");
    root.parent = preroot;
    root.eachBefore(function (node) {
      node.depth = node.parent.depth + 1;
      --n;
    }).eachBefore(_index.computeHeight);
    root.parent = null;
    if (n > 0) throw new Error("cycle");
    return root;
  }

  stratify.id = function (x) {
    return arguments.length ? (id = (0, _accessors.required)(x), stratify) : id;
  };

  stratify.parentId = function (x) {
    return arguments.length ? (parentId = (0, _accessors.required)(x), stratify) : parentId;
  };

  return stratify;
}
},{"./accessors":"../node_modules/d3-hierarchy/src/accessors.js","./hierarchy/index":"../node_modules/d3-hierarchy/src/hierarchy/index.js"}],"../node_modules/d3-hierarchy/src/tree.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./hierarchy/index");

function defaultSeparation(a, b) {
  return a.parent === b.parent ? 1 : 2;
} // function radialSeparation(a, b) {
//   return (a.parent === b.parent ? 1 : 2) / a.depth;
// }
// This function is used to traverse the left contour of a subtree (or
// subforest). It returns the successor of v on this contour. This successor is
// either given by the leftmost child of v or by the thread of v. The function
// returns null if and only if v is on the highest level of its subtree.


function nextLeft(v) {
  var children = v.children;
  return children ? children[0] : v.t;
} // This function works analogously to nextLeft.


function nextRight(v) {
  var children = v.children;
  return children ? children[children.length - 1] : v.t;
} // Shifts the current subtree rooted at w+. This is done by increasing
// prelim(w+) and mod(w+) by shift.


function moveSubtree(wm, wp, shift) {
  var change = shift / (wp.i - wm.i);
  wp.c -= change;
  wp.s += shift;
  wm.c += change;
  wp.z += shift;
  wp.m += shift;
} // All other shifts, applied to the smaller subtrees between w- and w+, are
// performed by this function. To prepare the shifts, we have to adjust
// change(w+), shift(w+), and change(w-).


function executeShifts(v) {
  var shift = 0,
      change = 0,
      children = v.children,
      i = children.length,
      w;

  while (--i >= 0) {
    w = children[i];
    w.z += shift;
    w.m += shift;
    shift += w.s + (change += w.c);
  }
} // If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,
// returns the specified (default) ancestor.


function nextAncestor(vim, v, ancestor) {
  return vim.a.parent === v.parent ? vim.a : ancestor;
}

function TreeNode(node, i) {
  this._ = node;
  this.parent = null;
  this.children = null;
  this.A = null; // default ancestor

  this.a = this; // ancestor

  this.z = 0; // prelim

  this.m = 0; // mod

  this.c = 0; // change

  this.s = 0; // shift

  this.t = null; // thread

  this.i = i; // number
}

TreeNode.prototype = Object.create(_index.Node.prototype);

function treeRoot(root) {
  var tree = new TreeNode(root, 0),
      node,
      nodes = [tree],
      child,
      children,
      i,
      n;

  while (node = nodes.pop()) {
    if (children = node._.children) {
      node.children = new Array(n = children.length);

      for (i = n - 1; i >= 0; --i) {
        nodes.push(child = node.children[i] = new TreeNode(children[i], i));
        child.parent = node;
      }
    }
  }

  (tree.parent = new TreeNode(null, 0)).children = [tree];
  return tree;
} // Node-link tree diagram using the Reingold-Tilford "tidy" algorithm


function _default() {
  var separation = defaultSeparation,
      dx = 1,
      dy = 1,
      nodeSize = null;

  function tree(root) {
    var t = treeRoot(root); // Compute the layout using Buchheim et al.’s algorithm.

    t.eachAfter(firstWalk), t.parent.m = -t.z;
    t.eachBefore(secondWalk); // If a fixed node size is specified, scale x and y.

    if (nodeSize) root.eachBefore(sizeNode); // If a fixed tree size is specified, scale x and y based on the extent.
    // Compute the left-most, right-most, and depth-most nodes for extents.
    else {
        var left = root,
            right = root,
            bottom = root;
        root.eachBefore(function (node) {
          if (node.x < left.x) left = node;
          if (node.x > right.x) right = node;
          if (node.depth > bottom.depth) bottom = node;
        });
        var s = left === right ? 1 : separation(left, right) / 2,
            tx = s - left.x,
            kx = dx / (right.x + s + tx),
            ky = dy / (bottom.depth || 1);
        root.eachBefore(function (node) {
          node.x = (node.x + tx) * kx;
          node.y = node.depth * ky;
        });
      }
    return root;
  } // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is
  // applied recursively to the children of v, as well as the function
  // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the
  // node v is placed to the midpoint of its outermost children.


  function firstWalk(v) {
    var children = v.children,
        siblings = v.parent.children,
        w = v.i ? siblings[v.i - 1] : null;

    if (children) {
      executeShifts(v);
      var midpoint = (children[0].z + children[children.length - 1].z) / 2;

      if (w) {
        v.z = w.z + separation(v._, w._);
        v.m = v.z - midpoint;
      } else {
        v.z = midpoint;
      }
    } else if (w) {
      v.z = w.z + separation(v._, w._);
    }

    v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
  } // Computes all real x-coordinates by summing up the modifiers recursively.


  function secondWalk(v) {
    v._.x = v.z + v.parent.m;
    v.m += v.parent.m;
  } // The core of the algorithm. Here, a new subtree is combined with the
  // previous subtrees. Threads are used to traverse the inside and outside
  // contours of the left and right subtree up to the highest common level. The
  // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the
  // superscript o means outside and i means inside, the subscript - means left
  // subtree and + means right subtree. For summing up the modifiers along the
  // contour, we use respective variables si+, si-, so-, and so+. Whenever two
  // nodes of the inside contours conflict, we compute the left one of the
  // greatest uncommon ancestors using the function ANCESTOR and call MOVE
  // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.
  // Finally, we add a new thread (if necessary).


  function apportion(v, w, ancestor) {
    if (w) {
      var vip = v,
          vop = v,
          vim = w,
          vom = vip.parent.children[0],
          sip = vip.m,
          sop = vop.m,
          sim = vim.m,
          som = vom.m,
          shift;

      while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {
        vom = nextLeft(vom);
        vop = nextRight(vop);
        vop.a = v;
        shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);

        if (shift > 0) {
          moveSubtree(nextAncestor(vim, v, ancestor), v, shift);
          sip += shift;
          sop += shift;
        }

        sim += vim.m;
        sip += vip.m;
        som += vom.m;
        sop += vop.m;
      }

      if (vim && !nextRight(vop)) {
        vop.t = vim;
        vop.m += sim - sop;
      }

      if (vip && !nextLeft(vom)) {
        vom.t = vip;
        vom.m += sip - som;
        ancestor = v;
      }
    }

    return ancestor;
  }

  function sizeNode(node) {
    node.x *= dx;
    node.y = node.depth * dy;
  }

  tree.separation = function (x) {
    return arguments.length ? (separation = x, tree) : separation;
  };

  tree.size = function (x) {
    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : nodeSize ? null : [dx, dy];
  };

  tree.nodeSize = function (x) {
    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : nodeSize ? [dx, dy] : null;
  };

  return tree;
}
},{"./hierarchy/index":"../node_modules/d3-hierarchy/src/hierarchy/index.js"}],"../node_modules/d3-hierarchy/src/treemap/slice.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(parent, x0, y0, x1, y1) {
  var nodes = parent.children,
      node,
      i = -1,
      n = nodes.length,
      k = parent.value && (y1 - y0) / parent.value;

  while (++i < n) {
    node = nodes[i], node.x0 = x0, node.x1 = x1;
    node.y0 = y0, node.y1 = y0 += node.value * k;
  }
}
},{}],"../node_modules/d3-hierarchy/src/treemap/squarify.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.squarifyRatio = squarifyRatio;
exports.default = exports.phi = void 0;

var _dice = _interopRequireDefault(require("./dice"));

var _slice = _interopRequireDefault(require("./slice"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var phi = (1 + Math.sqrt(5)) / 2;
exports.phi = phi;

function squarifyRatio(ratio, parent, x0, y0, x1, y1) {
  var rows = [],
      nodes = parent.children,
      row,
      nodeValue,
      i0 = 0,
      i1 = 0,
      n = nodes.length,
      dx,
      dy,
      value = parent.value,
      sumValue,
      minValue,
      maxValue,
      newRatio,
      minRatio,
      alpha,
      beta;

  while (i0 < n) {
    dx = x1 - x0, dy = y1 - y0; // Find the next non-empty node.

    do sumValue = nodes[i1++].value; while (!sumValue && i1 < n);

    minValue = maxValue = sumValue;
    alpha = Math.max(dy / dx, dx / dy) / (value * ratio);
    beta = sumValue * sumValue * alpha;
    minRatio = Math.max(maxValue / beta, beta / minValue); // Keep adding nodes while the aspect ratio maintains or improves.

    for (; i1 < n; ++i1) {
      sumValue += nodeValue = nodes[i1].value;
      if (nodeValue < minValue) minValue = nodeValue;
      if (nodeValue > maxValue) maxValue = nodeValue;
      beta = sumValue * sumValue * alpha;
      newRatio = Math.max(maxValue / beta, beta / minValue);

      if (newRatio > minRatio) {
        sumValue -= nodeValue;
        break;
      }

      minRatio = newRatio;
    } // Position and record the row orientation.


    rows.push(row = {
      value: sumValue,
      dice: dx < dy,
      children: nodes.slice(i0, i1)
    });
    if (row.dice) (0, _dice.default)(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);else (0, _slice.default)(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);
    value -= sumValue, i0 = i1;
  }

  return rows;
}

var _default = function custom(ratio) {
  function squarify(parent, x0, y0, x1, y1) {
    squarifyRatio(ratio, parent, x0, y0, x1, y1);
  }

  squarify.ratio = function (x) {
    return custom((x = +x) > 1 ? x : 1);
  };

  return squarify;
}(phi);

exports.default = _default;
},{"./dice":"../node_modules/d3-hierarchy/src/treemap/dice.js","./slice":"../node_modules/d3-hierarchy/src/treemap/slice.js"}],"../node_modules/d3-hierarchy/src/treemap/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _round = _interopRequireDefault(require("./round"));

var _squarify = _interopRequireDefault(require("./squarify"));

var _accessors = require("../accessors");

var _constant = _interopRequireWildcard(require("../constant"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var tile = _squarify.default,
      round = false,
      dx = 1,
      dy = 1,
      paddingStack = [0],
      paddingInner = _constant.constantZero,
      paddingTop = _constant.constantZero,
      paddingRight = _constant.constantZero,
      paddingBottom = _constant.constantZero,
      paddingLeft = _constant.constantZero;

  function treemap(root) {
    root.x0 = root.y0 = 0;
    root.x1 = dx;
    root.y1 = dy;
    root.eachBefore(positionNode);
    paddingStack = [0];
    if (round) root.eachBefore(_round.default);
    return root;
  }

  function positionNode(node) {
    var p = paddingStack[node.depth],
        x0 = node.x0 + p,
        y0 = node.y0 + p,
        x1 = node.x1 - p,
        y1 = node.y1 - p;
    if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
    if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
    node.x0 = x0;
    node.y0 = y0;
    node.x1 = x1;
    node.y1 = y1;

    if (node.children) {
      p = paddingStack[node.depth + 1] = paddingInner(node) / 2;
      x0 += paddingLeft(node) - p;
      y0 += paddingTop(node) - p;
      x1 -= paddingRight(node) - p;
      y1 -= paddingBottom(node) - p;
      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
      tile(node, x0, y0, x1, y1);
    }
  }

  treemap.round = function (x) {
    return arguments.length ? (round = !!x, treemap) : round;
  };

  treemap.size = function (x) {
    return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];
  };

  treemap.tile = function (x) {
    return arguments.length ? (tile = (0, _accessors.required)(x), treemap) : tile;
  };

  treemap.padding = function (x) {
    return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();
  };

  treemap.paddingInner = function (x) {
    return arguments.length ? (paddingInner = typeof x === "function" ? x : (0, _constant.default)(+x), treemap) : paddingInner;
  };

  treemap.paddingOuter = function (x) {
    return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();
  };

  treemap.paddingTop = function (x) {
    return arguments.length ? (paddingTop = typeof x === "function" ? x : (0, _constant.default)(+x), treemap) : paddingTop;
  };

  treemap.paddingRight = function (x) {
    return arguments.length ? (paddingRight = typeof x === "function" ? x : (0, _constant.default)(+x), treemap) : paddingRight;
  };

  treemap.paddingBottom = function (x) {
    return arguments.length ? (paddingBottom = typeof x === "function" ? x : (0, _constant.default)(+x), treemap) : paddingBottom;
  };

  treemap.paddingLeft = function (x) {
    return arguments.length ? (paddingLeft = typeof x === "function" ? x : (0, _constant.default)(+x), treemap) : paddingLeft;
  };

  return treemap;
}
},{"./round":"../node_modules/d3-hierarchy/src/treemap/round.js","./squarify":"../node_modules/d3-hierarchy/src/treemap/squarify.js","../accessors":"../node_modules/d3-hierarchy/src/accessors.js","../constant":"../node_modules/d3-hierarchy/src/constant.js"}],"../node_modules/d3-hierarchy/src/treemap/binary.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(parent, x0, y0, x1, y1) {
  var nodes = parent.children,
      i,
      n = nodes.length,
      sum,
      sums = new Array(n + 1);

  for (sums[0] = sum = i = 0; i < n; ++i) {
    sums[i + 1] = sum += nodes[i].value;
  }

  partition(0, n, parent.value, x0, y0, x1, y1);

  function partition(i, j, value, x0, y0, x1, y1) {
    if (i >= j - 1) {
      var node = nodes[i];
      node.x0 = x0, node.y0 = y0;
      node.x1 = x1, node.y1 = y1;
      return;
    }

    var valueOffset = sums[i],
        valueTarget = value / 2 + valueOffset,
        k = i + 1,
        hi = j - 1;

    while (k < hi) {
      var mid = k + hi >>> 1;
      if (sums[mid] < valueTarget) k = mid + 1;else hi = mid;
    }

    if (valueTarget - sums[k - 1] < sums[k] - valueTarget && i + 1 < k) --k;
    var valueLeft = sums[k] - valueOffset,
        valueRight = value - valueLeft;

    if (x1 - x0 > y1 - y0) {
      var xk = (x0 * valueRight + x1 * valueLeft) / value;
      partition(i, k, valueLeft, x0, y0, xk, y1);
      partition(k, j, valueRight, xk, y0, x1, y1);
    } else {
      var yk = (y0 * valueRight + y1 * valueLeft) / value;
      partition(i, k, valueLeft, x0, y0, x1, yk);
      partition(k, j, valueRight, x0, yk, x1, y1);
    }
  }
}
},{}],"../node_modules/d3-hierarchy/src/treemap/sliceDice.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _dice = _interopRequireDefault(require("./dice"));

var _slice = _interopRequireDefault(require("./slice"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(parent, x0, y0, x1, y1) {
  (parent.depth & 1 ? _slice.default : _dice.default)(parent, x0, y0, x1, y1);
}
},{"./dice":"../node_modules/d3-hierarchy/src/treemap/dice.js","./slice":"../node_modules/d3-hierarchy/src/treemap/slice.js"}],"../node_modules/d3-hierarchy/src/treemap/resquarify.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _dice = _interopRequireDefault(require("./dice"));

var _slice = _interopRequireDefault(require("./slice"));

var _squarify = require("./squarify");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = function custom(ratio) {
  function resquarify(parent, x0, y0, x1, y1) {
    if ((rows = parent._squarify) && rows.ratio === ratio) {
      var rows,
          row,
          nodes,
          i,
          j = -1,
          n,
          m = rows.length,
          value = parent.value;

      while (++j < m) {
        row = rows[j], nodes = row.children;

        for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value;

        if (row.dice) (0, _dice.default)(row, x0, y0, x1, y0 += (y1 - y0) * row.value / value);else (0, _slice.default)(row, x0, y0, x0 += (x1 - x0) * row.value / value, y1);
        value -= row.value;
      }
    } else {
      parent._squarify = rows = (0, _squarify.squarifyRatio)(ratio, parent, x0, y0, x1, y1);
      rows.ratio = ratio;
    }
  }

  resquarify.ratio = function (x) {
    return custom((x = +x) > 1 ? x : 1);
  };

  return resquarify;
}(_squarify.phi);

exports.default = _default;
},{"./dice":"../node_modules/d3-hierarchy/src/treemap/dice.js","./slice":"../node_modules/d3-hierarchy/src/treemap/slice.js","./squarify":"../node_modules/d3-hierarchy/src/treemap/squarify.js"}],"../node_modules/d3-hierarchy/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "cluster", {
  enumerable: true,
  get: function () {
    return _cluster.default;
  }
});
Object.defineProperty(exports, "hierarchy", {
  enumerable: true,
  get: function () {
    return _index.default;
  }
});
Object.defineProperty(exports, "pack", {
  enumerable: true,
  get: function () {
    return _index2.default;
  }
});
Object.defineProperty(exports, "packSiblings", {
  enumerable: true,
  get: function () {
    return _siblings.default;
  }
});
Object.defineProperty(exports, "packEnclose", {
  enumerable: true,
  get: function () {
    return _enclose.default;
  }
});
Object.defineProperty(exports, "partition", {
  enumerable: true,
  get: function () {
    return _partition.default;
  }
});
Object.defineProperty(exports, "stratify", {
  enumerable: true,
  get: function () {
    return _stratify.default;
  }
});
Object.defineProperty(exports, "tree", {
  enumerable: true,
  get: function () {
    return _tree.default;
  }
});
Object.defineProperty(exports, "treemap", {
  enumerable: true,
  get: function () {
    return _index3.default;
  }
});
Object.defineProperty(exports, "treemapBinary", {
  enumerable: true,
  get: function () {
    return _binary.default;
  }
});
Object.defineProperty(exports, "treemapDice", {
  enumerable: true,
  get: function () {
    return _dice.default;
  }
});
Object.defineProperty(exports, "treemapSlice", {
  enumerable: true,
  get: function () {
    return _slice.default;
  }
});
Object.defineProperty(exports, "treemapSliceDice", {
  enumerable: true,
  get: function () {
    return _sliceDice.default;
  }
});
Object.defineProperty(exports, "treemapSquarify", {
  enumerable: true,
  get: function () {
    return _squarify.default;
  }
});
Object.defineProperty(exports, "treemapResquarify", {
  enumerable: true,
  get: function () {
    return _resquarify.default;
  }
});

var _cluster = _interopRequireDefault(require("./cluster"));

var _index = _interopRequireDefault(require("./hierarchy/index"));

var _index2 = _interopRequireDefault(require("./pack/index"));

var _siblings = _interopRequireDefault(require("./pack/siblings"));

var _enclose = _interopRequireDefault(require("./pack/enclose"));

var _partition = _interopRequireDefault(require("./partition"));

var _stratify = _interopRequireDefault(require("./stratify"));

var _tree = _interopRequireDefault(require("./tree"));

var _index3 = _interopRequireDefault(require("./treemap/index"));

var _binary = _interopRequireDefault(require("./treemap/binary"));

var _dice = _interopRequireDefault(require("./treemap/dice"));

var _slice = _interopRequireDefault(require("./treemap/slice"));

var _sliceDice = _interopRequireDefault(require("./treemap/sliceDice"));

var _squarify = _interopRequireDefault(require("./treemap/squarify"));

var _resquarify = _interopRequireDefault(require("./treemap/resquarify"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./cluster":"../node_modules/d3-hierarchy/src/cluster.js","./hierarchy/index":"../node_modules/d3-hierarchy/src/hierarchy/index.js","./pack/index":"../node_modules/d3-hierarchy/src/pack/index.js","./pack/siblings":"../node_modules/d3-hierarchy/src/pack/siblings.js","./pack/enclose":"../node_modules/d3-hierarchy/src/pack/enclose.js","./partition":"../node_modules/d3-hierarchy/src/partition.js","./stratify":"../node_modules/d3-hierarchy/src/stratify.js","./tree":"../node_modules/d3-hierarchy/src/tree.js","./treemap/index":"../node_modules/d3-hierarchy/src/treemap/index.js","./treemap/binary":"../node_modules/d3-hierarchy/src/treemap/binary.js","./treemap/dice":"../node_modules/d3-hierarchy/src/treemap/dice.js","./treemap/slice":"../node_modules/d3-hierarchy/src/treemap/slice.js","./treemap/sliceDice":"../node_modules/d3-hierarchy/src/treemap/sliceDice.js","./treemap/squarify":"../node_modules/d3-hierarchy/src/treemap/squarify.js","./treemap/resquarify":"../node_modules/d3-hierarchy/src/treemap/resquarify.js"}],"../node_modules/d3-polygon/src/area.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(polygon) {
  var i = -1,
      n = polygon.length,
      a,
      b = polygon[n - 1],
      area = 0;

  while (++i < n) {
    a = b;
    b = polygon[i];
    area += a[1] * b[0] - a[0] * b[1];
  }

  return area / 2;
}
},{}],"../node_modules/d3-polygon/src/centroid.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(polygon) {
  var i = -1,
      n = polygon.length,
      x = 0,
      y = 0,
      a,
      b = polygon[n - 1],
      c,
      k = 0;

  while (++i < n) {
    a = b;
    b = polygon[i];
    k += c = a[0] * b[1] - b[0] * a[1];
    x += (a[0] + b[0]) * c;
    y += (a[1] + b[1]) * c;
  }

  return k *= 3, [x / k, y / k];
}
},{}],"../node_modules/d3-polygon/src/cross.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

// Returns the 2D cross product of AB and AC vectors, i.e., the z-component of
// the 3D cross product in a quadrant I Cartesian coordinate system (+x is
// right, +y is up). Returns a positive value if ABC is counter-clockwise,
// negative if clockwise, and zero if the points are collinear.
function _default(a, b, c) {
  return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
}
},{}],"../node_modules/d3-polygon/src/hull.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _cross = _interopRequireDefault(require("./cross"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function lexicographicOrder(a, b) {
  return a[0] - b[0] || a[1] - b[1];
} // Computes the upper convex hull per the monotone chain algorithm.
// Assumes points.length >= 3, is sorted by x, unique in y.
// Returns an array of indices into points in left-to-right order.


function computeUpperHullIndexes(points) {
  var n = points.length,
      indexes = [0, 1],
      size = 2;

  for (var i = 2; i < n; ++i) {
    while (size > 1 && (0, _cross.default)(points[indexes[size - 2]], points[indexes[size - 1]], points[i]) <= 0) --size;

    indexes[size++] = i;
  }

  return indexes.slice(0, size); // remove popped points
}

function _default(points) {
  if ((n = points.length) < 3) return null;
  var i,
      n,
      sortedPoints = new Array(n),
      flippedPoints = new Array(n);

  for (i = 0; i < n; ++i) sortedPoints[i] = [+points[i][0], +points[i][1], i];

  sortedPoints.sort(lexicographicOrder);

  for (i = 0; i < n; ++i) flippedPoints[i] = [sortedPoints[i][0], -sortedPoints[i][1]];

  var upperIndexes = computeUpperHullIndexes(sortedPoints),
      lowerIndexes = computeUpperHullIndexes(flippedPoints); // Construct the hull polygon, removing possible duplicate endpoints.

  var skipLeft = lowerIndexes[0] === upperIndexes[0],
      skipRight = lowerIndexes[lowerIndexes.length - 1] === upperIndexes[upperIndexes.length - 1],
      hull = []; // Add upper hull in right-to-l order.
  // Then add lower hull in left-to-right order.

  for (i = upperIndexes.length - 1; i >= 0; --i) hull.push(points[sortedPoints[upperIndexes[i]][2]]);

  for (i = +skipLeft; i < lowerIndexes.length - skipRight; ++i) hull.push(points[sortedPoints[lowerIndexes[i]][2]]);

  return hull;
}
},{"./cross":"../node_modules/d3-polygon/src/cross.js"}],"../node_modules/d3-polygon/src/contains.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(polygon, point) {
  var n = polygon.length,
      p = polygon[n - 1],
      x = point[0],
      y = point[1],
      x0 = p[0],
      y0 = p[1],
      x1,
      y1,
      inside = false;

  for (var i = 0; i < n; ++i) {
    p = polygon[i], x1 = p[0], y1 = p[1];
    if (y1 > y !== y0 > y && x < (x0 - x1) * (y - y1) / (y0 - y1) + x1) inside = !inside;
    x0 = x1, y0 = y1;
  }

  return inside;
}
},{}],"../node_modules/d3-polygon/src/length.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(polygon) {
  var i = -1,
      n = polygon.length,
      b = polygon[n - 1],
      xa,
      ya,
      xb = b[0],
      yb = b[1],
      perimeter = 0;

  while (++i < n) {
    xa = xb;
    ya = yb;
    b = polygon[i];
    xb = b[0];
    yb = b[1];
    xa -= xb;
    ya -= yb;
    perimeter += Math.sqrt(xa * xa + ya * ya);
  }

  return perimeter;
}
},{}],"../node_modules/d3-polygon/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "polygonArea", {
  enumerable: true,
  get: function () {
    return _area.default;
  }
});
Object.defineProperty(exports, "polygonCentroid", {
  enumerable: true,
  get: function () {
    return _centroid.default;
  }
});
Object.defineProperty(exports, "polygonHull", {
  enumerable: true,
  get: function () {
    return _hull.default;
  }
});
Object.defineProperty(exports, "polygonContains", {
  enumerable: true,
  get: function () {
    return _contains.default;
  }
});
Object.defineProperty(exports, "polygonLength", {
  enumerable: true,
  get: function () {
    return _length.default;
  }
});

var _area = _interopRequireDefault(require("./area"));

var _centroid = _interopRequireDefault(require("./centroid"));

var _hull = _interopRequireDefault(require("./hull"));

var _contains = _interopRequireDefault(require("./contains"));

var _length = _interopRequireDefault(require("./length"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./area":"../node_modules/d3-polygon/src/area.js","./centroid":"../node_modules/d3-polygon/src/centroid.js","./hull":"../node_modules/d3-polygon/src/hull.js","./contains":"../node_modules/d3-polygon/src/contains.js","./length":"../node_modules/d3-polygon/src/length.js"}],"../node_modules/d3-random/src/defaultSource.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  return Math.random();
}
},{}],"../node_modules/d3-random/src/uniform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defaultSource = _interopRequireDefault(require("./defaultSource"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = function sourceRandomUniform(source) {
  function randomUniform(min, max) {
    min = min == null ? 0 : +min;
    max = max == null ? 1 : +max;
    if (arguments.length === 1) max = min, min = 0;else max -= min;
    return function () {
      return source() * max + min;
    };
  }

  randomUniform.source = sourceRandomUniform;
  return randomUniform;
}(_defaultSource.default);

exports.default = _default;
},{"./defaultSource":"../node_modules/d3-random/src/defaultSource.js"}],"../node_modules/d3-random/src/normal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defaultSource = _interopRequireDefault(require("./defaultSource"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = function sourceRandomNormal(source) {
  function randomNormal(mu, sigma) {
    var x, r;
    mu = mu == null ? 0 : +mu;
    sigma = sigma == null ? 1 : +sigma;
    return function () {
      var y; // If available, use the second previously-generated uniform random.

      if (x != null) y = x, x = null; // Otherwise, generate a new x and y.
      else do {
          x = source() * 2 - 1;
          y = source() * 2 - 1;
          r = x * x + y * y;
        } while (!r || r > 1);
      return mu + sigma * y * Math.sqrt(-2 * Math.log(r) / r);
    };
  }

  randomNormal.source = sourceRandomNormal;
  return randomNormal;
}(_defaultSource.default);

exports.default = _default;
},{"./defaultSource":"../node_modules/d3-random/src/defaultSource.js"}],"../node_modules/d3-random/src/logNormal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defaultSource = _interopRequireDefault(require("./defaultSource"));

var _normal = _interopRequireDefault(require("./normal"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = function sourceRandomLogNormal(source) {
  function randomLogNormal() {
    var randomNormal = _normal.default.source(source).apply(this, arguments);

    return function () {
      return Math.exp(randomNormal());
    };
  }

  randomLogNormal.source = sourceRandomLogNormal;
  return randomLogNormal;
}(_defaultSource.default);

exports.default = _default;
},{"./defaultSource":"../node_modules/d3-random/src/defaultSource.js","./normal":"../node_modules/d3-random/src/normal.js"}],"../node_modules/d3-random/src/irwinHall.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defaultSource = _interopRequireDefault(require("./defaultSource"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = function sourceRandomIrwinHall(source) {
  function randomIrwinHall(n) {
    return function () {
      for (var sum = 0, i = 0; i < n; ++i) sum += source();

      return sum;
    };
  }

  randomIrwinHall.source = sourceRandomIrwinHall;
  return randomIrwinHall;
}(_defaultSource.default);

exports.default = _default;
},{"./defaultSource":"../node_modules/d3-random/src/defaultSource.js"}],"../node_modules/d3-random/src/bates.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defaultSource = _interopRequireDefault(require("./defaultSource"));

var _irwinHall = _interopRequireDefault(require("./irwinHall"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = function sourceRandomBates(source) {
  function randomBates(n) {
    var randomIrwinHall = _irwinHall.default.source(source)(n);

    return function () {
      return randomIrwinHall() / n;
    };
  }

  randomBates.source = sourceRandomBates;
  return randomBates;
}(_defaultSource.default);

exports.default = _default;
},{"./defaultSource":"../node_modules/d3-random/src/defaultSource.js","./irwinHall":"../node_modules/d3-random/src/irwinHall.js"}],"../node_modules/d3-random/src/exponential.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defaultSource = _interopRequireDefault(require("./defaultSource"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = function sourceRandomExponential(source) {
  function randomExponential(lambda) {
    return function () {
      return -Math.log(1 - source()) / lambda;
    };
  }

  randomExponential.source = sourceRandomExponential;
  return randomExponential;
}(_defaultSource.default);

exports.default = _default;
},{"./defaultSource":"../node_modules/d3-random/src/defaultSource.js"}],"../node_modules/d3-random/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "randomUniform", {
  enumerable: true,
  get: function () {
    return _uniform.default;
  }
});
Object.defineProperty(exports, "randomNormal", {
  enumerable: true,
  get: function () {
    return _normal.default;
  }
});
Object.defineProperty(exports, "randomLogNormal", {
  enumerable: true,
  get: function () {
    return _logNormal.default;
  }
});
Object.defineProperty(exports, "randomBates", {
  enumerable: true,
  get: function () {
    return _bates.default;
  }
});
Object.defineProperty(exports, "randomIrwinHall", {
  enumerable: true,
  get: function () {
    return _irwinHall.default;
  }
});
Object.defineProperty(exports, "randomExponential", {
  enumerable: true,
  get: function () {
    return _exponential.default;
  }
});

var _uniform = _interopRequireDefault(require("./uniform"));

var _normal = _interopRequireDefault(require("./normal"));

var _logNormal = _interopRequireDefault(require("./logNormal"));

var _bates = _interopRequireDefault(require("./bates"));

var _irwinHall = _interopRequireDefault(require("./irwinHall"));

var _exponential = _interopRequireDefault(require("./exponential"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./uniform":"../node_modules/d3-random/src/uniform.js","./normal":"../node_modules/d3-random/src/normal.js","./logNormal":"../node_modules/d3-random/src/logNormal.js","./bates":"../node_modules/d3-random/src/bates.js","./irwinHall":"../node_modules/d3-random/src/irwinHall.js","./exponential":"../node_modules/d3-random/src/exponential.js"}],"../node_modules/d3-scale/src/init.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initRange = initRange;
exports.initInterpolator = initInterpolator;

function initRange(domain, range) {
  switch (arguments.length) {
    case 0:
      break;

    case 1:
      this.range(domain);
      break;

    default:
      this.range(range).domain(domain);
      break;
  }

  return this;
}

function initInterpolator(domain, interpolator) {
  switch (arguments.length) {
    case 0:
      break;

    case 1:
      this.interpolator(domain);
      break;

    default:
      this.interpolator(interpolator).domain(domain);
      break;
  }

  return this;
}
},{}],"../node_modules/d3-scale/src/array.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.slice = exports.map = void 0;
var array = Array.prototype;
var map = array.map;
exports.map = map;
var slice = array.slice;
exports.slice = slice;
},{}],"../node_modules/d3-scale/src/ordinal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ordinal;
exports.implicit = void 0;

var _d3Collection = require("d3-collection");

var _array = require("./array");

var _init = require("./init");

var implicit = {
  name: "implicit"
};
exports.implicit = implicit;

function ordinal() {
  var index = (0, _d3Collection.map)(),
      domain = [],
      range = [],
      unknown = implicit;

  function scale(d) {
    var key = d + "",
        i = index.get(key);

    if (!i) {
      if (unknown !== implicit) return unknown;
      index.set(key, i = domain.push(d));
    }

    return range[(i - 1) % range.length];
  }

  scale.domain = function (_) {
    if (!arguments.length) return domain.slice();
    domain = [], index = (0, _d3Collection.map)();
    var i = -1,
        n = _.length,
        d,
        key;

    while (++i < n) if (!index.has(key = (d = _[i]) + "")) index.set(key, domain.push(d));

    return scale;
  };

  scale.range = function (_) {
    return arguments.length ? (range = _array.slice.call(_), scale) : range.slice();
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.copy = function () {
    return ordinal(domain, range).unknown(unknown);
  };

  _init.initRange.apply(scale, arguments);

  return scale;
}
},{"d3-collection":"../node_modules/d3-collection/src/index.js","./array":"../node_modules/d3-scale/src/array.js","./init":"../node_modules/d3-scale/src/init.js"}],"../node_modules/d3-scale/src/band.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = band;
exports.point = point;

var _d3Array = require("d3-array");

var _init = require("./init");

var _ordinal = _interopRequireDefault(require("./ordinal"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function band() {
  var scale = (0, _ordinal.default)().unknown(undefined),
      domain = scale.domain,
      ordinalRange = scale.range,
      range = [0, 1],
      step,
      bandwidth,
      round = false,
      paddingInner = 0,
      paddingOuter = 0,
      align = 0.5;
  delete scale.unknown;

  function rescale() {
    var n = domain().length,
        reverse = range[1] < range[0],
        start = range[reverse - 0],
        stop = range[1 - reverse];
    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
    if (round) step = Math.floor(step);
    start += (stop - start - step * (n - paddingInner)) * align;
    bandwidth = step * (1 - paddingInner);
    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);
    var values = (0, _d3Array.range)(n).map(function (i) {
      return start + step * i;
    });
    return ordinalRange(reverse ? values.reverse() : values);
  }

  scale.domain = function (_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };

  scale.range = function (_) {
    return arguments.length ? (range = [+_[0], +_[1]], rescale()) : range.slice();
  };

  scale.rangeRound = function (_) {
    return range = [+_[0], +_[1]], round = true, rescale();
  };

  scale.bandwidth = function () {
    return bandwidth;
  };

  scale.step = function () {
    return step;
  };

  scale.round = function (_) {
    return arguments.length ? (round = !!_, rescale()) : round;
  };

  scale.padding = function (_) {
    return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;
  };

  scale.paddingInner = function (_) {
    return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;
  };

  scale.paddingOuter = function (_) {
    return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;
  };

  scale.align = function (_) {
    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
  };

  scale.copy = function () {
    return band(domain(), range).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);
  };

  return _init.initRange.apply(rescale(), arguments);
}

function pointish(scale) {
  var copy = scale.copy;
  scale.padding = scale.paddingOuter;
  delete scale.paddingInner;
  delete scale.paddingOuter;

  scale.copy = function () {
    return pointish(copy());
  };

  return scale;
}

function point() {
  return pointish(band.apply(null, arguments).paddingInner(1));
}
},{"d3-array":"../node_modules/d3-array/src/index.js","./init":"../node_modules/d3-scale/src/init.js","./ordinal":"../node_modules/d3-scale/src/ordinal.js"}],"../node_modules/d3-scale/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"../node_modules/d3-scale/src/number.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return +x;
}
},{}],"../node_modules/d3-scale/src/continuous.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.identity = identity;
exports.copy = copy;
exports.transformer = transformer;
exports.default = continuous;

var _d3Array = require("d3-array");

var _d3Interpolate = require("d3-interpolate");

var _array = require("./array");

var _constant = _interopRequireDefault(require("./constant"));

var _number = _interopRequireDefault(require("./number"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var unit = [0, 1];

function identity(x) {
  return x;
}

function normalize(a, b) {
  return (b -= a = +a) ? function (x) {
    return (x - a) / b;
  } : (0, _constant.default)(isNaN(b) ? NaN : 0.5);
}

function clamper(domain) {
  var a = domain[0],
      b = domain[domain.length - 1],
      t;
  if (a > b) t = a, a = b, b = t;
  return function (x) {
    return Math.max(a, Math.min(b, x));
  };
} // normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].


function bimap(domain, range, interpolate) {
  var d0 = domain[0],
      d1 = domain[1],
      r0 = range[0],
      r1 = range[1];
  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);
  return function (x) {
    return r0(d0(x));
  };
}

function polymap(domain, range, interpolate) {
  var j = Math.min(domain.length, range.length) - 1,
      d = new Array(j),
      r = new Array(j),
      i = -1; // Reverse descending domains.

  if (domain[j] < domain[0]) {
    domain = domain.slice().reverse();
    range = range.slice().reverse();
  }

  while (++i < j) {
    d[i] = normalize(domain[i], domain[i + 1]);
    r[i] = interpolate(range[i], range[i + 1]);
  }

  return function (x) {
    var i = (0, _d3Array.bisect)(domain, x, 1, j) - 1;
    return r[i](d[i](x));
  };
}

function copy(source, target) {
  return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
}

function transformer() {
  var domain = unit,
      range = unit,
      interpolate = _d3Interpolate.interpolate,
      transform,
      untransform,
      unknown,
      clamp = identity,
      piecewise,
      output,
      input;

  function rescale() {
    piecewise = Math.min(domain.length, range.length) > 2 ? polymap : bimap;
    output = input = null;
    return scale;
  }

  function scale(x) {
    return isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));
  }

  scale.invert = function (y) {
    return clamp(untransform((input || (input = piecewise(range, domain.map(transform), _d3Interpolate.interpolateNumber)))(y)));
  };

  scale.domain = function (_) {
    return arguments.length ? (domain = _array.map.call(_, _number.default), clamp === identity || (clamp = clamper(domain)), rescale()) : domain.slice();
  };

  scale.range = function (_) {
    return arguments.length ? (range = _array.slice.call(_), rescale()) : range.slice();
  };

  scale.rangeRound = function (_) {
    return range = _array.slice.call(_), interpolate = _d3Interpolate.interpolateRound, rescale();
  };

  scale.clamp = function (_) {
    return arguments.length ? (clamp = _ ? clamper(domain) : identity, scale) : clamp !== identity;
  };

  scale.interpolate = function (_) {
    return arguments.length ? (interpolate = _, rescale()) : interpolate;
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  return function (t, u) {
    transform = t, untransform = u;
    return rescale();
  };
}

function continuous(transform, untransform) {
  return transformer()(transform, untransform);
}
},{"d3-array":"../node_modules/d3-array/src/index.js","d3-interpolate":"../node_modules/d3-interpolate/src/index.js","./array":"../node_modules/d3-scale/src/array.js","./constant":"../node_modules/d3-scale/src/constant.js","./number":"../node_modules/d3-scale/src/number.js"}],"../node_modules/d3-scale/src/tickFormat.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Array = require("d3-array");

var _d3Format = require("d3-format");

function _default(start, stop, count, specifier) {
  var step = (0, _d3Array.tickStep)(start, stop, count),
      precision;
  specifier = (0, _d3Format.formatSpecifier)(specifier == null ? ",f" : specifier);

  switch (specifier.type) {
    case "s":
      {
        var value = Math.max(Math.abs(start), Math.abs(stop));
        if (specifier.precision == null && !isNaN(precision = (0, _d3Format.precisionPrefix)(step, value))) specifier.precision = precision;
        return (0, _d3Format.formatPrefix)(specifier, value);
      }

    case "":
    case "e":
    case "g":
    case "p":
    case "r":
      {
        if (specifier.precision == null && !isNaN(precision = (0, _d3Format.precisionRound)(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
        break;
      }

    case "f":
    case "%":
      {
        if (specifier.precision == null && !isNaN(precision = (0, _d3Format.precisionFixed)(step))) specifier.precision = precision - (specifier.type === "%") * 2;
        break;
      }
  }

  return (0, _d3Format.format)(specifier);
}
},{"d3-array":"../node_modules/d3-array/src/index.js","d3-format":"../node_modules/d3-format/src/index.js"}],"../node_modules/d3-scale/src/linear.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.linearish = linearish;
exports.default = linear;

var _d3Array = require("d3-array");

var _continuous = _interopRequireWildcard(require("./continuous"));

var _init = require("./init");

var _tickFormat = _interopRequireDefault(require("./tickFormat"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function linearish(scale) {
  var domain = scale.domain;

  scale.ticks = function (count) {
    var d = domain();
    return (0, _d3Array.ticks)(d[0], d[d.length - 1], count == null ? 10 : count);
  };

  scale.tickFormat = function (count, specifier) {
    var d = domain();
    return (0, _tickFormat.default)(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
  };

  scale.nice = function (count) {
    if (count == null) count = 10;
    var d = domain(),
        i0 = 0,
        i1 = d.length - 1,
        start = d[i0],
        stop = d[i1],
        step;

    if (stop < start) {
      step = start, start = stop, stop = step;
      step = i0, i0 = i1, i1 = step;
    }

    step = (0, _d3Array.tickIncrement)(start, stop, count);

    if (step > 0) {
      start = Math.floor(start / step) * step;
      stop = Math.ceil(stop / step) * step;
      step = (0, _d3Array.tickIncrement)(start, stop, count);
    } else if (step < 0) {
      start = Math.ceil(start * step) / step;
      stop = Math.floor(stop * step) / step;
      step = (0, _d3Array.tickIncrement)(start, stop, count);
    }

    if (step > 0) {
      d[i0] = Math.floor(start / step) * step;
      d[i1] = Math.ceil(stop / step) * step;
      domain(d);
    } else if (step < 0) {
      d[i0] = Math.ceil(start * step) / step;
      d[i1] = Math.floor(stop * step) / step;
      domain(d);
    }

    return scale;
  };

  return scale;
}

function linear() {
  var scale = (0, _continuous.default)(_continuous.identity, _continuous.identity);

  scale.copy = function () {
    return (0, _continuous.copy)(scale, linear());
  };

  _init.initRange.apply(scale, arguments);

  return linearish(scale);
}
},{"d3-array":"../node_modules/d3-array/src/index.js","./continuous":"../node_modules/d3-scale/src/continuous.js","./init":"../node_modules/d3-scale/src/init.js","./tickFormat":"../node_modules/d3-scale/src/tickFormat.js"}],"../node_modules/d3-scale/src/identity.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = identity;

var _array = require("./array");

var _linear = require("./linear");

var _number = _interopRequireDefault(require("./number"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function identity(domain) {
  var unknown;

  function scale(x) {
    return isNaN(x = +x) ? unknown : x;
  }

  scale.invert = scale;

  scale.domain = scale.range = function (_) {
    return arguments.length ? (domain = _array.map.call(_, _number.default), scale) : domain.slice();
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.copy = function () {
    return identity(domain).unknown(unknown);
  };

  domain = arguments.length ? _array.map.call(domain, _number.default) : [0, 1];
  return (0, _linear.linearish)(scale);
}
},{"./array":"../node_modules/d3-scale/src/array.js","./linear":"../node_modules/d3-scale/src/linear.js","./number":"../node_modules/d3-scale/src/number.js"}],"../node_modules/d3-scale/src/nice.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(domain, interval) {
  domain = domain.slice();
  var i0 = 0,
      i1 = domain.length - 1,
      x0 = domain[i0],
      x1 = domain[i1],
      t;

  if (x1 < x0) {
    t = i0, i0 = i1, i1 = t;
    t = x0, x0 = x1, x1 = t;
  }

  domain[i0] = interval.floor(x0);
  domain[i1] = interval.ceil(x1);
  return domain;
}
},{}],"../node_modules/d3-scale/src/log.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loggish = loggish;
exports.default = log;

var _d3Array = require("d3-array");

var _d3Format = require("d3-format");

var _nice = _interopRequireDefault(require("./nice"));

var _continuous = require("./continuous");

var _init = require("./init");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function transformLog(x) {
  return Math.log(x);
}

function transformExp(x) {
  return Math.exp(x);
}

function transformLogn(x) {
  return -Math.log(-x);
}

function transformExpn(x) {
  return -Math.exp(-x);
}

function pow10(x) {
  return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
}

function powp(base) {
  return base === 10 ? pow10 : base === Math.E ? Math.exp : function (x) {
    return Math.pow(base, x);
  };
}

function logp(base) {
  return base === Math.E ? Math.log : base === 10 && Math.log10 || base === 2 && Math.log2 || (base = Math.log(base), function (x) {
    return Math.log(x) / base;
  });
}

function reflect(f) {
  return function (x) {
    return -f(-x);
  };
}

function loggish(transform) {
  var scale = transform(transformLog, transformExp),
      domain = scale.domain,
      base = 10,
      logs,
      pows;

  function rescale() {
    logs = logp(base), pows = powp(base);

    if (domain()[0] < 0) {
      logs = reflect(logs), pows = reflect(pows);
      transform(transformLogn, transformExpn);
    } else {
      transform(transformLog, transformExp);
    }

    return scale;
  }

  scale.base = function (_) {
    return arguments.length ? (base = +_, rescale()) : base;
  };

  scale.domain = function (_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };

  scale.ticks = function (count) {
    var d = domain(),
        u = d[0],
        v = d[d.length - 1],
        r;
    if (r = v < u) i = u, u = v, v = i;
    var i = logs(u),
        j = logs(v),
        p,
        k,
        t,
        n = count == null ? 10 : +count,
        z = [];

    if (!(base % 1) && j - i < n) {
      i = Math.round(i) - 1, j = Math.round(j) + 1;
      if (u > 0) for (; i < j; ++i) {
        for (k = 1, p = pows(i); k < base; ++k) {
          t = p * k;
          if (t < u) continue;
          if (t > v) break;
          z.push(t);
        }
      } else for (; i < j; ++i) {
        for (k = base - 1, p = pows(i); k >= 1; --k) {
          t = p * k;
          if (t < u) continue;
          if (t > v) break;
          z.push(t);
        }
      }
    } else {
      z = (0, _d3Array.ticks)(i, j, Math.min(j - i, n)).map(pows);
    }

    return r ? z.reverse() : z;
  };

  scale.tickFormat = function (count, specifier) {
    if (specifier == null) specifier = base === 10 ? ".0e" : ",";
    if (typeof specifier !== "function") specifier = (0, _d3Format.format)(specifier);
    if (count === Infinity) return specifier;
    if (count == null) count = 10;
    var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?

    return function (d) {
      var i = d / pows(Math.round(logs(d)));
      if (i * base < base - 0.5) i *= base;
      return i <= k ? specifier(d) : "";
    };
  };

  scale.nice = function () {
    return domain((0, _nice.default)(domain(), {
      floor: function (x) {
        return pows(Math.floor(logs(x)));
      },
      ceil: function (x) {
        return pows(Math.ceil(logs(x)));
      }
    }));
  };

  return scale;
}

function log() {
  var scale = loggish((0, _continuous.transformer)()).domain([1, 10]);

  scale.copy = function () {
    return (0, _continuous.copy)(scale, log()).base(scale.base());
  };

  _init.initRange.apply(scale, arguments);

  return scale;
}
},{"d3-array":"../node_modules/d3-array/src/index.js","d3-format":"../node_modules/d3-format/src/index.js","./nice":"../node_modules/d3-scale/src/nice.js","./continuous":"../node_modules/d3-scale/src/continuous.js","./init":"../node_modules/d3-scale/src/init.js"}],"../node_modules/d3-scale/src/symlog.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.symlogish = symlogish;
exports.default = symlog;

var _linear = require("./linear");

var _continuous = require("./continuous");

var _init = require("./init");

function transformSymlog(c) {
  return function (x) {
    return Math.sign(x) * Math.log1p(Math.abs(x / c));
  };
}

function transformSymexp(c) {
  return function (x) {
    return Math.sign(x) * Math.expm1(Math.abs(x)) * c;
  };
}

function symlogish(transform) {
  var c = 1,
      scale = transform(transformSymlog(c), transformSymexp(c));

  scale.constant = function (_) {
    return arguments.length ? transform(transformSymlog(c = +_), transformSymexp(c)) : c;
  };

  return (0, _linear.linearish)(scale);
}

function symlog() {
  var scale = symlogish((0, _continuous.transformer)());

  scale.copy = function () {
    return (0, _continuous.copy)(scale, symlog()).constant(scale.constant());
  };

  return _init.initRange.apply(scale, arguments);
}
},{"./linear":"../node_modules/d3-scale/src/linear.js","./continuous":"../node_modules/d3-scale/src/continuous.js","./init":"../node_modules/d3-scale/src/init.js"}],"../node_modules/d3-scale/src/pow.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.powish = powish;
exports.default = pow;
exports.sqrt = sqrt;

var _linear = require("./linear");

var _continuous = require("./continuous");

var _init = require("./init");

function transformPow(exponent) {
  return function (x) {
    return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
  };
}

function transformSqrt(x) {
  return x < 0 ? -Math.sqrt(-x) : Math.sqrt(x);
}

function transformSquare(x) {
  return x < 0 ? -x * x : x * x;
}

function powish(transform) {
  var scale = transform(_continuous.identity, _continuous.identity),
      exponent = 1;

  function rescale() {
    return exponent === 1 ? transform(_continuous.identity, _continuous.identity) : exponent === 0.5 ? transform(transformSqrt, transformSquare) : transform(transformPow(exponent), transformPow(1 / exponent));
  }

  scale.exponent = function (_) {
    return arguments.length ? (exponent = +_, rescale()) : exponent;
  };

  return (0, _linear.linearish)(scale);
}

function pow() {
  var scale = powish((0, _continuous.transformer)());

  scale.copy = function () {
    return (0, _continuous.copy)(scale, pow()).exponent(scale.exponent());
  };

  _init.initRange.apply(scale, arguments);

  return scale;
}

function sqrt() {
  return pow.apply(null, arguments).exponent(0.5);
}
},{"./linear":"../node_modules/d3-scale/src/linear.js","./continuous":"../node_modules/d3-scale/src/continuous.js","./init":"../node_modules/d3-scale/src/init.js"}],"../node_modules/d3-scale/src/quantile.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = quantile;

var _d3Array = require("d3-array");

var _array = require("./array");

var _init = require("./init");

function quantile() {
  var domain = [],
      range = [],
      thresholds = [],
      unknown;

  function rescale() {
    var i = 0,
        n = Math.max(1, range.length);
    thresholds = new Array(n - 1);

    while (++i < n) thresholds[i - 1] = (0, _d3Array.quantile)(domain, i / n);

    return scale;
  }

  function scale(x) {
    return isNaN(x = +x) ? unknown : range[(0, _d3Array.bisect)(thresholds, x)];
  }

  scale.invertExtent = function (y) {
    var i = range.indexOf(y);
    return i < 0 ? [NaN, NaN] : [i > 0 ? thresholds[i - 1] : domain[0], i < thresholds.length ? thresholds[i] : domain[domain.length - 1]];
  };

  scale.domain = function (_) {
    if (!arguments.length) return domain.slice();
    domain = [];

    for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);

    domain.sort(_d3Array.ascending);
    return rescale();
  };

  scale.range = function (_) {
    return arguments.length ? (range = _array.slice.call(_), rescale()) : range.slice();
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.quantiles = function () {
    return thresholds.slice();
  };

  scale.copy = function () {
    return quantile().domain(domain).range(range).unknown(unknown);
  };

  return _init.initRange.apply(scale, arguments);
}
},{"d3-array":"../node_modules/d3-array/src/index.js","./array":"../node_modules/d3-scale/src/array.js","./init":"../node_modules/d3-scale/src/init.js"}],"../node_modules/d3-scale/src/quantize.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = quantize;

var _d3Array = require("d3-array");

var _array = require("./array");

var _linear = require("./linear");

var _init = require("./init");

function quantize() {
  var x0 = 0,
      x1 = 1,
      n = 1,
      domain = [0.5],
      range = [0, 1],
      unknown;

  function scale(x) {
    return x <= x ? range[(0, _d3Array.bisect)(domain, x, 0, n)] : unknown;
  }

  function rescale() {
    var i = -1;
    domain = new Array(n);

    while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);

    return scale;
  }

  scale.domain = function (_) {
    return arguments.length ? (x0 = +_[0], x1 = +_[1], rescale()) : [x0, x1];
  };

  scale.range = function (_) {
    return arguments.length ? (n = (range = _array.slice.call(_)).length - 1, rescale()) : range.slice();
  };

  scale.invertExtent = function (y) {
    var i = range.indexOf(y);
    return i < 0 ? [NaN, NaN] : i < 1 ? [x0, domain[0]] : i >= n ? [domain[n - 1], x1] : [domain[i - 1], domain[i]];
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : scale;
  };

  scale.thresholds = function () {
    return domain.slice();
  };

  scale.copy = function () {
    return quantize().domain([x0, x1]).range(range).unknown(unknown);
  };

  return _init.initRange.apply((0, _linear.linearish)(scale), arguments);
}
},{"d3-array":"../node_modules/d3-array/src/index.js","./array":"../node_modules/d3-scale/src/array.js","./linear":"../node_modules/d3-scale/src/linear.js","./init":"../node_modules/d3-scale/src/init.js"}],"../node_modules/d3-scale/src/threshold.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = threshold;

var _d3Array = require("d3-array");

var _array = require("./array");

var _init = require("./init");

function threshold() {
  var domain = [0.5],
      range = [0, 1],
      unknown,
      n = 1;

  function scale(x) {
    return x <= x ? range[(0, _d3Array.bisect)(domain, x, 0, n)] : unknown;
  }

  scale.domain = function (_) {
    return arguments.length ? (domain = _array.slice.call(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();
  };

  scale.range = function (_) {
    return arguments.length ? (range = _array.slice.call(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();
  };

  scale.invertExtent = function (y) {
    var i = range.indexOf(y);
    return [domain[i - 1], domain[i]];
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.copy = function () {
    return threshold().domain(domain).range(range).unknown(unknown);
  };

  return _init.initRange.apply(scale, arguments);
}
},{"d3-array":"../node_modules/d3-array/src/index.js","./array":"../node_modules/d3-scale/src/array.js","./init":"../node_modules/d3-scale/src/init.js"}],"../node_modules/d3-time/src/interval.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = newInterval;
var t0 = new Date(),
    t1 = new Date();

function newInterval(floori, offseti, count, field) {
  function interval(date) {
    return floori(date = new Date(+date)), date;
  }

  interval.floor = interval;

  interval.ceil = function (date) {
    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
  };

  interval.round = function (date) {
    var d0 = interval(date),
        d1 = interval.ceil(date);
    return date - d0 < d1 - date ? d0 : d1;
  };

  interval.offset = function (date, step) {
    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
  };

  interval.range = function (start, stop, step) {
    var range = [],
        previous;
    start = interval.ceil(start);
    step = step == null ? 1 : Math.floor(step);
    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date

    do range.push(previous = new Date(+start)), offseti(start, step), floori(start); while (previous < start && start < stop);

    return range;
  };

  interval.filter = function (test) {
    return newInterval(function (date) {
      if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);
    }, function (date, step) {
      if (date >= date) {
        if (step < 0) while (++step <= 0) {
          while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty

        } else while (--step >= 0) {
          while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty

        }
      }
    });
  };

  if (count) {
    interval.count = function (start, end) {
      t0.setTime(+start), t1.setTime(+end);
      floori(t0), floori(t1);
      return Math.floor(count(t0, t1));
    };

    interval.every = function (step) {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {
        return field(d) % step === 0;
      } : function (d) {
        return interval.count(0, d) % step === 0;
      });
    };
  }

  return interval;
}
},{}],"../node_modules/d3-time/src/millisecond.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.milliseconds = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var millisecond = (0, _interval.default)(function () {// noop
}, function (date, step) {
  date.setTime(+date + step);
}, function (start, end) {
  return end - start;
}); // An optimized implementation for this simple case.

millisecond.every = function (k) {
  k = Math.floor(k);
  if (!isFinite(k) || !(k > 0)) return null;
  if (!(k > 1)) return millisecond;
  return (0, _interval.default)(function (date) {
    date.setTime(Math.floor(date / k) * k);
  }, function (date, step) {
    date.setTime(+date + step * k);
  }, function (start, end) {
    return (end - start) / k;
  });
};

var _default = millisecond;
exports.default = _default;
var milliseconds = millisecond.range;
exports.milliseconds = milliseconds;
},{"./interval":"../node_modules/d3-time/src/interval.js"}],"../node_modules/d3-time/src/duration.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.durationWeek = exports.durationDay = exports.durationHour = exports.durationMinute = exports.durationSecond = void 0;
var durationSecond = 1e3;
exports.durationSecond = durationSecond;
var durationMinute = 6e4;
exports.durationMinute = durationMinute;
var durationHour = 36e5;
exports.durationHour = durationHour;
var durationDay = 864e5;
exports.durationDay = durationDay;
var durationWeek = 6048e5;
exports.durationWeek = durationWeek;
},{}],"../node_modules/d3-time/src/second.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.seconds = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval"));

var _duration = require("./duration");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var second = (0, _interval.default)(function (date) {
  date.setTime(date - date.getMilliseconds());
}, function (date, step) {
  date.setTime(+date + step * _duration.durationSecond);
}, function (start, end) {
  return (end - start) / _duration.durationSecond;
}, function (date) {
  return date.getUTCSeconds();
});
var _default = second;
exports.default = _default;
var seconds = second.range;
exports.seconds = seconds;
},{"./interval":"../node_modules/d3-time/src/interval.js","./duration":"../node_modules/d3-time/src/duration.js"}],"../node_modules/d3-time/src/minute.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.minutes = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval"));

var _duration = require("./duration");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var minute = (0, _interval.default)(function (date) {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * _duration.durationSecond);
}, function (date, step) {
  date.setTime(+date + step * _duration.durationMinute);
}, function (start, end) {
  return (end - start) / _duration.durationMinute;
}, function (date) {
  return date.getMinutes();
});
var _default = minute;
exports.default = _default;
var minutes = minute.range;
exports.minutes = minutes;
},{"./interval":"../node_modules/d3-time/src/interval.js","./duration":"../node_modules/d3-time/src/duration.js"}],"../node_modules/d3-time/src/hour.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hours = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval"));

var _duration = require("./duration");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var hour = (0, _interval.default)(function (date) {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * _duration.durationSecond - date.getMinutes() * _duration.durationMinute);
}, function (date, step) {
  date.setTime(+date + step * _duration.durationHour);
}, function (start, end) {
  return (end - start) / _duration.durationHour;
}, function (date) {
  return date.getHours();
});
var _default = hour;
exports.default = _default;
var hours = hour.range;
exports.hours = hours;
},{"./interval":"../node_modules/d3-time/src/interval.js","./duration":"../node_modules/d3-time/src/duration.js"}],"../node_modules/d3-time/src/day.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.days = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval"));

var _duration = require("./duration");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var day = (0, _interval.default)(function (date) {
  date.setHours(0, 0, 0, 0);
}, function (date, step) {
  date.setDate(date.getDate() + step);
}, function (start, end) {
  return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * _duration.durationMinute) / _duration.durationDay;
}, function (date) {
  return date.getDate() - 1;
});
var _default = day;
exports.default = _default;
var days = day.range;
exports.days = days;
},{"./interval":"../node_modules/d3-time/src/interval.js","./duration":"../node_modules/d3-time/src/duration.js"}],"../node_modules/d3-time/src/week.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.saturdays = exports.fridays = exports.thursdays = exports.wednesdays = exports.tuesdays = exports.mondays = exports.sundays = exports.saturday = exports.friday = exports.thursday = exports.wednesday = exports.tuesday = exports.monday = exports.sunday = void 0;

var _interval = _interopRequireDefault(require("./interval"));

var _duration = require("./duration");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function weekday(i) {
  return (0, _interval.default)(function (date) {
    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
    date.setHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setDate(date.getDate() + step * 7);
  }, function (start, end) {
    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * _duration.durationMinute) / _duration.durationWeek;
  });
}

var sunday = weekday(0);
exports.sunday = sunday;
var monday = weekday(1);
exports.monday = monday;
var tuesday = weekday(2);
exports.tuesday = tuesday;
var wednesday = weekday(3);
exports.wednesday = wednesday;
var thursday = weekday(4);
exports.thursday = thursday;
var friday = weekday(5);
exports.friday = friday;
var saturday = weekday(6);
exports.saturday = saturday;
var sundays = sunday.range;
exports.sundays = sundays;
var mondays = monday.range;
exports.mondays = mondays;
var tuesdays = tuesday.range;
exports.tuesdays = tuesdays;
var wednesdays = wednesday.range;
exports.wednesdays = wednesdays;
var thursdays = thursday.range;
exports.thursdays = thursdays;
var fridays = friday.range;
exports.fridays = fridays;
var saturdays = saturday.range;
exports.saturdays = saturdays;
},{"./interval":"../node_modules/d3-time/src/interval.js","./duration":"../node_modules/d3-time/src/duration.js"}],"../node_modules/d3-time/src/month.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.months = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var month = (0, _interval.default)(function (date) {
  date.setDate(1);
  date.setHours(0, 0, 0, 0);
}, function (date, step) {
  date.setMonth(date.getMonth() + step);
}, function (start, end) {
  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
}, function (date) {
  return date.getMonth();
});
var _default = month;
exports.default = _default;
var months = month.range;
exports.months = months;
},{"./interval":"../node_modules/d3-time/src/interval.js"}],"../node_modules/d3-time/src/year.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.years = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var year = (0, _interval.default)(function (date) {
  date.setMonth(0, 1);
  date.setHours(0, 0, 0, 0);
}, function (date, step) {
  date.setFullYear(date.getFullYear() + step);
}, function (start, end) {
  return end.getFullYear() - start.getFullYear();
}, function (date) {
  return date.getFullYear();
}); // An optimized implementation for this simple case.

year.every = function (k) {
  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : (0, _interval.default)(function (date) {
    date.setFullYear(Math.floor(date.getFullYear() / k) * k);
    date.setMonth(0, 1);
    date.setHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setFullYear(date.getFullYear() + step * k);
  });
};

var _default = year;
exports.default = _default;
var years = year.range;
exports.years = years;
},{"./interval":"../node_modules/d3-time/src/interval.js"}],"../node_modules/d3-time/src/utcMinute.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.utcMinutes = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval"));

var _duration = require("./duration");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var utcMinute = (0, _interval.default)(function (date) {
  date.setUTCSeconds(0, 0);
}, function (date, step) {
  date.setTime(+date + step * _duration.durationMinute);
}, function (start, end) {
  return (end - start) / _duration.durationMinute;
}, function (date) {
  return date.getUTCMinutes();
});
var _default = utcMinute;
exports.default = _default;
var utcMinutes = utcMinute.range;
exports.utcMinutes = utcMinutes;
},{"./interval":"../node_modules/d3-time/src/interval.js","./duration":"../node_modules/d3-time/src/duration.js"}],"../node_modules/d3-time/src/utcHour.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.utcHours = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval"));

var _duration = require("./duration");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var utcHour = (0, _interval.default)(function (date) {
  date.setUTCMinutes(0, 0, 0);
}, function (date, step) {
  date.setTime(+date + step * _duration.durationHour);
}, function (start, end) {
  return (end - start) / _duration.durationHour;
}, function (date) {
  return date.getUTCHours();
});
var _default = utcHour;
exports.default = _default;
var utcHours = utcHour.range;
exports.utcHours = utcHours;
},{"./interval":"../node_modules/d3-time/src/interval.js","./duration":"../node_modules/d3-time/src/duration.js"}],"../node_modules/d3-time/src/utcDay.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.utcDays = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval"));

var _duration = require("./duration");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var utcDay = (0, _interval.default)(function (date) {
  date.setUTCHours(0, 0, 0, 0);
}, function (date, step) {
  date.setUTCDate(date.getUTCDate() + step);
}, function (start, end) {
  return (end - start) / _duration.durationDay;
}, function (date) {
  return date.getUTCDate() - 1;
});
var _default = utcDay;
exports.default = _default;
var utcDays = utcDay.range;
exports.utcDays = utcDays;
},{"./interval":"../node_modules/d3-time/src/interval.js","./duration":"../node_modules/d3-time/src/duration.js"}],"../node_modules/d3-time/src/utcWeek.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.utcSaturdays = exports.utcFridays = exports.utcThursdays = exports.utcWednesdays = exports.utcTuesdays = exports.utcMondays = exports.utcSundays = exports.utcSaturday = exports.utcFriday = exports.utcThursday = exports.utcWednesday = exports.utcTuesday = exports.utcMonday = exports.utcSunday = void 0;

var _interval = _interopRequireDefault(require("./interval"));

var _duration = require("./duration");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function utcWeekday(i) {
  return (0, _interval.default)(function (date) {
    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
    date.setUTCHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setUTCDate(date.getUTCDate() + step * 7);
  }, function (start, end) {
    return (end - start) / _duration.durationWeek;
  });
}

var utcSunday = utcWeekday(0);
exports.utcSunday = utcSunday;
var utcMonday = utcWeekday(1);
exports.utcMonday = utcMonday;
var utcTuesday = utcWeekday(2);
exports.utcTuesday = utcTuesday;
var utcWednesday = utcWeekday(3);
exports.utcWednesday = utcWednesday;
var utcThursday = utcWeekday(4);
exports.utcThursday = utcThursday;
var utcFriday = utcWeekday(5);
exports.utcFriday = utcFriday;
var utcSaturday = utcWeekday(6);
exports.utcSaturday = utcSaturday;
var utcSundays = utcSunday.range;
exports.utcSundays = utcSundays;
var utcMondays = utcMonday.range;
exports.utcMondays = utcMondays;
var utcTuesdays = utcTuesday.range;
exports.utcTuesdays = utcTuesdays;
var utcWednesdays = utcWednesday.range;
exports.utcWednesdays = utcWednesdays;
var utcThursdays = utcThursday.range;
exports.utcThursdays = utcThursdays;
var utcFridays = utcFriday.range;
exports.utcFridays = utcFridays;
var utcSaturdays = utcSaturday.range;
exports.utcSaturdays = utcSaturdays;
},{"./interval":"../node_modules/d3-time/src/interval.js","./duration":"../node_modules/d3-time/src/duration.js"}],"../node_modules/d3-time/src/utcMonth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.utcMonths = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var utcMonth = (0, _interval.default)(function (date) {
  date.setUTCDate(1);
  date.setUTCHours(0, 0, 0, 0);
}, function (date, step) {
  date.setUTCMonth(date.getUTCMonth() + step);
}, function (start, end) {
  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
}, function (date) {
  return date.getUTCMonth();
});
var _default = utcMonth;
exports.default = _default;
var utcMonths = utcMonth.range;
exports.utcMonths = utcMonths;
},{"./interval":"../node_modules/d3-time/src/interval.js"}],"../node_modules/d3-time/src/utcYear.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.utcYears = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var utcYear = (0, _interval.default)(function (date) {
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
}, function (date, step) {
  date.setUTCFullYear(date.getUTCFullYear() + step);
}, function (start, end) {
  return end.getUTCFullYear() - start.getUTCFullYear();
}, function (date) {
  return date.getUTCFullYear();
}); // An optimized implementation for this simple case.

utcYear.every = function (k) {
  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : (0, _interval.default)(function (date) {
    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setUTCFullYear(date.getUTCFullYear() + step * k);
  });
};

var _default = utcYear;
exports.default = _default;
var utcYears = utcYear.range;
exports.utcYears = utcYears;
},{"./interval":"../node_modules/d3-time/src/interval.js"}],"../node_modules/d3-time/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "timeInterval", {
  enumerable: true,
  get: function () {
    return _interval.default;
  }
});
Object.defineProperty(exports, "timeMillisecond", {
  enumerable: true,
  get: function () {
    return _millisecond.default;
  }
});
Object.defineProperty(exports, "timeMilliseconds", {
  enumerable: true,
  get: function () {
    return _millisecond.milliseconds;
  }
});
Object.defineProperty(exports, "utcMillisecond", {
  enumerable: true,
  get: function () {
    return _millisecond.default;
  }
});
Object.defineProperty(exports, "utcMilliseconds", {
  enumerable: true,
  get: function () {
    return _millisecond.milliseconds;
  }
});
Object.defineProperty(exports, "timeSecond", {
  enumerable: true,
  get: function () {
    return _second.default;
  }
});
Object.defineProperty(exports, "timeSeconds", {
  enumerable: true,
  get: function () {
    return _second.seconds;
  }
});
Object.defineProperty(exports, "utcSecond", {
  enumerable: true,
  get: function () {
    return _second.default;
  }
});
Object.defineProperty(exports, "utcSeconds", {
  enumerable: true,
  get: function () {
    return _second.seconds;
  }
});
Object.defineProperty(exports, "timeMinute", {
  enumerable: true,
  get: function () {
    return _minute.default;
  }
});
Object.defineProperty(exports, "timeMinutes", {
  enumerable: true,
  get: function () {
    return _minute.minutes;
  }
});
Object.defineProperty(exports, "timeHour", {
  enumerable: true,
  get: function () {
    return _hour.default;
  }
});
Object.defineProperty(exports, "timeHours", {
  enumerable: true,
  get: function () {
    return _hour.hours;
  }
});
Object.defineProperty(exports, "timeDay", {
  enumerable: true,
  get: function () {
    return _day.default;
  }
});
Object.defineProperty(exports, "timeDays", {
  enumerable: true,
  get: function () {
    return _day.days;
  }
});
Object.defineProperty(exports, "timeWeek", {
  enumerable: true,
  get: function () {
    return _week.sunday;
  }
});
Object.defineProperty(exports, "timeWeeks", {
  enumerable: true,
  get: function () {
    return _week.sundays;
  }
});
Object.defineProperty(exports, "timeSunday", {
  enumerable: true,
  get: function () {
    return _week.sunday;
  }
});
Object.defineProperty(exports, "timeSundays", {
  enumerable: true,
  get: function () {
    return _week.sundays;
  }
});
Object.defineProperty(exports, "timeMonday", {
  enumerable: true,
  get: function () {
    return _week.monday;
  }
});
Object.defineProperty(exports, "timeMondays", {
  enumerable: true,
  get: function () {
    return _week.mondays;
  }
});
Object.defineProperty(exports, "timeTuesday", {
  enumerable: true,
  get: function () {
    return _week.tuesday;
  }
});
Object.defineProperty(exports, "timeTuesdays", {
  enumerable: true,
  get: function () {
    return _week.tuesdays;
  }
});
Object.defineProperty(exports, "timeWednesday", {
  enumerable: true,
  get: function () {
    return _week.wednesday;
  }
});
Object.defineProperty(exports, "timeWednesdays", {
  enumerable: true,
  get: function () {
    return _week.wednesdays;
  }
});
Object.defineProperty(exports, "timeThursday", {
  enumerable: true,
  get: function () {
    return _week.thursday;
  }
});
Object.defineProperty(exports, "timeThursdays", {
  enumerable: true,
  get: function () {
    return _week.thursdays;
  }
});
Object.defineProperty(exports, "timeFriday", {
  enumerable: true,
  get: function () {
    return _week.friday;
  }
});
Object.defineProperty(exports, "timeFridays", {
  enumerable: true,
  get: function () {
    return _week.fridays;
  }
});
Object.defineProperty(exports, "timeSaturday", {
  enumerable: true,
  get: function () {
    return _week.saturday;
  }
});
Object.defineProperty(exports, "timeSaturdays", {
  enumerable: true,
  get: function () {
    return _week.saturdays;
  }
});
Object.defineProperty(exports, "timeMonth", {
  enumerable: true,
  get: function () {
    return _month.default;
  }
});
Object.defineProperty(exports, "timeMonths", {
  enumerable: true,
  get: function () {
    return _month.months;
  }
});
Object.defineProperty(exports, "timeYear", {
  enumerable: true,
  get: function () {
    return _year.default;
  }
});
Object.defineProperty(exports, "timeYears", {
  enumerable: true,
  get: function () {
    return _year.years;
  }
});
Object.defineProperty(exports, "utcMinute", {
  enumerable: true,
  get: function () {
    return _utcMinute.default;
  }
});
Object.defineProperty(exports, "utcMinutes", {
  enumerable: true,
  get: function () {
    return _utcMinute.utcMinutes;
  }
});
Object.defineProperty(exports, "utcHour", {
  enumerable: true,
  get: function () {
    return _utcHour.default;
  }
});
Object.defineProperty(exports, "utcHours", {
  enumerable: true,
  get: function () {
    return _utcHour.utcHours;
  }
});
Object.defineProperty(exports, "utcDay", {
  enumerable: true,
  get: function () {
    return _utcDay.default;
  }
});
Object.defineProperty(exports, "utcDays", {
  enumerable: true,
  get: function () {
    return _utcDay.utcDays;
  }
});
Object.defineProperty(exports, "utcWeek", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcSunday;
  }
});
Object.defineProperty(exports, "utcWeeks", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcSundays;
  }
});
Object.defineProperty(exports, "utcSunday", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcSunday;
  }
});
Object.defineProperty(exports, "utcSundays", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcSundays;
  }
});
Object.defineProperty(exports, "utcMonday", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcMonday;
  }
});
Object.defineProperty(exports, "utcMondays", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcMondays;
  }
});
Object.defineProperty(exports, "utcTuesday", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcTuesday;
  }
});
Object.defineProperty(exports, "utcTuesdays", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcTuesdays;
  }
});
Object.defineProperty(exports, "utcWednesday", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcWednesday;
  }
});
Object.defineProperty(exports, "utcWednesdays", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcWednesdays;
  }
});
Object.defineProperty(exports, "utcThursday", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcThursday;
  }
});
Object.defineProperty(exports, "utcThursdays", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcThursdays;
  }
});
Object.defineProperty(exports, "utcFriday", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcFriday;
  }
});
Object.defineProperty(exports, "utcFridays", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcFridays;
  }
});
Object.defineProperty(exports, "utcSaturday", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcSaturday;
  }
});
Object.defineProperty(exports, "utcSaturdays", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcSaturdays;
  }
});
Object.defineProperty(exports, "utcMonth", {
  enumerable: true,
  get: function () {
    return _utcMonth.default;
  }
});
Object.defineProperty(exports, "utcMonths", {
  enumerable: true,
  get: function () {
    return _utcMonth.utcMonths;
  }
});
Object.defineProperty(exports, "utcYear", {
  enumerable: true,
  get: function () {
    return _utcYear.default;
  }
});
Object.defineProperty(exports, "utcYears", {
  enumerable: true,
  get: function () {
    return _utcYear.utcYears;
  }
});

var _interval = _interopRequireDefault(require("./interval"));

var _millisecond = _interopRequireWildcard(require("./millisecond"));

var _second = _interopRequireWildcard(require("./second"));

var _minute = _interopRequireWildcard(require("./minute"));

var _hour = _interopRequireWildcard(require("./hour"));

var _day = _interopRequireWildcard(require("./day"));

var _week = require("./week");

var _month = _interopRequireWildcard(require("./month"));

var _year = _interopRequireWildcard(require("./year"));

var _utcMinute = _interopRequireWildcard(require("./utcMinute"));

var _utcHour = _interopRequireWildcard(require("./utcHour"));

var _utcDay = _interopRequireWildcard(require("./utcDay"));

var _utcWeek = require("./utcWeek");

var _utcMonth = _interopRequireWildcard(require("./utcMonth"));

var _utcYear = _interopRequireWildcard(require("./utcYear"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./interval":"../node_modules/d3-time/src/interval.js","./millisecond":"../node_modules/d3-time/src/millisecond.js","./second":"../node_modules/d3-time/src/second.js","./minute":"../node_modules/d3-time/src/minute.js","./hour":"../node_modules/d3-time/src/hour.js","./day":"../node_modules/d3-time/src/day.js","./week":"../node_modules/d3-time/src/week.js","./month":"../node_modules/d3-time/src/month.js","./year":"../node_modules/d3-time/src/year.js","./utcMinute":"../node_modules/d3-time/src/utcMinute.js","./utcHour":"../node_modules/d3-time/src/utcHour.js","./utcDay":"../node_modules/d3-time/src/utcDay.js","./utcWeek":"../node_modules/d3-time/src/utcWeek.js","./utcMonth":"../node_modules/d3-time/src/utcMonth.js","./utcYear":"../node_modules/d3-time/src/utcYear.js"}],"../node_modules/d3-time-format/src/locale.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = formatLocale;

var _d3Time = require("d3-time");

function localDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
    date.setFullYear(d.y);
    return date;
  }

  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
}

function utcDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
    date.setUTCFullYear(d.y);
    return date;
  }

  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
}

function newYear(y) {
  return {
    y: y,
    m: 0,
    d: 1,
    H: 0,
    M: 0,
    S: 0,
    L: 0
  };
}

function formatLocale(locale) {
  var locale_dateTime = locale.dateTime,
      locale_date = locale.date,
      locale_time = locale.time,
      locale_periods = locale.periods,
      locale_weekdays = locale.days,
      locale_shortWeekdays = locale.shortDays,
      locale_months = locale.months,
      locale_shortMonths = locale.shortMonths;
  var periodRe = formatRe(locale_periods),
      periodLookup = formatLookup(locale_periods),
      weekdayRe = formatRe(locale_weekdays),
      weekdayLookup = formatLookup(locale_weekdays),
      shortWeekdayRe = formatRe(locale_shortWeekdays),
      shortWeekdayLookup = formatLookup(locale_shortWeekdays),
      monthRe = formatRe(locale_months),
      monthLookup = formatLookup(locale_months),
      shortMonthRe = formatRe(locale_shortMonths),
      shortMonthLookup = formatLookup(locale_shortMonths);
  var formats = {
    "a": formatShortWeekday,
    "A": formatWeekday,
    "b": formatShortMonth,
    "B": formatMonth,
    "c": null,
    "d": formatDayOfMonth,
    "e": formatDayOfMonth,
    "f": formatMicroseconds,
    "H": formatHour24,
    "I": formatHour12,
    "j": formatDayOfYear,
    "L": formatMilliseconds,
    "m": formatMonthNumber,
    "M": formatMinutes,
    "p": formatPeriod,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatSeconds,
    "u": formatWeekdayNumberMonday,
    "U": formatWeekNumberSunday,
    "V": formatWeekNumberISO,
    "w": formatWeekdayNumberSunday,
    "W": formatWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatYear,
    "Y": formatFullYear,
    "Z": formatZone,
    "%": formatLiteralPercent
  };
  var utcFormats = {
    "a": formatUTCShortWeekday,
    "A": formatUTCWeekday,
    "b": formatUTCShortMonth,
    "B": formatUTCMonth,
    "c": null,
    "d": formatUTCDayOfMonth,
    "e": formatUTCDayOfMonth,
    "f": formatUTCMicroseconds,
    "H": formatUTCHour24,
    "I": formatUTCHour12,
    "j": formatUTCDayOfYear,
    "L": formatUTCMilliseconds,
    "m": formatUTCMonthNumber,
    "M": formatUTCMinutes,
    "p": formatUTCPeriod,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatUTCSeconds,
    "u": formatUTCWeekdayNumberMonday,
    "U": formatUTCWeekNumberSunday,
    "V": formatUTCWeekNumberISO,
    "w": formatUTCWeekdayNumberSunday,
    "W": formatUTCWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatUTCYear,
    "Y": formatUTCFullYear,
    "Z": formatUTCZone,
    "%": formatLiteralPercent
  };
  var parses = {
    "a": parseShortWeekday,
    "A": parseWeekday,
    "b": parseShortMonth,
    "B": parseMonth,
    "c": parseLocaleDateTime,
    "d": parseDayOfMonth,
    "e": parseDayOfMonth,
    "f": parseMicroseconds,
    "H": parseHour24,
    "I": parseHour24,
    "j": parseDayOfYear,
    "L": parseMilliseconds,
    "m": parseMonthNumber,
    "M": parseMinutes,
    "p": parsePeriod,
    "Q": parseUnixTimestamp,
    "s": parseUnixTimestampSeconds,
    "S": parseSeconds,
    "u": parseWeekdayNumberMonday,
    "U": parseWeekNumberSunday,
    "V": parseWeekNumberISO,
    "w": parseWeekdayNumberSunday,
    "W": parseWeekNumberMonday,
    "x": parseLocaleDate,
    "X": parseLocaleTime,
    "y": parseYear,
    "Y": parseFullYear,
    "Z": parseZone,
    "%": parseLiteralPercent
  }; // These recursive directive definitions must be deferred.

  formats.x = newFormat(locale_date, formats);
  formats.X = newFormat(locale_time, formats);
  formats.c = newFormat(locale_dateTime, formats);
  utcFormats.x = newFormat(locale_date, utcFormats);
  utcFormats.X = newFormat(locale_time, utcFormats);
  utcFormats.c = newFormat(locale_dateTime, utcFormats);

  function newFormat(specifier, formats) {
    return function (date) {
      var string = [],
          i = -1,
          j = 0,
          n = specifier.length,
          c,
          pad,
          format;
      if (!(date instanceof Date)) date = new Date(+date);

      while (++i < n) {
        if (specifier.charCodeAt(i) === 37) {
          string.push(specifier.slice(j, i));
          if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);else pad = c === "e" ? " " : "0";
          if (format = formats[c]) c = format(date, pad);
          string.push(c);
          j = i + 1;
        }
      }

      string.push(specifier.slice(j, i));
      return string.join("");
    };
  }

  function newParse(specifier, newDate) {
    return function (string) {
      var d = newYear(1900),
          i = parseSpecifier(d, specifier, string += "", 0),
          week,
          day;
      if (i != string.length) return null; // If a UNIX timestamp is specified, return it.

      if ("Q" in d) return new Date(d.Q); // The am-pm flag is 0 for AM, and 1 for PM.

      if ("p" in d) d.H = d.H % 12 + d.p * 12; // Convert day-of-week and week-of-year to day-of-year.

      if ("V" in d) {
        if (d.V < 1 || d.V > 53) return null;
        if (!("w" in d)) d.w = 1;

        if ("Z" in d) {
          week = utcDate(newYear(d.y)), day = week.getUTCDay();
          week = day > 4 || day === 0 ? _d3Time.utcMonday.ceil(week) : (0, _d3Time.utcMonday)(week);
          week = _d3Time.utcDay.offset(week, (d.V - 1) * 7);
          d.y = week.getUTCFullYear();
          d.m = week.getUTCMonth();
          d.d = week.getUTCDate() + (d.w + 6) % 7;
        } else {
          week = newDate(newYear(d.y)), day = week.getDay();
          week = day > 4 || day === 0 ? _d3Time.timeMonday.ceil(week) : (0, _d3Time.timeMonday)(week);
          week = _d3Time.timeDay.offset(week, (d.V - 1) * 7);
          d.y = week.getFullYear();
          d.m = week.getMonth();
          d.d = week.getDate() + (d.w + 6) % 7;
        }
      } else if ("W" in d || "U" in d) {
        if (!("w" in d)) d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
        day = "Z" in d ? utcDate(newYear(d.y)).getUTCDay() : newDate(newYear(d.y)).getDay();
        d.m = 0;
        d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;
      } // If a time zone is specified, all fields are interpreted as UTC and then
      // offset according to the specified time zone.


      if ("Z" in d) {
        d.H += d.Z / 100 | 0;
        d.M += d.Z % 100;
        return utcDate(d);
      } // Otherwise, all fields are in local time.


      return newDate(d);
    };
  }

  function parseSpecifier(d, specifier, string, j) {
    var i = 0,
        n = specifier.length,
        m = string.length,
        c,
        parse;

    while (i < n) {
      if (j >= m) return -1;
      c = specifier.charCodeAt(i++);

      if (c === 37) {
        c = specifier.charAt(i++);
        parse = parses[c in pads ? specifier.charAt(i++) : c];
        if (!parse || (j = parse(d, string, j)) < 0) return -1;
      } else if (c != string.charCodeAt(j++)) {
        return -1;
      }
    }

    return j;
  }

  function parsePeriod(d, string, i) {
    var n = periodRe.exec(string.slice(i));
    return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseShortWeekday(d, string, i) {
    var n = shortWeekdayRe.exec(string.slice(i));
    return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseWeekday(d, string, i) {
    var n = weekdayRe.exec(string.slice(i));
    return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseShortMonth(d, string, i) {
    var n = shortMonthRe.exec(string.slice(i));
    return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseMonth(d, string, i) {
    var n = monthRe.exec(string.slice(i));
    return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseLocaleDateTime(d, string, i) {
    return parseSpecifier(d, locale_dateTime, string, i);
  }

  function parseLocaleDate(d, string, i) {
    return parseSpecifier(d, locale_date, string, i);
  }

  function parseLocaleTime(d, string, i) {
    return parseSpecifier(d, locale_time, string, i);
  }

  function formatShortWeekday(d) {
    return locale_shortWeekdays[d.getDay()];
  }

  function formatWeekday(d) {
    return locale_weekdays[d.getDay()];
  }

  function formatShortMonth(d) {
    return locale_shortMonths[d.getMonth()];
  }

  function formatMonth(d) {
    return locale_months[d.getMonth()];
  }

  function formatPeriod(d) {
    return locale_periods[+(d.getHours() >= 12)];
  }

  function formatUTCShortWeekday(d) {
    return locale_shortWeekdays[d.getUTCDay()];
  }

  function formatUTCWeekday(d) {
    return locale_weekdays[d.getUTCDay()];
  }

  function formatUTCShortMonth(d) {
    return locale_shortMonths[d.getUTCMonth()];
  }

  function formatUTCMonth(d) {
    return locale_months[d.getUTCMonth()];
  }

  function formatUTCPeriod(d) {
    return locale_periods[+(d.getUTCHours() >= 12)];
  }

  return {
    format: function (specifier) {
      var f = newFormat(specifier += "", formats);

      f.toString = function () {
        return specifier;
      };

      return f;
    },
    parse: function (specifier) {
      var p = newParse(specifier += "", localDate);

      p.toString = function () {
        return specifier;
      };

      return p;
    },
    utcFormat: function (specifier) {
      var f = newFormat(specifier += "", utcFormats);

      f.toString = function () {
        return specifier;
      };

      return f;
    },
    utcParse: function (specifier) {
      var p = newParse(specifier, utcDate);

      p.toString = function () {
        return specifier;
      };

      return p;
    }
  };
}

var pads = {
  "-": "",
  "_": " ",
  "0": "0"
},
    numberRe = /^\s*\d+/,
    // note: ignores next directive
percentRe = /^%/,
    requoteRe = /[\\^$*+?|[\]().{}]/g;

function pad(value, fill, width) {
  var sign = value < 0 ? "-" : "",
      string = (sign ? -value : value) + "",
      length = string.length;
  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
}

function requote(s) {
  return s.replace(requoteRe, "\\$&");
}

function formatRe(names) {
  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
}

function formatLookup(names) {
  var map = {},
      i = -1,
      n = names.length;

  while (++i < n) map[names[i].toLowerCase()] = i;

  return map;
}

function parseWeekdayNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.w = +n[0], i + n[0].length) : -1;
}

function parseWeekdayNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.u = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.U = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberISO(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.V = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.W = +n[0], i + n[0].length) : -1;
}

function parseFullYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 4));
  return n ? (d.y = +n[0], i + n[0].length) : -1;
}

function parseYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
}

function parseZone(d, string, i) {
  var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
}

function parseMonthNumber(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
}

function parseDayOfMonth(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.d = +n[0], i + n[0].length) : -1;
}

function parseDayOfYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
}

function parseHour24(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.H = +n[0], i + n[0].length) : -1;
}

function parseMinutes(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.M = +n[0], i + n[0].length) : -1;
}

function parseSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.S = +n[0], i + n[0].length) : -1;
}

function parseMilliseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.L = +n[0], i + n[0].length) : -1;
}

function parseMicroseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 6));
  return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;
}

function parseLiteralPercent(d, string, i) {
  var n = percentRe.exec(string.slice(i, i + 1));
  return n ? i + n[0].length : -1;
}

function parseUnixTimestamp(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.Q = +n[0], i + n[0].length) : -1;
}

function parseUnixTimestampSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.Q = +n[0] * 1000, i + n[0].length) : -1;
}

function formatDayOfMonth(d, p) {
  return pad(d.getDate(), p, 2);
}

function formatHour24(d, p) {
  return pad(d.getHours(), p, 2);
}

function formatHour12(d, p) {
  return pad(d.getHours() % 12 || 12, p, 2);
}

function formatDayOfYear(d, p) {
  return pad(1 + _d3Time.timeDay.count((0, _d3Time.timeYear)(d), d), p, 3);
}

function formatMilliseconds(d, p) {
  return pad(d.getMilliseconds(), p, 3);
}

function formatMicroseconds(d, p) {
  return formatMilliseconds(d, p) + "000";
}

function formatMonthNumber(d, p) {
  return pad(d.getMonth() + 1, p, 2);
}

function formatMinutes(d, p) {
  return pad(d.getMinutes(), p, 2);
}

function formatSeconds(d, p) {
  return pad(d.getSeconds(), p, 2);
}

function formatWeekdayNumberMonday(d) {
  var day = d.getDay();
  return day === 0 ? 7 : day;
}

function formatWeekNumberSunday(d, p) {
  return pad(_d3Time.timeSunday.count((0, _d3Time.timeYear)(d), d), p, 2);
}

function formatWeekNumberISO(d, p) {
  var day = d.getDay();
  d = day >= 4 || day === 0 ? (0, _d3Time.timeThursday)(d) : _d3Time.timeThursday.ceil(d);
  return pad(_d3Time.timeThursday.count((0, _d3Time.timeYear)(d), d) + ((0, _d3Time.timeYear)(d).getDay() === 4), p, 2);
}

function formatWeekdayNumberSunday(d) {
  return d.getDay();
}

function formatWeekNumberMonday(d, p) {
  return pad(_d3Time.timeMonday.count((0, _d3Time.timeYear)(d), d), p, 2);
}

function formatYear(d, p) {
  return pad(d.getFullYear() % 100, p, 2);
}

function formatFullYear(d, p) {
  return pad(d.getFullYear() % 10000, p, 4);
}

function formatZone(d) {
  var z = d.getTimezoneOffset();
  return (z > 0 ? "-" : (z *= -1, "+")) + pad(z / 60 | 0, "0", 2) + pad(z % 60, "0", 2);
}

function formatUTCDayOfMonth(d, p) {
  return pad(d.getUTCDate(), p, 2);
}

function formatUTCHour24(d, p) {
  return pad(d.getUTCHours(), p, 2);
}

function formatUTCHour12(d, p) {
  return pad(d.getUTCHours() % 12 || 12, p, 2);
}

function formatUTCDayOfYear(d, p) {
  return pad(1 + _d3Time.utcDay.count((0, _d3Time.utcYear)(d), d), p, 3);
}

function formatUTCMilliseconds(d, p) {
  return pad(d.getUTCMilliseconds(), p, 3);
}

function formatUTCMicroseconds(d, p) {
  return formatUTCMilliseconds(d, p) + "000";
}

function formatUTCMonthNumber(d, p) {
  return pad(d.getUTCMonth() + 1, p, 2);
}

function formatUTCMinutes(d, p) {
  return pad(d.getUTCMinutes(), p, 2);
}

function formatUTCSeconds(d, p) {
  return pad(d.getUTCSeconds(), p, 2);
}

function formatUTCWeekdayNumberMonday(d) {
  var dow = d.getUTCDay();
  return dow === 0 ? 7 : dow;
}

function formatUTCWeekNumberSunday(d, p) {
  return pad(_d3Time.utcSunday.count((0, _d3Time.utcYear)(d), d), p, 2);
}

function formatUTCWeekNumberISO(d, p) {
  var day = d.getUTCDay();
  d = day >= 4 || day === 0 ? (0, _d3Time.utcThursday)(d) : _d3Time.utcThursday.ceil(d);
  return pad(_d3Time.utcThursday.count((0, _d3Time.utcYear)(d), d) + ((0, _d3Time.utcYear)(d).getUTCDay() === 4), p, 2);
}

function formatUTCWeekdayNumberSunday(d) {
  return d.getUTCDay();
}

function formatUTCWeekNumberMonday(d, p) {
  return pad(_d3Time.utcMonday.count((0, _d3Time.utcYear)(d), d), p, 2);
}

function formatUTCYear(d, p) {
  return pad(d.getUTCFullYear() % 100, p, 2);
}

function formatUTCFullYear(d, p) {
  return pad(d.getUTCFullYear() % 10000, p, 4);
}

function formatUTCZone() {
  return "+0000";
}

function formatLiteralPercent() {
  return "%";
}

function formatUnixTimestamp(d) {
  return +d;
}

function formatUnixTimestampSeconds(d) {
  return Math.floor(+d / 1000);
}
},{"d3-time":"../node_modules/d3-time/src/index.js"}],"../node_modules/d3-time-format/src/defaultLocale.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = defaultLocale;
exports.utcParse = exports.utcFormat = exports.timeParse = exports.timeFormat = void 0;

var _locale = _interopRequireDefault(require("./locale"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var locale;
var timeFormat;
exports.timeFormat = timeFormat;
var timeParse;
exports.timeParse = timeParse;
var utcFormat;
exports.utcFormat = utcFormat;
var utcParse;
exports.utcParse = utcParse;
defaultLocale({
  dateTime: "%x, %X",
  date: "%-m/%-d/%Y",
  time: "%-I:%M:%S %p",
  periods: ["AM", "PM"],
  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
});

function defaultLocale(definition) {
  locale = (0, _locale.default)(definition);
  exports.timeFormat = timeFormat = locale.format;
  exports.timeParse = timeParse = locale.parse;
  exports.utcFormat = utcFormat = locale.utcFormat;
  exports.utcParse = utcParse = locale.utcParse;
  return locale;
}
},{"./locale":"../node_modules/d3-time-format/src/locale.js"}],"../node_modules/d3-time-format/src/isoFormat.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.isoSpecifier = void 0;

var _defaultLocale = require("./defaultLocale");

var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";
exports.isoSpecifier = isoSpecifier;

function formatIsoNative(date) {
  return date.toISOString();
}

var formatIso = Date.prototype.toISOString ? formatIsoNative : (0, _defaultLocale.utcFormat)(isoSpecifier);
var _default = formatIso;
exports.default = _default;
},{"./defaultLocale":"../node_modules/d3-time-format/src/defaultLocale.js"}],"../node_modules/d3-time-format/src/isoParse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _isoFormat = require("./isoFormat");

var _defaultLocale = require("./defaultLocale");

function parseIsoNative(string) {
  var date = new Date(string);
  return isNaN(date) ? null : date;
}

var parseIso = +new Date("2000-01-01T00:00:00.000Z") ? parseIsoNative : (0, _defaultLocale.utcParse)(_isoFormat.isoSpecifier);
var _default = parseIso;
exports.default = _default;
},{"./isoFormat":"../node_modules/d3-time-format/src/isoFormat.js","./defaultLocale":"../node_modules/d3-time-format/src/defaultLocale.js"}],"../node_modules/d3-time-format/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "timeFormatDefaultLocale", {
  enumerable: true,
  get: function () {
    return _defaultLocale.default;
  }
});
Object.defineProperty(exports, "timeFormat", {
  enumerable: true,
  get: function () {
    return _defaultLocale.timeFormat;
  }
});
Object.defineProperty(exports, "timeParse", {
  enumerable: true,
  get: function () {
    return _defaultLocale.timeParse;
  }
});
Object.defineProperty(exports, "utcFormat", {
  enumerable: true,
  get: function () {
    return _defaultLocale.utcFormat;
  }
});
Object.defineProperty(exports, "utcParse", {
  enumerable: true,
  get: function () {
    return _defaultLocale.utcParse;
  }
});
Object.defineProperty(exports, "timeFormatLocale", {
  enumerable: true,
  get: function () {
    return _locale.default;
  }
});
Object.defineProperty(exports, "isoFormat", {
  enumerable: true,
  get: function () {
    return _isoFormat.default;
  }
});
Object.defineProperty(exports, "isoParse", {
  enumerable: true,
  get: function () {
    return _isoParse.default;
  }
});

var _defaultLocale = _interopRequireWildcard(require("./defaultLocale"));

var _locale = _interopRequireDefault(require("./locale"));

var _isoFormat = _interopRequireDefault(require("./isoFormat"));

var _isoParse = _interopRequireDefault(require("./isoParse"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }
},{"./defaultLocale":"../node_modules/d3-time-format/src/defaultLocale.js","./locale":"../node_modules/d3-time-format/src/locale.js","./isoFormat":"../node_modules/d3-time-format/src/isoFormat.js","./isoParse":"../node_modules/d3-time-format/src/isoParse.js"}],"../node_modules/d3-scale/src/time.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calendar = calendar;
exports.default = _default;

var _d3Array = require("d3-array");

var _d3Time = require("d3-time");

var _d3TimeFormat = require("d3-time-format");

var _array = require("./array");

var _continuous = _interopRequireWildcard(require("./continuous"));

var _init = require("./init");

var _nice = _interopRequireDefault(require("./nice"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

var durationSecond = 1000,
    durationMinute = durationSecond * 60,
    durationHour = durationMinute * 60,
    durationDay = durationHour * 24,
    durationWeek = durationDay * 7,
    durationMonth = durationDay * 30,
    durationYear = durationDay * 365;

function date(t) {
  return new Date(t);
}

function number(t) {
  return t instanceof Date ? +t : +new Date(+t);
}

function calendar(year, month, week, day, hour, minute, second, millisecond, format) {
  var scale = (0, _continuous.default)(_continuous.identity, _continuous.identity),
      invert = scale.invert,
      domain = scale.domain;
  var formatMillisecond = format(".%L"),
      formatSecond = format(":%S"),
      formatMinute = format("%I:%M"),
      formatHour = format("%I %p"),
      formatDay = format("%a %d"),
      formatWeek = format("%b %d"),
      formatMonth = format("%B"),
      formatYear = format("%Y");
  var tickIntervals = [[second, 1, durationSecond], [second, 5, 5 * durationSecond], [second, 15, 15 * durationSecond], [second, 30, 30 * durationSecond], [minute, 1, durationMinute], [minute, 5, 5 * durationMinute], [minute, 15, 15 * durationMinute], [minute, 30, 30 * durationMinute], [hour, 1, durationHour], [hour, 3, 3 * durationHour], [hour, 6, 6 * durationHour], [hour, 12, 12 * durationHour], [day, 1, durationDay], [day, 2, 2 * durationDay], [week, 1, durationWeek], [month, 1, durationMonth], [month, 3, 3 * durationMonth], [year, 1, durationYear]];

  function tickFormat(date) {
    return (second(date) < date ? formatMillisecond : minute(date) < date ? formatSecond : hour(date) < date ? formatMinute : day(date) < date ? formatHour : month(date) < date ? week(date) < date ? formatDay : formatWeek : year(date) < date ? formatMonth : formatYear)(date);
  }

  function tickInterval(interval, start, stop, step) {
    if (interval == null) interval = 10; // If a desired tick count is specified, pick a reasonable tick interval
    // based on the extent of the domain and a rough estimate of tick size.
    // Otherwise, assume interval is already a time interval and use it.

    if (typeof interval === "number") {
      var target = Math.abs(stop - start) / interval,
          i = (0, _d3Array.bisector)(function (i) {
        return i[2];
      }).right(tickIntervals, target);

      if (i === tickIntervals.length) {
        step = (0, _d3Array.tickStep)(start / durationYear, stop / durationYear, interval);
        interval = year;
      } else if (i) {
        i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
        step = i[1];
        interval = i[0];
      } else {
        step = Math.max((0, _d3Array.tickStep)(start, stop, interval), 1);
        interval = millisecond;
      }
    }

    return step == null ? interval : interval.every(step);
  }

  scale.invert = function (y) {
    return new Date(invert(y));
  };

  scale.domain = function (_) {
    return arguments.length ? domain(_array.map.call(_, number)) : domain().map(date);
  };

  scale.ticks = function (interval, step) {
    var d = domain(),
        t0 = d[0],
        t1 = d[d.length - 1],
        r = t1 < t0,
        t;
    if (r) t = t0, t0 = t1, t1 = t;
    t = tickInterval(interval, t0, t1, step);
    t = t ? t.range(t0, t1 + 1) : []; // inclusive stop

    return r ? t.reverse() : t;
  };

  scale.tickFormat = function (count, specifier) {
    return specifier == null ? tickFormat : format(specifier);
  };

  scale.nice = function (interval, step) {
    var d = domain();
    return (interval = tickInterval(interval, d[0], d[d.length - 1], step)) ? domain((0, _nice.default)(d, interval)) : scale;
  };

  scale.copy = function () {
    return (0, _continuous.copy)(scale, calendar(year, month, week, day, hour, minute, second, millisecond, format));
  };

  return scale;
}

function _default() {
  return _init.initRange.apply(calendar(_d3Time.timeYear, _d3Time.timeMonth, _d3Time.timeWeek, _d3Time.timeDay, _d3Time.timeHour, _d3Time.timeMinute, _d3Time.timeSecond, _d3Time.timeMillisecond, _d3TimeFormat.timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]), arguments);
}
},{"d3-array":"../node_modules/d3-array/src/index.js","d3-time":"../node_modules/d3-time/src/index.js","d3-time-format":"../node_modules/d3-time-format/src/index.js","./array":"../node_modules/d3-scale/src/array.js","./continuous":"../node_modules/d3-scale/src/continuous.js","./init":"../node_modules/d3-scale/src/init.js","./nice":"../node_modules/d3-scale/src/nice.js"}],"../node_modules/d3-scale/src/utcTime.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _time = require("./time");

var _d3TimeFormat = require("d3-time-format");

var _d3Time = require("d3-time");

var _init = require("./init");

function _default() {
  return _init.initRange.apply((0, _time.calendar)(_d3Time.utcYear, _d3Time.utcMonth, _d3Time.utcWeek, _d3Time.utcDay, _d3Time.utcHour, _d3Time.utcMinute, _d3Time.utcSecond, _d3Time.utcMillisecond, _d3TimeFormat.utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]), arguments);
}
},{"./time":"../node_modules/d3-scale/src/time.js","d3-time-format":"../node_modules/d3-time-format/src/index.js","d3-time":"../node_modules/d3-time/src/index.js","./init":"../node_modules/d3-scale/src/init.js"}],"../node_modules/d3-scale/src/sequential.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.copy = copy;
exports.default = sequential;
exports.sequentialLog = sequentialLog;
exports.sequentialSymlog = sequentialSymlog;
exports.sequentialPow = sequentialPow;
exports.sequentialSqrt = sequentialSqrt;

var _continuous = require("./continuous");

var _init = require("./init");

var _linear = require("./linear");

var _log = require("./log");

var _symlog = require("./symlog");

var _pow = require("./pow");

function transformer() {
  var x0 = 0,
      x1 = 1,
      t0,
      t1,
      k10,
      transform,
      interpolator = _continuous.identity,
      clamp = false,
      unknown;

  function scale(x) {
    return isNaN(x = +x) ? unknown : interpolator(k10 === 0 ? 0.5 : (x = (transform(x) - t0) * k10, clamp ? Math.max(0, Math.min(1, x)) : x));
  }

  scale.domain = function (_) {
    return arguments.length ? (t0 = transform(x0 = +_[0]), t1 = transform(x1 = +_[1]), k10 = t0 === t1 ? 0 : 1 / (t1 - t0), scale) : [x0, x1];
  };

  scale.clamp = function (_) {
    return arguments.length ? (clamp = !!_, scale) : clamp;
  };

  scale.interpolator = function (_) {
    return arguments.length ? (interpolator = _, scale) : interpolator;
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  return function (t) {
    transform = t, t0 = t(x0), t1 = t(x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0);
    return scale;
  };
}

function copy(source, target) {
  return target.domain(source.domain()).interpolator(source.interpolator()).clamp(source.clamp()).unknown(source.unknown());
}

function sequential() {
  var scale = (0, _linear.linearish)(transformer()(_continuous.identity));

  scale.copy = function () {
    return copy(scale, sequential());
  };

  return _init.initInterpolator.apply(scale, arguments);
}

function sequentialLog() {
  var scale = (0, _log.loggish)(transformer()).domain([1, 10]);

  scale.copy = function () {
    return copy(scale, sequentialLog()).base(scale.base());
  };

  return _init.initInterpolator.apply(scale, arguments);
}

function sequentialSymlog() {
  var scale = (0, _symlog.symlogish)(transformer());

  scale.copy = function () {
    return copy(scale, sequentialSymlog()).constant(scale.constant());
  };

  return _init.initInterpolator.apply(scale, arguments);
}

function sequentialPow() {
  var scale = (0, _pow.powish)(transformer());

  scale.copy = function () {
    return copy(scale, sequentialPow()).exponent(scale.exponent());
  };

  return _init.initInterpolator.apply(scale, arguments);
}

function sequentialSqrt() {
  return sequentialPow.apply(null, arguments).exponent(0.5);
}
},{"./continuous":"../node_modules/d3-scale/src/continuous.js","./init":"../node_modules/d3-scale/src/init.js","./linear":"../node_modules/d3-scale/src/linear.js","./log":"../node_modules/d3-scale/src/log.js","./symlog":"../node_modules/d3-scale/src/symlog.js","./pow":"../node_modules/d3-scale/src/pow.js"}],"../node_modules/d3-scale/src/sequentialQuantile.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = sequentialQuantile;

var _d3Array = require("d3-array");

var _continuous = require("./continuous");

var _init = require("./init");

function sequentialQuantile() {
  var domain = [],
      interpolator = _continuous.identity;

  function scale(x) {
    if (!isNaN(x = +x)) return interpolator(((0, _d3Array.bisect)(domain, x) - 1) / (domain.length - 1));
  }

  scale.domain = function (_) {
    if (!arguments.length) return domain.slice();
    domain = [];

    for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);

    domain.sort(_d3Array.ascending);
    return scale;
  };

  scale.interpolator = function (_) {
    return arguments.length ? (interpolator = _, scale) : interpolator;
  };

  scale.copy = function () {
    return sequentialQuantile(interpolator).domain(domain);
  };

  return _init.initInterpolator.apply(scale, arguments);
}
},{"d3-array":"../node_modules/d3-array/src/index.js","./continuous":"../node_modules/d3-scale/src/continuous.js","./init":"../node_modules/d3-scale/src/init.js"}],"../node_modules/d3-scale/src/diverging.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = diverging;
exports.divergingLog = divergingLog;
exports.divergingSymlog = divergingSymlog;
exports.divergingPow = divergingPow;
exports.divergingSqrt = divergingSqrt;

var _continuous = require("./continuous");

var _init = require("./init");

var _linear = require("./linear");

var _log = require("./log");

var _sequential = require("./sequential");

var _symlog = require("./symlog");

var _pow = require("./pow");

function transformer() {
  var x0 = 0,
      x1 = 0.5,
      x2 = 1,
      t0,
      t1,
      t2,
      k10,
      k21,
      interpolator = _continuous.identity,
      transform,
      clamp = false,
      unknown;

  function scale(x) {
    return isNaN(x = +x) ? unknown : (x = 0.5 + ((x = +transform(x)) - t1) * (x < t1 ? k10 : k21), interpolator(clamp ? Math.max(0, Math.min(1, x)) : x));
  }

  scale.domain = function (_) {
    return arguments.length ? (t0 = transform(x0 = +_[0]), t1 = transform(x1 = +_[1]), t2 = transform(x2 = +_[2]), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), scale) : [x0, x1, x2];
  };

  scale.clamp = function (_) {
    return arguments.length ? (clamp = !!_, scale) : clamp;
  };

  scale.interpolator = function (_) {
    return arguments.length ? (interpolator = _, scale) : interpolator;
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  return function (t) {
    transform = t, t0 = t(x0), t1 = t(x1), t2 = t(x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1);
    return scale;
  };
}

function diverging() {
  var scale = (0, _linear.linearish)(transformer()(_continuous.identity));

  scale.copy = function () {
    return (0, _sequential.copy)(scale, diverging());
  };

  return _init.initInterpolator.apply(scale, arguments);
}

function divergingLog() {
  var scale = (0, _log.loggish)(transformer()).domain([0.1, 1, 10]);

  scale.copy = function () {
    return (0, _sequential.copy)(scale, divergingLog()).base(scale.base());
  };

  return _init.initInterpolator.apply(scale, arguments);
}

function divergingSymlog() {
  var scale = (0, _symlog.symlogish)(transformer());

  scale.copy = function () {
    return (0, _sequential.copy)(scale, divergingSymlog()).constant(scale.constant());
  };

  return _init.initInterpolator.apply(scale, arguments);
}

function divergingPow() {
  var scale = (0, _pow.powish)(transformer());

  scale.copy = function () {
    return (0, _sequential.copy)(scale, divergingPow()).exponent(scale.exponent());
  };

  return _init.initInterpolator.apply(scale, arguments);
}

function divergingSqrt() {
  return divergingPow.apply(null, arguments).exponent(0.5);
}
},{"./continuous":"../node_modules/d3-scale/src/continuous.js","./init":"../node_modules/d3-scale/src/init.js","./linear":"../node_modules/d3-scale/src/linear.js","./log":"../node_modules/d3-scale/src/log.js","./sequential":"../node_modules/d3-scale/src/sequential.js","./symlog":"../node_modules/d3-scale/src/symlog.js","./pow":"../node_modules/d3-scale/src/pow.js"}],"../node_modules/d3-scale/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "scaleBand", {
  enumerable: true,
  get: function () {
    return _band.default;
  }
});
Object.defineProperty(exports, "scalePoint", {
  enumerable: true,
  get: function () {
    return _band.point;
  }
});
Object.defineProperty(exports, "scaleIdentity", {
  enumerable: true,
  get: function () {
    return _identity.default;
  }
});
Object.defineProperty(exports, "scaleLinear", {
  enumerable: true,
  get: function () {
    return _linear.default;
  }
});
Object.defineProperty(exports, "scaleLog", {
  enumerable: true,
  get: function () {
    return _log.default;
  }
});
Object.defineProperty(exports, "scaleSymlog", {
  enumerable: true,
  get: function () {
    return _symlog.default;
  }
});
Object.defineProperty(exports, "scaleOrdinal", {
  enumerable: true,
  get: function () {
    return _ordinal.default;
  }
});
Object.defineProperty(exports, "scaleImplicit", {
  enumerable: true,
  get: function () {
    return _ordinal.implicit;
  }
});
Object.defineProperty(exports, "scalePow", {
  enumerable: true,
  get: function () {
    return _pow.default;
  }
});
Object.defineProperty(exports, "scaleSqrt", {
  enumerable: true,
  get: function () {
    return _pow.sqrt;
  }
});
Object.defineProperty(exports, "scaleQuantile", {
  enumerable: true,
  get: function () {
    return _quantile.default;
  }
});
Object.defineProperty(exports, "scaleQuantize", {
  enumerable: true,
  get: function () {
    return _quantize.default;
  }
});
Object.defineProperty(exports, "scaleThreshold", {
  enumerable: true,
  get: function () {
    return _threshold.default;
  }
});
Object.defineProperty(exports, "scaleTime", {
  enumerable: true,
  get: function () {
    return _time.default;
  }
});
Object.defineProperty(exports, "scaleUtc", {
  enumerable: true,
  get: function () {
    return _utcTime.default;
  }
});
Object.defineProperty(exports, "scaleSequential", {
  enumerable: true,
  get: function () {
    return _sequential.default;
  }
});
Object.defineProperty(exports, "scaleSequentialLog", {
  enumerable: true,
  get: function () {
    return _sequential.sequentialLog;
  }
});
Object.defineProperty(exports, "scaleSequentialPow", {
  enumerable: true,
  get: function () {
    return _sequential.sequentialPow;
  }
});
Object.defineProperty(exports, "scaleSequentialSqrt", {
  enumerable: true,
  get: function () {
    return _sequential.sequentialSqrt;
  }
});
Object.defineProperty(exports, "scaleSequentialSymlog", {
  enumerable: true,
  get: function () {
    return _sequential.sequentialSymlog;
  }
});
Object.defineProperty(exports, "scaleSequentialQuantile", {
  enumerable: true,
  get: function () {
    return _sequentialQuantile.default;
  }
});
Object.defineProperty(exports, "scaleDiverging", {
  enumerable: true,
  get: function () {
    return _diverging.default;
  }
});
Object.defineProperty(exports, "scaleDivergingLog", {
  enumerable: true,
  get: function () {
    return _diverging.divergingLog;
  }
});
Object.defineProperty(exports, "scaleDivergingPow", {
  enumerable: true,
  get: function () {
    return _diverging.divergingPow;
  }
});
Object.defineProperty(exports, "scaleDivergingSqrt", {
  enumerable: true,
  get: function () {
    return _diverging.divergingSqrt;
  }
});
Object.defineProperty(exports, "scaleDivergingSymlog", {
  enumerable: true,
  get: function () {
    return _diverging.divergingSymlog;
  }
});
Object.defineProperty(exports, "tickFormat", {
  enumerable: true,
  get: function () {
    return _tickFormat.default;
  }
});

var _band = _interopRequireWildcard(require("./band"));

var _identity = _interopRequireDefault(require("./identity"));

var _linear = _interopRequireDefault(require("./linear"));

var _log = _interopRequireDefault(require("./log"));

var _symlog = _interopRequireDefault(require("./symlog"));

var _ordinal = _interopRequireWildcard(require("./ordinal"));

var _pow = _interopRequireWildcard(require("./pow"));

var _quantile = _interopRequireDefault(require("./quantile"));

var _quantize = _interopRequireDefault(require("./quantize"));

var _threshold = _interopRequireDefault(require("./threshold"));

var _time = _interopRequireDefault(require("./time"));

var _utcTime = _interopRequireDefault(require("./utcTime"));

var _sequential = _interopRequireWildcard(require("./sequential"));

var _sequentialQuantile = _interopRequireDefault(require("./sequentialQuantile"));

var _diverging = _interopRequireWildcard(require("./diverging"));

var _tickFormat = _interopRequireDefault(require("./tickFormat"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }
},{"./band":"../node_modules/d3-scale/src/band.js","./identity":"../node_modules/d3-scale/src/identity.js","./linear":"../node_modules/d3-scale/src/linear.js","./log":"../node_modules/d3-scale/src/log.js","./symlog":"../node_modules/d3-scale/src/symlog.js","./ordinal":"../node_modules/d3-scale/src/ordinal.js","./pow":"../node_modules/d3-scale/src/pow.js","./quantile":"../node_modules/d3-scale/src/quantile.js","./quantize":"../node_modules/d3-scale/src/quantize.js","./threshold":"../node_modules/d3-scale/src/threshold.js","./time":"../node_modules/d3-scale/src/time.js","./utcTime":"../node_modules/d3-scale/src/utcTime.js","./sequential":"../node_modules/d3-scale/src/sequential.js","./sequentialQuantile":"../node_modules/d3-scale/src/sequentialQuantile.js","./diverging":"../node_modules/d3-scale/src/diverging.js","./tickFormat":"../node_modules/d3-scale/src/tickFormat.js"}],"../node_modules/d3-scale-chromatic/src/colors.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(specifier) {
  var n = specifier.length / 6 | 0,
      colors = new Array(n),
      i = 0;

  while (i < n) colors[i] = "#" + specifier.slice(i * 6, ++i * 6);

  return colors;
}
},{}],"../node_modules/d3-scale-chromatic/src/categorical/category10.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _colors.default)("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");

exports.default = _default;
},{"../colors":"../node_modules/d3-scale-chromatic/src/colors.js"}],"../node_modules/d3-scale-chromatic/src/categorical/Accent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _colors.default)("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666");

exports.default = _default;
},{"../colors":"../node_modules/d3-scale-chromatic/src/colors.js"}],"../node_modules/d3-scale-chromatic/src/categorical/Dark2.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _colors.default)("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666");

exports.default = _default;
},{"../colors":"../node_modules/d3-scale-chromatic/src/colors.js"}],"../node_modules/d3-scale-chromatic/src/categorical/Paired.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _colors.default)("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928");

exports.default = _default;
},{"../colors":"../node_modules/d3-scale-chromatic/src/colors.js"}],"../node_modules/d3-scale-chromatic/src/categorical/Pastel1.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _colors.default)("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2");

exports.default = _default;
},{"../colors":"../node_modules/d3-scale-chromatic/src/colors.js"}],"../node_modules/d3-scale-chromatic/src/categorical/Pastel2.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _colors.default)("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc");

exports.default = _default;
},{"../colors":"../node_modules/d3-scale-chromatic/src/colors.js"}],"../node_modules/d3-scale-chromatic/src/categorical/Set1.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _colors.default)("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999");

exports.default = _default;
},{"../colors":"../node_modules/d3-scale-chromatic/src/colors.js"}],"../node_modules/d3-scale-chromatic/src/categorical/Set2.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _colors.default)("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3");

exports.default = _default;
},{"../colors":"../node_modules/d3-scale-chromatic/src/colors.js"}],"../node_modules/d3-scale-chromatic/src/categorical/Set3.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _colors.default)("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f");

exports.default = _default;
},{"../colors":"../node_modules/d3-scale-chromatic/src/colors.js"}],"../node_modules/d3-scale-chromatic/src/ramp.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Interpolate = require("d3-interpolate");

function _default(scheme) {
  return (0, _d3Interpolate.interpolateRgbBasis)(scheme[scheme.length - 1]);
}
},{"d3-interpolate":"../node_modules/d3-interpolate/src/index.js"}],"../node_modules/d3-scale-chromatic/src/diverging/BrBG.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("d8b365f5f5f55ab4ac", "a6611adfc27d80cdc1018571", "a6611adfc27df5f5f580cdc1018571", "8c510ad8b365f6e8c3c7eae55ab4ac01665e", "8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e", "8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e", "8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e", "5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30", "5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/diverging/PRGn.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("af8dc3f7f7f77fbf7b", "7b3294c2a5cfa6dba0008837", "7b3294c2a5cff7f7f7a6dba0008837", "762a83af8dc3e7d4e8d9f0d37fbf7b1b7837", "762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837", "762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837", "762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837", "40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b", "40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/diverging/PiYG.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("e9a3c9f7f7f7a1d76a", "d01c8bf1b6dab8e1864dac26", "d01c8bf1b6daf7f7f7b8e1864dac26", "c51b7de9a3c9fde0efe6f5d0a1d76a4d9221", "c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221", "c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221", "c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221", "8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419", "8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/diverging/PuOr.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("998ec3f7f7f7f1a340", "5e3c99b2abd2fdb863e66101", "5e3c99b2abd2f7f7f7fdb863e66101", "542788998ec3d8daebfee0b6f1a340b35806", "542788998ec3d8daebf7f7f7fee0b6f1a340b35806", "5427888073acb2abd2d8daebfee0b6fdb863e08214b35806", "5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806", "2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08", "2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/diverging/RdBu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("ef8a62f7f7f767a9cf", "ca0020f4a58292c5de0571b0", "ca0020f4a582f7f7f792c5de0571b0", "b2182bef8a62fddbc7d1e5f067a9cf2166ac", "b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac", "b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac", "b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac", "67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061", "67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/diverging/RdGy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("ef8a62ffffff999999", "ca0020f4a582bababa404040", "ca0020f4a582ffffffbababa404040", "b2182bef8a62fddbc7e0e0e09999994d4d4d", "b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d", "b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d", "b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d", "67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a", "67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/diverging/RdYlBu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("fc8d59ffffbf91bfdb", "d7191cfdae61abd9e92c7bb6", "d7191cfdae61ffffbfabd9e92c7bb6", "d73027fc8d59fee090e0f3f891bfdb4575b4", "d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4", "d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4", "d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4", "a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695", "a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/diverging/RdYlGn.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("fc8d59ffffbf91cf60", "d7191cfdae61a6d96a1a9641", "d7191cfdae61ffffbfa6d96a1a9641", "d73027fc8d59fee08bd9ef8b91cf601a9850", "d73027fc8d59fee08bffffbfd9ef8b91cf601a9850", "d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850", "d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850", "a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837", "a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/diverging/Spectral.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("fc8d59ffffbf99d594", "d7191cfdae61abdda42b83ba", "d7191cfdae61ffffbfabdda42b83ba", "d53e4ffc8d59fee08be6f59899d5943288bd", "d53e4ffc8d59fee08bffffbfe6f59899d5943288bd", "d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd", "d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd", "9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2", "9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/sequential-multi/BuGn.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("e5f5f999d8c92ca25f", "edf8fbb2e2e266c2a4238b45", "edf8fbb2e2e266c2a42ca25f006d2c", "edf8fbccece699d8c966c2a42ca25f006d2c", "edf8fbccece699d8c966c2a441ae76238b45005824", "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824", "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/sequential-multi/BuPu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("e0ecf49ebcda8856a7", "edf8fbb3cde38c96c688419d", "edf8fbb3cde38c96c68856a7810f7c", "edf8fbbfd3e69ebcda8c96c68856a7810f7c", "edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b", "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b", "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/sequential-multi/GnBu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("e0f3dba8ddb543a2ca", "f0f9e8bae4bc7bccc42b8cbe", "f0f9e8bae4bc7bccc443a2ca0868ac", "f0f9e8ccebc5a8ddb57bccc443a2ca0868ac", "f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e", "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e", "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/sequential-multi/OrRd.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("fee8c8fdbb84e34a33", "fef0d9fdcc8afc8d59d7301f", "fef0d9fdcc8afc8d59e34a33b30000", "fef0d9fdd49efdbb84fc8d59e34a33b30000", "fef0d9fdd49efdbb84fc8d59ef6548d7301f990000", "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000", "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/sequential-multi/PuBuGn.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("ece2f0a6bddb1c9099", "f6eff7bdc9e167a9cf02818a", "f6eff7bdc9e167a9cf1c9099016c59", "f6eff7d0d1e6a6bddb67a9cf1c9099016c59", "f6eff7d0d1e6a6bddb67a9cf3690c002818a016450", "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450", "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/sequential-multi/PuBu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("ece7f2a6bddb2b8cbe", "f1eef6bdc9e174a9cf0570b0", "f1eef6bdc9e174a9cf2b8cbe045a8d", "f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d", "f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b", "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b", "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/sequential-multi/PuRd.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("e7e1efc994c7dd1c77", "f1eef6d7b5d8df65b0ce1256", "f1eef6d7b5d8df65b0dd1c77980043", "f1eef6d4b9dac994c7df65b0dd1c77980043", "f1eef6d4b9dac994c7df65b0e7298ace125691003f", "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f", "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/sequential-multi/RdPu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("fde0ddfa9fb5c51b8a", "feebe2fbb4b9f768a1ae017e", "feebe2fbb4b9f768a1c51b8a7a0177", "feebe2fcc5c0fa9fb5f768a1c51b8a7a0177", "feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177", "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177", "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/sequential-multi/YlGnBu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("edf8b17fcdbb2c7fb8", "ffffcca1dab441b6c4225ea8", "ffffcca1dab441b6c42c7fb8253494", "ffffccc7e9b47fcdbb41b6c42c7fb8253494", "ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84", "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84", "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/sequential-multi/YlGn.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("f7fcb9addd8e31a354", "ffffccc2e69978c679238443", "ffffccc2e69978c67931a354006837", "ffffccd9f0a3addd8e78c67931a354006837", "ffffccd9f0a3addd8e78c67941ab5d238443005a32", "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32", "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/sequential-multi/YlOrBr.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("fff7bcfec44fd95f0e", "ffffd4fed98efe9929cc4c02", "ffffd4fed98efe9929d95f0e993404", "ffffd4fee391fec44ffe9929d95f0e993404", "ffffd4fee391fec44ffe9929ec7014cc4c028c2d04", "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04", "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/sequential-multi/YlOrRd.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("ffeda0feb24cf03b20", "ffffb2fecc5cfd8d3ce31a1c", "ffffb2fecc5cfd8d3cf03b20bd0026", "ffffb2fed976feb24cfd8d3cf03b20bd0026", "ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026", "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026", "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/sequential-single/Blues.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("deebf79ecae13182bd", "eff3ffbdd7e76baed62171b5", "eff3ffbdd7e76baed63182bd08519c", "eff3ffc6dbef9ecae16baed63182bd08519c", "eff3ffc6dbef9ecae16baed64292c62171b5084594", "f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594", "f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/sequential-single/Greens.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("e5f5e0a1d99b31a354", "edf8e9bae4b374c476238b45", "edf8e9bae4b374c47631a354006d2c", "edf8e9c7e9c0a1d99b74c47631a354006d2c", "edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32", "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32", "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/sequential-single/Greys.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("f0f0f0bdbdbd636363", "f7f7f7cccccc969696525252", "f7f7f7cccccc969696636363252525", "f7f7f7d9d9d9bdbdbd969696636363252525", "f7f7f7d9d9d9bdbdbd969696737373525252252525", "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525", "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/sequential-single/Purples.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("efedf5bcbddc756bb1", "f2f0f7cbc9e29e9ac86a51a3", "f2f0f7cbc9e29e9ac8756bb154278f", "f2f0f7dadaebbcbddc9e9ac8756bb154278f", "f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486", "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486", "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/sequential-single/Reds.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("fee0d2fc9272de2d26", "fee5d9fcae91fb6a4acb181d", "fee5d9fcae91fb6a4ade2d26a50f15", "fee5d9fcbba1fc9272fb6a4ade2d26a50f15", "fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d", "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d", "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/sequential-single/Oranges.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("fee6cefdae6be6550d", "feeddefdbe85fd8d3cd94701", "feeddefdbe85fd8d3ce6550da63603", "feeddefdd0a2fdae6bfd8d3ce6550da63603", "feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04", "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04", "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"../node_modules/d3-scale-chromatic/src/colors.js","../ramp":"../node_modules/d3-scale-chromatic/src/ramp.js"}],"../node_modules/d3-scale-chromatic/src/sequential-multi/cubehelix.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _d3Color = require("d3-color");

var _d3Interpolate = require("d3-interpolate");

var _default = (0, _d3Interpolate.interpolateCubehelixLong)((0, _d3Color.cubehelix)(300, 0.5, 0.0), (0, _d3Color.cubehelix)(-240, 0.5, 1.0));

exports.default = _default;
},{"d3-color":"../node_modules/d3-color/src/index.js","d3-interpolate":"../node_modules/d3-interpolate/src/index.js"}],"../node_modules/d3-scale-chromatic/src/sequential-multi/rainbow.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.cool = exports.warm = void 0;

var _d3Color = require("d3-color");

var _d3Interpolate = require("d3-interpolate");

var warm = (0, _d3Interpolate.interpolateCubehelixLong)((0, _d3Color.cubehelix)(-100, 0.75, 0.35), (0, _d3Color.cubehelix)(80, 1.50, 0.8));
exports.warm = warm;
var cool = (0, _d3Interpolate.interpolateCubehelixLong)((0, _d3Color.cubehelix)(260, 0.75, 0.35), (0, _d3Color.cubehelix)(80, 1.50, 0.8));
exports.cool = cool;
var c = (0, _d3Color.cubehelix)();

function _default(t) {
  if (t < 0 || t > 1) t -= Math.floor(t);
  var ts = Math.abs(t - 0.5);
  c.h = 360 * t - 100;
  c.s = 1.5 - 1.5 * ts;
  c.l = 0.8 - 0.9 * ts;
  return c + "";
}
},{"d3-color":"../node_modules/d3-color/src/index.js","d3-interpolate":"../node_modules/d3-interpolate/src/index.js"}],"../node_modules/d3-scale-chromatic/src/sequential-multi/sinebow.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Color = require("d3-color");

var c = (0, _d3Color.rgb)(),
    pi_1_3 = Math.PI / 3,
    pi_2_3 = Math.PI * 2 / 3;

function _default(t) {
  var x;
  t = (0.5 - t) * Math.PI;
  c.r = 255 * (x = Math.sin(t)) * x;
  c.g = 255 * (x = Math.sin(t + pi_1_3)) * x;
  c.b = 255 * (x = Math.sin(t + pi_2_3)) * x;
  return c + "";
}
},{"d3-color":"../node_modules/d3-color/src/index.js"}],"../node_modules/d3-scale-chromatic/src/sequential-multi/viridis.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.plasma = exports.inferno = exports.magma = exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ramp(range) {
  var n = range.length;
  return function (t) {
    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
  };
}

var _default = ramp((0, _colors.default)("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));

exports.default = _default;
var magma = ramp((0, _colors.default)("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));
exports.magma = magma;
var inferno = ramp((0, _colors.default)("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));
exports.inferno = inferno;
var plasma = ramp((0, _colors.default)("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));
exports.plasma = plasma;
},{"../colors":"../node_modules/d3-scale-chromatic/src/colors.js"}],"../node_modules/d3-scale-chromatic/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "schemeCategory10", {
  enumerable: true,
  get: function () {
    return _category.default;
  }
});
Object.defineProperty(exports, "schemeAccent", {
  enumerable: true,
  get: function () {
    return _Accent.default;
  }
});
Object.defineProperty(exports, "schemeDark2", {
  enumerable: true,
  get: function () {
    return _Dark.default;
  }
});
Object.defineProperty(exports, "schemePaired", {
  enumerable: true,
  get: function () {
    return _Paired.default;
  }
});
Object.defineProperty(exports, "schemePastel1", {
  enumerable: true,
  get: function () {
    return _Pastel.default;
  }
});
Object.defineProperty(exports, "schemePastel2", {
  enumerable: true,
  get: function () {
    return _Pastel2.default;
  }
});
Object.defineProperty(exports, "schemeSet1", {
  enumerable: true,
  get: function () {
    return _Set.default;
  }
});
Object.defineProperty(exports, "schemeSet2", {
  enumerable: true,
  get: function () {
    return _Set2.default;
  }
});
Object.defineProperty(exports, "schemeSet3", {
  enumerable: true,
  get: function () {
    return _Set3.default;
  }
});
Object.defineProperty(exports, "interpolateBrBG", {
  enumerable: true,
  get: function () {
    return _BrBG.default;
  }
});
Object.defineProperty(exports, "schemeBrBG", {
  enumerable: true,
  get: function () {
    return _BrBG.scheme;
  }
});
Object.defineProperty(exports, "interpolatePRGn", {
  enumerable: true,
  get: function () {
    return _PRGn.default;
  }
});
Object.defineProperty(exports, "schemePRGn", {
  enumerable: true,
  get: function () {
    return _PRGn.scheme;
  }
});
Object.defineProperty(exports, "interpolatePiYG", {
  enumerable: true,
  get: function () {
    return _PiYG.default;
  }
});
Object.defineProperty(exports, "schemePiYG", {
  enumerable: true,
  get: function () {
    return _PiYG.scheme;
  }
});
Object.defineProperty(exports, "interpolatePuOr", {
  enumerable: true,
  get: function () {
    return _PuOr.default;
  }
});
Object.defineProperty(exports, "schemePuOr", {
  enumerable: true,
  get: function () {
    return _PuOr.scheme;
  }
});
Object.defineProperty(exports, "interpolateRdBu", {
  enumerable: true,
  get: function () {
    return _RdBu.default;
  }
});
Object.defineProperty(exports, "schemeRdBu", {
  enumerable: true,
  get: function () {
    return _RdBu.scheme;
  }
});
Object.defineProperty(exports, "interpolateRdGy", {
  enumerable: true,
  get: function () {
    return _RdGy.default;
  }
});
Object.defineProperty(exports, "schemeRdGy", {
  enumerable: true,
  get: function () {
    return _RdGy.scheme;
  }
});
Object.defineProperty(exports, "interpolateRdYlBu", {
  enumerable: true,
  get: function () {
    return _RdYlBu.default;
  }
});
Object.defineProperty(exports, "schemeRdYlBu", {
  enumerable: true,
  get: function () {
    return _RdYlBu.scheme;
  }
});
Object.defineProperty(exports, "interpolateRdYlGn", {
  enumerable: true,
  get: function () {
    return _RdYlGn.default;
  }
});
Object.defineProperty(exports, "schemeRdYlGn", {
  enumerable: true,
  get: function () {
    return _RdYlGn.scheme;
  }
});
Object.defineProperty(exports, "interpolateSpectral", {
  enumerable: true,
  get: function () {
    return _Spectral.default;
  }
});
Object.defineProperty(exports, "schemeSpectral", {
  enumerable: true,
  get: function () {
    return _Spectral.scheme;
  }
});
Object.defineProperty(exports, "interpolateBuGn", {
  enumerable: true,
  get: function () {
    return _BuGn.default;
  }
});
Object.defineProperty(exports, "schemeBuGn", {
  enumerable: true,
  get: function () {
    return _BuGn.scheme;
  }
});
Object.defineProperty(exports, "interpolateBuPu", {
  enumerable: true,
  get: function () {
    return _BuPu.default;
  }
});
Object.defineProperty(exports, "schemeBuPu", {
  enumerable: true,
  get: function () {
    return _BuPu.scheme;
  }
});
Object.defineProperty(exports, "interpolateGnBu", {
  enumerable: true,
  get: function () {
    return _GnBu.default;
  }
});
Object.defineProperty(exports, "schemeGnBu", {
  enumerable: true,
  get: function () {
    return _GnBu.scheme;
  }
});
Object.defineProperty(exports, "interpolateOrRd", {
  enumerable: true,
  get: function () {
    return _OrRd.default;
  }
});
Object.defineProperty(exports, "schemeOrRd", {
  enumerable: true,
  get: function () {
    return _OrRd.scheme;
  }
});
Object.defineProperty(exports, "interpolatePuBuGn", {
  enumerable: true,
  get: function () {
    return _PuBuGn.default;
  }
});
Object.defineProperty(exports, "schemePuBuGn", {
  enumerable: true,
  get: function () {
    return _PuBuGn.scheme;
  }
});
Object.defineProperty(exports, "interpolatePuBu", {
  enumerable: true,
  get: function () {
    return _PuBu.default;
  }
});
Object.defineProperty(exports, "schemePuBu", {
  enumerable: true,
  get: function () {
    return _PuBu.scheme;
  }
});
Object.defineProperty(exports, "interpolatePuRd", {
  enumerable: true,
  get: function () {
    return _PuRd.default;
  }
});
Object.defineProperty(exports, "schemePuRd", {
  enumerable: true,
  get: function () {
    return _PuRd.scheme;
  }
});
Object.defineProperty(exports, "interpolateRdPu", {
  enumerable: true,
  get: function () {
    return _RdPu.default;
  }
});
Object.defineProperty(exports, "schemeRdPu", {
  enumerable: true,
  get: function () {
    return _RdPu.scheme;
  }
});
Object.defineProperty(exports, "interpolateYlGnBu", {
  enumerable: true,
  get: function () {
    return _YlGnBu.default;
  }
});
Object.defineProperty(exports, "schemeYlGnBu", {
  enumerable: true,
  get: function () {
    return _YlGnBu.scheme;
  }
});
Object.defineProperty(exports, "interpolateYlGn", {
  enumerable: true,
  get: function () {
    return _YlGn.default;
  }
});
Object.defineProperty(exports, "schemeYlGn", {
  enumerable: true,
  get: function () {
    return _YlGn.scheme;
  }
});
Object.defineProperty(exports, "interpolateYlOrBr", {
  enumerable: true,
  get: function () {
    return _YlOrBr.default;
  }
});
Object.defineProperty(exports, "schemeYlOrBr", {
  enumerable: true,
  get: function () {
    return _YlOrBr.scheme;
  }
});
Object.defineProperty(exports, "interpolateYlOrRd", {
  enumerable: true,
  get: function () {
    return _YlOrRd.default;
  }
});
Object.defineProperty(exports, "schemeYlOrRd", {
  enumerable: true,
  get: function () {
    return _YlOrRd.scheme;
  }
});
Object.defineProperty(exports, "interpolateBlues", {
  enumerable: true,
  get: function () {
    return _Blues.default;
  }
});
Object.defineProperty(exports, "schemeBlues", {
  enumerable: true,
  get: function () {
    return _Blues.scheme;
  }
});
Object.defineProperty(exports, "interpolateGreens", {
  enumerable: true,
  get: function () {
    return _Greens.default;
  }
});
Object.defineProperty(exports, "schemeGreens", {
  enumerable: true,
  get: function () {
    return _Greens.scheme;
  }
});
Object.defineProperty(exports, "interpolateGreys", {
  enumerable: true,
  get: function () {
    return _Greys.default;
  }
});
Object.defineProperty(exports, "schemeGreys", {
  enumerable: true,
  get: function () {
    return _Greys.scheme;
  }
});
Object.defineProperty(exports, "interpolatePurples", {
  enumerable: true,
  get: function () {
    return _Purples.default;
  }
});
Object.defineProperty(exports, "schemePurples", {
  enumerable: true,
  get: function () {
    return _Purples.scheme;
  }
});
Object.defineProperty(exports, "interpolateReds", {
  enumerable: true,
  get: function () {
    return _Reds.default;
  }
});
Object.defineProperty(exports, "schemeReds", {
  enumerable: true,
  get: function () {
    return _Reds.scheme;
  }
});
Object.defineProperty(exports, "interpolateOranges", {
  enumerable: true,
  get: function () {
    return _Oranges.default;
  }
});
Object.defineProperty(exports, "schemeOranges", {
  enumerable: true,
  get: function () {
    return _Oranges.scheme;
  }
});
Object.defineProperty(exports, "interpolateCubehelixDefault", {
  enumerable: true,
  get: function () {
    return _cubehelix.default;
  }
});
Object.defineProperty(exports, "interpolateRainbow", {
  enumerable: true,
  get: function () {
    return _rainbow.default;
  }
});
Object.defineProperty(exports, "interpolateWarm", {
  enumerable: true,
  get: function () {
    return _rainbow.warm;
  }
});
Object.defineProperty(exports, "interpolateCool", {
  enumerable: true,
  get: function () {
    return _rainbow.cool;
  }
});
Object.defineProperty(exports, "interpolateSinebow", {
  enumerable: true,
  get: function () {
    return _sinebow.default;
  }
});
Object.defineProperty(exports, "interpolateViridis", {
  enumerable: true,
  get: function () {
    return _viridis.default;
  }
});
Object.defineProperty(exports, "interpolateMagma", {
  enumerable: true,
  get: function () {
    return _viridis.magma;
  }
});
Object.defineProperty(exports, "interpolateInferno", {
  enumerable: true,
  get: function () {
    return _viridis.inferno;
  }
});
Object.defineProperty(exports, "interpolatePlasma", {
  enumerable: true,
  get: function () {
    return _viridis.plasma;
  }
});

var _category = _interopRequireDefault(require("./categorical/category10"));

var _Accent = _interopRequireDefault(require("./categorical/Accent"));

var _Dark = _interopRequireDefault(require("./categorical/Dark2"));

var _Paired = _interopRequireDefault(require("./categorical/Paired"));

var _Pastel = _interopRequireDefault(require("./categorical/Pastel1"));

var _Pastel2 = _interopRequireDefault(require("./categorical/Pastel2"));

var _Set = _interopRequireDefault(require("./categorical/Set1"));

var _Set2 = _interopRequireDefault(require("./categorical/Set2"));

var _Set3 = _interopRequireDefault(require("./categorical/Set3"));

var _BrBG = _interopRequireWildcard(require("./diverging/BrBG"));

var _PRGn = _interopRequireWildcard(require("./diverging/PRGn"));

var _PiYG = _interopRequireWildcard(require("./diverging/PiYG"));

var _PuOr = _interopRequireWildcard(require("./diverging/PuOr"));

var _RdBu = _interopRequireWildcard(require("./diverging/RdBu"));

var _RdGy = _interopRequireWildcard(require("./diverging/RdGy"));

var _RdYlBu = _interopRequireWildcard(require("./diverging/RdYlBu"));

var _RdYlGn = _interopRequireWildcard(require("./diverging/RdYlGn"));

var _Spectral = _interopRequireWildcard(require("./diverging/Spectral"));

var _BuGn = _interopRequireWildcard(require("./sequential-multi/BuGn"));

var _BuPu = _interopRequireWildcard(require("./sequential-multi/BuPu"));

var _GnBu = _interopRequireWildcard(require("./sequential-multi/GnBu"));

var _OrRd = _interopRequireWildcard(require("./sequential-multi/OrRd"));

var _PuBuGn = _interopRequireWildcard(require("./sequential-multi/PuBuGn"));

var _PuBu = _interopRequireWildcard(require("./sequential-multi/PuBu"));

var _PuRd = _interopRequireWildcard(require("./sequential-multi/PuRd"));

var _RdPu = _interopRequireWildcard(require("./sequential-multi/RdPu"));

var _YlGnBu = _interopRequireWildcard(require("./sequential-multi/YlGnBu"));

var _YlGn = _interopRequireWildcard(require("./sequential-multi/YlGn"));

var _YlOrBr = _interopRequireWildcard(require("./sequential-multi/YlOrBr"));

var _YlOrRd = _interopRequireWildcard(require("./sequential-multi/YlOrRd"));

var _Blues = _interopRequireWildcard(require("./sequential-single/Blues"));

var _Greens = _interopRequireWildcard(require("./sequential-single/Greens"));

var _Greys = _interopRequireWildcard(require("./sequential-single/Greys"));

var _Purples = _interopRequireWildcard(require("./sequential-single/Purples"));

var _Reds = _interopRequireWildcard(require("./sequential-single/Reds"));

var _Oranges = _interopRequireWildcard(require("./sequential-single/Oranges"));

var _cubehelix = _interopRequireDefault(require("./sequential-multi/cubehelix"));

var _rainbow = _interopRequireWildcard(require("./sequential-multi/rainbow"));

var _sinebow = _interopRequireDefault(require("./sequential-multi/sinebow"));

var _viridis = _interopRequireWildcard(require("./sequential-multi/viridis"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./categorical/category10":"../node_modules/d3-scale-chromatic/src/categorical/category10.js","./categorical/Accent":"../node_modules/d3-scale-chromatic/src/categorical/Accent.js","./categorical/Dark2":"../node_modules/d3-scale-chromatic/src/categorical/Dark2.js","./categorical/Paired":"../node_modules/d3-scale-chromatic/src/categorical/Paired.js","./categorical/Pastel1":"../node_modules/d3-scale-chromatic/src/categorical/Pastel1.js","./categorical/Pastel2":"../node_modules/d3-scale-chromatic/src/categorical/Pastel2.js","./categorical/Set1":"../node_modules/d3-scale-chromatic/src/categorical/Set1.js","./categorical/Set2":"../node_modules/d3-scale-chromatic/src/categorical/Set2.js","./categorical/Set3":"../node_modules/d3-scale-chromatic/src/categorical/Set3.js","./diverging/BrBG":"../node_modules/d3-scale-chromatic/src/diverging/BrBG.js","./diverging/PRGn":"../node_modules/d3-scale-chromatic/src/diverging/PRGn.js","./diverging/PiYG":"../node_modules/d3-scale-chromatic/src/diverging/PiYG.js","./diverging/PuOr":"../node_modules/d3-scale-chromatic/src/diverging/PuOr.js","./diverging/RdBu":"../node_modules/d3-scale-chromatic/src/diverging/RdBu.js","./diverging/RdGy":"../node_modules/d3-scale-chromatic/src/diverging/RdGy.js","./diverging/RdYlBu":"../node_modules/d3-scale-chromatic/src/diverging/RdYlBu.js","./diverging/RdYlGn":"../node_modules/d3-scale-chromatic/src/diverging/RdYlGn.js","./diverging/Spectral":"../node_modules/d3-scale-chromatic/src/diverging/Spectral.js","./sequential-multi/BuGn":"../node_modules/d3-scale-chromatic/src/sequential-multi/BuGn.js","./sequential-multi/BuPu":"../node_modules/d3-scale-chromatic/src/sequential-multi/BuPu.js","./sequential-multi/GnBu":"../node_modules/d3-scale-chromatic/src/sequential-multi/GnBu.js","./sequential-multi/OrRd":"../node_modules/d3-scale-chromatic/src/sequential-multi/OrRd.js","./sequential-multi/PuBuGn":"../node_modules/d3-scale-chromatic/src/sequential-multi/PuBuGn.js","./sequential-multi/PuBu":"../node_modules/d3-scale-chromatic/src/sequential-multi/PuBu.js","./sequential-multi/PuRd":"../node_modules/d3-scale-chromatic/src/sequential-multi/PuRd.js","./sequential-multi/RdPu":"../node_modules/d3-scale-chromatic/src/sequential-multi/RdPu.js","./sequential-multi/YlGnBu":"../node_modules/d3-scale-chromatic/src/sequential-multi/YlGnBu.js","./sequential-multi/YlGn":"../node_modules/d3-scale-chromatic/src/sequential-multi/YlGn.js","./sequential-multi/YlOrBr":"../node_modules/d3-scale-chromatic/src/sequential-multi/YlOrBr.js","./sequential-multi/YlOrRd":"../node_modules/d3-scale-chromatic/src/sequential-multi/YlOrRd.js","./sequential-single/Blues":"../node_modules/d3-scale-chromatic/src/sequential-single/Blues.js","./sequential-single/Greens":"../node_modules/d3-scale-chromatic/src/sequential-single/Greens.js","./sequential-single/Greys":"../node_modules/d3-scale-chromatic/src/sequential-single/Greys.js","./sequential-single/Purples":"../node_modules/d3-scale-chromatic/src/sequential-single/Purples.js","./sequential-single/Reds":"../node_modules/d3-scale-chromatic/src/sequential-single/Reds.js","./sequential-single/Oranges":"../node_modules/d3-scale-chromatic/src/sequential-single/Oranges.js","./sequential-multi/cubehelix":"../node_modules/d3-scale-chromatic/src/sequential-multi/cubehelix.js","./sequential-multi/rainbow":"../node_modules/d3-scale-chromatic/src/sequential-multi/rainbow.js","./sequential-multi/sinebow":"../node_modules/d3-scale-chromatic/src/sequential-multi/sinebow.js","./sequential-multi/viridis":"../node_modules/d3-scale-chromatic/src/sequential-multi/viridis.js"}],"../node_modules/d3-shape/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function constant() {
    return x;
  };
}
},{}],"../node_modules/d3-shape/src/math.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.acos = acos;
exports.asin = asin;
exports.tau = exports.halfPi = exports.pi = exports.epsilon = exports.sqrt = exports.sin = exports.min = exports.max = exports.cos = exports.atan2 = exports.abs = void 0;
var abs = Math.abs;
exports.abs = abs;
var atan2 = Math.atan2;
exports.atan2 = atan2;
var cos = Math.cos;
exports.cos = cos;
var max = Math.max;
exports.max = max;
var min = Math.min;
exports.min = min;
var sin = Math.sin;
exports.sin = sin;
var sqrt = Math.sqrt;
exports.sqrt = sqrt;
var epsilon = 1e-12;
exports.epsilon = epsilon;
var pi = Math.PI;
exports.pi = pi;
var halfPi = pi / 2;
exports.halfPi = halfPi;
var tau = 2 * pi;
exports.tau = tau;

function acos(x) {
  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
}

function asin(x) {
  return x >= 1 ? halfPi : x <= -1 ? -halfPi : Math.asin(x);
}
},{}],"../node_modules/d3-shape/src/arc.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Path = require("d3-path");

var _constant = _interopRequireDefault(require("./constant"));

var _math = require("./math");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function arcInnerRadius(d) {
  return d.innerRadius;
}

function arcOuterRadius(d) {
  return d.outerRadius;
}

function arcStartAngle(d) {
  return d.startAngle;
}

function arcEndAngle(d) {
  return d.endAngle;
}

function arcPadAngle(d) {
  return d && d.padAngle; // Note: optional!
}

function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
  var x10 = x1 - x0,
      y10 = y1 - y0,
      x32 = x3 - x2,
      y32 = y3 - y2,
      t = y32 * x10 - x32 * y10;
  if (t * t < _math.epsilon) return;
  t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / t;
  return [x0 + t * x10, y0 + t * y10];
} // Compute perpendicular offset line of length rc.
// http://mathworld.wolfram.com/Circle-LineIntersection.html


function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
  var x01 = x0 - x1,
      y01 = y0 - y1,
      lo = (cw ? rc : -rc) / (0, _math.sqrt)(x01 * x01 + y01 * y01),
      ox = lo * y01,
      oy = -lo * x01,
      x11 = x0 + ox,
      y11 = y0 + oy,
      x10 = x1 + ox,
      y10 = y1 + oy,
      x00 = (x11 + x10) / 2,
      y00 = (y11 + y10) / 2,
      dx = x10 - x11,
      dy = y10 - y11,
      d2 = dx * dx + dy * dy,
      r = r1 - rc,
      D = x11 * y10 - x10 * y11,
      d = (dy < 0 ? -1 : 1) * (0, _math.sqrt)((0, _math.max)(0, r * r * d2 - D * D)),
      cx0 = (D * dy - dx * d) / d2,
      cy0 = (-D * dx - dy * d) / d2,
      cx1 = (D * dy + dx * d) / d2,
      cy1 = (-D * dx + dy * d) / d2,
      dx0 = cx0 - x00,
      dy0 = cy0 - y00,
      dx1 = cx1 - x00,
      dy1 = cy1 - y00; // Pick the closer of the two intersection points.
  // TODO Is there a faster way to determine which intersection to use?

  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;
  return {
    cx: cx0,
    cy: cy0,
    x01: -ox,
    y01: -oy,
    x11: cx0 * (r1 / r - 1),
    y11: cy0 * (r1 / r - 1)
  };
}

function _default() {
  var innerRadius = arcInnerRadius,
      outerRadius = arcOuterRadius,
      cornerRadius = (0, _constant.default)(0),
      padRadius = null,
      startAngle = arcStartAngle,
      endAngle = arcEndAngle,
      padAngle = arcPadAngle,
      context = null;

  function arc() {
    var buffer,
        r,
        r0 = +innerRadius.apply(this, arguments),
        r1 = +outerRadius.apply(this, arguments),
        a0 = startAngle.apply(this, arguments) - _math.halfPi,
        a1 = endAngle.apply(this, arguments) - _math.halfPi,
        da = (0, _math.abs)(a1 - a0),
        cw = a1 > a0;

    if (!context) context = buffer = (0, _d3Path.path)(); // Ensure that the outer radius is always larger than the inner radius.

    if (r1 < r0) r = r1, r1 = r0, r0 = r; // Is it a point?

    if (!(r1 > _math.epsilon)) context.moveTo(0, 0); // Or is it a circle or annulus?
    else if (da > _math.tau - _math.epsilon) {
        context.moveTo(r1 * (0, _math.cos)(a0), r1 * (0, _math.sin)(a0));
        context.arc(0, 0, r1, a0, a1, !cw);

        if (r0 > _math.epsilon) {
          context.moveTo(r0 * (0, _math.cos)(a1), r0 * (0, _math.sin)(a1));
          context.arc(0, 0, r0, a1, a0, cw);
        }
      } // Or is it a circular or annular sector?
      else {
          var a01 = a0,
              a11 = a1,
              a00 = a0,
              a10 = a1,
              da0 = da,
              da1 = da,
              ap = padAngle.apply(this, arguments) / 2,
              rp = ap > _math.epsilon && (padRadius ? +padRadius.apply(this, arguments) : (0, _math.sqrt)(r0 * r0 + r1 * r1)),
              rc = (0, _math.min)((0, _math.abs)(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),
              rc0 = rc,
              rc1 = rc,
              t0,
              t1; // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.

          if (rp > _math.epsilon) {
            var p0 = (0, _math.asin)(rp / r0 * (0, _math.sin)(ap)),
                p1 = (0, _math.asin)(rp / r1 * (0, _math.sin)(ap));
            if ((da0 -= p0 * 2) > _math.epsilon) p0 *= cw ? 1 : -1, a00 += p0, a10 -= p0;else da0 = 0, a00 = a10 = (a0 + a1) / 2;
            if ((da1 -= p1 * 2) > _math.epsilon) p1 *= cw ? 1 : -1, a01 += p1, a11 -= p1;else da1 = 0, a01 = a11 = (a0 + a1) / 2;
          }

          var x01 = r1 * (0, _math.cos)(a01),
              y01 = r1 * (0, _math.sin)(a01),
              x10 = r0 * (0, _math.cos)(a10),
              y10 = r0 * (0, _math.sin)(a10); // Apply rounded corners?

          if (rc > _math.epsilon) {
            var x11 = r1 * (0, _math.cos)(a11),
                y11 = r1 * (0, _math.sin)(a11),
                x00 = r0 * (0, _math.cos)(a00),
                y00 = r0 * (0, _math.sin)(a00),
                oc; // Restrict the corner radius according to the sector angle.

            if (da < _math.pi && (oc = intersect(x01, y01, x00, y00, x11, y11, x10, y10))) {
              var ax = x01 - oc[0],
                  ay = y01 - oc[1],
                  bx = x11 - oc[0],
                  by = y11 - oc[1],
                  kc = 1 / (0, _math.sin)((0, _math.acos)((ax * bx + ay * by) / ((0, _math.sqrt)(ax * ax + ay * ay) * (0, _math.sqrt)(bx * bx + by * by))) / 2),
                  lc = (0, _math.sqrt)(oc[0] * oc[0] + oc[1] * oc[1]);
              rc0 = (0, _math.min)(rc, (r0 - lc) / (kc - 1));
              rc1 = (0, _math.min)(rc, (r1 - lc) / (kc + 1));
            }
          } // Is the sector collapsed to a line?


          if (!(da1 > _math.epsilon)) context.moveTo(x01, y01); // Does the sector’s outer ring have rounded corners?
          else if (rc1 > _math.epsilon) {
              t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
              t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);
              context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01); // Have the corners merged?

              if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, (0, _math.atan2)(t0.y01, t0.x01), (0, _math.atan2)(t1.y01, t1.x01), !cw); // Otherwise, draw the two corners and the ring.
              else {
                  context.arc(t0.cx, t0.cy, rc1, (0, _math.atan2)(t0.y01, t0.x01), (0, _math.atan2)(t0.y11, t0.x11), !cw);
                  context.arc(0, 0, r1, (0, _math.atan2)(t0.cy + t0.y11, t0.cx + t0.x11), (0, _math.atan2)(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
                  context.arc(t1.cx, t1.cy, rc1, (0, _math.atan2)(t1.y11, t1.x11), (0, _math.atan2)(t1.y01, t1.x01), !cw);
                }
            } // Or is the outer ring just a circular arc?
            else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw); // Is there no inner ring, and it’s a circular sector?
          // Or perhaps it’s an annular sector collapsed due to padding?

          if (!(r0 > _math.epsilon) || !(da0 > _math.epsilon)) context.lineTo(x10, y10); // Does the sector’s inner ring (or point) have rounded corners?
          else if (rc0 > _math.epsilon) {
              t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
              t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);
              context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01); // Have the corners merged?

              if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, (0, _math.atan2)(t0.y01, t0.x01), (0, _math.atan2)(t1.y01, t1.x01), !cw); // Otherwise, draw the two corners and the ring.
              else {
                  context.arc(t0.cx, t0.cy, rc0, (0, _math.atan2)(t0.y01, t0.x01), (0, _math.atan2)(t0.y11, t0.x11), !cw);
                  context.arc(0, 0, r0, (0, _math.atan2)(t0.cy + t0.y11, t0.cx + t0.x11), (0, _math.atan2)(t1.cy + t1.y11, t1.cx + t1.x11), cw);
                  context.arc(t1.cx, t1.cy, rc0, (0, _math.atan2)(t1.y11, t1.x11), (0, _math.atan2)(t1.y01, t1.x01), !cw);
                }
            } // Or is the inner ring just a circular arc?
            else context.arc(0, 0, r0, a10, a00, cw);
        }
    context.closePath();
    if (buffer) return context = null, buffer + "" || null;
  }

  arc.centroid = function () {
    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,
        a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - _math.pi / 2;
    return [(0, _math.cos)(a) * r, (0, _math.sin)(a) * r];
  };

  arc.innerRadius = function (_) {
    return arguments.length ? (innerRadius = typeof _ === "function" ? _ : (0, _constant.default)(+_), arc) : innerRadius;
  };

  arc.outerRadius = function (_) {
    return arguments.length ? (outerRadius = typeof _ === "function" ? _ : (0, _constant.default)(+_), arc) : outerRadius;
  };

  arc.cornerRadius = function (_) {
    return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : (0, _constant.default)(+_), arc) : cornerRadius;
  };

  arc.padRadius = function (_) {
    return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : (0, _constant.default)(+_), arc) : padRadius;
  };

  arc.startAngle = function (_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : (0, _constant.default)(+_), arc) : startAngle;
  };

  arc.endAngle = function (_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : (0, _constant.default)(+_), arc) : endAngle;
  };

  arc.padAngle = function (_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : (0, _constant.default)(+_), arc) : padAngle;
  };

  arc.context = function (_) {
    return arguments.length ? (context = _ == null ? null : _, arc) : context;
  };

  return arc;
}
},{"d3-path":"../node_modules/d3-path/src/index.js","./constant":"../node_modules/d3-shape/src/constant.js","./math":"../node_modules/d3-shape/src/math.js"}],"../node_modules/d3-shape/src/curve/linear.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function Linear(context) {
  this._context = context;
}

Linear.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._point = 0;
  },
  lineEnd: function () {
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
      // proceed

      default:
        this._context.lineTo(x, y);

        break;
    }
  }
};

function _default(context) {
  return new Linear(context);
}
},{}],"../node_modules/d3-shape/src/point.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.x = x;
exports.y = y;

function x(p) {
  return p[0];
}

function y(p) {
  return p[1];
}
},{}],"../node_modules/d3-shape/src/line.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Path = require("d3-path");

var _constant = _interopRequireDefault(require("./constant"));

var _linear = _interopRequireDefault(require("./curve/linear"));

var _point = require("./point");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var x = _point.x,
      y = _point.y,
      defined = (0, _constant.default)(true),
      context = null,
      curve = _linear.default,
      output = null;

  function line(data) {
    var i,
        n = data.length,
        d,
        defined0 = false,
        buffer;
    if (context == null) output = curve(buffer = (0, _d3Path.path)());

    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0) output.lineStart();else output.lineEnd();
      }

      if (defined0) output.point(+x(d, i, data), +y(d, i, data));
    }

    if (buffer) return output = null, buffer + "" || null;
  }

  line.x = function (_) {
    return arguments.length ? (x = typeof _ === "function" ? _ : (0, _constant.default)(+_), line) : x;
  };

  line.y = function (_) {
    return arguments.length ? (y = typeof _ === "function" ? _ : (0, _constant.default)(+_), line) : y;
  };

  line.defined = function (_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : (0, _constant.default)(!!_), line) : defined;
  };

  line.curve = function (_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
  };

  line.context = function (_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
  };

  return line;
}
},{"d3-path":"../node_modules/d3-path/src/index.js","./constant":"../node_modules/d3-shape/src/constant.js","./curve/linear":"../node_modules/d3-shape/src/curve/linear.js","./point":"../node_modules/d3-shape/src/point.js"}],"../node_modules/d3-shape/src/area.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Path = require("d3-path");

var _constant = _interopRequireDefault(require("./constant"));

var _linear = _interopRequireDefault(require("./curve/linear"));

var _line = _interopRequireDefault(require("./line"));

var _point = require("./point");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var x0 = _point.x,
      x1 = null,
      y0 = (0, _constant.default)(0),
      y1 = _point.y,
      defined = (0, _constant.default)(true),
      context = null,
      curve = _linear.default,
      output = null;

  function area(data) {
    var i,
        j,
        k,
        n = data.length,
        d,
        defined0 = false,
        buffer,
        x0z = new Array(n),
        y0z = new Array(n);
    if (context == null) output = curve(buffer = (0, _d3Path.path)());

    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0) {
          j = i;
          output.areaStart();
          output.lineStart();
        } else {
          output.lineEnd();
          output.lineStart();

          for (k = i - 1; k >= j; --k) {
            output.point(x0z[k], y0z[k]);
          }

          output.lineEnd();
          output.areaEnd();
        }
      }

      if (defined0) {
        x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
        output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
      }
    }

    if (buffer) return output = null, buffer + "" || null;
  }

  function arealine() {
    return (0, _line.default)().defined(defined).curve(curve).context(context);
  }

  area.x = function (_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : (0, _constant.default)(+_), x1 = null, area) : x0;
  };

  area.x0 = function (_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : (0, _constant.default)(+_), area) : x0;
  };

  area.x1 = function (_) {
    return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : (0, _constant.default)(+_), area) : x1;
  };

  area.y = function (_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : (0, _constant.default)(+_), y1 = null, area) : y0;
  };

  area.y0 = function (_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : (0, _constant.default)(+_), area) : y0;
  };

  area.y1 = function (_) {
    return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : (0, _constant.default)(+_), area) : y1;
  };

  area.lineX0 = area.lineY0 = function () {
    return arealine().x(x0).y(y0);
  };

  area.lineY1 = function () {
    return arealine().x(x0).y(y1);
  };

  area.lineX1 = function () {
    return arealine().x(x1).y(y0);
  };

  area.defined = function (_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : (0, _constant.default)(!!_), area) : defined;
  };

  area.curve = function (_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
  };

  area.context = function (_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
  };

  return area;
}
},{"d3-path":"../node_modules/d3-path/src/index.js","./constant":"../node_modules/d3-shape/src/constant.js","./curve/linear":"../node_modules/d3-shape/src/curve/linear.js","./line":"../node_modules/d3-shape/src/line.js","./point":"../node_modules/d3-shape/src/point.js"}],"../node_modules/d3-shape/src/descending.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
}
},{}],"../node_modules/d3-shape/src/identity.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(d) {
  return d;
}
},{}],"../node_modules/d3-shape/src/pie.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constant = _interopRequireDefault(require("./constant"));

var _descending = _interopRequireDefault(require("./descending"));

var _identity = _interopRequireDefault(require("./identity"));

var _math = require("./math");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var value = _identity.default,
      sortValues = _descending.default,
      sort = null,
      startAngle = (0, _constant.default)(0),
      endAngle = (0, _constant.default)(_math.tau),
      padAngle = (0, _constant.default)(0);

  function pie(data) {
    var i,
        n = data.length,
        j,
        k,
        sum = 0,
        index = new Array(n),
        arcs = new Array(n),
        a0 = +startAngle.apply(this, arguments),
        da = Math.min(_math.tau, Math.max(-_math.tau, endAngle.apply(this, arguments) - a0)),
        a1,
        p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)),
        pa = p * (da < 0 ? -1 : 1),
        v;

    for (i = 0; i < n; ++i) {
      if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {
        sum += v;
      }
    } // Optionally sort the arcs by previously-computed values or by data.


    if (sortValues != null) index.sort(function (i, j) {
      return sortValues(arcs[i], arcs[j]);
    });else if (sort != null) index.sort(function (i, j) {
      return sort(data[i], data[j]);
    }); // Compute the arcs! They are stored in the original data's order.

    for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {
      j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {
        data: data[j],
        index: i,
        value: v,
        startAngle: a0,
        endAngle: a1,
        padAngle: p
      };
    }

    return arcs;
  }

  pie.value = function (_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : (0, _constant.default)(+_), pie) : value;
  };

  pie.sortValues = function (_) {
    return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;
  };

  pie.sort = function (_) {
    return arguments.length ? (sort = _, sortValues = null, pie) : sort;
  };

  pie.startAngle = function (_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : (0, _constant.default)(+_), pie) : startAngle;
  };

  pie.endAngle = function (_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : (0, _constant.default)(+_), pie) : endAngle;
  };

  pie.padAngle = function (_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : (0, _constant.default)(+_), pie) : padAngle;
  };

  return pie;
}
},{"./constant":"../node_modules/d3-shape/src/constant.js","./descending":"../node_modules/d3-shape/src/descending.js","./identity":"../node_modules/d3-shape/src/identity.js","./math":"../node_modules/d3-shape/src/math.js"}],"../node_modules/d3-shape/src/curve/radial.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = curveRadial;
exports.curveRadialLinear = void 0;

var _linear = _interopRequireDefault(require("./linear"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var curveRadialLinear = curveRadial(_linear.default);
exports.curveRadialLinear = curveRadialLinear;

function Radial(curve) {
  this._curve = curve;
}

Radial.prototype = {
  areaStart: function () {
    this._curve.areaStart();
  },
  areaEnd: function () {
    this._curve.areaEnd();
  },
  lineStart: function () {
    this._curve.lineStart();
  },
  lineEnd: function () {
    this._curve.lineEnd();
  },
  point: function (a, r) {
    this._curve.point(r * Math.sin(a), r * -Math.cos(a));
  }
};

function curveRadial(curve) {
  function radial(context) {
    return new Radial(curve(context));
  }

  radial._curve = curve;
  return radial;
}
},{"./linear":"../node_modules/d3-shape/src/curve/linear.js"}],"../node_modules/d3-shape/src/lineRadial.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.lineRadial = lineRadial;
exports.default = _default;

var _radial = _interopRequireWildcard(require("./curve/radial"));

var _line = _interopRequireDefault(require("./line"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function lineRadial(l) {
  var c = l.curve;
  l.angle = l.x, delete l.x;
  l.radius = l.y, delete l.y;

  l.curve = function (_) {
    return arguments.length ? c((0, _radial.default)(_)) : c()._curve;
  };

  return l;
}

function _default() {
  return lineRadial((0, _line.default)().curve(_radial.curveRadialLinear));
}
},{"./curve/radial":"../node_modules/d3-shape/src/curve/radial.js","./line":"../node_modules/d3-shape/src/line.js"}],"../node_modules/d3-shape/src/areaRadial.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _radial = _interopRequireWildcard(require("./curve/radial"));

var _area = _interopRequireDefault(require("./area"));

var _lineRadial = require("./lineRadial");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _default() {
  var a = (0, _area.default)().curve(_radial.curveRadialLinear),
      c = a.curve,
      x0 = a.lineX0,
      x1 = a.lineX1,
      y0 = a.lineY0,
      y1 = a.lineY1;
  a.angle = a.x, delete a.x;
  a.startAngle = a.x0, delete a.x0;
  a.endAngle = a.x1, delete a.x1;
  a.radius = a.y, delete a.y;
  a.innerRadius = a.y0, delete a.y0;
  a.outerRadius = a.y1, delete a.y1;
  a.lineStartAngle = function () {
    return (0, _lineRadial.lineRadial)(x0());
  }, delete a.lineX0;
  a.lineEndAngle = function () {
    return (0, _lineRadial.lineRadial)(x1());
  }, delete a.lineX1;
  a.lineInnerRadius = function () {
    return (0, _lineRadial.lineRadial)(y0());
  }, delete a.lineY0;
  a.lineOuterRadius = function () {
    return (0, _lineRadial.lineRadial)(y1());
  }, delete a.lineY1;

  a.curve = function (_) {
    return arguments.length ? c((0, _radial.default)(_)) : c()._curve;
  };

  return a;
}
},{"./curve/radial":"../node_modules/d3-shape/src/curve/radial.js","./area":"../node_modules/d3-shape/src/area.js","./lineRadial":"../node_modules/d3-shape/src/lineRadial.js"}],"../node_modules/d3-shape/src/pointRadial.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x, y) {
  return [(y = +y) * Math.cos(x -= Math.PI / 2), y * Math.sin(x)];
}
},{}],"../node_modules/d3-shape/src/array.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.slice = void 0;
var slice = Array.prototype.slice;
exports.slice = slice;
},{}],"../node_modules/d3-shape/src/link/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.linkHorizontal = linkHorizontal;
exports.linkVertical = linkVertical;
exports.linkRadial = linkRadial;

var _d3Path = require("d3-path");

var _array = require("../array");

var _constant = _interopRequireDefault(require("../constant"));

var _point = require("../point");

var _pointRadial = _interopRequireDefault(require("../pointRadial"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function linkSource(d) {
  return d.source;
}

function linkTarget(d) {
  return d.target;
}

function link(curve) {
  var source = linkSource,
      target = linkTarget,
      x = _point.x,
      y = _point.y,
      context = null;

  function link() {
    var buffer,
        argv = _array.slice.call(arguments),
        s = source.apply(this, argv),
        t = target.apply(this, argv);

    if (!context) context = buffer = (0, _d3Path.path)();
    curve(context, +x.apply(this, (argv[0] = s, argv)), +y.apply(this, argv), +x.apply(this, (argv[0] = t, argv)), +y.apply(this, argv));
    if (buffer) return context = null, buffer + "" || null;
  }

  link.source = function (_) {
    return arguments.length ? (source = _, link) : source;
  };

  link.target = function (_) {
    return arguments.length ? (target = _, link) : target;
  };

  link.x = function (_) {
    return arguments.length ? (x = typeof _ === "function" ? _ : (0, _constant.default)(+_), link) : x;
  };

  link.y = function (_) {
    return arguments.length ? (y = typeof _ === "function" ? _ : (0, _constant.default)(+_), link) : y;
  };

  link.context = function (_) {
    return arguments.length ? (context = _ == null ? null : _, link) : context;
  };

  return link;
}

function curveHorizontal(context, x0, y0, x1, y1) {
  context.moveTo(x0, y0);
  context.bezierCurveTo(x0 = (x0 + x1) / 2, y0, x0, y1, x1, y1);
}

function curveVertical(context, x0, y0, x1, y1) {
  context.moveTo(x0, y0);
  context.bezierCurveTo(x0, y0 = (y0 + y1) / 2, x1, y0, x1, y1);
}

function curveRadial(context, x0, y0, x1, y1) {
  var p0 = (0, _pointRadial.default)(x0, y0),
      p1 = (0, _pointRadial.default)(x0, y0 = (y0 + y1) / 2),
      p2 = (0, _pointRadial.default)(x1, y0),
      p3 = (0, _pointRadial.default)(x1, y1);
  context.moveTo(p0[0], p0[1]);
  context.bezierCurveTo(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]);
}

function linkHorizontal() {
  return link(curveHorizontal);
}

function linkVertical() {
  return link(curveVertical);
}

function linkRadial() {
  var l = link(curveRadial);
  l.angle = l.x, delete l.x;
  l.radius = l.y, delete l.y;
  return l;
}
},{"d3-path":"../node_modules/d3-path/src/index.js","../array":"../node_modules/d3-shape/src/array.js","../constant":"../node_modules/d3-shape/src/constant.js","../point":"../node_modules/d3-shape/src/point.js","../pointRadial":"../node_modules/d3-shape/src/pointRadial.js"}],"../node_modules/d3-shape/src/symbol/circle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _math = require("../math");

var _default = {
  draw: function (context, size) {
    var r = Math.sqrt(size / _math.pi);
    context.moveTo(r, 0);
    context.arc(0, 0, r, 0, _math.tau);
  }
};
exports.default = _default;
},{"../math":"../node_modules/d3-shape/src/math.js"}],"../node_modules/d3-shape/src/symbol/cross.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  draw: function (context, size) {
    var r = Math.sqrt(size / 5) / 2;
    context.moveTo(-3 * r, -r);
    context.lineTo(-r, -r);
    context.lineTo(-r, -3 * r);
    context.lineTo(r, -3 * r);
    context.lineTo(r, -r);
    context.lineTo(3 * r, -r);
    context.lineTo(3 * r, r);
    context.lineTo(r, r);
    context.lineTo(r, 3 * r);
    context.lineTo(-r, 3 * r);
    context.lineTo(-r, r);
    context.lineTo(-3 * r, r);
    context.closePath();
  }
};
exports.default = _default;
},{}],"../node_modules/d3-shape/src/symbol/diamond.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var tan30 = Math.sqrt(1 / 3),
    tan30_2 = tan30 * 2;
var _default = {
  draw: function (context, size) {
    var y = Math.sqrt(size / tan30_2),
        x = y * tan30;
    context.moveTo(0, -y);
    context.lineTo(x, 0);
    context.lineTo(0, y);
    context.lineTo(-x, 0);
    context.closePath();
  }
};
exports.default = _default;
},{}],"../node_modules/d3-shape/src/symbol/star.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _math = require("../math");

var ka = 0.89081309152928522810,
    kr = Math.sin(_math.pi / 10) / Math.sin(7 * _math.pi / 10),
    kx = Math.sin(_math.tau / 10) * kr,
    ky = -Math.cos(_math.tau / 10) * kr;
var _default = {
  draw: function (context, size) {
    var r = Math.sqrt(size * ka),
        x = kx * r,
        y = ky * r;
    context.moveTo(0, -r);
    context.lineTo(x, y);

    for (var i = 1; i < 5; ++i) {
      var a = _math.tau * i / 5,
          c = Math.cos(a),
          s = Math.sin(a);
      context.lineTo(s * r, -c * r);
      context.lineTo(c * x - s * y, s * x + c * y);
    }

    context.closePath();
  }
};
exports.default = _default;
},{"../math":"../node_modules/d3-shape/src/math.js"}],"../node_modules/d3-shape/src/symbol/square.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  draw: function (context, size) {
    var w = Math.sqrt(size),
        x = -w / 2;
    context.rect(x, x, w, w);
  }
};
exports.default = _default;
},{}],"../node_modules/d3-shape/src/symbol/triangle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var sqrt3 = Math.sqrt(3);
var _default = {
  draw: function (context, size) {
    var y = -Math.sqrt(size / (sqrt3 * 3));
    context.moveTo(0, y * 2);
    context.lineTo(-sqrt3 * y, -y);
    context.lineTo(sqrt3 * y, -y);
    context.closePath();
  }
};
exports.default = _default;
},{}],"../node_modules/d3-shape/src/symbol/wye.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var c = -0.5,
    s = Math.sqrt(3) / 2,
    k = 1 / Math.sqrt(12),
    a = (k / 2 + 1) * 3;
var _default = {
  draw: function (context, size) {
    var r = Math.sqrt(size / a),
        x0 = r / 2,
        y0 = r * k,
        x1 = x0,
        y1 = r * k + r,
        x2 = -x1,
        y2 = y1;
    context.moveTo(x0, y0);
    context.lineTo(x1, y1);
    context.lineTo(x2, y2);
    context.lineTo(c * x0 - s * y0, s * x0 + c * y0);
    context.lineTo(c * x1 - s * y1, s * x1 + c * y1);
    context.lineTo(c * x2 - s * y2, s * x2 + c * y2);
    context.lineTo(c * x0 + s * y0, c * y0 - s * x0);
    context.lineTo(c * x1 + s * y1, c * y1 - s * x1);
    context.lineTo(c * x2 + s * y2, c * y2 - s * x2);
    context.closePath();
  }
};
exports.default = _default;
},{}],"../node_modules/d3-shape/src/symbol.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.symbols = void 0;

var _d3Path = require("d3-path");

var _circle = _interopRequireDefault(require("./symbol/circle"));

var _cross = _interopRequireDefault(require("./symbol/cross"));

var _diamond = _interopRequireDefault(require("./symbol/diamond"));

var _star = _interopRequireDefault(require("./symbol/star"));

var _square = _interopRequireDefault(require("./symbol/square"));

var _triangle = _interopRequireDefault(require("./symbol/triangle"));

var _wye = _interopRequireDefault(require("./symbol/wye"));

var _constant = _interopRequireDefault(require("./constant"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var symbols = [_circle.default, _cross.default, _diamond.default, _square.default, _star.default, _triangle.default, _wye.default];
exports.symbols = symbols;

function _default() {
  var type = (0, _constant.default)(_circle.default),
      size = (0, _constant.default)(64),
      context = null;

  function symbol() {
    var buffer;
    if (!context) context = buffer = (0, _d3Path.path)();
    type.apply(this, arguments).draw(context, +size.apply(this, arguments));
    if (buffer) return context = null, buffer + "" || null;
  }

  symbol.type = function (_) {
    return arguments.length ? (type = typeof _ === "function" ? _ : (0, _constant.default)(_), symbol) : type;
  };

  symbol.size = function (_) {
    return arguments.length ? (size = typeof _ === "function" ? _ : (0, _constant.default)(+_), symbol) : size;
  };

  symbol.context = function (_) {
    return arguments.length ? (context = _ == null ? null : _, symbol) : context;
  };

  return symbol;
}
},{"d3-path":"../node_modules/d3-path/src/index.js","./symbol/circle":"../node_modules/d3-shape/src/symbol/circle.js","./symbol/cross":"../node_modules/d3-shape/src/symbol/cross.js","./symbol/diamond":"../node_modules/d3-shape/src/symbol/diamond.js","./symbol/star":"../node_modules/d3-shape/src/symbol/star.js","./symbol/square":"../node_modules/d3-shape/src/symbol/square.js","./symbol/triangle":"../node_modules/d3-shape/src/symbol/triangle.js","./symbol/wye":"../node_modules/d3-shape/src/symbol/wye.js","./constant":"../node_modules/d3-shape/src/constant.js"}],"../node_modules/d3-shape/src/noop.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {}
},{}],"../node_modules/d3-shape/src/curve/basis.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.point = point;
exports.Basis = Basis;
exports.default = _default;

function point(that, x, y) {
  that._context.bezierCurveTo((2 * that._x0 + that._x1) / 3, (2 * that._y0 + that._y1) / 3, (that._x0 + 2 * that._x1) / 3, (that._y0 + 2 * that._y1) / 3, (that._x0 + 4 * that._x1 + x) / 6, (that._y0 + 4 * that._y1 + y) / 6);
}

function Basis(context) {
  this._context = context;
}

Basis.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 3:
        point(this, this._x1, this._y1);
      // proceed

      case 2:
        this._context.lineTo(this._x1, this._y1);

        break;
    }

    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
        break;

      case 2:
        this._point = 3;

        this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6);

      // proceed

      default:
        point(this, x, y);
        break;
    }

    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
  }
};

function _default(context) {
  return new Basis(context);
}
},{}],"../node_modules/d3-shape/src/curve/basisClosed.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _noop = _interopRequireDefault(require("../noop"));

var _basis = require("./basis");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function BasisClosed(context) {
  this._context = context;
}

BasisClosed.prototype = {
  areaStart: _noop.default,
  areaEnd: _noop.default,
  lineStart: function () {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 1:
        {
          this._context.moveTo(this._x2, this._y2);

          this._context.closePath();

          break;
        }

      case 2:
        {
          this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);

          this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);

          this._context.closePath();

          break;
        }

      case 3:
        {
          this.point(this._x2, this._y2);
          this.point(this._x3, this._y3);
          this.point(this._x4, this._y4);
          break;
        }
    }
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        this._x2 = x, this._y2 = y;
        break;

      case 1:
        this._point = 2;
        this._x3 = x, this._y3 = y;
        break;

      case 2:
        this._point = 3;
        this._x4 = x, this._y4 = y;

        this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6);

        break;

      default:
        (0, _basis.point)(this, x, y);
        break;
    }

    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
  }
};

function _default(context) {
  return new BasisClosed(context);
}
},{"../noop":"../node_modules/d3-shape/src/noop.js","./basis":"../node_modules/d3-shape/src/curve/basis.js"}],"../node_modules/d3-shape/src/curve/basisOpen.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _basis = require("./basis");

function BasisOpen(context) {
  this._context = context;
}

BasisOpen.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        break;

      case 1:
        this._point = 2;
        break;

      case 2:
        this._point = 3;
        var x0 = (this._x0 + 4 * this._x1 + x) / 6,
            y0 = (this._y0 + 4 * this._y1 + y) / 6;
        this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0);
        break;

      case 3:
        this._point = 4;
      // proceed

      default:
        (0, _basis.point)(this, x, y);
        break;
    }

    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
  }
};

function _default(context) {
  return new BasisOpen(context);
}
},{"./basis":"../node_modules/d3-shape/src/curve/basis.js"}],"../node_modules/d3-shape/src/curve/bundle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _basis = require("./basis");

function Bundle(context, beta) {
  this._basis = new _basis.Basis(context);
  this._beta = beta;
}

Bundle.prototype = {
  lineStart: function () {
    this._x = [];
    this._y = [];

    this._basis.lineStart();
  },
  lineEnd: function () {
    var x = this._x,
        y = this._y,
        j = x.length - 1;

    if (j > 0) {
      var x0 = x[0],
          y0 = y[0],
          dx = x[j] - x0,
          dy = y[j] - y0,
          i = -1,
          t;

      while (++i <= j) {
        t = i / j;

        this._basis.point(this._beta * x[i] + (1 - this._beta) * (x0 + t * dx), this._beta * y[i] + (1 - this._beta) * (y0 + t * dy));
      }
    }

    this._x = this._y = null;

    this._basis.lineEnd();
  },
  point: function (x, y) {
    this._x.push(+x);

    this._y.push(+y);
  }
};

var _default = function custom(beta) {
  function bundle(context) {
    return beta === 1 ? new _basis.Basis(context) : new Bundle(context, beta);
  }

  bundle.beta = function (beta) {
    return custom(+beta);
  };

  return bundle;
}(0.85);

exports.default = _default;
},{"./basis":"../node_modules/d3-shape/src/curve/basis.js"}],"../node_modules/d3-shape/src/curve/cardinal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.point = point;
exports.Cardinal = Cardinal;
exports.default = void 0;

function point(that, x, y) {
  that._context.bezierCurveTo(that._x1 + that._k * (that._x2 - that._x0), that._y1 + that._k * (that._y2 - that._y0), that._x2 + that._k * (that._x1 - x), that._y2 + that._k * (that._y1 - y), that._x2, that._y2);
}

function Cardinal(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}

Cardinal.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x2, this._y2);

        break;

      case 3:
        point(this, this._x1, this._y1);
        break;
    }

    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
        this._x1 = x, this._y1 = y;
        break;

      case 2:
        this._point = 3;
      // proceed

      default:
        point(this, x, y);
        break;
    }

    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var _default = function custom(tension) {
  function cardinal(context) {
    return new Cardinal(context, tension);
  }

  cardinal.tension = function (tension) {
    return custom(+tension);
  };

  return cardinal;
}(0);

exports.default = _default;
},{}],"../node_modules/d3-shape/src/curve/cardinalClosed.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CardinalClosed = CardinalClosed;
exports.default = void 0;

var _noop = _interopRequireDefault(require("../noop"));

var _cardinal = require("./cardinal");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function CardinalClosed(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}

CardinalClosed.prototype = {
  areaStart: _noop.default,
  areaEnd: _noop.default,
  lineStart: function () {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 1:
        {
          this._context.moveTo(this._x3, this._y3);

          this._context.closePath();

          break;
        }

      case 2:
        {
          this._context.lineTo(this._x3, this._y3);

          this._context.closePath();

          break;
        }

      case 3:
        {
          this.point(this._x3, this._y3);
          this.point(this._x4, this._y4);
          this.point(this._x5, this._y5);
          break;
        }
    }
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        this._x3 = x, this._y3 = y;
        break;

      case 1:
        this._point = 2;

        this._context.moveTo(this._x4 = x, this._y4 = y);

        break;

      case 2:
        this._point = 3;
        this._x5 = x, this._y5 = y;
        break;

      default:
        (0, _cardinal.point)(this, x, y);
        break;
    }

    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var _default = function custom(tension) {
  function cardinal(context) {
    return new CardinalClosed(context, tension);
  }

  cardinal.tension = function (tension) {
    return custom(+tension);
  };

  return cardinal;
}(0);

exports.default = _default;
},{"../noop":"../node_modules/d3-shape/src/noop.js","./cardinal":"../node_modules/d3-shape/src/curve/cardinal.js"}],"../node_modules/d3-shape/src/curve/cardinalOpen.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CardinalOpen = CardinalOpen;
exports.default = void 0;

var _cardinal = require("./cardinal");

function CardinalOpen(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}

CardinalOpen.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        break;

      case 1:
        this._point = 2;
        break;

      case 2:
        this._point = 3;
        this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
        break;

      case 3:
        this._point = 4;
      // proceed

      default:
        (0, _cardinal.point)(this, x, y);
        break;
    }

    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var _default = function custom(tension) {
  function cardinal(context) {
    return new CardinalOpen(context, tension);
  }

  cardinal.tension = function (tension) {
    return custom(+tension);
  };

  return cardinal;
}(0);

exports.default = _default;
},{"./cardinal":"../node_modules/d3-shape/src/curve/cardinal.js"}],"../node_modules/d3-shape/src/curve/catmullRom.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.point = point;
exports.default = void 0;

var _math = require("../math");

var _cardinal = require("./cardinal");

function point(that, x, y) {
  var x1 = that._x1,
      y1 = that._y1,
      x2 = that._x2,
      y2 = that._y2;

  if (that._l01_a > _math.epsilon) {
    var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a,
        n = 3 * that._l01_a * (that._l01_a + that._l12_a);
    x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
    y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
  }

  if (that._l23_a > _math.epsilon) {
    var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a,
        m = 3 * that._l23_a * (that._l23_a + that._l12_a);
    x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;
    y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;
  }

  that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);
}

function CatmullRom(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}

CatmullRom.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x2, this._y2);

        break;

      case 3:
        this.point(this._x2, this._y2);
        break;
    }

    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    if (this._point) {
      var x23 = this._x2 - x,
          y23 = this._y2 - y;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
        break;

      case 2:
        this._point = 3;
      // proceed

      default:
        point(this, x, y);
        break;
    }

    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var _default = function custom(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRom(context, alpha) : new _cardinal.Cardinal(context, 0);
  }

  catmullRom.alpha = function (alpha) {
    return custom(+alpha);
  };

  return catmullRom;
}(0.5);

exports.default = _default;
},{"../math":"../node_modules/d3-shape/src/math.js","./cardinal":"../node_modules/d3-shape/src/curve/cardinal.js"}],"../node_modules/d3-shape/src/curve/catmullRomClosed.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _cardinalClosed = require("./cardinalClosed");

var _noop = _interopRequireDefault(require("../noop"));

var _catmullRom = require("./catmullRom");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function CatmullRomClosed(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}

CatmullRomClosed.prototype = {
  areaStart: _noop.default,
  areaEnd: _noop.default,
  lineStart: function () {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 1:
        {
          this._context.moveTo(this._x3, this._y3);

          this._context.closePath();

          break;
        }

      case 2:
        {
          this._context.lineTo(this._x3, this._y3);

          this._context.closePath();

          break;
        }

      case 3:
        {
          this.point(this._x3, this._y3);
          this.point(this._x4, this._y4);
          this.point(this._x5, this._y5);
          break;
        }
    }
  },
  point: function (x, y) {
    x = +x, y = +y;

    if (this._point) {
      var x23 = this._x2 - x,
          y23 = this._y2 - y;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }

    switch (this._point) {
      case 0:
        this._point = 1;
        this._x3 = x, this._y3 = y;
        break;

      case 1:
        this._point = 2;

        this._context.moveTo(this._x4 = x, this._y4 = y);

        break;

      case 2:
        this._point = 3;
        this._x5 = x, this._y5 = y;
        break;

      default:
        (0, _catmullRom.point)(this, x, y);
        break;
    }

    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var _default = function custom(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRomClosed(context, alpha) : new _cardinalClosed.CardinalClosed(context, 0);
  }

  catmullRom.alpha = function (alpha) {
    return custom(+alpha);
  };

  return catmullRom;
}(0.5);

exports.default = _default;
},{"./cardinalClosed":"../node_modules/d3-shape/src/curve/cardinalClosed.js","../noop":"../node_modules/d3-shape/src/noop.js","./catmullRom":"../node_modules/d3-shape/src/curve/catmullRom.js"}],"../node_modules/d3-shape/src/curve/catmullRomOpen.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _cardinalOpen = require("./cardinalOpen");

var _catmullRom = require("./catmullRom");

function CatmullRomOpen(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}

CatmullRomOpen.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function () {
    if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    if (this._point) {
      var x23 = this._x2 - x,
          y23 = this._y2 - y;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }

    switch (this._point) {
      case 0:
        this._point = 1;
        break;

      case 1:
        this._point = 2;
        break;

      case 2:
        this._point = 3;
        this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
        break;

      case 3:
        this._point = 4;
      // proceed

      default:
        (0, _catmullRom.point)(this, x, y);
        break;
    }

    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var _default = function custom(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRomOpen(context, alpha) : new _cardinalOpen.CardinalOpen(context, 0);
  }

  catmullRom.alpha = function (alpha) {
    return custom(+alpha);
  };

  return catmullRom;
}(0.5);

exports.default = _default;
},{"./cardinalOpen":"../node_modules/d3-shape/src/curve/cardinalOpen.js","./catmullRom":"../node_modules/d3-shape/src/curve/catmullRom.js"}],"../node_modules/d3-shape/src/curve/linearClosed.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _noop = _interopRequireDefault(require("../noop"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function LinearClosed(context) {
  this._context = context;
}

LinearClosed.prototype = {
  areaStart: _noop.default,
  areaEnd: _noop.default,
  lineStart: function () {
    this._point = 0;
  },
  lineEnd: function () {
    if (this._point) this._context.closePath();
  },
  point: function (x, y) {
    x = +x, y = +y;
    if (this._point) this._context.lineTo(x, y);else this._point = 1, this._context.moveTo(x, y);
  }
};

function _default(context) {
  return new LinearClosed(context);
}
},{"../noop":"../node_modules/d3-shape/src/noop.js"}],"../node_modules/d3-shape/src/curve/monotone.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.monotoneX = monotoneX;
exports.monotoneY = monotoneY;

function sign(x) {
  return x < 0 ? -1 : 1;
} // Calculate the slopes of the tangents (Hermite-type interpolation) based on
// the following paper: Steffen, M. 1990. A Simple Method for Monotonic
// Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.
// NOV(II), P. 443, 1990.


function slope3(that, x2, y2) {
  var h0 = that._x1 - that._x0,
      h1 = x2 - that._x1,
      s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),
      s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),
      p = (s0 * h1 + s1 * h0) / (h0 + h1);
  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
} // Calculate a one-sided slope.


function slope2(that, t) {
  var h = that._x1 - that._x0;
  return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
} // According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations
// "you can express cubic Hermite interpolation in terms of cubic Bézier curves
// with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1".


function point(that, t0, t1) {
  var x0 = that._x0,
      y0 = that._y0,
      x1 = that._x1,
      y1 = that._y1,
      dx = (x1 - x0) / 3;

  that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
}

function MonotoneX(context) {
  this._context = context;
}

MonotoneX.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x1, this._y1);

        break;

      case 3:
        point(this, this._t0, slope2(this, this._t0));
        break;
    }

    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    var t1 = NaN;
    x = +x, y = +y;
    if (x === this._x1 && y === this._y1) return; // Ignore coincident points.

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
        break;

      case 2:
        this._point = 3;
        point(this, slope2(this, t1 = slope3(this, x, y)), t1);
        break;

      default:
        point(this, this._t0, t1 = slope3(this, x, y));
        break;
    }

    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
    this._t0 = t1;
  }
};

function MonotoneY(context) {
  this._context = new ReflectContext(context);
}

(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function (x, y) {
  MonotoneX.prototype.point.call(this, y, x);
};

function ReflectContext(context) {
  this._context = context;
}

ReflectContext.prototype = {
  moveTo: function (x, y) {
    this._context.moveTo(y, x);
  },
  closePath: function () {
    this._context.closePath();
  },
  lineTo: function (x, y) {
    this._context.lineTo(y, x);
  },
  bezierCurveTo: function (x1, y1, x2, y2, x, y) {
    this._context.bezierCurveTo(y1, x1, y2, x2, y, x);
  }
};

function monotoneX(context) {
  return new MonotoneX(context);
}

function monotoneY(context) {
  return new MonotoneY(context);
}
},{}],"../node_modules/d3-shape/src/curve/natural.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function Natural(context) {
  this._context = context;
}

Natural.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x = [];
    this._y = [];
  },
  lineEnd: function () {
    var x = this._x,
        y = this._y,
        n = x.length;

    if (n) {
      this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);

      if (n === 2) {
        this._context.lineTo(x[1], y[1]);
      } else {
        var px = controlPoints(x),
            py = controlPoints(y);

        for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
          this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);
        }
      }
    }

    if (this._line || this._line !== 0 && n === 1) this._context.closePath();
    this._line = 1 - this._line;
    this._x = this._y = null;
  },
  point: function (x, y) {
    this._x.push(+x);

    this._y.push(+y);
  }
}; // See https://www.particleincell.com/2012/bezier-splines/ for derivation.

function controlPoints(x) {
  var i,
      n = x.length - 1,
      m,
      a = new Array(n),
      b = new Array(n),
      r = new Array(n);
  a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];

  for (i = 1; i < n - 1; ++i) a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];

  a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];

  for (i = 1; i < n; ++i) m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];

  a[n - 1] = r[n - 1] / b[n - 1];

  for (i = n - 2; i >= 0; --i) a[i] = (r[i] - a[i + 1]) / b[i];

  b[n - 1] = (x[n] + a[n - 1]) / 2;

  for (i = 0; i < n - 1; ++i) b[i] = 2 * x[i + 1] - a[i + 1];

  return [a, b];
}

function _default(context) {
  return new Natural(context);
}
},{}],"../node_modules/d3-shape/src/curve/step.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.stepBefore = stepBefore;
exports.stepAfter = stepAfter;

function Step(context, t) {
  this._context = context;
  this._t = t;
}

Step.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x = this._y = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
      // proceed

      default:
        {
          if (this._t <= 0) {
            this._context.lineTo(this._x, y);

            this._context.lineTo(x, y);
          } else {
            var x1 = this._x * (1 - this._t) + x * this._t;

            this._context.lineTo(x1, this._y);

            this._context.lineTo(x1, y);
          }

          break;
        }
    }

    this._x = x, this._y = y;
  }
};

function _default(context) {
  return new Step(context, 0.5);
}

function stepBefore(context) {
  return new Step(context, 0);
}

function stepAfter(context) {
  return new Step(context, 1);
}
},{}],"../node_modules/d3-shape/src/offset/none.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(series, order) {
  if (!((n = series.length) > 1)) return;

  for (var i = 1, j, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {
    s0 = s1, s1 = series[order[i]];

    for (j = 0; j < m; ++j) {
      s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];
    }
  }
}
},{}],"../node_modules/d3-shape/src/order/none.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(series) {
  var n = series.length,
      o = new Array(n);

  while (--n >= 0) o[n] = n;

  return o;
}
},{}],"../node_modules/d3-shape/src/stack.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _array = require("./array");

var _constant = _interopRequireDefault(require("./constant"));

var _none = _interopRequireDefault(require("./offset/none"));

var _none2 = _interopRequireDefault(require("./order/none"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function stackValue(d, key) {
  return d[key];
}

function _default() {
  var keys = (0, _constant.default)([]),
      order = _none2.default,
      offset = _none.default,
      value = stackValue;

  function stack(data) {
    var kz = keys.apply(this, arguments),
        i,
        m = data.length,
        n = kz.length,
        sz = new Array(n),
        oz;

    for (i = 0; i < n; ++i) {
      for (var ki = kz[i], si = sz[i] = new Array(m), j = 0, sij; j < m; ++j) {
        si[j] = sij = [0, +value(data[j], ki, j, data)];
        sij.data = data[j];
      }

      si.key = ki;
    }

    for (i = 0, oz = order(sz); i < n; ++i) {
      sz[oz[i]].index = i;
    }

    offset(sz, oz);
    return sz;
  }

  stack.keys = function (_) {
    return arguments.length ? (keys = typeof _ === "function" ? _ : (0, _constant.default)(_array.slice.call(_)), stack) : keys;
  };

  stack.value = function (_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : (0, _constant.default)(+_), stack) : value;
  };

  stack.order = function (_) {
    return arguments.length ? (order = _ == null ? _none2.default : typeof _ === "function" ? _ : (0, _constant.default)(_array.slice.call(_)), stack) : order;
  };

  stack.offset = function (_) {
    return arguments.length ? (offset = _ == null ? _none.default : _, stack) : offset;
  };

  return stack;
}
},{"./array":"../node_modules/d3-shape/src/array.js","./constant":"../node_modules/d3-shape/src/constant.js","./offset/none":"../node_modules/d3-shape/src/offset/none.js","./order/none":"../node_modules/d3-shape/src/order/none.js"}],"../node_modules/d3-shape/src/offset/expand.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _none = _interopRequireDefault(require("./none"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series, order) {
  if (!((n = series.length) > 0)) return;

  for (var i, n, j = 0, m = series[0].length, y; j < m; ++j) {
    for (y = i = 0; i < n; ++i) y += series[i][j][1] || 0;

    if (y) for (i = 0; i < n; ++i) series[i][j][1] /= y;
  }

  (0, _none.default)(series, order);
}
},{"./none":"../node_modules/d3-shape/src/offset/none.js"}],"../node_modules/d3-shape/src/offset/diverging.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(series, order) {
  if (!((n = series.length) > 0)) return;

  for (var i, j = 0, d, dy, yp, yn, n, m = series[order[0]].length; j < m; ++j) {
    for (yp = yn = 0, i = 0; i < n; ++i) {
      if ((dy = (d = series[order[i]][j])[1] - d[0]) >= 0) {
        d[0] = yp, d[1] = yp += dy;
      } else if (dy < 0) {
        d[1] = yn, d[0] = yn += dy;
      } else {
        d[0] = yp;
      }
    }
  }
}
},{}],"../node_modules/d3-shape/src/offset/silhouette.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _none = _interopRequireDefault(require("./none"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series, order) {
  if (!((n = series.length) > 0)) return;

  for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {
    for (var i = 0, y = 0; i < n; ++i) y += series[i][j][1] || 0;

    s0[j][1] += s0[j][0] = -y / 2;
  }

  (0, _none.default)(series, order);
}
},{"./none":"../node_modules/d3-shape/src/offset/none.js"}],"../node_modules/d3-shape/src/offset/wiggle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _none = _interopRequireDefault(require("./none"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series, order) {
  if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0)) return;

  for (var y = 0, j = 1, s0, m, n; j < m; ++j) {
    for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {
      var si = series[order[i]],
          sij0 = si[j][1] || 0,
          sij1 = si[j - 1][1] || 0,
          s3 = (sij0 - sij1) / 2;

      for (var k = 0; k < i; ++k) {
        var sk = series[order[k]],
            skj0 = sk[j][1] || 0,
            skj1 = sk[j - 1][1] || 0;
        s3 += skj0 - skj1;
      }

      s1 += sij0, s2 += s3 * sij0;
    }

    s0[j - 1][1] += s0[j - 1][0] = y;
    if (s1) y -= s2 / s1;
  }

  s0[j - 1][1] += s0[j - 1][0] = y;
  (0, _none.default)(series, order);
}
},{"./none":"../node_modules/d3-shape/src/offset/none.js"}],"../node_modules/d3-shape/src/order/appearance.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _none = _interopRequireDefault(require("./none"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series) {
  var peaks = series.map(peak);
  return (0, _none.default)(series).sort(function (a, b) {
    return peaks[a] - peaks[b];
  });
}

function peak(series) {
  var i = -1,
      j = 0,
      n = series.length,
      vi,
      vj = -Infinity;

  while (++i < n) if ((vi = +series[i][1]) > vj) vj = vi, j = i;

  return j;
}
},{"./none":"../node_modules/d3-shape/src/order/none.js"}],"../node_modules/d3-shape/src/order/ascending.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.sum = sum;

var _none = _interopRequireDefault(require("./none"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series) {
  var sums = series.map(sum);
  return (0, _none.default)(series).sort(function (a, b) {
    return sums[a] - sums[b];
  });
}

function sum(series) {
  var s = 0,
      i = -1,
      n = series.length,
      v;

  while (++i < n) if (v = +series[i][1]) s += v;

  return s;
}
},{"./none":"../node_modules/d3-shape/src/order/none.js"}],"../node_modules/d3-shape/src/order/descending.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _ascending = _interopRequireDefault(require("./ascending"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series) {
  return (0, _ascending.default)(series).reverse();
}
},{"./ascending":"../node_modules/d3-shape/src/order/ascending.js"}],"../node_modules/d3-shape/src/order/insideOut.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _appearance = _interopRequireDefault(require("./appearance"));

var _ascending = require("./ascending");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series) {
  var n = series.length,
      i,
      j,
      sums = series.map(_ascending.sum),
      order = (0, _appearance.default)(series),
      top = 0,
      bottom = 0,
      tops = [],
      bottoms = [];

  for (i = 0; i < n; ++i) {
    j = order[i];

    if (top < bottom) {
      top += sums[j];
      tops.push(j);
    } else {
      bottom += sums[j];
      bottoms.push(j);
    }
  }

  return bottoms.reverse().concat(tops);
}
},{"./appearance":"../node_modules/d3-shape/src/order/appearance.js","./ascending":"../node_modules/d3-shape/src/order/ascending.js"}],"../node_modules/d3-shape/src/order/reverse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _none = _interopRequireDefault(require("./none"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series) {
  return (0, _none.default)(series).reverse();
}
},{"./none":"../node_modules/d3-shape/src/order/none.js"}],"../node_modules/d3-shape/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "arc", {
  enumerable: true,
  get: function () {
    return _arc.default;
  }
});
Object.defineProperty(exports, "area", {
  enumerable: true,
  get: function () {
    return _area.default;
  }
});
Object.defineProperty(exports, "line", {
  enumerable: true,
  get: function () {
    return _line.default;
  }
});
Object.defineProperty(exports, "pie", {
  enumerable: true,
  get: function () {
    return _pie.default;
  }
});
Object.defineProperty(exports, "areaRadial", {
  enumerable: true,
  get: function () {
    return _areaRadial.default;
  }
});
Object.defineProperty(exports, "radialArea", {
  enumerable: true,
  get: function () {
    return _areaRadial.default;
  }
});
Object.defineProperty(exports, "lineRadial", {
  enumerable: true,
  get: function () {
    return _lineRadial.default;
  }
});
Object.defineProperty(exports, "radialLine", {
  enumerable: true,
  get: function () {
    return _lineRadial.default;
  }
});
Object.defineProperty(exports, "pointRadial", {
  enumerable: true,
  get: function () {
    return _pointRadial.default;
  }
});
Object.defineProperty(exports, "linkHorizontal", {
  enumerable: true,
  get: function () {
    return _index.linkHorizontal;
  }
});
Object.defineProperty(exports, "linkVertical", {
  enumerable: true,
  get: function () {
    return _index.linkVertical;
  }
});
Object.defineProperty(exports, "linkRadial", {
  enumerable: true,
  get: function () {
    return _index.linkRadial;
  }
});
Object.defineProperty(exports, "symbol", {
  enumerable: true,
  get: function () {
    return _symbol.default;
  }
});
Object.defineProperty(exports, "symbols", {
  enumerable: true,
  get: function () {
    return _symbol.symbols;
  }
});
Object.defineProperty(exports, "symbolCircle", {
  enumerable: true,
  get: function () {
    return _circle.default;
  }
});
Object.defineProperty(exports, "symbolCross", {
  enumerable: true,
  get: function () {
    return _cross.default;
  }
});
Object.defineProperty(exports, "symbolDiamond", {
  enumerable: true,
  get: function () {
    return _diamond.default;
  }
});
Object.defineProperty(exports, "symbolSquare", {
  enumerable: true,
  get: function () {
    return _square.default;
  }
});
Object.defineProperty(exports, "symbolStar", {
  enumerable: true,
  get: function () {
    return _star.default;
  }
});
Object.defineProperty(exports, "symbolTriangle", {
  enumerable: true,
  get: function () {
    return _triangle.default;
  }
});
Object.defineProperty(exports, "symbolWye", {
  enumerable: true,
  get: function () {
    return _wye.default;
  }
});
Object.defineProperty(exports, "curveBasisClosed", {
  enumerable: true,
  get: function () {
    return _basisClosed.default;
  }
});
Object.defineProperty(exports, "curveBasisOpen", {
  enumerable: true,
  get: function () {
    return _basisOpen.default;
  }
});
Object.defineProperty(exports, "curveBasis", {
  enumerable: true,
  get: function () {
    return _basis.default;
  }
});
Object.defineProperty(exports, "curveBundle", {
  enumerable: true,
  get: function () {
    return _bundle.default;
  }
});
Object.defineProperty(exports, "curveCardinalClosed", {
  enumerable: true,
  get: function () {
    return _cardinalClosed.default;
  }
});
Object.defineProperty(exports, "curveCardinalOpen", {
  enumerable: true,
  get: function () {
    return _cardinalOpen.default;
  }
});
Object.defineProperty(exports, "curveCardinal", {
  enumerable: true,
  get: function () {
    return _cardinal.default;
  }
});
Object.defineProperty(exports, "curveCatmullRomClosed", {
  enumerable: true,
  get: function () {
    return _catmullRomClosed.default;
  }
});
Object.defineProperty(exports, "curveCatmullRomOpen", {
  enumerable: true,
  get: function () {
    return _catmullRomOpen.default;
  }
});
Object.defineProperty(exports, "curveCatmullRom", {
  enumerable: true,
  get: function () {
    return _catmullRom.default;
  }
});
Object.defineProperty(exports, "curveLinearClosed", {
  enumerable: true,
  get: function () {
    return _linearClosed.default;
  }
});
Object.defineProperty(exports, "curveLinear", {
  enumerable: true,
  get: function () {
    return _linear.default;
  }
});
Object.defineProperty(exports, "curveMonotoneX", {
  enumerable: true,
  get: function () {
    return _monotone.monotoneX;
  }
});
Object.defineProperty(exports, "curveMonotoneY", {
  enumerable: true,
  get: function () {
    return _monotone.monotoneY;
  }
});
Object.defineProperty(exports, "curveNatural", {
  enumerable: true,
  get: function () {
    return _natural.default;
  }
});
Object.defineProperty(exports, "curveStep", {
  enumerable: true,
  get: function () {
    return _step.default;
  }
});
Object.defineProperty(exports, "curveStepAfter", {
  enumerable: true,
  get: function () {
    return _step.stepAfter;
  }
});
Object.defineProperty(exports, "curveStepBefore", {
  enumerable: true,
  get: function () {
    return _step.stepBefore;
  }
});
Object.defineProperty(exports, "stack", {
  enumerable: true,
  get: function () {
    return _stack.default;
  }
});
Object.defineProperty(exports, "stackOffsetExpand", {
  enumerable: true,
  get: function () {
    return _expand.default;
  }
});
Object.defineProperty(exports, "stackOffsetDiverging", {
  enumerable: true,
  get: function () {
    return _diverging.default;
  }
});
Object.defineProperty(exports, "stackOffsetNone", {
  enumerable: true,
  get: function () {
    return _none.default;
  }
});
Object.defineProperty(exports, "stackOffsetSilhouette", {
  enumerable: true,
  get: function () {
    return _silhouette.default;
  }
});
Object.defineProperty(exports, "stackOffsetWiggle", {
  enumerable: true,
  get: function () {
    return _wiggle.default;
  }
});
Object.defineProperty(exports, "stackOrderAppearance", {
  enumerable: true,
  get: function () {
    return _appearance.default;
  }
});
Object.defineProperty(exports, "stackOrderAscending", {
  enumerable: true,
  get: function () {
    return _ascending.default;
  }
});
Object.defineProperty(exports, "stackOrderDescending", {
  enumerable: true,
  get: function () {
    return _descending.default;
  }
});
Object.defineProperty(exports, "stackOrderInsideOut", {
  enumerable: true,
  get: function () {
    return _insideOut.default;
  }
});
Object.defineProperty(exports, "stackOrderNone", {
  enumerable: true,
  get: function () {
    return _none2.default;
  }
});
Object.defineProperty(exports, "stackOrderReverse", {
  enumerable: true,
  get: function () {
    return _reverse.default;
  }
});

var _arc = _interopRequireDefault(require("./arc"));

var _area = _interopRequireDefault(require("./area"));

var _line = _interopRequireDefault(require("./line"));

var _pie = _interopRequireDefault(require("./pie"));

var _areaRadial = _interopRequireDefault(require("./areaRadial"));

var _lineRadial = _interopRequireDefault(require("./lineRadial"));

var _pointRadial = _interopRequireDefault(require("./pointRadial"));

var _index = require("./link/index");

var _symbol = _interopRequireWildcard(require("./symbol"));

var _circle = _interopRequireDefault(require("./symbol/circle"));

var _cross = _interopRequireDefault(require("./symbol/cross"));

var _diamond = _interopRequireDefault(require("./symbol/diamond"));

var _square = _interopRequireDefault(require("./symbol/square"));

var _star = _interopRequireDefault(require("./symbol/star"));

var _triangle = _interopRequireDefault(require("./symbol/triangle"));

var _wye = _interopRequireDefault(require("./symbol/wye"));

var _basisClosed = _interopRequireDefault(require("./curve/basisClosed"));

var _basisOpen = _interopRequireDefault(require("./curve/basisOpen"));

var _basis = _interopRequireDefault(require("./curve/basis"));

var _bundle = _interopRequireDefault(require("./curve/bundle"));

var _cardinalClosed = _interopRequireDefault(require("./curve/cardinalClosed"));

var _cardinalOpen = _interopRequireDefault(require("./curve/cardinalOpen"));

var _cardinal = _interopRequireDefault(require("./curve/cardinal"));

var _catmullRomClosed = _interopRequireDefault(require("./curve/catmullRomClosed"));

var _catmullRomOpen = _interopRequireDefault(require("./curve/catmullRomOpen"));

var _catmullRom = _interopRequireDefault(require("./curve/catmullRom"));

var _linearClosed = _interopRequireDefault(require("./curve/linearClosed"));

var _linear = _interopRequireDefault(require("./curve/linear"));

var _monotone = require("./curve/monotone");

var _natural = _interopRequireDefault(require("./curve/natural"));

var _step = _interopRequireWildcard(require("./curve/step"));

var _stack = _interopRequireDefault(require("./stack"));

var _expand = _interopRequireDefault(require("./offset/expand"));

var _diverging = _interopRequireDefault(require("./offset/diverging"));

var _none = _interopRequireDefault(require("./offset/none"));

var _silhouette = _interopRequireDefault(require("./offset/silhouette"));

var _wiggle = _interopRequireDefault(require("./offset/wiggle"));

var _appearance = _interopRequireDefault(require("./order/appearance"));

var _ascending = _interopRequireDefault(require("./order/ascending"));

var _descending = _interopRequireDefault(require("./order/descending"));

var _insideOut = _interopRequireDefault(require("./order/insideOut"));

var _none2 = _interopRequireDefault(require("./order/none"));

var _reverse = _interopRequireDefault(require("./order/reverse"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./arc":"../node_modules/d3-shape/src/arc.js","./area":"../node_modules/d3-shape/src/area.js","./line":"../node_modules/d3-shape/src/line.js","./pie":"../node_modules/d3-shape/src/pie.js","./areaRadial":"../node_modules/d3-shape/src/areaRadial.js","./lineRadial":"../node_modules/d3-shape/src/lineRadial.js","./pointRadial":"../node_modules/d3-shape/src/pointRadial.js","./link/index":"../node_modules/d3-shape/src/link/index.js","./symbol":"../node_modules/d3-shape/src/symbol.js","./symbol/circle":"../node_modules/d3-shape/src/symbol/circle.js","./symbol/cross":"../node_modules/d3-shape/src/symbol/cross.js","./symbol/diamond":"../node_modules/d3-shape/src/symbol/diamond.js","./symbol/square":"../node_modules/d3-shape/src/symbol/square.js","./symbol/star":"../node_modules/d3-shape/src/symbol/star.js","./symbol/triangle":"../node_modules/d3-shape/src/symbol/triangle.js","./symbol/wye":"../node_modules/d3-shape/src/symbol/wye.js","./curve/basisClosed":"../node_modules/d3-shape/src/curve/basisClosed.js","./curve/basisOpen":"../node_modules/d3-shape/src/curve/basisOpen.js","./curve/basis":"../node_modules/d3-shape/src/curve/basis.js","./curve/bundle":"../node_modules/d3-shape/src/curve/bundle.js","./curve/cardinalClosed":"../node_modules/d3-shape/src/curve/cardinalClosed.js","./curve/cardinalOpen":"../node_modules/d3-shape/src/curve/cardinalOpen.js","./curve/cardinal":"../node_modules/d3-shape/src/curve/cardinal.js","./curve/catmullRomClosed":"../node_modules/d3-shape/src/curve/catmullRomClosed.js","./curve/catmullRomOpen":"../node_modules/d3-shape/src/curve/catmullRomOpen.js","./curve/catmullRom":"../node_modules/d3-shape/src/curve/catmullRom.js","./curve/linearClosed":"../node_modules/d3-shape/src/curve/linearClosed.js","./curve/linear":"../node_modules/d3-shape/src/curve/linear.js","./curve/monotone":"../node_modules/d3-shape/src/curve/monotone.js","./curve/natural":"../node_modules/d3-shape/src/curve/natural.js","./curve/step":"../node_modules/d3-shape/src/curve/step.js","./stack":"../node_modules/d3-shape/src/stack.js","./offset/expand":"../node_modules/d3-shape/src/offset/expand.js","./offset/diverging":"../node_modules/d3-shape/src/offset/diverging.js","./offset/none":"../node_modules/d3-shape/src/offset/none.js","./offset/silhouette":"../node_modules/d3-shape/src/offset/silhouette.js","./offset/wiggle":"../node_modules/d3-shape/src/offset/wiggle.js","./order/appearance":"../node_modules/d3-shape/src/order/appearance.js","./order/ascending":"../node_modules/d3-shape/src/order/ascending.js","./order/descending":"../node_modules/d3-shape/src/order/descending.js","./order/insideOut":"../node_modules/d3-shape/src/order/insideOut.js","./order/none":"../node_modules/d3-shape/src/order/none.js","./order/reverse":"../node_modules/d3-shape/src/order/reverse.js"}],"../node_modules/d3-voronoi/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"../node_modules/d3-voronoi/src/point.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.x = x;
exports.y = y;

function x(d) {
  return d[0];
}

function y(d) {
  return d[1];
}
},{}],"../node_modules/d3-voronoi/src/RedBlackTree.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RedBlackNode = RedBlackNode;
exports.default = void 0;

function RedBlackTree() {
  this._ = null; // root node
}

function RedBlackNode(node) {
  node.U = // parent node
  node.C = // color - true for red, false for black
  node.L = // left node
  node.R = // right node
  node.P = // previous node
  node.N = null; // next node
}

RedBlackTree.prototype = {
  constructor: RedBlackTree,
  insert: function (after, node) {
    var parent, grandpa, uncle;

    if (after) {
      node.P = after;
      node.N = after.N;
      if (after.N) after.N.P = node;
      after.N = node;

      if (after.R) {
        after = after.R;

        while (after.L) after = after.L;

        after.L = node;
      } else {
        after.R = node;
      }

      parent = after;
    } else if (this._) {
      after = RedBlackFirst(this._);
      node.P = null;
      node.N = after;
      after.P = after.L = node;
      parent = after;
    } else {
      node.P = node.N = null;
      this._ = node;
      parent = null;
    }

    node.L = node.R = null;
    node.U = parent;
    node.C = true;
    after = node;

    while (parent && parent.C) {
      grandpa = parent.U;

      if (parent === grandpa.L) {
        uncle = grandpa.R;

        if (uncle && uncle.C) {
          parent.C = uncle.C = false;
          grandpa.C = true;
          after = grandpa;
        } else {
          if (after === parent.R) {
            RedBlackRotateLeft(this, parent);
            after = parent;
            parent = after.U;
          }

          parent.C = false;
          grandpa.C = true;
          RedBlackRotateRight(this, grandpa);
        }
      } else {
        uncle = grandpa.L;

        if (uncle && uncle.C) {
          parent.C = uncle.C = false;
          grandpa.C = true;
          after = grandpa;
        } else {
          if (after === parent.L) {
            RedBlackRotateRight(this, parent);
            after = parent;
            parent = after.U;
          }

          parent.C = false;
          grandpa.C = true;
          RedBlackRotateLeft(this, grandpa);
        }
      }

      parent = after.U;
    }

    this._.C = false;
  },
  remove: function (node) {
    if (node.N) node.N.P = node.P;
    if (node.P) node.P.N = node.N;
    node.N = node.P = null;
    var parent = node.U,
        sibling,
        left = node.L,
        right = node.R,
        next,
        red;
    if (!left) next = right;else if (!right) next = left;else next = RedBlackFirst(right);

    if (parent) {
      if (parent.L === node) parent.L = next;else parent.R = next;
    } else {
      this._ = next;
    }

    if (left && right) {
      red = next.C;
      next.C = node.C;
      next.L = left;
      left.U = next;

      if (next !== right) {
        parent = next.U;
        next.U = node.U;
        node = next.R;
        parent.L = node;
        next.R = right;
        right.U = next;
      } else {
        next.U = parent;
        parent = next;
        node = next.R;
      }
    } else {
      red = node.C;
      node = next;
    }

    if (node) node.U = parent;
    if (red) return;

    if (node && node.C) {
      node.C = false;
      return;
    }

    do {
      if (node === this._) break;

      if (node === parent.L) {
        sibling = parent.R;

        if (sibling.C) {
          sibling.C = false;
          parent.C = true;
          RedBlackRotateLeft(this, parent);
          sibling = parent.R;
        }

        if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
          if (!sibling.R || !sibling.R.C) {
            sibling.L.C = false;
            sibling.C = true;
            RedBlackRotateRight(this, sibling);
            sibling = parent.R;
          }

          sibling.C = parent.C;
          parent.C = sibling.R.C = false;
          RedBlackRotateLeft(this, parent);
          node = this._;
          break;
        }
      } else {
        sibling = parent.L;

        if (sibling.C) {
          sibling.C = false;
          parent.C = true;
          RedBlackRotateRight(this, parent);
          sibling = parent.L;
        }

        if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
          if (!sibling.L || !sibling.L.C) {
            sibling.R.C = false;
            sibling.C = true;
            RedBlackRotateLeft(this, sibling);
            sibling = parent.L;
          }

          sibling.C = parent.C;
          parent.C = sibling.L.C = false;
          RedBlackRotateRight(this, parent);
          node = this._;
          break;
        }
      }

      sibling.C = true;
      node = parent;
      parent = parent.U;
    } while (!node.C);

    if (node) node.C = false;
  }
};

function RedBlackRotateLeft(tree, node) {
  var p = node,
      q = node.R,
      parent = p.U;

  if (parent) {
    if (parent.L === p) parent.L = q;else parent.R = q;
  } else {
    tree._ = q;
  }

  q.U = parent;
  p.U = q;
  p.R = q.L;
  if (p.R) p.R.U = p;
  q.L = p;
}

function RedBlackRotateRight(tree, node) {
  var p = node,
      q = node.L,
      parent = p.U;

  if (parent) {
    if (parent.L === p) parent.L = q;else parent.R = q;
  } else {
    tree._ = q;
  }

  q.U = parent;
  p.U = q;
  p.L = q.R;
  if (p.L) p.L.U = p;
  q.R = p;
}

function RedBlackFirst(node) {
  while (node.L) node = node.L;

  return node;
}

var _default = RedBlackTree;
exports.default = _default;
},{}],"../node_modules/d3-voronoi/src/Edge.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createEdge = createEdge;
exports.createBorderEdge = createBorderEdge;
exports.setEdgeEnd = setEdgeEnd;
exports.clipEdges = clipEdges;

var _Diagram = require("./Diagram");

function createEdge(left, right, v0, v1) {
  var edge = [null, null],
      index = _Diagram.edges.push(edge) - 1;
  edge.left = left;
  edge.right = right;
  if (v0) setEdgeEnd(edge, left, right, v0);
  if (v1) setEdgeEnd(edge, right, left, v1);

  _Diagram.cells[left.index].halfedges.push(index);

  _Diagram.cells[right.index].halfedges.push(index);

  return edge;
}

function createBorderEdge(left, v0, v1) {
  var edge = [v0, v1];
  edge.left = left;
  return edge;
}

function setEdgeEnd(edge, left, right, vertex) {
  if (!edge[0] && !edge[1]) {
    edge[0] = vertex;
    edge.left = left;
    edge.right = right;
  } else if (edge.left === right) {
    edge[1] = vertex;
  } else {
    edge[0] = vertex;
  }
} // Liang–Barsky line clipping.


function clipEdge(edge, x0, y0, x1, y1) {
  var a = edge[0],
      b = edge[1],
      ax = a[0],
      ay = a[1],
      bx = b[0],
      by = b[1],
      t0 = 0,
      t1 = 1,
      dx = bx - ax,
      dy = by - ay,
      r;
  r = x0 - ax;
  if (!dx && r > 0) return;
  r /= dx;

  if (dx < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dx > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = x1 - ax;
  if (!dx && r < 0) return;
  r /= dx;

  if (dx < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dx > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  r = y0 - ay;
  if (!dy && r > 0) return;
  r /= dy;

  if (dy < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dy > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = y1 - ay;
  if (!dy && r < 0) return;
  r /= dy;

  if (dy < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dy > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  if (!(t0 > 0) && !(t1 < 1)) return true; // TODO Better check?

  if (t0 > 0) edge[0] = [ax + t0 * dx, ay + t0 * dy];
  if (t1 < 1) edge[1] = [ax + t1 * dx, ay + t1 * dy];
  return true;
}

function connectEdge(edge, x0, y0, x1, y1) {
  var v1 = edge[1];
  if (v1) return true;
  var v0 = edge[0],
      left = edge.left,
      right = edge.right,
      lx = left[0],
      ly = left[1],
      rx = right[0],
      ry = right[1],
      fx = (lx + rx) / 2,
      fy = (ly + ry) / 2,
      fm,
      fb;

  if (ry === ly) {
    if (fx < x0 || fx >= x1) return;

    if (lx > rx) {
      if (!v0) v0 = [fx, y0];else if (v0[1] >= y1) return;
      v1 = [fx, y1];
    } else {
      if (!v0) v0 = [fx, y1];else if (v0[1] < y0) return;
      v1 = [fx, y0];
    }
  } else {
    fm = (lx - rx) / (ry - ly);
    fb = fy - fm * fx;

    if (fm < -1 || fm > 1) {
      if (lx > rx) {
        if (!v0) v0 = [(y0 - fb) / fm, y0];else if (v0[1] >= y1) return;
        v1 = [(y1 - fb) / fm, y1];
      } else {
        if (!v0) v0 = [(y1 - fb) / fm, y1];else if (v0[1] < y0) return;
        v1 = [(y0 - fb) / fm, y0];
      }
    } else {
      if (ly < ry) {
        if (!v0) v0 = [x0, fm * x0 + fb];else if (v0[0] >= x1) return;
        v1 = [x1, fm * x1 + fb];
      } else {
        if (!v0) v0 = [x1, fm * x1 + fb];else if (v0[0] < x0) return;
        v1 = [x0, fm * x0 + fb];
      }
    }
  }

  edge[0] = v0;
  edge[1] = v1;
  return true;
}

function clipEdges(x0, y0, x1, y1) {
  var i = _Diagram.edges.length,
      edge;

  while (i--) {
    if (!connectEdge(edge = _Diagram.edges[i], x0, y0, x1, y1) || !clipEdge(edge, x0, y0, x1, y1) || !(Math.abs(edge[0][0] - edge[1][0]) > _Diagram.epsilon || Math.abs(edge[0][1] - edge[1][1]) > _Diagram.epsilon)) {
      delete _Diagram.edges[i];
    }
  }
}
},{"./Diagram":"../node_modules/d3-voronoi/src/Diagram.js"}],"../node_modules/d3-voronoi/src/Cell.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createCell = createCell;
exports.cellHalfedgeStart = cellHalfedgeStart;
exports.cellHalfedgeEnd = cellHalfedgeEnd;
exports.sortCellHalfedges = sortCellHalfedges;
exports.clipCells = clipCells;

var _Edge = require("./Edge");

var _Diagram = require("./Diagram");

function createCell(site) {
  return _Diagram.cells[site.index] = {
    site: site,
    halfedges: []
  };
}

function cellHalfedgeAngle(cell, edge) {
  var site = cell.site,
      va = edge.left,
      vb = edge.right;
  if (site === vb) vb = va, va = site;
  if (vb) return Math.atan2(vb[1] - va[1], vb[0] - va[0]);
  if (site === va) va = edge[1], vb = edge[0];else va = edge[0], vb = edge[1];
  return Math.atan2(va[0] - vb[0], vb[1] - va[1]);
}

function cellHalfedgeStart(cell, edge) {
  return edge[+(edge.left !== cell.site)];
}

function cellHalfedgeEnd(cell, edge) {
  return edge[+(edge.left === cell.site)];
}

function sortCellHalfedges() {
  for (var i = 0, n = _Diagram.cells.length, cell, halfedges, j, m; i < n; ++i) {
    if ((cell = _Diagram.cells[i]) && (m = (halfedges = cell.halfedges).length)) {
      var index = new Array(m),
          array = new Array(m);

      for (j = 0; j < m; ++j) index[j] = j, array[j] = cellHalfedgeAngle(cell, _Diagram.edges[halfedges[j]]);

      index.sort(function (i, j) {
        return array[j] - array[i];
      });

      for (j = 0; j < m; ++j) array[j] = halfedges[index[j]];

      for (j = 0; j < m; ++j) halfedges[j] = array[j];
    }
  }
}

function clipCells(x0, y0, x1, y1) {
  var nCells = _Diagram.cells.length,
      iCell,
      cell,
      site,
      iHalfedge,
      halfedges,
      nHalfedges,
      start,
      startX,
      startY,
      end,
      endX,
      endY,
      cover = true;

  for (iCell = 0; iCell < nCells; ++iCell) {
    if (cell = _Diagram.cells[iCell]) {
      site = cell.site;
      halfedges = cell.halfedges;
      iHalfedge = halfedges.length; // Remove any dangling clipped edges.

      while (iHalfedge--) {
        if (!_Diagram.edges[halfedges[iHalfedge]]) {
          halfedges.splice(iHalfedge, 1);
        }
      } // Insert any border edges as necessary.


      iHalfedge = 0, nHalfedges = halfedges.length;

      while (iHalfedge < nHalfedges) {
        end = cellHalfedgeEnd(cell, _Diagram.edges[halfedges[iHalfedge]]), endX = end[0], endY = end[1];
        start = cellHalfedgeStart(cell, _Diagram.edges[halfedges[++iHalfedge % nHalfedges]]), startX = start[0], startY = start[1];

        if (Math.abs(endX - startX) > _Diagram.epsilon || Math.abs(endY - startY) > _Diagram.epsilon) {
          halfedges.splice(iHalfedge, 0, _Diagram.edges.push((0, _Edge.createBorderEdge)(site, end, Math.abs(endX - x0) < _Diagram.epsilon && y1 - endY > _Diagram.epsilon ? [x0, Math.abs(startX - x0) < _Diagram.epsilon ? startY : y1] : Math.abs(endY - y1) < _Diagram.epsilon && x1 - endX > _Diagram.epsilon ? [Math.abs(startY - y1) < _Diagram.epsilon ? startX : x1, y1] : Math.abs(endX - x1) < _Diagram.epsilon && endY - y0 > _Diagram.epsilon ? [x1, Math.abs(startX - x1) < _Diagram.epsilon ? startY : y0] : Math.abs(endY - y0) < _Diagram.epsilon && endX - x0 > _Diagram.epsilon ? [Math.abs(startY - y0) < _Diagram.epsilon ? startX : x0, y0] : null)) - 1);
          ++nHalfedges;
        }
      }

      if (nHalfedges) cover = false;
    }
  } // If there weren’t any edges, have the closest site cover the extent.
  // It doesn’t matter which corner of the extent we measure!


  if (cover) {
    var dx,
        dy,
        d2,
        dc = Infinity;

    for (iCell = 0, cover = null; iCell < nCells; ++iCell) {
      if (cell = _Diagram.cells[iCell]) {
        site = cell.site;
        dx = site[0] - x0;
        dy = site[1] - y0;
        d2 = dx * dx + dy * dy;
        if (d2 < dc) dc = d2, cover = cell;
      }
    }

    if (cover) {
      var v00 = [x0, y0],
          v01 = [x0, y1],
          v11 = [x1, y1],
          v10 = [x1, y0];
      cover.halfedges.push(_Diagram.edges.push((0, _Edge.createBorderEdge)(site = cover.site, v00, v01)) - 1, _Diagram.edges.push((0, _Edge.createBorderEdge)(site, v01, v11)) - 1, _Diagram.edges.push((0, _Edge.createBorderEdge)(site, v11, v10)) - 1, _Diagram.edges.push((0, _Edge.createBorderEdge)(site, v10, v00)) - 1);
    }
  } // Lastly delete any cells with no edges; these were entirely clipped.


  for (iCell = 0; iCell < nCells; ++iCell) {
    if (cell = _Diagram.cells[iCell]) {
      if (!cell.halfedges.length) {
        delete _Diagram.cells[iCell];
      }
    }
  }
}
},{"./Edge":"../node_modules/d3-voronoi/src/Edge.js","./Diagram":"../node_modules/d3-voronoi/src/Diagram.js"}],"../node_modules/d3-voronoi/src/Circle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.attachCircle = attachCircle;
exports.detachCircle = detachCircle;
exports.firstCircle = void 0;

var _RedBlackTree = require("./RedBlackTree");

var _Diagram = require("./Diagram");

var circlePool = [];
var firstCircle;
exports.firstCircle = firstCircle;

function Circle() {
  (0, _RedBlackTree.RedBlackNode)(this);
  this.x = this.y = this.arc = this.site = this.cy = null;
}

function attachCircle(arc) {
  var lArc = arc.P,
      rArc = arc.N;
  if (!lArc || !rArc) return;
  var lSite = lArc.site,
      cSite = arc.site,
      rSite = rArc.site;
  if (lSite === rSite) return;
  var bx = cSite[0],
      by = cSite[1],
      ax = lSite[0] - bx,
      ay = lSite[1] - by,
      cx = rSite[0] - bx,
      cy = rSite[1] - by;
  var d = 2 * (ax * cy - ay * cx);
  if (d >= -_Diagram.epsilon2) return;
  var ha = ax * ax + ay * ay,
      hc = cx * cx + cy * cy,
      x = (cy * ha - ay * hc) / d,
      y = (ax * hc - cx * ha) / d;
  var circle = circlePool.pop() || new Circle();
  circle.arc = arc;
  circle.site = cSite;
  circle.x = x + bx;
  circle.y = (circle.cy = y + by) + Math.sqrt(x * x + y * y); // y bottom

  arc.circle = circle;
  var before = null,
      node = _Diagram.circles._;

  while (node) {
    if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {
      if (node.L) node = node.L;else {
        before = node.P;
        break;
      }
    } else {
      if (node.R) node = node.R;else {
        before = node;
        break;
      }
    }
  }

  _Diagram.circles.insert(before, circle);

  if (!before) exports.firstCircle = firstCircle = circle;
}

function detachCircle(arc) {
  var circle = arc.circle;

  if (circle) {
    if (!circle.P) exports.firstCircle = firstCircle = circle.N;

    _Diagram.circles.remove(circle);

    circlePool.push(circle);
    (0, _RedBlackTree.RedBlackNode)(circle);
    arc.circle = null;
  }
}
},{"./RedBlackTree":"../node_modules/d3-voronoi/src/RedBlackTree.js","./Diagram":"../node_modules/d3-voronoi/src/Diagram.js"}],"../node_modules/d3-voronoi/src/Beach.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.removeBeach = removeBeach;
exports.addBeach = addBeach;

var _RedBlackTree = require("./RedBlackTree");

var _Cell = require("./Cell");

var _Circle = require("./Circle");

var _Edge = require("./Edge");

var _Diagram = require("./Diagram");

var beachPool = [];

function Beach() {
  (0, _RedBlackTree.RedBlackNode)(this);
  this.edge = this.site = this.circle = null;
}

function createBeach(site) {
  var beach = beachPool.pop() || new Beach();
  beach.site = site;
  return beach;
}

function detachBeach(beach) {
  (0, _Circle.detachCircle)(beach);

  _Diagram.beaches.remove(beach);

  beachPool.push(beach);
  (0, _RedBlackTree.RedBlackNode)(beach);
}

function removeBeach(beach) {
  var circle = beach.circle,
      x = circle.x,
      y = circle.cy,
      vertex = [x, y],
      previous = beach.P,
      next = beach.N,
      disappearing = [beach];
  detachBeach(beach);
  var lArc = previous;

  while (lArc.circle && Math.abs(x - lArc.circle.x) < _Diagram.epsilon && Math.abs(y - lArc.circle.cy) < _Diagram.epsilon) {
    previous = lArc.P;
    disappearing.unshift(lArc);
    detachBeach(lArc);
    lArc = previous;
  }

  disappearing.unshift(lArc);
  (0, _Circle.detachCircle)(lArc);
  var rArc = next;

  while (rArc.circle && Math.abs(x - rArc.circle.x) < _Diagram.epsilon && Math.abs(y - rArc.circle.cy) < _Diagram.epsilon) {
    next = rArc.N;
    disappearing.push(rArc);
    detachBeach(rArc);
    rArc = next;
  }

  disappearing.push(rArc);
  (0, _Circle.detachCircle)(rArc);
  var nArcs = disappearing.length,
      iArc;

  for (iArc = 1; iArc < nArcs; ++iArc) {
    rArc = disappearing[iArc];
    lArc = disappearing[iArc - 1];
    (0, _Edge.setEdgeEnd)(rArc.edge, lArc.site, rArc.site, vertex);
  }

  lArc = disappearing[0];
  rArc = disappearing[nArcs - 1];
  rArc.edge = (0, _Edge.createEdge)(lArc.site, rArc.site, null, vertex);
  (0, _Circle.attachCircle)(lArc);
  (0, _Circle.attachCircle)(rArc);
}

function addBeach(site) {
  var x = site[0],
      directrix = site[1],
      lArc,
      rArc,
      dxl,
      dxr,
      node = _Diagram.beaches._;

  while (node) {
    dxl = leftBreakPoint(node, directrix) - x;
    if (dxl > _Diagram.epsilon) node = node.L;else {
      dxr = x - rightBreakPoint(node, directrix);

      if (dxr > _Diagram.epsilon) {
        if (!node.R) {
          lArc = node;
          break;
        }

        node = node.R;
      } else {
        if (dxl > -_Diagram.epsilon) {
          lArc = node.P;
          rArc = node;
        } else if (dxr > -_Diagram.epsilon) {
          lArc = node;
          rArc = node.N;
        } else {
          lArc = rArc = node;
        }

        break;
      }
    }
  }

  (0, _Cell.createCell)(site);
  var newArc = createBeach(site);

  _Diagram.beaches.insert(lArc, newArc);

  if (!lArc && !rArc) return;

  if (lArc === rArc) {
    (0, _Circle.detachCircle)(lArc);
    rArc = createBeach(lArc.site);

    _Diagram.beaches.insert(newArc, rArc);

    newArc.edge = rArc.edge = (0, _Edge.createEdge)(lArc.site, newArc.site);
    (0, _Circle.attachCircle)(lArc);
    (0, _Circle.attachCircle)(rArc);
    return;
  }

  if (!rArc) {
    // && lArc
    newArc.edge = (0, _Edge.createEdge)(lArc.site, newArc.site);
    return;
  } // else lArc !== rArc


  (0, _Circle.detachCircle)(lArc);
  (0, _Circle.detachCircle)(rArc);
  var lSite = lArc.site,
      ax = lSite[0],
      ay = lSite[1],
      bx = site[0] - ax,
      by = site[1] - ay,
      rSite = rArc.site,
      cx = rSite[0] - ax,
      cy = rSite[1] - ay,
      d = 2 * (bx * cy - by * cx),
      hb = bx * bx + by * by,
      hc = cx * cx + cy * cy,
      vertex = [(cy * hb - by * hc) / d + ax, (bx * hc - cx * hb) / d + ay];
  (0, _Edge.setEdgeEnd)(rArc.edge, lSite, rSite, vertex);
  newArc.edge = (0, _Edge.createEdge)(lSite, site, null, vertex);
  rArc.edge = (0, _Edge.createEdge)(site, rSite, null, vertex);
  (0, _Circle.attachCircle)(lArc);
  (0, _Circle.attachCircle)(rArc);
}

function leftBreakPoint(arc, directrix) {
  var site = arc.site,
      rfocx = site[0],
      rfocy = site[1],
      pby2 = rfocy - directrix;
  if (!pby2) return rfocx;
  var lArc = arc.P;
  if (!lArc) return -Infinity;
  site = lArc.site;
  var lfocx = site[0],
      lfocy = site[1],
      plby2 = lfocy - directrix;
  if (!plby2) return lfocx;
  var hl = lfocx - rfocx,
      aby2 = 1 / pby2 - 1 / plby2,
      b = hl / plby2;
  if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;
  return (rfocx + lfocx) / 2;
}

function rightBreakPoint(arc, directrix) {
  var rArc = arc.N;
  if (rArc) return leftBreakPoint(rArc, directrix);
  var site = arc.site;
  return site[1] === directrix ? site[0] : Infinity;
}
},{"./RedBlackTree":"../node_modules/d3-voronoi/src/RedBlackTree.js","./Cell":"../node_modules/d3-voronoi/src/Cell.js","./Circle":"../node_modules/d3-voronoi/src/Circle.js","./Edge":"../node_modules/d3-voronoi/src/Edge.js","./Diagram":"../node_modules/d3-voronoi/src/Diagram.js"}],"../node_modules/d3-voronoi/src/Diagram.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Diagram;
exports.edges = exports.circles = exports.cells = exports.beaches = exports.epsilon2 = exports.epsilon = void 0;

var _Beach = require("./Beach");

var _Cell = require("./Cell");

var _Circle = require("./Circle");

var _Edge = require("./Edge");

var _RedBlackTree = _interopRequireDefault(require("./RedBlackTree"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var epsilon = 1e-6;
exports.epsilon = epsilon;
var epsilon2 = 1e-12;
exports.epsilon2 = epsilon2;
var beaches;
exports.beaches = beaches;
var cells;
exports.cells = cells;
var circles;
exports.circles = circles;
var edges;
exports.edges = edges;

function triangleArea(a, b, c) {
  return (a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]);
}

function lexicographic(a, b) {
  return b[1] - a[1] || b[0] - a[0];
}

function Diagram(sites, extent) {
  var site = sites.sort(lexicographic).pop(),
      x,
      y,
      circle;
  exports.edges = edges = [];
  exports.cells = cells = new Array(sites.length);
  exports.beaches = beaches = new _RedBlackTree.default();
  exports.circles = circles = new _RedBlackTree.default();

  while (true) {
    circle = _Circle.firstCircle;

    if (site && (!circle || site[1] < circle.y || site[1] === circle.y && site[0] < circle.x)) {
      if (site[0] !== x || site[1] !== y) {
        (0, _Beach.addBeach)(site);
        x = site[0], y = site[1];
      }

      site = sites.pop();
    } else if (circle) {
      (0, _Beach.removeBeach)(circle.arc);
    } else {
      break;
    }
  }

  (0, _Cell.sortCellHalfedges)();

  if (extent) {
    var x0 = +extent[0][0],
        y0 = +extent[0][1],
        x1 = +extent[1][0],
        y1 = +extent[1][1];
    (0, _Edge.clipEdges)(x0, y0, x1, y1);
    (0, _Cell.clipCells)(x0, y0, x1, y1);
  }

  this.edges = edges;
  this.cells = cells;
  exports.beaches = beaches = exports.circles = circles = exports.edges = edges = exports.cells = cells = null;
}

Diagram.prototype = {
  constructor: Diagram,
  polygons: function () {
    var edges = this.edges;
    return this.cells.map(function (cell) {
      var polygon = cell.halfedges.map(function (i) {
        return (0, _Cell.cellHalfedgeStart)(cell, edges[i]);
      });
      polygon.data = cell.site.data;
      return polygon;
    });
  },
  triangles: function () {
    var triangles = [],
        edges = this.edges;
    this.cells.forEach(function (cell, i) {
      if (!(m = (halfedges = cell.halfedges).length)) return;
      var site = cell.site,
          halfedges,
          j = -1,
          m,
          s0,
          e1 = edges[halfedges[m - 1]],
          s1 = e1.left === site ? e1.right : e1.left;

      while (++j < m) {
        s0 = s1;
        e1 = edges[halfedges[j]];
        s1 = e1.left === site ? e1.right : e1.left;

        if (s0 && s1 && i < s0.index && i < s1.index && triangleArea(site, s0, s1) < 0) {
          triangles.push([site.data, s0.data, s1.data]);
        }
      }
    });
    return triangles;
  },
  links: function () {
    return this.edges.filter(function (edge) {
      return edge.right;
    }).map(function (edge) {
      return {
        source: edge.left.data,
        target: edge.right.data
      };
    });
  },
  find: function (x, y, radius) {
    var that = this,
        i0,
        i1 = that._found || 0,
        n = that.cells.length,
        cell; // Use the previously-found cell, or start with an arbitrary one.

    while (!(cell = that.cells[i1])) if (++i1 >= n) return null;

    var dx = x - cell.site[0],
        dy = y - cell.site[1],
        d2 = dx * dx + dy * dy; // Traverse the half-edges to find a closer cell, if any.

    do {
      cell = that.cells[i0 = i1], i1 = null;
      cell.halfedges.forEach(function (e) {
        var edge = that.edges[e],
            v = edge.left;
        if ((v === cell.site || !v) && !(v = edge.right)) return;
        var vx = x - v[0],
            vy = y - v[1],
            v2 = vx * vx + vy * vy;
        if (v2 < d2) d2 = v2, i1 = v.index;
      });
    } while (i1 !== null);

    that._found = i0;
    return radius == null || d2 <= radius * radius ? cell.site : null;
  }
};
},{"./Beach":"../node_modules/d3-voronoi/src/Beach.js","./Cell":"../node_modules/d3-voronoi/src/Cell.js","./Circle":"../node_modules/d3-voronoi/src/Circle.js","./Edge":"../node_modules/d3-voronoi/src/Edge.js","./RedBlackTree":"../node_modules/d3-voronoi/src/RedBlackTree.js"}],"../node_modules/d3-voronoi/src/voronoi.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constant = _interopRequireDefault(require("./constant"));

var _point = require("./point");

var _Diagram = _interopRequireWildcard(require("./Diagram"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var x = _point.x,
      y = _point.y,
      extent = null;

  function voronoi(data) {
    return new _Diagram.default(data.map(function (d, i) {
      var s = [Math.round(x(d, i, data) / _Diagram.epsilon) * _Diagram.epsilon, Math.round(y(d, i, data) / _Diagram.epsilon) * _Diagram.epsilon];
      s.index = i;
      s.data = d;
      return s;
    }), extent);
  }

  voronoi.polygons = function (data) {
    return voronoi(data).polygons();
  };

  voronoi.links = function (data) {
    return voronoi(data).links();
  };

  voronoi.triangles = function (data) {
    return voronoi(data).triangles();
  };

  voronoi.x = function (_) {
    return arguments.length ? (x = typeof _ === "function" ? _ : (0, _constant.default)(+_), voronoi) : x;
  };

  voronoi.y = function (_) {
    return arguments.length ? (y = typeof _ === "function" ? _ : (0, _constant.default)(+_), voronoi) : y;
  };

  voronoi.extent = function (_) {
    return arguments.length ? (extent = _ == null ? null : [[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]], voronoi) : extent && [[extent[0][0], extent[0][1]], [extent[1][0], extent[1][1]]];
  };

  voronoi.size = function (_) {
    return arguments.length ? (extent = _ == null ? null : [[0, 0], [+_[0], +_[1]]], voronoi) : extent && [extent[1][0] - extent[0][0], extent[1][1] - extent[0][1]];
  };

  return voronoi;
}
},{"./constant":"../node_modules/d3-voronoi/src/constant.js","./point":"../node_modules/d3-voronoi/src/point.js","./Diagram":"../node_modules/d3-voronoi/src/Diagram.js"}],"../node_modules/d3-voronoi/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "voronoi", {
  enumerable: true,
  get: function () {
    return _voronoi.default;
  }
});

var _voronoi = _interopRequireDefault(require("./voronoi"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./voronoi":"../node_modules/d3-voronoi/src/voronoi.js"}],"../node_modules/d3-zoom/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"../node_modules/d3-zoom/src/event.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ZoomEvent;

function ZoomEvent(target, type, transform) {
  this.target = target;
  this.type = type;
  this.transform = transform;
}
},{}],"../node_modules/d3-zoom/src/transform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Transform = Transform;
exports.default = transform;
exports.identity = void 0;

function Transform(k, x, y) {
  this.k = k;
  this.x = x;
  this.y = y;
}

Transform.prototype = {
  constructor: Transform,
  scale: function (k) {
    return k === 1 ? this : new Transform(this.k * k, this.x, this.y);
  },
  translate: function (x, y) {
    return x === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y);
  },
  apply: function (point) {
    return [point[0] * this.k + this.x, point[1] * this.k + this.y];
  },
  applyX: function (x) {
    return x * this.k + this.x;
  },
  applyY: function (y) {
    return y * this.k + this.y;
  },
  invert: function (location) {
    return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];
  },
  invertX: function (x) {
    return (x - this.x) / this.k;
  },
  invertY: function (y) {
    return (y - this.y) / this.k;
  },
  rescaleX: function (x) {
    return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));
  },
  rescaleY: function (y) {
    return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));
  },
  toString: function () {
    return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
  }
};
var identity = new Transform(1, 0, 0);
exports.identity = identity;
transform.prototype = Transform.prototype;

function transform(node) {
  return node.__zoom || identity;
}
},{}],"../node_modules/d3-zoom/src/noevent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nopropagation = nopropagation;
exports.default = _default;

var _d3Selection = require("d3-selection");

function nopropagation() {
  _d3Selection.event.stopImmediatePropagation();
}

function _default() {
  _d3Selection.event.preventDefault();

  _d3Selection.event.stopImmediatePropagation();
}
},{"d3-selection":"../node_modules/d3-selection/src/index.js"}],"../node_modules/d3-zoom/src/zoom.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Dispatch = require("d3-dispatch");

var _d3Drag = require("d3-drag");

var _d3Interpolate = require("d3-interpolate");

var _d3Selection = require("d3-selection");

var _d3Transition = require("d3-transition");

var _constant = _interopRequireDefault(require("./constant"));

var _event = _interopRequireDefault(require("./event"));

var _transform = require("./transform");

var _noevent = _interopRequireWildcard(require("./noevent"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Ignore right-click, since that should open the context menu.
function defaultFilter() {
  return !_d3Selection.event.button;
}

function defaultExtent() {
  var e = this,
      w,
      h;

  if (e instanceof SVGElement) {
    e = e.ownerSVGElement || e;
    w = e.width.baseVal.value;
    h = e.height.baseVal.value;
  } else {
    w = e.clientWidth;
    h = e.clientHeight;
  }

  return [[0, 0], [w, h]];
}

function defaultTransform() {
  return this.__zoom || _transform.identity;
}

function defaultWheelDelta() {
  return -_d3Selection.event.deltaY * (_d3Selection.event.deltaMode ? 120 : 1) / 500;
}

function defaultTouchable() {
  return "ontouchstart" in this;
}

function defaultConstrain(transform, extent, translateExtent) {
  var dx0 = transform.invertX(extent[0][0]) - translateExtent[0][0],
      dx1 = transform.invertX(extent[1][0]) - translateExtent[1][0],
      dy0 = transform.invertY(extent[0][1]) - translateExtent[0][1],
      dy1 = transform.invertY(extent[1][1]) - translateExtent[1][1];
  return transform.translate(dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1), dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1));
}

function _default() {
  var filter = defaultFilter,
      extent = defaultExtent,
      constrain = defaultConstrain,
      wheelDelta = defaultWheelDelta,
      touchable = defaultTouchable,
      scaleExtent = [0, Infinity],
      translateExtent = [[-Infinity, -Infinity], [Infinity, Infinity]],
      duration = 250,
      interpolate = _d3Interpolate.interpolateZoom,
      gestures = [],
      listeners = (0, _d3Dispatch.dispatch)("start", "zoom", "end"),
      touchstarting,
      touchending,
      touchDelay = 500,
      wheelDelay = 150,
      clickDistance2 = 0;

  function zoom(selection) {
    selection.property("__zoom", defaultTransform).on("wheel.zoom", wheeled).on("mousedown.zoom", mousedowned).on("dblclick.zoom", dblclicked).filter(touchable).on("touchstart.zoom", touchstarted).on("touchmove.zoom", touchmoved).on("touchend.zoom touchcancel.zoom", touchended).style("touch-action", "none").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }

  zoom.transform = function (collection, transform) {
    var selection = collection.selection ? collection.selection() : collection;
    selection.property("__zoom", defaultTransform);

    if (collection !== selection) {
      schedule(collection, transform);
    } else {
      selection.interrupt().each(function () {
        gesture(this, arguments).start().zoom(null, typeof transform === "function" ? transform.apply(this, arguments) : transform).end();
      });
    }
  };

  zoom.scaleBy = function (selection, k) {
    zoom.scaleTo(selection, function () {
      var k0 = this.__zoom.k,
          k1 = typeof k === "function" ? k.apply(this, arguments) : k;
      return k0 * k1;
    });
  };

  zoom.scaleTo = function (selection, k) {
    zoom.transform(selection, function () {
      var e = extent.apply(this, arguments),
          t0 = this.__zoom,
          p0 = centroid(e),
          p1 = t0.invert(p0),
          k1 = typeof k === "function" ? k.apply(this, arguments) : k;
      return constrain(translate(scale(t0, k1), p0, p1), e, translateExtent);
    });
  };

  zoom.translateBy = function (selection, x, y) {
    zoom.transform(selection, function () {
      return constrain(this.__zoom.translate(typeof x === "function" ? x.apply(this, arguments) : x, typeof y === "function" ? y.apply(this, arguments) : y), extent.apply(this, arguments), translateExtent);
    });
  };

  zoom.translateTo = function (selection, x, y) {
    zoom.transform(selection, function () {
      var e = extent.apply(this, arguments),
          t = this.__zoom,
          p = centroid(e);
      return constrain(_transform.identity.translate(p[0], p[1]).scale(t.k).translate(typeof x === "function" ? -x.apply(this, arguments) : -x, typeof y === "function" ? -y.apply(this, arguments) : -y), e, translateExtent);
    });
  };

  function scale(transform, k) {
    k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], k));
    return k === transform.k ? transform : new _transform.Transform(k, transform.x, transform.y);
  }

  function translate(transform, p0, p1) {
    var x = p0[0] - p1[0] * transform.k,
        y = p0[1] - p1[1] * transform.k;
    return x === transform.x && y === transform.y ? transform : new _transform.Transform(transform.k, x, y);
  }

  function centroid(extent) {
    return [(+extent[0][0] + +extent[1][0]) / 2, (+extent[0][1] + +extent[1][1]) / 2];
  }

  function schedule(transition, transform, center) {
    transition.on("start.zoom", function () {
      gesture(this, arguments).start();
    }).on("interrupt.zoom end.zoom", function () {
      gesture(this, arguments).end();
    }).tween("zoom", function () {
      var that = this,
          args = arguments,
          g = gesture(that, args),
          e = extent.apply(that, args),
          p = center || centroid(e),
          w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]),
          a = that.__zoom,
          b = typeof transform === "function" ? transform.apply(that, args) : transform,
          i = interpolate(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));
      return function (t) {
        if (t === 1) t = b; // Avoid rounding error on end.
        else {
            var l = i(t),
                k = w / l[2];
            t = new _transform.Transform(k, p[0] - l[0] * k, p[1] - l[1] * k);
          }
        g.zoom(null, t);
      };
    });
  }

  function gesture(that, args) {
    for (var i = 0, n = gestures.length, g; i < n; ++i) {
      if ((g = gestures[i]).that === that) {
        return g;
      }
    }

    return new Gesture(that, args);
  }

  function Gesture(that, args) {
    this.that = that;
    this.args = args;
    this.index = -1;
    this.active = 0;
    this.extent = extent.apply(that, args);
  }

  Gesture.prototype = {
    start: function () {
      if (++this.active === 1) {
        this.index = gestures.push(this) - 1;
        this.emit("start");
      }

      return this;
    },
    zoom: function (key, transform) {
      if (this.mouse && key !== "mouse") this.mouse[1] = transform.invert(this.mouse[0]);
      if (this.touch0 && key !== "touch") this.touch0[1] = transform.invert(this.touch0[0]);
      if (this.touch1 && key !== "touch") this.touch1[1] = transform.invert(this.touch1[0]);
      this.that.__zoom = transform;
      this.emit("zoom");
      return this;
    },
    end: function () {
      if (--this.active === 0) {
        gestures.splice(this.index, 1);
        this.index = -1;
        this.emit("end");
      }

      return this;
    },
    emit: function (type) {
      (0, _d3Selection.customEvent)(new _event.default(zoom, type, this.that.__zoom), listeners.apply, listeners, [type, this.that, this.args]);
    }
  };

  function wheeled() {
    if (!filter.apply(this, arguments)) return;
    var g = gesture(this, arguments),
        t = this.__zoom,
        k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], t.k * Math.pow(2, wheelDelta.apply(this, arguments)))),
        p = (0, _d3Selection.mouse)(this); // If the mouse is in the same location as before, reuse it.
    // If there were recent wheel events, reset the wheel idle timeout.

    if (g.wheel) {
      if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {
        g.mouse[1] = t.invert(g.mouse[0] = p);
      }

      clearTimeout(g.wheel);
    } // If this wheel event won’t trigger a transform change, ignore it.
    else if (t.k === k) return; // Otherwise, capture the mouse point and location at the start.
      else {
          g.mouse = [p, t.invert(p)];
          (0, _d3Transition.interrupt)(this);
          g.start();
        }

    (0, _noevent.default)();
    g.wheel = setTimeout(wheelidled, wheelDelay);
    g.zoom("mouse", constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent, translateExtent));

    function wheelidled() {
      g.wheel = null;
      g.end();
    }
  }

  function mousedowned() {
    if (touchending || !filter.apply(this, arguments)) return;
    var g = gesture(this, arguments),
        v = (0, _d3Selection.select)(_d3Selection.event.view).on("mousemove.zoom", mousemoved, true).on("mouseup.zoom", mouseupped, true),
        p = (0, _d3Selection.mouse)(this),
        x0 = _d3Selection.event.clientX,
        y0 = _d3Selection.event.clientY;
    (0, _d3Drag.dragDisable)(_d3Selection.event.view);
    (0, _noevent.nopropagation)();
    g.mouse = [p, this.__zoom.invert(p)];
    (0, _d3Transition.interrupt)(this);
    g.start();

    function mousemoved() {
      (0, _noevent.default)();

      if (!g.moved) {
        var dx = _d3Selection.event.clientX - x0,
            dy = _d3Selection.event.clientY - y0;
        g.moved = dx * dx + dy * dy > clickDistance2;
      }

      g.zoom("mouse", constrain(translate(g.that.__zoom, g.mouse[0] = (0, _d3Selection.mouse)(g.that), g.mouse[1]), g.extent, translateExtent));
    }

    function mouseupped() {
      v.on("mousemove.zoom mouseup.zoom", null);
      (0, _d3Drag.dragEnable)(_d3Selection.event.view, g.moved);
      (0, _noevent.default)();
      g.end();
    }
  }

  function dblclicked() {
    if (!filter.apply(this, arguments)) return;
    var t0 = this.__zoom,
        p0 = (0, _d3Selection.mouse)(this),
        p1 = t0.invert(p0),
        k1 = t0.k * (_d3Selection.event.shiftKey ? 0.5 : 2),
        t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, arguments), translateExtent);
    (0, _noevent.default)();
    if (duration > 0) (0, _d3Selection.select)(this).transition().duration(duration).call(schedule, t1, p0);else (0, _d3Selection.select)(this).call(zoom.transform, t1);
  }

  function touchstarted() {
    if (!filter.apply(this, arguments)) return;
    var g = gesture(this, arguments),
        touches = _d3Selection.event.changedTouches,
        started,
        n = touches.length,
        i,
        t,
        p;
    (0, _noevent.nopropagation)();

    for (i = 0; i < n; ++i) {
      t = touches[i], p = (0, _d3Selection.touch)(this, touches, t.identifier);
      p = [p, this.__zoom.invert(p), t.identifier];
      if (!g.touch0) g.touch0 = p, started = true;else if (!g.touch1) g.touch1 = p;
    } // If this is a dbltap, reroute to the (optional) dblclick.zoom handler.


    if (touchstarting) {
      touchstarting = clearTimeout(touchstarting);

      if (!g.touch1) {
        g.end();
        p = (0, _d3Selection.select)(this).on("dblclick.zoom");
        if (p) p.apply(this, arguments);
        return;
      }
    }

    if (started) {
      touchstarting = setTimeout(function () {
        touchstarting = null;
      }, touchDelay);
      (0, _d3Transition.interrupt)(this);
      g.start();
    }
  }

  function touchmoved() {
    var g = gesture(this, arguments),
        touches = _d3Selection.event.changedTouches,
        n = touches.length,
        i,
        t,
        p,
        l;
    (0, _noevent.default)();
    if (touchstarting) touchstarting = clearTimeout(touchstarting);

    for (i = 0; i < n; ++i) {
      t = touches[i], p = (0, _d3Selection.touch)(this, touches, t.identifier);
      if (g.touch0 && g.touch0[2] === t.identifier) g.touch0[0] = p;else if (g.touch1 && g.touch1[2] === t.identifier) g.touch1[0] = p;
    }

    t = g.that.__zoom;

    if (g.touch1) {
      var p0 = g.touch0[0],
          l0 = g.touch0[1],
          p1 = g.touch1[0],
          l1 = g.touch1[1],
          dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp,
          dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;
      t = scale(t, Math.sqrt(dp / dl));
      p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];
      l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];
    } else if (g.touch0) p = g.touch0[0], l = g.touch0[1];else return;

    g.zoom("touch", constrain(translate(t, p, l), g.extent, translateExtent));
  }

  function touchended() {
    var g = gesture(this, arguments),
        touches = _d3Selection.event.changedTouches,
        n = touches.length,
        i,
        t;
    (0, _noevent.nopropagation)();
    if (touchending) clearTimeout(touchending);
    touchending = setTimeout(function () {
      touchending = null;
    }, touchDelay);

    for (i = 0; i < n; ++i) {
      t = touches[i];
      if (g.touch0 && g.touch0[2] === t.identifier) delete g.touch0;else if (g.touch1 && g.touch1[2] === t.identifier) delete g.touch1;
    }

    if (g.touch1 && !g.touch0) g.touch0 = g.touch1, delete g.touch1;
    if (g.touch0) g.touch0[1] = this.__zoom.invert(g.touch0[0]);else g.end();
  }

  zoom.wheelDelta = function (_) {
    return arguments.length ? (wheelDelta = typeof _ === "function" ? _ : (0, _constant.default)(+_), zoom) : wheelDelta;
  };

  zoom.filter = function (_) {
    return arguments.length ? (filter = typeof _ === "function" ? _ : (0, _constant.default)(!!_), zoom) : filter;
  };

  zoom.touchable = function (_) {
    return arguments.length ? (touchable = typeof _ === "function" ? _ : (0, _constant.default)(!!_), zoom) : touchable;
  };

  zoom.extent = function (_) {
    return arguments.length ? (extent = typeof _ === "function" ? _ : (0, _constant.default)([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom) : extent;
  };

  zoom.scaleExtent = function (_) {
    return arguments.length ? (scaleExtent[0] = +_[0], scaleExtent[1] = +_[1], zoom) : [scaleExtent[0], scaleExtent[1]];
  };

  zoom.translateExtent = function (_) {
    return arguments.length ? (translateExtent[0][0] = +_[0][0], translateExtent[1][0] = +_[1][0], translateExtent[0][1] = +_[0][1], translateExtent[1][1] = +_[1][1], zoom) : [[translateExtent[0][0], translateExtent[0][1]], [translateExtent[1][0], translateExtent[1][1]]];
  };

  zoom.constrain = function (_) {
    return arguments.length ? (constrain = _, zoom) : constrain;
  };

  zoom.duration = function (_) {
    return arguments.length ? (duration = +_, zoom) : duration;
  };

  zoom.interpolate = function (_) {
    return arguments.length ? (interpolate = _, zoom) : interpolate;
  };

  zoom.on = function () {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? zoom : value;
  };

  zoom.clickDistance = function (_) {
    return arguments.length ? (clickDistance2 = (_ = +_) * _, zoom) : Math.sqrt(clickDistance2);
  };

  return zoom;
}
},{"d3-dispatch":"../node_modules/d3-dispatch/src/index.js","d3-drag":"../node_modules/d3-drag/src/index.js","d3-interpolate":"../node_modules/d3-interpolate/src/index.js","d3-selection":"../node_modules/d3-selection/src/index.js","d3-transition":"../node_modules/d3-transition/src/index.js","./constant":"../node_modules/d3-zoom/src/constant.js","./event":"../node_modules/d3-zoom/src/event.js","./transform":"../node_modules/d3-zoom/src/transform.js","./noevent":"../node_modules/d3-zoom/src/noevent.js"}],"../node_modules/d3-zoom/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "zoom", {
  enumerable: true,
  get: function () {
    return _zoom.default;
  }
});
Object.defineProperty(exports, "zoomTransform", {
  enumerable: true,
  get: function () {
    return _transform.default;
  }
});
Object.defineProperty(exports, "zoomIdentity", {
  enumerable: true,
  get: function () {
    return _transform.identity;
  }
});

var _zoom = _interopRequireDefault(require("./zoom"));

var _transform = _interopRequireWildcard(require("./transform"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./zoom":"../node_modules/d3-zoom/src/zoom.js","./transform":"../node_modules/d3-zoom/src/transform.js"}],"../node_modules/d3/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  version: true
};
Object.defineProperty(exports, "version", {
  enumerable: true,
  get: function () {
    return _package.version;
  }
});

var _package = require("./dist/package");

var _d3Array = require("d3-array");

Object.keys(_d3Array).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Array[key];
    }
  });
});

var _d3Axis = require("d3-axis");

Object.keys(_d3Axis).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Axis[key];
    }
  });
});

var _d3Brush = require("d3-brush");

Object.keys(_d3Brush).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Brush[key];
    }
  });
});

var _d3Chord = require("d3-chord");

Object.keys(_d3Chord).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Chord[key];
    }
  });
});

var _d3Collection = require("d3-collection");

Object.keys(_d3Collection).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Collection[key];
    }
  });
});

var _d3Color = require("d3-color");

Object.keys(_d3Color).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Color[key];
    }
  });
});

var _d3Contour = require("d3-contour");

Object.keys(_d3Contour).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Contour[key];
    }
  });
});

var _d3Dispatch = require("d3-dispatch");

Object.keys(_d3Dispatch).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Dispatch[key];
    }
  });
});

var _d3Drag = require("d3-drag");

Object.keys(_d3Drag).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Drag[key];
    }
  });
});

var _d3Dsv = require("d3-dsv");

Object.keys(_d3Dsv).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Dsv[key];
    }
  });
});

var _d3Ease = require("d3-ease");

Object.keys(_d3Ease).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Ease[key];
    }
  });
});

var _d3Fetch = require("d3-fetch");

Object.keys(_d3Fetch).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Fetch[key];
    }
  });
});

var _d3Force = require("d3-force");

Object.keys(_d3Force).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Force[key];
    }
  });
});

var _d3Format = require("d3-format");

Object.keys(_d3Format).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Format[key];
    }
  });
});

var _d3Geo = require("d3-geo");

Object.keys(_d3Geo).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Geo[key];
    }
  });
});

var _d3Hierarchy = require("d3-hierarchy");

Object.keys(_d3Hierarchy).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Hierarchy[key];
    }
  });
});

var _d3Interpolate = require("d3-interpolate");

Object.keys(_d3Interpolate).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Interpolate[key];
    }
  });
});

var _d3Path = require("d3-path");

Object.keys(_d3Path).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Path[key];
    }
  });
});

var _d3Polygon = require("d3-polygon");

Object.keys(_d3Polygon).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Polygon[key];
    }
  });
});

var _d3Quadtree = require("d3-quadtree");

Object.keys(_d3Quadtree).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Quadtree[key];
    }
  });
});

var _d3Random = require("d3-random");

Object.keys(_d3Random).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Random[key];
    }
  });
});

var _d3Scale = require("d3-scale");

Object.keys(_d3Scale).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Scale[key];
    }
  });
});

var _d3ScaleChromatic = require("d3-scale-chromatic");

Object.keys(_d3ScaleChromatic).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3ScaleChromatic[key];
    }
  });
});

var _d3Selection = require("d3-selection");

Object.keys(_d3Selection).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Selection[key];
    }
  });
});

var _d3Shape = require("d3-shape");

Object.keys(_d3Shape).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Shape[key];
    }
  });
});

var _d3Time = require("d3-time");

Object.keys(_d3Time).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Time[key];
    }
  });
});

var _d3TimeFormat = require("d3-time-format");

Object.keys(_d3TimeFormat).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3TimeFormat[key];
    }
  });
});

var _d3Timer = require("d3-timer");

Object.keys(_d3Timer).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Timer[key];
    }
  });
});

var _d3Transition = require("d3-transition");

Object.keys(_d3Transition).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Transition[key];
    }
  });
});

var _d3Voronoi = require("d3-voronoi");

Object.keys(_d3Voronoi).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Voronoi[key];
    }
  });
});

var _d3Zoom = require("d3-zoom");

Object.keys(_d3Zoom).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Zoom[key];
    }
  });
});
},{"./dist/package":"../node_modules/d3/dist/package.js","d3-array":"../node_modules/d3-array/src/index.js","d3-axis":"../node_modules/d3-axis/src/index.js","d3-brush":"../node_modules/d3-brush/src/index.js","d3-chord":"../node_modules/d3-chord/src/index.js","d3-collection":"../node_modules/d3-collection/src/index.js","d3-color":"../node_modules/d3-color/src/index.js","d3-contour":"../node_modules/d3-contour/src/index.js","d3-dispatch":"../node_modules/d3-dispatch/src/index.js","d3-drag":"../node_modules/d3-drag/src/index.js","d3-dsv":"../node_modules/d3-dsv/src/index.js","d3-ease":"../node_modules/d3-ease/src/index.js","d3-fetch":"../node_modules/d3-fetch/src/index.js","d3-force":"../node_modules/d3-force/src/index.js","d3-format":"../node_modules/d3-format/src/index.js","d3-geo":"../node_modules/d3-geo/src/index.js","d3-hierarchy":"../node_modules/d3-hierarchy/src/index.js","d3-interpolate":"../node_modules/d3-interpolate/src/index.js","d3-path":"../node_modules/d3-path/src/index.js","d3-polygon":"../node_modules/d3-polygon/src/index.js","d3-quadtree":"../node_modules/d3-quadtree/src/index.js","d3-random":"../node_modules/d3-random/src/index.js","d3-scale":"../node_modules/d3-scale/src/index.js","d3-scale-chromatic":"../node_modules/d3-scale-chromatic/src/index.js","d3-selection":"../node_modules/d3-selection/src/index.js","d3-shape":"../node_modules/d3-shape/src/index.js","d3-time":"../node_modules/d3-time/src/index.js","d3-time-format":"../node_modules/d3-time-format/src/index.js","d3-timer":"../node_modules/d3-timer/src/index.js","d3-transition":"../node_modules/d3-transition/src/index.js","d3-voronoi":"../node_modules/d3-voronoi/src/index.js","d3-zoom":"../node_modules/d3-zoom/src/index.js"}],"../node_modules/topojson/node_modules/topojson-client/src/identity.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return x;
}
},{}],"../node_modules/topojson/node_modules/topojson-client/src/transform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _identity = _interopRequireDefault(require("./identity"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(transform) {
  if (transform == null) return _identity.default;
  var x0,
      y0,
      kx = transform.scale[0],
      ky = transform.scale[1],
      dx = transform.translate[0],
      dy = transform.translate[1];
  return function (input, i) {
    if (!i) x0 = y0 = 0;
    var j = 2,
        n = input.length,
        output = new Array(n);
    output[0] = (x0 += input[0]) * kx + dx;
    output[1] = (y0 += input[1]) * ky + dy;

    while (j < n) output[j] = input[j], ++j;

    return output;
  };
}
},{"./identity":"../node_modules/topojson/node_modules/topojson-client/src/identity.js"}],"../node_modules/topojson/node_modules/topojson-client/src/bbox.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _transform = _interopRequireDefault(require("./transform"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(topology) {
  var t = (0, _transform.default)(topology.transform),
      key,
      x0 = Infinity,
      y0 = x0,
      x1 = -x0,
      y1 = -x0;

  function bboxPoint(p) {
    p = t(p);
    if (p[0] < x0) x0 = p[0];
    if (p[0] > x1) x1 = p[0];
    if (p[1] < y0) y0 = p[1];
    if (p[1] > y1) y1 = p[1];
  }

  function bboxGeometry(o) {
    switch (o.type) {
      case "GeometryCollection":
        o.geometries.forEach(bboxGeometry);
        break;

      case "Point":
        bboxPoint(o.coordinates);
        break;

      case "MultiPoint":
        o.coordinates.forEach(bboxPoint);
        break;
    }
  }

  topology.arcs.forEach(function (arc) {
    var i = -1,
        n = arc.length,
        p;

    while (++i < n) {
      p = t(arc[i], i);
      if (p[0] < x0) x0 = p[0];
      if (p[0] > x1) x1 = p[0];
      if (p[1] < y0) y0 = p[1];
      if (p[1] > y1) y1 = p[1];
    }
  });

  for (key in topology.objects) {
    bboxGeometry(topology.objects[key]);
  }

  return [x0, y0, x1, y1];
}
},{"./transform":"../node_modules/topojson/node_modules/topojson-client/src/transform.js"}],"../node_modules/topojson/node_modules/topojson-client/src/reverse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(array, n) {
  var t,
      j = array.length,
      i = j - n;

  while (i < --j) t = array[i], array[i++] = array[j], array[j] = t;
}
},{}],"../node_modules/topojson/node_modules/topojson-client/src/feature.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.feature = feature;
exports.object = object;

var _reverse = _interopRequireDefault(require("./reverse"));

var _transform = _interopRequireDefault(require("./transform"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(topology, o) {
  return o.type === "GeometryCollection" ? {
    type: "FeatureCollection",
    features: o.geometries.map(function (o) {
      return feature(topology, o);
    })
  } : feature(topology, o);
}

function feature(topology, o) {
  var id = o.id,
      bbox = o.bbox,
      properties = o.properties == null ? {} : o.properties,
      geometry = object(topology, o);
  return id == null && bbox == null ? {
    type: "Feature",
    properties: properties,
    geometry: geometry
  } : bbox == null ? {
    type: "Feature",
    id: id,
    properties: properties,
    geometry: geometry
  } : {
    type: "Feature",
    id: id,
    bbox: bbox,
    properties: properties,
    geometry: geometry
  };
}

function object(topology, o) {
  var transformPoint = (0, _transform.default)(topology.transform),
      arcs = topology.arcs;

  function arc(i, points) {
    if (points.length) points.pop();

    for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k) {
      points.push(transformPoint(a[k], k));
    }

    if (i < 0) (0, _reverse.default)(points, n);
  }

  function point(p) {
    return transformPoint(p);
  }

  function line(arcs) {
    var points = [];

    for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);

    if (points.length < 2) points.push(points[0]); // This should never happen per the specification.

    return points;
  }

  function ring(arcs) {
    var points = line(arcs);

    while (points.length < 4) points.push(points[0]); // This may happen if an arc has only two points.


    return points;
  }

  function polygon(arcs) {
    return arcs.map(ring);
  }

  function geometry(o) {
    var type = o.type,
        coordinates;

    switch (type) {
      case "GeometryCollection":
        return {
          type: type,
          geometries: o.geometries.map(geometry)
        };

      case "Point":
        coordinates = point(o.coordinates);
        break;

      case "MultiPoint":
        coordinates = o.coordinates.map(point);
        break;

      case "LineString":
        coordinates = line(o.arcs);
        break;

      case "MultiLineString":
        coordinates = o.arcs.map(line);
        break;

      case "Polygon":
        coordinates = polygon(o.arcs);
        break;

      case "MultiPolygon":
        coordinates = o.arcs.map(polygon);
        break;

      default:
        return null;
    }

    return {
      type: type,
      coordinates: coordinates
    };
  }

  return geometry(o);
}
},{"./reverse":"../node_modules/topojson/node_modules/topojson-client/src/reverse.js","./transform":"../node_modules/topojson/node_modules/topojson-client/src/transform.js"}],"../node_modules/topojson/node_modules/topojson-client/src/stitch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(topology, arcs) {
  var stitchedArcs = {},
      fragmentByStart = {},
      fragmentByEnd = {},
      fragments = [],
      emptyIndex = -1; // Stitch empty arcs first, since they may be subsumed by other arcs.

  arcs.forEach(function (i, j) {
    var arc = topology.arcs[i < 0 ? ~i : i],
        t;

    if (arc.length < 3 && !arc[1][0] && !arc[1][1]) {
      t = arcs[++emptyIndex], arcs[emptyIndex] = i, arcs[j] = t;
    }
  });
  arcs.forEach(function (i) {
    var e = ends(i),
        start = e[0],
        end = e[1],
        f,
        g;

    if (f = fragmentByEnd[start]) {
      delete fragmentByEnd[f.end];
      f.push(i);
      f.end = end;

      if (g = fragmentByStart[end]) {
        delete fragmentByStart[g.start];
        var fg = g === f ? f : f.concat(g);
        fragmentByStart[fg.start = f.start] = fragmentByEnd[fg.end = g.end] = fg;
      } else {
        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
      }
    } else if (f = fragmentByStart[end]) {
      delete fragmentByStart[f.start];
      f.unshift(i);
      f.start = start;

      if (g = fragmentByEnd[start]) {
        delete fragmentByEnd[g.end];
        var gf = g === f ? f : g.concat(f);
        fragmentByStart[gf.start = g.start] = fragmentByEnd[gf.end = f.end] = gf;
      } else {
        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
      }
    } else {
      f = [i];
      fragmentByStart[f.start = start] = fragmentByEnd[f.end = end] = f;
    }
  });

  function ends(i) {
    var arc = topology.arcs[i < 0 ? ~i : i],
        p0 = arc[0],
        p1;
    if (topology.transform) p1 = [0, 0], arc.forEach(function (dp) {
      p1[0] += dp[0], p1[1] += dp[1];
    });else p1 = arc[arc.length - 1];
    return i < 0 ? [p1, p0] : [p0, p1];
  }

  function flush(fragmentByEnd, fragmentByStart) {
    for (var k in fragmentByEnd) {
      var f = fragmentByEnd[k];
      delete fragmentByStart[f.start];
      delete f.start;
      delete f.end;
      f.forEach(function (i) {
        stitchedArcs[i < 0 ? ~i : i] = 1;
      });
      fragments.push(f);
    }
  }

  flush(fragmentByEnd, fragmentByStart);
  flush(fragmentByStart, fragmentByEnd);
  arcs.forEach(function (i) {
    if (!stitchedArcs[i < 0 ? ~i : i]) fragments.push([i]);
  });
  return fragments;
}
},{}],"../node_modules/topojson/node_modules/topojson-client/src/mesh.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.meshArcs = meshArcs;

var _feature = require("./feature");

var _stitch = _interopRequireDefault(require("./stitch"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(topology) {
  return (0, _feature.object)(topology, meshArcs.apply(this, arguments));
}

function meshArcs(topology, object, filter) {
  var arcs, i, n;
  if (arguments.length > 1) arcs = extractArcs(topology, object, filter);else for (i = 0, arcs = new Array(n = topology.arcs.length); i < n; ++i) arcs[i] = i;
  return {
    type: "MultiLineString",
    arcs: (0, _stitch.default)(topology, arcs)
  };
}

function extractArcs(topology, object, filter) {
  var arcs = [],
      geomsByArc = [],
      geom;

  function extract0(i) {
    var j = i < 0 ? ~i : i;
    (geomsByArc[j] || (geomsByArc[j] = [])).push({
      i: i,
      g: geom
    });
  }

  function extract1(arcs) {
    arcs.forEach(extract0);
  }

  function extract2(arcs) {
    arcs.forEach(extract1);
  }

  function extract3(arcs) {
    arcs.forEach(extract2);
  }

  function geometry(o) {
    switch (geom = o, o.type) {
      case "GeometryCollection":
        o.geometries.forEach(geometry);
        break;

      case "LineString":
        extract1(o.arcs);
        break;

      case "MultiLineString":
      case "Polygon":
        extract2(o.arcs);
        break;

      case "MultiPolygon":
        extract3(o.arcs);
        break;
    }
  }

  geometry(object);
  geomsByArc.forEach(filter == null ? function (geoms) {
    arcs.push(geoms[0].i);
  } : function (geoms) {
    if (filter(geoms[0].g, geoms[geoms.length - 1].g)) arcs.push(geoms[0].i);
  });
  return arcs;
}
},{"./feature":"../node_modules/topojson/node_modules/topojson-client/src/feature.js","./stitch":"../node_modules/topojson/node_modules/topojson-client/src/stitch.js"}],"../node_modules/topojson/node_modules/topojson-client/src/merge.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.mergeArcs = mergeArcs;

var _feature = require("./feature");

var _stitch = _interopRequireDefault(require("./stitch"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function planarRingArea(ring) {
  var i = -1,
      n = ring.length,
      a,
      b = ring[n - 1],
      area = 0;

  while (++i < n) a = b, b = ring[i], area += a[0] * b[1] - a[1] * b[0];

  return Math.abs(area); // Note: doubled area!
}

function _default(topology) {
  return (0, _feature.object)(topology, mergeArcs.apply(this, arguments));
}

function mergeArcs(topology, objects) {
  var polygonsByArc = {},
      polygons = [],
      groups = [];
  objects.forEach(geometry);

  function geometry(o) {
    switch (o.type) {
      case "GeometryCollection":
        o.geometries.forEach(geometry);
        break;

      case "Polygon":
        extract(o.arcs);
        break;

      case "MultiPolygon":
        o.arcs.forEach(extract);
        break;
    }
  }

  function extract(polygon) {
    polygon.forEach(function (ring) {
      ring.forEach(function (arc) {
        (polygonsByArc[arc = arc < 0 ? ~arc : arc] || (polygonsByArc[arc] = [])).push(polygon);
      });
    });
    polygons.push(polygon);
  }

  function area(ring) {
    return planarRingArea((0, _feature.object)(topology, {
      type: "Polygon",
      arcs: [ring]
    }).coordinates[0]);
  }

  polygons.forEach(function (polygon) {
    if (!polygon._) {
      var group = [],
          neighbors = [polygon];
      polygon._ = 1;
      groups.push(group);

      while (polygon = neighbors.pop()) {
        group.push(polygon);
        polygon.forEach(function (ring) {
          ring.forEach(function (arc) {
            polygonsByArc[arc < 0 ? ~arc : arc].forEach(function (polygon) {
              if (!polygon._) {
                polygon._ = 1;
                neighbors.push(polygon);
              }
            });
          });
        });
      }
    }
  });
  polygons.forEach(function (polygon) {
    delete polygon._;
  });
  return {
    type: "MultiPolygon",
    arcs: groups.map(function (polygons) {
      var arcs = [],
          n; // Extract the exterior (unique) arcs.

      polygons.forEach(function (polygon) {
        polygon.forEach(function (ring) {
          ring.forEach(function (arc) {
            if (polygonsByArc[arc < 0 ? ~arc : arc].length < 2) {
              arcs.push(arc);
            }
          });
        });
      }); // Stitch the arcs into one or more rings.

      arcs = (0, _stitch.default)(topology, arcs); // If more than one ring is returned,
      // at most one of these rings can be the exterior;
      // choose the one with the greatest absolute area.

      if ((n = arcs.length) > 1) {
        for (var i = 1, k = area(arcs[0]), ki, t; i < n; ++i) {
          if ((ki = area(arcs[i])) > k) {
            t = arcs[0], arcs[0] = arcs[i], arcs[i] = t, k = ki;
          }
        }
      }

      return arcs;
    })
  };
}
},{"./feature":"../node_modules/topojson/node_modules/topojson-client/src/feature.js","./stitch":"../node_modules/topojson/node_modules/topojson-client/src/stitch.js"}],"../node_modules/topojson/node_modules/topojson-client/src/bisect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, x) {
  var lo = 0,
      hi = a.length;

  while (lo < hi) {
    var mid = lo + hi >>> 1;
    if (a[mid] < x) lo = mid + 1;else hi = mid;
  }

  return lo;
}
},{}],"../node_modules/topojson/node_modules/topojson-client/src/neighbors.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _bisect = _interopRequireDefault(require("./bisect"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(objects) {
  var indexesByArc = {},
      // arc index -> array of object indexes
  neighbors = objects.map(function () {
    return [];
  });

  function line(arcs, i) {
    arcs.forEach(function (a) {
      if (a < 0) a = ~a;
      var o = indexesByArc[a];
      if (o) o.push(i);else indexesByArc[a] = [i];
    });
  }

  function polygon(arcs, i) {
    arcs.forEach(function (arc) {
      line(arc, i);
    });
  }

  function geometry(o, i) {
    if (o.type === "GeometryCollection") o.geometries.forEach(function (o) {
      geometry(o, i);
    });else if (o.type in geometryType) geometryType[o.type](o.arcs, i);
  }

  var geometryType = {
    LineString: line,
    MultiLineString: polygon,
    Polygon: polygon,
    MultiPolygon: function (arcs, i) {
      arcs.forEach(function (arc) {
        polygon(arc, i);
      });
    }
  };
  objects.forEach(geometry);

  for (var i in indexesByArc) {
    for (var indexes = indexesByArc[i], m = indexes.length, j = 0; j < m; ++j) {
      for (var k = j + 1; k < m; ++k) {
        var ij = indexes[j],
            ik = indexes[k],
            n;
        if ((n = neighbors[ij])[i = (0, _bisect.default)(n, ik)] !== ik) n.splice(i, 0, ik);
        if ((n = neighbors[ik])[i = (0, _bisect.default)(n, ij)] !== ij) n.splice(i, 0, ij);
      }
    }
  }

  return neighbors;
}
},{"./bisect":"../node_modules/topojson/node_modules/topojson-client/src/bisect.js"}],"../node_modules/topojson/node_modules/topojson-client/src/untransform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _identity = _interopRequireDefault(require("./identity"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(transform) {
  if (transform == null) return _identity.default;
  var x0,
      y0,
      kx = transform.scale[0],
      ky = transform.scale[1],
      dx = transform.translate[0],
      dy = transform.translate[1];
  return function (input, i) {
    if (!i) x0 = y0 = 0;
    var j = 2,
        n = input.length,
        output = new Array(n),
        x1 = Math.round((input[0] - dx) / kx),
        y1 = Math.round((input[1] - dy) / ky);
    output[0] = x1 - x0, x0 = x1;
    output[1] = y1 - y0, y0 = y1;

    while (j < n) output[j] = input[j], ++j;

    return output;
  };
}
},{"./identity":"../node_modules/topojson/node_modules/topojson-client/src/identity.js"}],"../node_modules/topojson/node_modules/topojson-client/src/quantize.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _bbox = _interopRequireDefault(require("./bbox"));

var _untransform = _interopRequireDefault(require("./untransform"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(topology, transform) {
  if (topology.transform) throw new Error("already quantized");

  if (!transform || !transform.scale) {
    if (!((n = Math.floor(transform)) >= 2)) throw new Error("n must be ≥2");
    box = topology.bbox || (0, _bbox.default)(topology);
    var x0 = box[0],
        y0 = box[1],
        x1 = box[2],
        y1 = box[3],
        n;
    transform = {
      scale: [x1 - x0 ? (x1 - x0) / (n - 1) : 1, y1 - y0 ? (y1 - y0) / (n - 1) : 1],
      translate: [x0, y0]
    };
  } else {
    box = topology.bbox;
  }

  var t = (0, _untransform.default)(transform),
      box,
      key,
      inputs = topology.objects,
      outputs = {};

  function quantizePoint(point) {
    return t(point);
  }

  function quantizeGeometry(input) {
    var output;

    switch (input.type) {
      case "GeometryCollection":
        output = {
          type: "GeometryCollection",
          geometries: input.geometries.map(quantizeGeometry)
        };
        break;

      case "Point":
        output = {
          type: "Point",
          coordinates: quantizePoint(input.coordinates)
        };
        break;

      case "MultiPoint":
        output = {
          type: "MultiPoint",
          coordinates: input.coordinates.map(quantizePoint)
        };
        break;

      default:
        return input;
    }

    if (input.id != null) output.id = input.id;
    if (input.bbox != null) output.bbox = input.bbox;
    if (input.properties != null) output.properties = input.properties;
    return output;
  }

  function quantizeArc(input) {
    var i = 0,
        j = 1,
        n = input.length,
        p,
        output = new Array(n); // pessimistic

    output[0] = t(input[0], 0);

    while (++i < n) if ((p = t(input[i], i))[0] || p[1]) output[j++] = p; // non-coincident points


    if (j === 1) output[j++] = [0, 0]; // an arc must have at least two points

    output.length = j;
    return output;
  }

  for (key in inputs) outputs[key] = quantizeGeometry(inputs[key]);

  return {
    type: "Topology",
    bbox: box,
    transform: transform,
    objects: outputs,
    arcs: topology.arcs.map(quantizeArc)
  };
}
},{"./bbox":"../node_modules/topojson/node_modules/topojson-client/src/bbox.js","./untransform":"../node_modules/topojson/node_modules/topojson-client/src/untransform.js"}],"../node_modules/topojson/node_modules/topojson-client/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "bbox", {
  enumerable: true,
  get: function () {
    return _bbox.default;
  }
});
Object.defineProperty(exports, "feature", {
  enumerable: true,
  get: function () {
    return _feature.default;
  }
});
Object.defineProperty(exports, "mesh", {
  enumerable: true,
  get: function () {
    return _mesh.default;
  }
});
Object.defineProperty(exports, "meshArcs", {
  enumerable: true,
  get: function () {
    return _mesh.meshArcs;
  }
});
Object.defineProperty(exports, "merge", {
  enumerable: true,
  get: function () {
    return _merge.default;
  }
});
Object.defineProperty(exports, "mergeArcs", {
  enumerable: true,
  get: function () {
    return _merge.mergeArcs;
  }
});
Object.defineProperty(exports, "neighbors", {
  enumerable: true,
  get: function () {
    return _neighbors.default;
  }
});
Object.defineProperty(exports, "quantize", {
  enumerable: true,
  get: function () {
    return _quantize.default;
  }
});
Object.defineProperty(exports, "transform", {
  enumerable: true,
  get: function () {
    return _transform.default;
  }
});
Object.defineProperty(exports, "untransform", {
  enumerable: true,
  get: function () {
    return _untransform.default;
  }
});

var _bbox = _interopRequireDefault(require("./src/bbox"));

var _feature = _interopRequireDefault(require("./src/feature"));

var _mesh = _interopRequireWildcard(require("./src/mesh"));

var _merge = _interopRequireWildcard(require("./src/merge"));

var _neighbors = _interopRequireDefault(require("./src/neighbors"));

var _quantize = _interopRequireDefault(require("./src/quantize"));

var _transform = _interopRequireDefault(require("./src/transform"));

var _untransform = _interopRequireDefault(require("./src/untransform"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./src/bbox":"../node_modules/topojson/node_modules/topojson-client/src/bbox.js","./src/feature":"../node_modules/topojson/node_modules/topojson-client/src/feature.js","./src/mesh":"../node_modules/topojson/node_modules/topojson-client/src/mesh.js","./src/merge":"../node_modules/topojson/node_modules/topojson-client/src/merge.js","./src/neighbors":"../node_modules/topojson/node_modules/topojson-client/src/neighbors.js","./src/quantize":"../node_modules/topojson/node_modules/topojson-client/src/quantize.js","./src/transform":"../node_modules/topojson/node_modules/topojson-client/src/transform.js","./src/untransform":"../node_modules/topojson/node_modules/topojson-client/src/untransform.js"}],"../node_modules/topojson/node_modules/topojson-server/src/bounds.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

// Computes the bounding box of the specified hash of GeoJSON objects.
function _default(objects) {
  var x0 = Infinity,
      y0 = Infinity,
      x1 = -Infinity,
      y1 = -Infinity;

  function boundGeometry(geometry) {
    if (geometry != null && boundGeometryType.hasOwnProperty(geometry.type)) boundGeometryType[geometry.type](geometry);
  }

  var boundGeometryType = {
    GeometryCollection: function (o) {
      o.geometries.forEach(boundGeometry);
    },
    Point: function (o) {
      boundPoint(o.coordinates);
    },
    MultiPoint: function (o) {
      o.coordinates.forEach(boundPoint);
    },
    LineString: function (o) {
      boundLine(o.arcs);
    },
    MultiLineString: function (o) {
      o.arcs.forEach(boundLine);
    },
    Polygon: function (o) {
      o.arcs.forEach(boundLine);
    },
    MultiPolygon: function (o) {
      o.arcs.forEach(boundMultiLine);
    }
  };

  function boundPoint(coordinates) {
    var x = coordinates[0],
        y = coordinates[1];
    if (x < x0) x0 = x;
    if (x > x1) x1 = x;
    if (y < y0) y0 = y;
    if (y > y1) y1 = y;
  }

  function boundLine(coordinates) {
    coordinates.forEach(boundPoint);
  }

  function boundMultiLine(coordinates) {
    coordinates.forEach(boundLine);
  }

  for (var key in objects) {
    boundGeometry(objects[key]);
  }

  return x1 >= x0 && y1 >= y0 ? [x0, y0, x1, y1] : undefined;
}
},{}],"../node_modules/topojson/node_modules/topojson-server/src/hash/hashset.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(size, hash, equal, type, empty) {
  if (arguments.length === 3) {
    type = Array;
    empty = null;
  }

  var store = new type(size = 1 << Math.max(4, Math.ceil(Math.log(size) / Math.LN2))),
      mask = size - 1;

  for (var i = 0; i < size; ++i) {
    store[i] = empty;
  }

  function add(value) {
    var index = hash(value) & mask,
        match = store[index],
        collisions = 0;

    while (match != empty) {
      if (equal(match, value)) return true;
      if (++collisions >= size) throw new Error("full hashset");
      match = store[index = index + 1 & mask];
    }

    store[index] = value;
    return true;
  }

  function has(value) {
    var index = hash(value) & mask,
        match = store[index],
        collisions = 0;

    while (match != empty) {
      if (equal(match, value)) return true;
      if (++collisions >= size) break;
      match = store[index = index + 1 & mask];
    }

    return false;
  }

  function values() {
    var values = [];

    for (var i = 0, n = store.length; i < n; ++i) {
      var match = store[i];
      if (match != empty) values.push(match);
    }

    return values;
  }

  return {
    add: add,
    has: has,
    values: values
  };
}
},{}],"../node_modules/topojson/node_modules/topojson-server/src/hash/hashmap.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(size, hash, equal, keyType, keyEmpty, valueType) {
  if (arguments.length === 3) {
    keyType = valueType = Array;
    keyEmpty = null;
  }

  var keystore = new keyType(size = 1 << Math.max(4, Math.ceil(Math.log(size) / Math.LN2))),
      valstore = new valueType(size),
      mask = size - 1;

  for (var i = 0; i < size; ++i) {
    keystore[i] = keyEmpty;
  }

  function set(key, value) {
    var index = hash(key) & mask,
        matchKey = keystore[index],
        collisions = 0;

    while (matchKey != keyEmpty) {
      if (equal(matchKey, key)) return valstore[index] = value;
      if (++collisions >= size) throw new Error("full hashmap");
      matchKey = keystore[index = index + 1 & mask];
    }

    keystore[index] = key;
    valstore[index] = value;
    return value;
  }

  function maybeSet(key, value) {
    var index = hash(key) & mask,
        matchKey = keystore[index],
        collisions = 0;

    while (matchKey != keyEmpty) {
      if (equal(matchKey, key)) return valstore[index];
      if (++collisions >= size) throw new Error("full hashmap");
      matchKey = keystore[index = index + 1 & mask];
    }

    keystore[index] = key;
    valstore[index] = value;
    return value;
  }

  function get(key, missingValue) {
    var index = hash(key) & mask,
        matchKey = keystore[index],
        collisions = 0;

    while (matchKey != keyEmpty) {
      if (equal(matchKey, key)) return valstore[index];
      if (++collisions >= size) break;
      matchKey = keystore[index = index + 1 & mask];
    }

    return missingValue;
  }

  function keys() {
    var keys = [];

    for (var i = 0, n = keystore.length; i < n; ++i) {
      var matchKey = keystore[i];
      if (matchKey != keyEmpty) keys.push(matchKey);
    }

    return keys;
  }

  return {
    set: set,
    maybeSet: maybeSet,
    // set if unset
    get: get,
    keys: keys
  };
}
},{}],"../node_modules/topojson/node_modules/topojson-server/src/hash/point-equal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(pointA, pointB) {
  return pointA[0] === pointB[0] && pointA[1] === pointB[1];
}
},{}],"../node_modules/topojson/node_modules/topojson-server/src/hash/point-hash.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
// TODO if quantized, use simpler Int32 hashing?
var buffer = new ArrayBuffer(16),
    floats = new Float64Array(buffer),
    uints = new Uint32Array(buffer);

function _default(point) {
  floats[0] = point[0];
  floats[1] = point[1];
  var hash = uints[0] ^ uints[1];
  hash = hash << 5 ^ hash >> 7 ^ uints[2] ^ uints[3];
  return hash & 0x7fffffff;
}
},{}],"../node_modules/topojson/node_modules/topojson-server/src/join.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _hashset = _interopRequireDefault(require("./hash/hashset"));

var _hashmap = _interopRequireDefault(require("./hash/hashmap"));

var _pointEqual = _interopRequireDefault(require("./hash/point-equal"));

var _pointHash = _interopRequireDefault(require("./hash/point-hash"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Given an extracted (pre-)topology, identifies all of the junctions. These are
// the points at which arcs (lines or rings) will need to be cut so that each
// arc is represented uniquely.
//
// A junction is a point where at least one arc deviates from another arc going
// through the same point. For example, consider the point B. If there is a arc
// through ABC and another arc through CBA, then B is not a junction because in
// both cases the adjacent point pairs are {A,C}. However, if there is an
// additional arc ABD, then {A,D} != {A,C}, and thus B becomes a junction.
//
// For a closed ring ABCA, the first point A’s adjacent points are the second
// and last point {B,C}. For a line, the first and last point are always
// considered junctions, even if the line is closed; this ensures that a closed
// line is never rotated.
function _default(topology) {
  var coordinates = topology.coordinates,
      lines = topology.lines,
      rings = topology.rings,
      indexes = index(),
      visitedByIndex = new Int32Array(coordinates.length),
      leftByIndex = new Int32Array(coordinates.length),
      rightByIndex = new Int32Array(coordinates.length),
      junctionByIndex = new Int8Array(coordinates.length),
      junctionCount = 0,
      // upper bound on number of junctions
  i,
      n,
      previousIndex,
      currentIndex,
      nextIndex;

  for (i = 0, n = coordinates.length; i < n; ++i) {
    visitedByIndex[i] = leftByIndex[i] = rightByIndex[i] = -1;
  }

  for (i = 0, n = lines.length; i < n; ++i) {
    var line = lines[i],
        lineStart = line[0],
        lineEnd = line[1];
    currentIndex = indexes[lineStart];
    nextIndex = indexes[++lineStart];
    ++junctionCount, junctionByIndex[currentIndex] = 1; // start

    while (++lineStart <= lineEnd) {
      sequence(i, previousIndex = currentIndex, currentIndex = nextIndex, nextIndex = indexes[lineStart]);
    }

    ++junctionCount, junctionByIndex[nextIndex] = 1; // end
  }

  for (i = 0, n = coordinates.length; i < n; ++i) {
    visitedByIndex[i] = -1;
  }

  for (i = 0, n = rings.length; i < n; ++i) {
    var ring = rings[i],
        ringStart = ring[0] + 1,
        ringEnd = ring[1];
    previousIndex = indexes[ringEnd - 1];
    currentIndex = indexes[ringStart - 1];
    nextIndex = indexes[ringStart];
    sequence(i, previousIndex, currentIndex, nextIndex);

    while (++ringStart <= ringEnd) {
      sequence(i, previousIndex = currentIndex, currentIndex = nextIndex, nextIndex = indexes[ringStart]);
    }
  }

  function sequence(i, previousIndex, currentIndex, nextIndex) {
    if (visitedByIndex[currentIndex] === i) return; // ignore self-intersection

    visitedByIndex[currentIndex] = i;
    var leftIndex = leftByIndex[currentIndex];

    if (leftIndex >= 0) {
      var rightIndex = rightByIndex[currentIndex];

      if ((leftIndex !== previousIndex || rightIndex !== nextIndex) && (leftIndex !== nextIndex || rightIndex !== previousIndex)) {
        ++junctionCount, junctionByIndex[currentIndex] = 1;
      }
    } else {
      leftByIndex[currentIndex] = previousIndex;
      rightByIndex[currentIndex] = nextIndex;
    }
  }

  function index() {
    var indexByPoint = (0, _hashmap.default)(coordinates.length * 1.4, hashIndex, equalIndex, Int32Array, -1, Int32Array),
        indexes = new Int32Array(coordinates.length);

    for (var i = 0, n = coordinates.length; i < n; ++i) {
      indexes[i] = indexByPoint.maybeSet(i, i);
    }

    return indexes;
  }

  function hashIndex(i) {
    return (0, _pointHash.default)(coordinates[i]);
  }

  function equalIndex(i, j) {
    return (0, _pointEqual.default)(coordinates[i], coordinates[j]);
  }

  visitedByIndex = leftByIndex = rightByIndex = null;
  var junctionByPoint = (0, _hashset.default)(junctionCount * 1.4, _pointHash.default, _pointEqual.default),
      j; // Convert back to a standard hashset by point for caller convenience.

  for (i = 0, n = coordinates.length; i < n; ++i) {
    if (junctionByIndex[j = indexes[i]]) {
      junctionByPoint.add(coordinates[j]);
    }
  }

  return junctionByPoint;
}
},{"./hash/hashset":"../node_modules/topojson/node_modules/topojson-server/src/hash/hashset.js","./hash/hashmap":"../node_modules/topojson/node_modules/topojson-server/src/hash/hashmap.js","./hash/point-equal":"../node_modules/topojson/node_modules/topojson-server/src/hash/point-equal.js","./hash/point-hash":"../node_modules/topojson/node_modules/topojson-server/src/hash/point-hash.js"}],"../node_modules/topojson/node_modules/topojson-server/src/cut.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _join = _interopRequireDefault(require("./join"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Given an extracted (pre-)topology, cuts (or rotates) arcs so that all shared
// point sequences are identified. The topology can then be subsequently deduped
// to remove exact duplicate arcs.
function _default(topology) {
  var junctions = (0, _join.default)(topology),
      coordinates = topology.coordinates,
      lines = topology.lines,
      rings = topology.rings,
      next,
      i,
      n;

  for (i = 0, n = lines.length; i < n; ++i) {
    var line = lines[i],
        lineMid = line[0],
        lineEnd = line[1];

    while (++lineMid < lineEnd) {
      if (junctions.has(coordinates[lineMid])) {
        next = {
          0: lineMid,
          1: line[1]
        };
        line[1] = lineMid;
        line = line.next = next;
      }
    }
  }

  for (i = 0, n = rings.length; i < n; ++i) {
    var ring = rings[i],
        ringStart = ring[0],
        ringMid = ringStart,
        ringEnd = ring[1],
        ringFixed = junctions.has(coordinates[ringStart]);

    while (++ringMid < ringEnd) {
      if (junctions.has(coordinates[ringMid])) {
        if (ringFixed) {
          next = {
            0: ringMid,
            1: ring[1]
          };
          ring[1] = ringMid;
          ring = ring.next = next;
        } else {
          // For the first junction, we can rotate rather than cut.
          rotateArray(coordinates, ringStart, ringEnd, ringEnd - ringMid);
          coordinates[ringEnd] = coordinates[ringStart];
          ringFixed = true;
          ringMid = ringStart; // restart; we may have skipped junctions
        }
      }
    }
  }

  return topology;
}

function rotateArray(array, start, end, offset) {
  reverse(array, start, end);
  reverse(array, start, start + offset);
  reverse(array, start + offset, end);
}

function reverse(array, start, end) {
  for (var mid = start + (end-- - start >> 1), t; start < mid; ++start, --end) {
    t = array[start], array[start] = array[end], array[end] = t;
  }
}
},{"./join":"../node_modules/topojson/node_modules/topojson-server/src/join.js"}],"../node_modules/topojson/node_modules/topojson-server/src/dedup.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _hashmap = _interopRequireDefault(require("./hash/hashmap"));

var _pointEqual = _interopRequireDefault(require("./hash/point-equal"));

var _pointHash = _interopRequireDefault(require("./hash/point-hash"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Given a cut topology, combines duplicate arcs.
function _default(topology) {
  var coordinates = topology.coordinates,
      lines = topology.lines,
      line,
      rings = topology.rings,
      ring,
      arcCount = lines.length + rings.length,
      i,
      n;
  delete topology.lines;
  delete topology.rings; // Count the number of (non-unique) arcs to initialize the hashmap safely.

  for (i = 0, n = lines.length; i < n; ++i) {
    line = lines[i];

    while (line = line.next) ++arcCount;
  }

  for (i = 0, n = rings.length; i < n; ++i) {
    ring = rings[i];

    while (ring = ring.next) ++arcCount;
  }

  var arcsByEnd = (0, _hashmap.default)(arcCount * 2 * 1.4, _pointHash.default, _pointEqual.default),
      arcs = topology.arcs = [];

  for (i = 0, n = lines.length; i < n; ++i) {
    line = lines[i];

    do {
      dedupLine(line);
    } while (line = line.next);
  }

  for (i = 0, n = rings.length; i < n; ++i) {
    ring = rings[i];

    if (ring.next) {
      // arc is no longer closed
      do {
        dedupLine(ring);
      } while (ring = ring.next);
    } else {
      dedupRing(ring);
    }
  }

  function dedupLine(arc) {
    var startPoint, endPoint, startArcs, startArc, endArcs, endArc, i, n; // Does this arc match an existing arc in order?

    if (startArcs = arcsByEnd.get(startPoint = coordinates[arc[0]])) {
      for (i = 0, n = startArcs.length; i < n; ++i) {
        startArc = startArcs[i];

        if (equalLine(startArc, arc)) {
          arc[0] = startArc[0];
          arc[1] = startArc[1];
          return;
        }
      }
    } // Does this arc match an existing arc in reverse order?


    if (endArcs = arcsByEnd.get(endPoint = coordinates[arc[1]])) {
      for (i = 0, n = endArcs.length; i < n; ++i) {
        endArc = endArcs[i];

        if (reverseEqualLine(endArc, arc)) {
          arc[1] = endArc[0];
          arc[0] = endArc[1];
          return;
        }
      }
    }

    if (startArcs) startArcs.push(arc);else arcsByEnd.set(startPoint, [arc]);
    if (endArcs) endArcs.push(arc);else arcsByEnd.set(endPoint, [arc]);
    arcs.push(arc);
  }

  function dedupRing(arc) {
    var endPoint, endArcs, endArc, i, n; // Does this arc match an existing line in order, or reverse order?
    // Rings are closed, so their start point and end point is the same.

    if (endArcs = arcsByEnd.get(endPoint = coordinates[arc[0]])) {
      for (i = 0, n = endArcs.length; i < n; ++i) {
        endArc = endArcs[i];

        if (equalRing(endArc, arc)) {
          arc[0] = endArc[0];
          arc[1] = endArc[1];
          return;
        }

        if (reverseEqualRing(endArc, arc)) {
          arc[0] = endArc[1];
          arc[1] = endArc[0];
          return;
        }
      }
    } // Otherwise, does this arc match an existing ring in order, or reverse order?


    if (endArcs = arcsByEnd.get(endPoint = coordinates[arc[0] + findMinimumOffset(arc)])) {
      for (i = 0, n = endArcs.length; i < n; ++i) {
        endArc = endArcs[i];

        if (equalRing(endArc, arc)) {
          arc[0] = endArc[0];
          arc[1] = endArc[1];
          return;
        }

        if (reverseEqualRing(endArc, arc)) {
          arc[0] = endArc[1];
          arc[1] = endArc[0];
          return;
        }
      }
    }

    if (endArcs) endArcs.push(arc);else arcsByEnd.set(endPoint, [arc]);
    arcs.push(arc);
  }

  function equalLine(arcA, arcB) {
    var ia = arcA[0],
        ib = arcB[0],
        ja = arcA[1],
        jb = arcB[1];
    if (ia - ja !== ib - jb) return false;

    for (; ia <= ja; ++ia, ++ib) if (!(0, _pointEqual.default)(coordinates[ia], coordinates[ib])) return false;

    return true;
  }

  function reverseEqualLine(arcA, arcB) {
    var ia = arcA[0],
        ib = arcB[0],
        ja = arcA[1],
        jb = arcB[1];
    if (ia - ja !== ib - jb) return false;

    for (; ia <= ja; ++ia, --jb) if (!(0, _pointEqual.default)(coordinates[ia], coordinates[jb])) return false;

    return true;
  }

  function equalRing(arcA, arcB) {
    var ia = arcA[0],
        ib = arcB[0],
        ja = arcA[1],
        jb = arcB[1],
        n = ja - ia;
    if (n !== jb - ib) return false;
    var ka = findMinimumOffset(arcA),
        kb = findMinimumOffset(arcB);

    for (var i = 0; i < n; ++i) {
      if (!(0, _pointEqual.default)(coordinates[ia + (i + ka) % n], coordinates[ib + (i + kb) % n])) return false;
    }

    return true;
  }

  function reverseEqualRing(arcA, arcB) {
    var ia = arcA[0],
        ib = arcB[0],
        ja = arcA[1],
        jb = arcB[1],
        n = ja - ia;
    if (n !== jb - ib) return false;
    var ka = findMinimumOffset(arcA),
        kb = n - findMinimumOffset(arcB);

    for (var i = 0; i < n; ++i) {
      if (!(0, _pointEqual.default)(coordinates[ia + (i + ka) % n], coordinates[jb - (i + kb) % n])) return false;
    }

    return true;
  } // Rings are rotated to a consistent, but arbitrary, start point.
  // This is necessary to detect when a ring and a rotated copy are dupes.


  function findMinimumOffset(arc) {
    var start = arc[0],
        end = arc[1],
        mid = start,
        minimum = mid,
        minimumPoint = coordinates[mid];

    while (++mid < end) {
      var point = coordinates[mid];

      if (point[0] < minimumPoint[0] || point[0] === minimumPoint[0] && point[1] < minimumPoint[1]) {
        minimum = mid;
        minimumPoint = point;
      }
    }

    return minimum - start;
  }

  return topology;
}
},{"./hash/hashmap":"../node_modules/topojson/node_modules/topojson-server/src/hash/hashmap.js","./hash/point-equal":"../node_modules/topojson/node_modules/topojson-server/src/hash/point-equal.js","./hash/point-hash":"../node_modules/topojson/node_modules/topojson-server/src/hash/point-hash.js"}],"../node_modules/topojson/node_modules/topojson-server/src/delta.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

// Given an array of arcs in absolute (but already quantized!) coordinates,
// converts to fixed-point delta encoding.
// This is a destructive operation that modifies the given arcs!
function _default(arcs) {
  var i = -1,
      n = arcs.length;

  while (++i < n) {
    var arc = arcs[i],
        j = 0,
        k = 1,
        m = arc.length,
        point = arc[0],
        x0 = point[0],
        y0 = point[1],
        x1,
        y1;

    while (++j < m) {
      point = arc[j], x1 = point[0], y1 = point[1];
      if (x1 !== x0 || y1 !== y0) arc[k++] = [x1 - x0, y1 - y0], x0 = x1, y0 = y1;
    }

    if (k === 1) arc[k++] = [0, 0]; // Each arc must be an array of two or more positions.

    arc.length = k;
  }

  return arcs;
}
},{}],"../node_modules/topojson/node_modules/topojson-server/src/extract.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

// Extracts the lines and rings from the specified hash of geometry objects.
//
// Returns an object with three properties:
//
// * coordinates - shared buffer of [x, y] coordinates
// * lines - lines extracted from the hash, of the form [start, end]
// * rings - rings extracted from the hash, of the form [start, end]
//
// For each ring or line, start and end represent inclusive indexes into the
// coordinates buffer. For rings (and closed lines), coordinates[start] equals
// coordinates[end].
//
// For each line or polygon geometry in the input hash, including nested
// geometries as in geometry collections, the `coordinates` array is replaced
// with an equivalent `arcs` array that, for each line (for line string
// geometries) or ring (for polygon geometries), points to one of the above
// lines or rings.
function _default(objects) {
  var index = -1,
      lines = [],
      rings = [],
      coordinates = [];

  function extractGeometry(geometry) {
    if (geometry && extractGeometryType.hasOwnProperty(geometry.type)) extractGeometryType[geometry.type](geometry);
  }

  var extractGeometryType = {
    GeometryCollection: function (o) {
      o.geometries.forEach(extractGeometry);
    },
    LineString: function (o) {
      o.arcs = extractLine(o.arcs);
    },
    MultiLineString: function (o) {
      o.arcs = o.arcs.map(extractLine);
    },
    Polygon: function (o) {
      o.arcs = o.arcs.map(extractRing);
    },
    MultiPolygon: function (o) {
      o.arcs = o.arcs.map(extractMultiRing);
    }
  };

  function extractLine(line) {
    for (var i = 0, n = line.length; i < n; ++i) coordinates[++index] = line[i];

    var arc = {
      0: index - n + 1,
      1: index
    };
    lines.push(arc);
    return arc;
  }

  function extractRing(ring) {
    for (var i = 0, n = ring.length; i < n; ++i) coordinates[++index] = ring[i];

    var arc = {
      0: index - n + 1,
      1: index
    };
    rings.push(arc);
    return arc;
  }

  function extractMultiRing(rings) {
    return rings.map(extractRing);
  }

  for (var key in objects) {
    extractGeometry(objects[key]);
  }

  return {
    type: "Topology",
    coordinates: coordinates,
    lines: lines,
    rings: rings,
    objects: objects
  };
}
},{}],"../node_modules/topojson/node_modules/topojson-server/src/geometry.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

// Given a hash of GeoJSON objects, returns a hash of GeoJSON geometry objects.
// Any null input geometry objects are represented as {type: null} in the output.
// Any feature.{id,properties,bbox} are transferred to the output geometry object.
// Each output geometry object is a shallow copy of the input (e.g., properties, coordinates)!
function _default(inputs) {
  var outputs = {},
      key;

  for (key in inputs) outputs[key] = geomifyObject(inputs[key]);

  return outputs;
}

function geomifyObject(input) {
  return input == null ? {
    type: null
  } : (input.type === "FeatureCollection" ? geomifyFeatureCollection : input.type === "Feature" ? geomifyFeature : geomifyGeometry)(input);
}

function geomifyFeatureCollection(input) {
  var output = {
    type: "GeometryCollection",
    geometries: input.features.map(geomifyFeature)
  };
  if (input.bbox != null) output.bbox = input.bbox;
  return output;
}

function geomifyFeature(input) {
  var output = geomifyGeometry(input.geometry),
      key; // eslint-disable-line no-unused-vars

  if (input.id != null) output.id = input.id;
  if (input.bbox != null) output.bbox = input.bbox;

  for (key in input.properties) {
    output.properties = input.properties;
    break;
  }

  return output;
}

function geomifyGeometry(input) {
  if (input == null) return {
    type: null
  };
  var output = input.type === "GeometryCollection" ? {
    type: "GeometryCollection",
    geometries: input.geometries.map(geomifyGeometry)
  } : input.type === "Point" || input.type === "MultiPoint" ? {
    type: input.type,
    coordinates: input.coordinates
  } : {
    type: input.type,
    arcs: input.coordinates
  }; // TODO Check for unknown types?

  if (input.bbox != null) output.bbox = input.bbox;
  return output;
}
},{}],"../node_modules/topojson/node_modules/topojson-server/src/prequantize.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(objects, bbox, n) {
  var x0 = bbox[0],
      y0 = bbox[1],
      x1 = bbox[2],
      y1 = bbox[3],
      kx = x1 - x0 ? (n - 1) / (x1 - x0) : 1,
      ky = y1 - y0 ? (n - 1) / (y1 - y0) : 1;

  function quantizePoint(input) {
    return [Math.round((input[0] - x0) * kx), Math.round((input[1] - y0) * ky)];
  }

  function quantizePoints(input, m) {
    var i = -1,
        j = 0,
        n = input.length,
        output = new Array(n),
        // pessimistic
    pi,
        px,
        py,
        x,
        y;

    while (++i < n) {
      pi = input[i];
      x = Math.round((pi[0] - x0) * kx);
      y = Math.round((pi[1] - y0) * ky);
      if (x !== px || y !== py) output[j++] = [px = x, py = y]; // non-coincident points
    }

    output.length = j;

    while (j < m) j = output.push([output[0][0], output[0][1]]);

    return output;
  }

  function quantizeLine(input) {
    return quantizePoints(input, 2);
  }

  function quantizeRing(input) {
    return quantizePoints(input, 4);
  }

  function quantizePolygon(input) {
    return input.map(quantizeRing);
  }

  function quantizeGeometry(o) {
    if (o != null && quantizeGeometryType.hasOwnProperty(o.type)) quantizeGeometryType[o.type](o);
  }

  var quantizeGeometryType = {
    GeometryCollection: function (o) {
      o.geometries.forEach(quantizeGeometry);
    },
    Point: function (o) {
      o.coordinates = quantizePoint(o.coordinates);
    },
    MultiPoint: function (o) {
      o.coordinates = o.coordinates.map(quantizePoint);
    },
    LineString: function (o) {
      o.arcs = quantizeLine(o.arcs);
    },
    MultiLineString: function (o) {
      o.arcs = o.arcs.map(quantizeLine);
    },
    Polygon: function (o) {
      o.arcs = quantizePolygon(o.arcs);
    },
    MultiPolygon: function (o) {
      o.arcs = o.arcs.map(quantizePolygon);
    }
  };

  for (var key in objects) {
    quantizeGeometry(objects[key]);
  }

  return {
    scale: [1 / kx, 1 / ky],
    translate: [x0, y0]
  };
}
},{}],"../node_modules/topojson/node_modules/topojson-server/src/topology.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _bounds = _interopRequireDefault(require("./bounds"));

var _cut = _interopRequireDefault(require("./cut"));

var _dedup = _interopRequireDefault(require("./dedup"));

var _delta = _interopRequireDefault(require("./delta"));

var _extract = _interopRequireDefault(require("./extract"));

var _geometry = _interopRequireDefault(require("./geometry"));

var _hashmap = _interopRequireDefault(require("./hash/hashmap"));

var _prequantize = _interopRequireDefault(require("./prequantize"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Constructs the TopoJSON Topology for the specified hash of features.
// Each object in the specified hash must be a GeoJSON object,
// meaning FeatureCollection, a Feature or a geometry object.
function _default(objects, quantization) {
  var bbox = (0, _bounds.default)(objects = (0, _geometry.default)(objects)),
      transform = quantization > 0 && bbox && (0, _prequantize.default)(objects, bbox, quantization),
      topology = (0, _dedup.default)((0, _cut.default)((0, _extract.default)(objects))),
      coordinates = topology.coordinates,
      indexByArc = (0, _hashmap.default)(topology.arcs.length * 1.4, hashArc, equalArc);
  objects = topology.objects; // for garbage collection

  topology.bbox = bbox;
  topology.arcs = topology.arcs.map(function (arc, i) {
    indexByArc.set(arc, i);
    return coordinates.slice(arc[0], arc[1] + 1);
  });
  delete topology.coordinates;
  coordinates = null;

  function indexGeometry(geometry) {
    if (geometry && indexGeometryType.hasOwnProperty(geometry.type)) indexGeometryType[geometry.type](geometry);
  }

  var indexGeometryType = {
    GeometryCollection: function (o) {
      o.geometries.forEach(indexGeometry);
    },
    LineString: function (o) {
      o.arcs = indexArcs(o.arcs);
    },
    MultiLineString: function (o) {
      o.arcs = o.arcs.map(indexArcs);
    },
    Polygon: function (o) {
      o.arcs = o.arcs.map(indexArcs);
    },
    MultiPolygon: function (o) {
      o.arcs = o.arcs.map(indexMultiArcs);
    }
  };

  function indexArcs(arc) {
    var indexes = [];

    do {
      var index = indexByArc.get(arc);
      indexes.push(arc[0] < arc[1] ? index : ~index);
    } while (arc = arc.next);

    return indexes;
  }

  function indexMultiArcs(arcs) {
    return arcs.map(indexArcs);
  }

  for (var key in objects) {
    indexGeometry(objects[key]);
  }

  if (transform) {
    topology.transform = transform;
    topology.arcs = (0, _delta.default)(topology.arcs);
  }

  return topology;
}

function hashArc(arc) {
  var i = arc[0],
      j = arc[1],
      t;
  if (j < i) t = i, i = j, j = t;
  return i + 31 * j;
}

function equalArc(arcA, arcB) {
  var ia = arcA[0],
      ja = arcA[1],
      ib = arcB[0],
      jb = arcB[1],
      t;
  if (ja < ia) t = ia, ia = ja, ja = t;
  if (jb < ib) t = ib, ib = jb, jb = t;
  return ia === ib && ja === jb;
}
},{"./bounds":"../node_modules/topojson/node_modules/topojson-server/src/bounds.js","./cut":"../node_modules/topojson/node_modules/topojson-server/src/cut.js","./dedup":"../node_modules/topojson/node_modules/topojson-server/src/dedup.js","./delta":"../node_modules/topojson/node_modules/topojson-server/src/delta.js","./extract":"../node_modules/topojson/node_modules/topojson-server/src/extract.js","./geometry":"../node_modules/topojson/node_modules/topojson-server/src/geometry.js","./hash/hashmap":"../node_modules/topojson/node_modules/topojson-server/src/hash/hashmap.js","./prequantize":"../node_modules/topojson/node_modules/topojson-server/src/prequantize.js"}],"../node_modules/topojson/node_modules/topojson-server/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "topology", {
  enumerable: true,
  get: function () {
    return _topology.default;
  }
});

var _topology = _interopRequireDefault(require("./src/topology"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./src/topology":"../node_modules/topojson/node_modules/topojson-server/src/topology.js"}],"../node_modules/topojson/node_modules/topojson-simplify/src/prune.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(topology) {
  var oldObjects = topology.objects,
      newObjects = {},
      oldArcs = topology.arcs,
      oldArcsLength = oldArcs.length,
      oldIndex = -1,
      newIndexByOldIndex = new Array(oldArcsLength),
      newArcsLength = 0,
      newArcs,
      newIndex = -1,
      key;

  function scanGeometry(input) {
    switch (input.type) {
      case "GeometryCollection":
        input.geometries.forEach(scanGeometry);
        break;

      case "LineString":
        scanArcs(input.arcs);
        break;

      case "MultiLineString":
        input.arcs.forEach(scanArcs);
        break;

      case "Polygon":
        input.arcs.forEach(scanArcs);
        break;

      case "MultiPolygon":
        input.arcs.forEach(scanMultiArcs);
        break;
    }
  }

  function scanArc(index) {
    if (index < 0) index = ~index;
    if (!newIndexByOldIndex[index]) newIndexByOldIndex[index] = 1, ++newArcsLength;
  }

  function scanArcs(arcs) {
    arcs.forEach(scanArc);
  }

  function scanMultiArcs(arcs) {
    arcs.forEach(scanArcs);
  }

  function reindexGeometry(input) {
    var output;

    switch (input.type) {
      case "GeometryCollection":
        output = {
          type: "GeometryCollection",
          geometries: input.geometries.map(reindexGeometry)
        };
        break;

      case "LineString":
        output = {
          type: "LineString",
          arcs: reindexArcs(input.arcs)
        };
        break;

      case "MultiLineString":
        output = {
          type: "MultiLineString",
          arcs: input.arcs.map(reindexArcs)
        };
        break;

      case "Polygon":
        output = {
          type: "Polygon",
          arcs: input.arcs.map(reindexArcs)
        };
        break;

      case "MultiPolygon":
        output = {
          type: "MultiPolygon",
          arcs: input.arcs.map(reindexMultiArcs)
        };
        break;

      default:
        return input;
    }

    if (input.id != null) output.id = input.id;
    if (input.bbox != null) output.bbox = input.bbox;
    if (input.properties != null) output.properties = input.properties;
    return output;
  }

  function reindexArc(oldIndex) {
    return oldIndex < 0 ? ~newIndexByOldIndex[~oldIndex] : newIndexByOldIndex[oldIndex];
  }

  function reindexArcs(arcs) {
    return arcs.map(reindexArc);
  }

  function reindexMultiArcs(arcs) {
    return arcs.map(reindexArcs);
  }

  for (key in oldObjects) {
    scanGeometry(oldObjects[key]);
  }

  newArcs = new Array(newArcsLength);

  while (++oldIndex < oldArcsLength) {
    if (newIndexByOldIndex[oldIndex]) {
      newIndexByOldIndex[oldIndex] = ++newIndex;
      newArcs[newIndex] = oldArcs[oldIndex];
    }
  }

  for (key in oldObjects) {
    newObjects[key] = reindexGeometry(oldObjects[key]);
  }

  return {
    type: "Topology",
    bbox: topology.bbox,
    transform: topology.transform,
    objects: newObjects,
    arcs: newArcs
  };
}
},{}],"../node_modules/topojson/node_modules/topojson-simplify/src/filter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _prune = _interopRequireDefault(require("./prune"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(topology, filter) {
  var oldObjects = topology.objects,
      newObjects = {},
      key;
  if (filter == null) filter = filterTrue;

  function filterGeometry(input) {
    var output, arcs;

    switch (input.type) {
      case "Polygon":
        {
          arcs = filterRings(input.arcs);
          output = arcs ? {
            type: "Polygon",
            arcs: arcs
          } : {
            type: null
          };
          break;
        }

      case "MultiPolygon":
        {
          arcs = input.arcs.map(filterRings).filter(filterIdentity);
          output = arcs.length ? {
            type: "MultiPolygon",
            arcs: arcs
          } : {
            type: null
          };
          break;
        }

      case "GeometryCollection":
        {
          arcs = input.geometries.map(filterGeometry).filter(filterNotNull);
          output = arcs.length ? {
            type: "GeometryCollection",
            geometries: arcs
          } : {
            type: null
          };
          break;
        }

      default:
        return input;
    }

    if (input.id != null) output.id = input.id;
    if (input.bbox != null) output.bbox = input.bbox;
    if (input.properties != null) output.properties = input.properties;
    return output;
  }

  function filterRings(arcs) {
    return arcs.length && filterExteriorRing(arcs[0]) // if the exterior is small, ignore any holes
    ? [arcs[0]].concat(arcs.slice(1).filter(filterInteriorRing)) : null;
  }

  function filterExteriorRing(ring) {
    return filter(ring, false);
  }

  function filterInteriorRing(ring) {
    return filter(ring, true);
  }

  for (key in oldObjects) {
    newObjects[key] = filterGeometry(oldObjects[key]);
  }

  return (0, _prune.default)({
    type: "Topology",
    bbox: topology.bbox,
    transform: topology.transform,
    objects: newObjects,
    arcs: topology.arcs
  });
}

function filterTrue() {
  return true;
}

function filterIdentity(x) {
  return x;
}

function filterNotNull(geometry) {
  return geometry.type != null;
}
},{"./prune":"../node_modules/topojson/node_modules/topojson-simplify/src/prune.js"}],"../node_modules/topojson/node_modules/topojson-simplify/src/filterAttached.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(topology) {
  var ownerByArc = new Array(topology.arcs.length),
      // arc index -> index of unique associated ring, or -1 if used by multiple rings
  ownerIndex = 0,
      key;

  function testGeometry(o) {
    switch (o.type) {
      case "GeometryCollection":
        o.geometries.forEach(testGeometry);
        break;

      case "Polygon":
        testArcs(o.arcs);
        break;

      case "MultiPolygon":
        o.arcs.forEach(testArcs);
        break;
    }
  }

  function testArcs(arcs) {
    for (var i = 0, n = arcs.length; i < n; ++i, ++ownerIndex) {
      for (var ring = arcs[i], j = 0, m = ring.length; j < m; ++j) {
        var arc = ring[j];
        if (arc < 0) arc = ~arc;
        var owner = ownerByArc[arc];
        if (owner == null) ownerByArc[arc] = ownerIndex;else if (owner !== ownerIndex) ownerByArc[arc] = -1;
      }
    }
  }

  for (key in topology.objects) {
    testGeometry(topology.objects[key]);
  }

  return function (ring) {
    for (var j = 0, m = ring.length, arc; j < m; ++j) {
      if (ownerByArc[(arc = ring[j]) < 0 ? ~arc : arc] === -1) {
        return true;
      }
    }

    return false;
  };
}
},{}],"../node_modules/topojson/node_modules/topojson-simplify/src/planar.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.planarTriangleArea = planarTriangleArea;
exports.planarRingArea = planarRingArea;

function planarTriangleArea(triangle) {
  var a = triangle[0],
      b = triangle[1],
      c = triangle[2];
  return Math.abs((a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1])) / 2;
}

function planarRingArea(ring) {
  var i = -1,
      n = ring.length,
      a,
      b = ring[n - 1],
      area = 0;

  while (++i < n) a = b, b = ring[i], area += a[0] * b[1] - a[1] * b[0];

  return Math.abs(area) / 2;
}
},{}],"../node_modules/topojson/node_modules/topojson-simplify/src/filterWeight.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _topojsonClient = require("topojson-client");

var _planar = require("./planar");

function _default(topology, minWeight, weight) {
  minWeight = minWeight == null ? Number.MIN_VALUE : +minWeight;
  if (weight == null) weight = _planar.planarRingArea;
  return function (ring, interior) {
    return weight((0, _topojsonClient.feature)(topology, {
      type: "Polygon",
      arcs: [ring]
    }).geometry.coordinates[0], interior) >= minWeight;
  };
}
},{"topojson-client":"../node_modules/topojson/node_modules/topojson-client/index.js","./planar":"../node_modules/topojson/node_modules/topojson-simplify/src/planar.js"}],"../node_modules/topojson/node_modules/topojson-simplify/src/filterAttachedWeight.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _filterAttached = _interopRequireDefault(require("./filterAttached"));

var _filterWeight = _interopRequireDefault(require("./filterWeight"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(topology, minWeight, weight) {
  var a = (0, _filterAttached.default)(topology),
      w = (0, _filterWeight.default)(topology, minWeight, weight);
  return function (ring, interior) {
    return a(ring, interior) || w(ring, interior);
  };
}
},{"./filterAttached":"../node_modules/topojson/node_modules/topojson-simplify/src/filterAttached.js","./filterWeight":"../node_modules/topojson/node_modules/topojson-simplify/src/filterWeight.js"}],"../node_modules/topojson/node_modules/topojson-simplify/src/heap.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function compare(a, b) {
  return a[1][2] - b[1][2];
}

function _default() {
  var heap = {},
      array = [],
      size = 0;

  heap.push = function (object) {
    up(array[object._ = size] = object, size++);
    return size;
  };

  heap.pop = function () {
    if (size <= 0) return;
    var removed = array[0],
        object;
    if (--size > 0) object = array[size], down(array[object._ = 0] = object, 0);
    return removed;
  };

  heap.remove = function (removed) {
    var i = removed._,
        object;
    if (array[i] !== removed) return; // invalid request

    if (i !== --size) object = array[size], (compare(object, removed) < 0 ? up : down)(array[object._ = i] = object, i);
    return i;
  };

  function up(object, i) {
    while (i > 0) {
      var j = (i + 1 >> 1) - 1,
          parent = array[j];
      if (compare(object, parent) >= 0) break;
      array[parent._ = i] = parent;
      array[object._ = i = j] = object;
    }
  }

  function down(object, i) {
    while (true) {
      var r = i + 1 << 1,
          l = r - 1,
          j = i,
          child = array[j];
      if (l < size && compare(array[l], child) < 0) child = array[j = l];
      if (r < size && compare(array[r], child) < 0) child = array[j = r];
      if (j === i) break;
      array[child._ = i] = child;
      array[object._ = i = j] = object;
    }
  }

  return heap;
}
},{}],"../node_modules/topojson/node_modules/topojson-simplify/src/presimplify.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _topojsonClient = require("topojson-client");

var _heap = _interopRequireDefault(require("./heap"));

var _planar = require("./planar");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function copy(point) {
  return [point[0], point[1], 0];
}

function _default(topology, weight) {
  var point = topology.transform ? (0, _topojsonClient.transform)(topology.transform) : copy,
      heap = (0, _heap.default)();
  if (weight == null) weight = _planar.planarTriangleArea;
  var arcs = topology.arcs.map(function (arc) {
    var triangles = [],
        maxWeight = 0,
        triangle,
        i,
        n;
    arc = arc.map(point);

    for (i = 1, n = arc.length - 1; i < n; ++i) {
      triangle = [arc[i - 1], arc[i], arc[i + 1]];
      triangle[1][2] = weight(triangle);
      triangles.push(triangle);
      heap.push(triangle);
    } // Always keep the arc endpoints!


    arc[0][2] = arc[n][2] = Infinity;

    for (i = 0, n = triangles.length; i < n; ++i) {
      triangle = triangles[i];
      triangle.previous = triangles[i - 1];
      triangle.next = triangles[i + 1];
    }

    while (triangle = heap.pop()) {
      var previous = triangle.previous,
          next = triangle.next; // If the weight of the current point is less than that of the previous
      // point to be eliminated, use the latter’s weight instead. This ensures
      // that the current point cannot be eliminated without eliminating
      // previously- eliminated points.

      if (triangle[1][2] < maxWeight) triangle[1][2] = maxWeight;else maxWeight = triangle[1][2];

      if (previous) {
        previous.next = next;
        previous[2] = triangle[2];
        update(previous);
      }

      if (next) {
        next.previous = previous;
        next[0] = triangle[0];
        update(next);
      }
    }

    return arc;
  });

  function update(triangle) {
    heap.remove(triangle);
    triangle[1][2] = weight(triangle);
    heap.push(triangle);
  }

  return {
    type: "Topology",
    bbox: topology.bbox,
    objects: topology.objects,
    arcs: arcs
  };
}
},{"topojson-client":"../node_modules/topojson/node_modules/topojson-client/index.js","./heap":"../node_modules/topojson/node_modules/topojson-simplify/src/heap.js","./planar":"../node_modules/topojson/node_modules/topojson-simplify/src/planar.js"}],"../node_modules/topojson/node_modules/topojson-simplify/src/quantile.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(topology, p) {
  var array = [];
  topology.arcs.forEach(function (arc) {
    arc.forEach(function (point) {
      if (isFinite(point[2])) {
        // Ignore endpoints, whose weight is Infinity.
        array.push(point[2]);
      }
    });
  });
  return array.length && quantile(array.sort(descending), p);
}

function quantile(array, p) {
  if (!(n = array.length)) return;
  if ((p = +p) <= 0 || n < 2) return array[0];
  if (p >= 1) return array[n - 1];
  var n,
      h = (n - 1) * p,
      i = Math.floor(h),
      a = array[i],
      b = array[i + 1];
  return a + (b - a) * (h - i);
}

function descending(a, b) {
  return b - a;
}
},{}],"../node_modules/topojson/node_modules/topojson-simplify/src/simplify.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(topology, minWeight) {
  minWeight = minWeight == null ? Number.MIN_VALUE : +minWeight; // Remove points whose weight is less than the minimum weight.

  var arcs = topology.arcs.map(function (input) {
    var i = -1,
        j = 0,
        n = input.length,
        output = new Array(n),
        // pessimistic
    point;

    while (++i < n) {
      if ((point = input[i])[2] >= minWeight) {
        output[j++] = [point[0], point[1]];
      }
    }

    output.length = j;
    return output;
  });
  return {
    type: "Topology",
    transform: topology.transform,
    bbox: topology.bbox,
    objects: topology.objects,
    arcs: arcs
  };
}
},{}],"../node_modules/topojson/node_modules/topojson-simplify/src/spherical.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sphericalRingArea = sphericalRingArea;
exports.sphericalTriangleArea = sphericalTriangleArea;
var pi = Math.PI,
    tau = 2 * pi,
    quarterPi = pi / 4,
    radians = pi / 180,
    abs = Math.abs,
    atan2 = Math.atan2,
    cos = Math.cos,
    sin = Math.sin;

function halfArea(ring, closed) {
  var i = 0,
      n = ring.length,
      sum = 0,
      point = ring[closed ? i++ : n - 1],
      lambda0,
      lambda1 = point[0] * radians,
      phi1 = point[1] * radians / 2 + quarterPi,
      cosPhi0,
      cosPhi1 = cos(phi1),
      sinPhi0,
      sinPhi1 = sin(phi1);

  for (; i < n; ++i) {
    point = ring[i];
    lambda0 = lambda1, lambda1 = point[0] * radians;
    phi1 = point[1] * radians / 2 + quarterPi;
    cosPhi0 = cosPhi1, cosPhi1 = cos(phi1);
    sinPhi0 = sinPhi1, sinPhi1 = sin(phi1); // Spherical excess E for a spherical triangle with vertices: south pole,
    // previous point, current point.  Uses a formula derived from Cagnoli’s
    // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).
    // See https://github.com/d3/d3-geo/blob/master/README.md#geoArea

    var dLambda = lambda1 - lambda0,
        sdLambda = dLambda >= 0 ? 1 : -1,
        adLambda = sdLambda * dLambda,
        k = sinPhi0 * sinPhi1,
        u = cosPhi0 * cosPhi1 + k * cos(adLambda),
        v = k * sdLambda * sin(adLambda);
    sum += atan2(v, u);
  }

  return sum;
}

function sphericalRingArea(ring, interior) {
  var sum = halfArea(ring, true);
  if (interior) sum *= -1;
  return (sum < 0 ? tau + sum : sum) * 2;
}

function sphericalTriangleArea(t) {
  return abs(halfArea(t, false)) * 2;
}
},{}],"../node_modules/topojson/node_modules/topojson-simplify/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "filter", {
  enumerable: true,
  get: function () {
    return _filter.default;
  }
});
Object.defineProperty(exports, "filterAttached", {
  enumerable: true,
  get: function () {
    return _filterAttached.default;
  }
});
Object.defineProperty(exports, "filterAttachedWeight", {
  enumerable: true,
  get: function () {
    return _filterAttachedWeight.default;
  }
});
Object.defineProperty(exports, "filterWeight", {
  enumerable: true,
  get: function () {
    return _filterWeight.default;
  }
});
Object.defineProperty(exports, "planarRingArea", {
  enumerable: true,
  get: function () {
    return _planar.planarRingArea;
  }
});
Object.defineProperty(exports, "planarTriangleArea", {
  enumerable: true,
  get: function () {
    return _planar.planarTriangleArea;
  }
});
Object.defineProperty(exports, "presimplify", {
  enumerable: true,
  get: function () {
    return _presimplify.default;
  }
});
Object.defineProperty(exports, "quantile", {
  enumerable: true,
  get: function () {
    return _quantile.default;
  }
});
Object.defineProperty(exports, "simplify", {
  enumerable: true,
  get: function () {
    return _simplify.default;
  }
});
Object.defineProperty(exports, "sphericalRingArea", {
  enumerable: true,
  get: function () {
    return _spherical.sphericalRingArea;
  }
});
Object.defineProperty(exports, "sphericalTriangleArea", {
  enumerable: true,
  get: function () {
    return _spherical.sphericalTriangleArea;
  }
});

var _filter = _interopRequireDefault(require("./src/filter"));

var _filterAttached = _interopRequireDefault(require("./src/filterAttached"));

var _filterAttachedWeight = _interopRequireDefault(require("./src/filterAttachedWeight"));

var _filterWeight = _interopRequireDefault(require("./src/filterWeight"));

var _planar = require("./src/planar");

var _presimplify = _interopRequireDefault(require("./src/presimplify"));

var _quantile = _interopRequireDefault(require("./src/quantile"));

var _simplify = _interopRequireDefault(require("./src/simplify"));

var _spherical = require("./src/spherical");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./src/filter":"../node_modules/topojson/node_modules/topojson-simplify/src/filter.js","./src/filterAttached":"../node_modules/topojson/node_modules/topojson-simplify/src/filterAttached.js","./src/filterAttachedWeight":"../node_modules/topojson/node_modules/topojson-simplify/src/filterAttachedWeight.js","./src/filterWeight":"../node_modules/topojson/node_modules/topojson-simplify/src/filterWeight.js","./src/planar":"../node_modules/topojson/node_modules/topojson-simplify/src/planar.js","./src/presimplify":"../node_modules/topojson/node_modules/topojson-simplify/src/presimplify.js","./src/quantile":"../node_modules/topojson/node_modules/topojson-simplify/src/quantile.js","./src/simplify":"../node_modules/topojson/node_modules/topojson-simplify/src/simplify.js","./src/spherical":"../node_modules/topojson/node_modules/topojson-simplify/src/spherical.js"}],"../node_modules/topojson/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _topojsonClient = require("topojson-client");

Object.keys(_topojsonClient).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _topojsonClient[key];
    }
  });
});

var _topojsonServer = require("topojson-server");

Object.keys(_topojsonServer).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _topojsonServer[key];
    }
  });
});

var _topojsonSimplify = require("topojson-simplify");

Object.keys(_topojsonSimplify).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _topojsonSimplify[key];
    }
  });
});
},{"topojson-client":"../node_modules/topojson/node_modules/topojson-client/index.js","topojson-server":"../node_modules/topojson/node_modules/topojson-server/index.js","topojson-simplify":"../node_modules/topojson/node_modules/topojson-simplify/index.js"}],"data/world.json":[function(require,module,exports) {
module.exports = {
  "type": "Topology",
  "transform": {
    "scale": [0.0066467997375138105, 0.004557992068082281],
    "translate": [-179.9989067921917, -55.37326325101178]
  },
  "arcs": [[[32361, 19407], [57, -2], [32, 52]], [[32450, 19457], [-13, -106], [4, -34]], [[32441, 19317], [-9, -63]], [[32432, 19254], [-62, 33]], [[32370, 19287], [-22, -58]], [[32348, 19229], [-3, -48], [-2, -47], [22, -1], [13, -16]], [[32378, 19117], [-40, -40], [-10, -42], [9, -9], [44, 6], [38, 26]], [[32419, 19058], [-2, -21], [1, -46], [-42, -142], [-8, -80], [-28, -142], [-9, -9]], [[32331, 18618], [-42, 196]], [[32289, 18814], [-54, 180]], [[32235, 18994], [46, 75], [-11, 13]], [[32270, 19082], [62, 248], [29, 77]], [[32976, 19191], [192, -24], [646, -607], [268, -35]], [[34082, 18525], [130, -20], [154, -95]], [[34366, 18410], [102, -212], [167, -189], [-20, -199], [101, -156]], [[34716, 17654], [18, -68], [84, -34]], [[34818, 17552], [10, -57]], [[34828, 17495], [8, -47], [147, -268], [393, -62]], [[35376, 17118], [89, -115], [-100, -465], [-462, -218]], [[34903, 16320], [-571, -150], [-156, -270], [-294, 7], [-284, 75], [-64, -256]], [[33534, 15726], [-421, 851], [-150, 207], [9, 273], [-99, 309], [-142, 112], [-369, 852], [-73, -19], [42, 307]], [[32331, 18618], [178, -64], [86, 116], [119, 55], [88, 115], [-149, 222], [323, 129]], [[32914, 19477], [62, -286]], [[32419, 19058], [10, 63], [-7, 73], [10, 60]], [[32441, 19317], [40, 13], [31, -47], [111, -50], [291, 244]], [[34828, 17495], [360, -70], [248, 327], [80, 109]], [[35516, 17861], [39, -44]], [[35555, 17817], [8, -80]], [[35563, 17737], [-87, -131], [18, -176], [-54, -75], [-64, -237]], [[34903, 16320], [59, -163], [95, -337]], [[35057, 15820], [-133, -238], [-450, -288], [-580, -289], [-128, -97], [-147, 19], [-35, 127], [5, 109], [-81, 325], [26, 238]], [[39261, 18805], [-131, -327], [479, -333], [167, 22], [62, -90], [201, -118], [286, -17], [2, 64], [29, 269]], [[40356, 18275], [82, -6], [151, 90]], [[40589, 18359], [-107, -163], [-40, -119], [131, -79], [185, 51], [178, -10], [-53, 224]], [[40883, 18263], [151, 40], [240, 254], [59, 21], [243, 13], [46, -215], [112, -34]], [[41734, 18342], [-66, -197], [-263, -152], [-155, -604], [-135, 39], [-16, -418], [-81, -67]], [[41018, 16943], [-58, 423], [-100, -181], [-62, 237], [127, 34], [62, 204], [-383, 45], [-38, 196], [-167, 46], [-89, -118], [112, -119], [-89, -158], [85, -107], [39, -209], [39, -333]], [[40496, 16903], [-302, -28], [-23, -186], [-98, -136], [-336, -389], [-267, -282], [0, -96], [-155, -57], [-108, -79], [-54, -293], [-62, -948], [-78, -102], [-23, -118], [-151, -159], [-100, -146], [-121, 175], [-219, 642], [-264, 966], [-120, 819], [39, 225], [-78, 345], [-54, -277], [-194, -96], [-298, 361], [173, 53], [95, 105], [-190, -67], [-236, 225]], [[37272, 17360], [518, 153], [-271, 570], [221, 163], [136, 23], [445, 728], [-35, 141], [139, 79]], [[38425, 19217], [-201, 209], [-23, 310], [429, 12], [143, 192]], [[38773, 19940], [194, -266], [58, -395], [-135, 17]], [[38890, 19296], [85, -271], [286, -220]], [[34503, 22304], [-174, 321], [-245, 139], [121, 404], [210, -59], [301, 385], [434, -64], [335, -204], [408, 128], [433, -73], [-189, 265], [214, 229], [-63, 219], [1122, 329], [329, -39], [493, -363], [351, 128], [546, -713], [526, 18], [257, -320], [251, -119]], [[40163, 22915], [-226, -265], [-353, -155], [-412, -557], [-19, -542]], [[39153, 21396], [-159, 130], [-310, 39], [-279, 21], [-35, -8], [-185, 55], [-55, -161], [-181, 59], [-143, 17], [-176, -183]], [[37630, 21365], [-258, -268], [-247, 79], [-113, 434], [-162, 141], [-85, -39], [-204, -9], [-259, 127], [-406, 322], [-388, -125], [15, -692], [-19, -120]], [[35504, 21215], [-62, -25], [-230, 256], [-240, -106]], [[34972, 21340], [-368, 637], [223, 135], [186, 5], [52, 316], [-279, 50], [-283, -179]], [[14702, 14227], [160, -153], [237, 187], [249, -73], [94, -159]], [[15442, 14029], [0, -199], [-86, -74]], [[15356, 13756], [-191, 369], [-198, -176], [82, -164], [-113, -63], [-199, 216], [-140, 17]], [[14597, 13955], [105, 272]], [[30862, 19091], [597, -186], [272, 182], [262, -109], [235, 41]], [[32228, 19019], [61, -205]], [[32331, 18618], [-104, -387], [-253, 496], [22, -237], [446, -1097], [0, -164], [-243, -287], [-56, -36], [-75, 68], [-1227, -5], [21, 2122]], [[15442, 14029], [366, 556], [502, 306], [85, -90], [-147, -97]], [[16248, 14704], [-215, -545], [94, 17], [105, -471], [202, -29], [513, -146], [-51, -495], [68, -125], [-78, -130], [93, -148]], [[16979, 12632], [-140, -102], [-257, 11], [-11, -147], [101, -12], [4, -90], [-148, -23], [117, -397], [-81, -662]], [[16564, 11210], [-126, 111], [101, 244], [-144, 97], [-260, -57], [-390, 522]], [[15745, 12127], [-292, 117], [-111, 63], [-171, 182]], [[15171, 12489], [279, 450], [-94, 817]], [[15745, 12127], [16, -182], [-47, -147], [-171, -227], [-194, -137], [-156, -380], [-183, 119], [0, 239]], [[15010, 11412], [78, 198], [-82, -56], [-105, 90], [7, 296], [133, 386], [130, 163]], [[16564, 11210], [-281, -42], [-164, -137], [-51, -283], [-81, -103], [-39, -153], [167, -323], [-64, -78], [177, -132], [101, -12], [133, 125], [-4, -335], [159, 6]], [[16617, 9743], [133, -329], [-105, -682], [81, -164], [-101, -244]], [[16625, 8324], [-128, -205]], [[16497, 8119], [-168, 222], [-549, 414], [-155, 244], [-296, 919], [-265, 733], [-194, 187], [-32, 398], [172, 176]], [[27215, 14561], [81, 90], [142, 109]], [[27438, 14760], [73, 117], [114, -157]], [[27625, 14720], [10, -383], [-141, -202], [5, -589]], [[27499, 13546], [-173, -37]], [[27326, 13509], [-6, 610], [-57, 239], [-71, 77], [23, 126]], [[33165, 9844], [-2, -234], [35, -271], [12, -254], [12, -255], [-138, -272], [-125, -130], [-141, -87], [-141, -87], [-153, -254], [-33, 0], [-175, -219], [-21, -111], [125, -388], [3, -371], [-61, -165], [-275, -143], [-92, -134], [37, -214]], [[32032, 6255], [-110, 5]], [[31922, 6260], [-33, 245], [-32, 245], [-32, 245], [-32, 245]], [[31793, 7240], [166, 234]], [[31959, 7474], [43, 317], [43, 317]], [[32045, 8108], [-4, 375], [-138, 68], [-110, 78], [-126, 9], [-6, 87]], [[31661, 8725], [3, 40], [-27, 96], [147, 72], [147, 71], [147, 72]], [[32078, 9076], [64, -121], [107, 36], [34, -192], [-59, -143], [144, -281], [99, 255], [9, 127], [0, 42], [-1, 129]], [[32475, 8928], [-184, 267]], [[32291, 9195], [-42, 282], [40, 134]], [[32289, 9611], [237, -12]], [[32526, 9599], [181, -25], [161, 74], [148, 98], [149, 98]], [[16240, 16494], [447, -171], [86, -125], [-461, -15]], [[16312, 16183], [-72, 311]], [[30224, 6420], [-135, 289]], [[30089, 6709], [0, 605], [148, 9], [3, 802], [489, 52], [119, 66], [-1, 61]], [[30847, 8304], [24, -58]], [[30871, 8246], [171, -401], [455, -559]], [[31497, 7286], [-45, -17], [-319, -313], [-13, -124], [-138, -114], [-54, -206], [-238, 13], [-126, 92], [-211, -357], [-160, -5], [-16, 101]], [[30177, 6356], [47, 64], [0, 0]], [[28146, 23873], [220, 66], [76, 66], [-75, 63], [1, 68]], [[28368, 24136], [227, -1]], [[28595, 24135], [224, -132], [194, 116], [215, -149]], [[29228, 23970], [64, -347], [45, -299]], [[29337, 23324], [-93, 23], [-231, -139], [-106, -44], [122, -220], [49, 3], [73, -120]], [[29151, 22827], [-148, -107], [32, -123]], [[29035, 22597], [-196, -23], [-195, -23]], [[28644, 22551], [-30, -31], [-43, 63], [-40, -18]], [[28531, 22565], [-70, 47], [-178, 7]], [[28283, 22619], [1, 266], [-222, 102]], [[28062, 22987], [11, 101], [-24, 59]], [[28049, 23147], [-21, 103]], [[28028, 23250], [-27, 231], [144, 131], [1, 261]], [[28028, 23250], [-70, 33], [-22, 81], [-112, 82], [-196, 35]], [[27628, 23481], [100, 83], [90, 236], [121, 78], [207, -5]], [[34432, 20584], [14, -160], [144, -71], [286, -180], [302, 80], [24, 100]], [[35202, 20353], [110, 20], [271, 151], [134, -15], [151, -105], [426, -231], [7, -220]], [[36301, 19953], [-110, -446], [48, -451], [117, -20], [38, -75], [-31, -57], [-117, -214]], [[36246, 18690], [139, -285], [140, -91], [20, -195], [62, -20], [-14, -90], [-189, -90], [-58, -271]], [[36346, 17648], [-639, 160], [-72, 266], [-316, -125], [-230, 110], [-265, 220], [-210, 486], [-257, -69]], [[34357, 18696], [-93, 265], [21, 155], [-79, 165], [-296, 316], [114, 250], [27, 146], [-130, 55], [-83, 255]], [[33838, 20303], [-58, 146], [-60, 340], [78, 96]], [[33798, 20885], [26, -41]], [[33824, 20844], [90, -150], [106, -20]], [[34020, 20674], [64, 5]], [[34084, 20679], [208, 180], [10, -215], [95, -75], [35, 15]], [[30823, 9647], [157, -54], [158, -53]], [[31138, 9540], [217, -134], [208, -214], [0, 285], [-116, -49], [-104, 188]], [[31343, 9616], [8, 250], [7, 250]], [[31358, 10116], [69, 175], [282, 61]], [[31709, 10352], [44, -98], [142, -83], [143, -82]], [[32038, 10089], [8, -66], [31, 4], [67, -207], [-64, -63], [13, -103], [27, -217], [-88, -80], [-16, -188], [62, -93]], [[31661, 8725], [-220, -68]], [[31441, 8657], [-119, -177], [-119, -176]], [[31203, 8304], [-61, -119], [-271, 61]], [[30847, 8304], [-88, 9], [-94, -8]], [[30665, 8305], [-74, -18]], [[30591, 8287], [-200, 278]], [[30391, 8565], [0, 243], [0, 243], [0, 243]], [[30391, 9294], [295, 0]], [[30686, 9294], [4, 234], [3, 233]], [[30693, 9761], [130, -114]], [[31080, 22738], [103, -127], [151, -257], [-26, -229]], [[31308, 22125], [85, -57], [167, 13]], [[31560, 22081], [-173, -331], [-66, -19]], [[31321, 21731], [-153, 101]], [[31168, 21832], [-218, -94], [-406, 32], [-41, 103]], [[30503, 21873], [-20, 57], [-154, 22], [-13, 112], [-205, 216]], [[30111, 22280], [154, 32], [170, 319], [109, 37]], [[30544, 22668], [85, 15], [223, -66], [228, 121]], [[23479, 26664], [323, 74], [184, -125], [727, 142], [285, -258], [18, -139], [-770, -336], [-599, 184], [118, 269], [-286, 189]], [[9457, 19307], [340, 0], [562, -283], [266, 13], [442, 73], [243, -283], [49, -189], [194, -142], [130, 220], [194, -70], [303, -725], [275, -95]], [[12455, 17826], [-97, -819], [243, -662], [270, -212], [503, 181], [85, 192], [56, 293], [510, 68], [-164, -755]], [[13861, 16112], [-15, 170], [-182, -239]], [[13664, 16043], [-270, 23], [-15, -130], [-63, 0], [144, -148], [20, -113], [-202, 0], [-72, -330]], [[13206, 15345], [-287, 338], [-96, 48], [-276, -166], [-989, 583], [-329, 292], [-65, 662], [-918, 1315], [-189, 465], [-238, 252], [16, -370], [254, -323], [540, -1174], [-102, -95], [-324, 402], [-22, 315], [-405, 355], [162, 118], [-254, 331], [-227, 614]], [[13861, 16112], [-62, -312], [-132, -171]], [[13667, 15629], [-3, 414]], [[13667, 15629], [136, -39]], [[13803, 15590], [-117, -131]], [[13686, 15459], [-163, -289]], [[13523, 15170], [-199, 45], [-118, 130]], [[13611, 15326], [285, -208]], [[13896, 15118], [-54, -90], [-319, 142]], [[13523, 15170], [88, 156]], [[14566, 15448], [-237, -74], [-164, -176], [-97, -29], [-102, -198]], [[13966, 14971], [-70, 147]], [[13611, 15326], [75, 133]], [[13803, 15590], [90, 45], [506, -6], [167, -181]], [[16312, 16183], [-416, 50], [155, 69], [-131, 59], [203, 129], [117, 4]], [[15292, 16219], [356, -50], [13, -58], [-157, -69], [-254, 113], [42, 64]], [[14566, 15448], [-4, -193], [-62, -792]], [[14500, 14463], [-152, 116], [-156, -11]], [[14192, 14568], [-292, 380], [66, 23]], [[14500, 14463], [202, -236]], [[14597, 13955], [-241, 312], [-82, -11], [-72, 22], [-56, 171], [46, 119]], [[18089, 13995], [396, -523]], [[18485, 13472], [-140, -429], [117, -176], [104, -292]], [[18566, 12575], [-223, -64], [-98, -87], [-121, 92], [-46, 142], [36, 355], [-73, 273], [-69, -41]], [[17972, 13245], [-125, 199], [16, 159], [148, 85], [-70, 102], [148, 205]], [[18485, 13472], [321, -16], [144, -38]], [[18950, 13418], [-60, -219], [56, -260], [-29, -213], [-51, -64]], [[18866, 12662], [-300, -87]], [[18950, 13418], [150, -54], [218, -253]], [[19318, 13111], [-134, -356], [-67, -127], [-251, 34]], [[17811, 14533], [197, 3], [-59, -75], [11, -109], [-166, 33], [29, 37], [-12, 111]], [[18333, 7802], [-142, 103], [-408, -58], [-128, -574]], [[17655, 7273], [-27, 49], [-165, -1], [-51, -166], [-10, -17], [-36, 139], [-167, 24], [-38, 18], [-49, 55], [-109, -254]], [[17003, 7120], [-125, 23], [-136, 511], [27, 238], [-144, 432]], [[16617, 9743], [150, -20], [358, 278], [124, 39], [3, -438], [187, -205], [144, -25], [221, -194], [117, -10], [76, -68], [34, -522], [274, -15], [-17, -195], [100, -68], [51, -146], [-106, -352]], [[18912, 6593], [-49, -64], [-26, -225], [-252, -111], [-278, 59], [117, 303], [-41, 82], [-333, 238], [-151, 50], [-175, 265], [-69, 83]], [[18333, 7802], [26, -496], [199, -35], [122, -10], [65, -361], [118, 23], [64, -50], [-38, -200], [23, -80]], [[18500, 5563], [161, -163], [50, -7], [255, -241], [129, -179], [-64, -105], [19, -126]], [[19050, 4742], [-67, -143], [-166, -116], [-115, 39], [-79, -35], [-140, 98], [-164, 73], [-16, 203], [41, 46], [-22, 122]], [[18322, 5029], [10, 55], [82, 444], [86, 35]], [[31272, 25438], [-456, -130], [-313, -61], [-219, 183], [42, 208], [-87, 248], [72, 115], [463, 367], [121, 0], [-3, 136], [-167, 78]], [[30725, 26582], [-72, 93], [20, 78], [22, 49], [-63, 75], [26, 66], [-54, 3], [35, 112], [-131, 109], [-94, 15], [-238, 118]], [[30176, 27300], [82, 0], [45, 55], [104, -76], [56, -64], [367, -23], [126, 97], [36, 157], [286, 80], [77, -65], [126, -52], [-46, -110]], [[31435, 27299], [-28, -58], [-10, -130], [200, -122], [-143, -158], [168, -262], [-114, -158], [173, -180], [-79, -104], [225, -178], [-331, -358], [-224, -153]], [[30725, 26582], [-280, -15], [-120, -133], [9, -141], [-97, -128], [-206, -83], [-312, -237], [-39, -384], [193, -64], [92, -134], [-338, -269], [-12, -361], [-115, -170], [-242, -45], [-48, -116], [-123, -38], [-109, 218], [39, 64], [-252, 411], [25, 156]], [[28790, 25113], [165, 215], [53, 279], [-114, 309], [70, 248], [68, 41], [165, 14], [157, 470], [200, 176], [-26, 78], [150, 143], [109, -10], [37, 105], [250, -41], [70, 96], [-19, 64], [51, 0]], [[30588, 24068], [103, -338]], [[30691, 23730], [-133, -118], [78, -54]], [[30636, 23558], [74, -317]], [[30710, 23241], [-197, -168], [-30, -143]], [[30483, 22930], [-254, 69], [-125, -36], [-195, 61]], [[29909, 23024], [-29, 70], [-144, 42], [-281, 135], [-118, 53]], [[29228, 23970], [647, 224], [90, -131]], [[29965, 24063], [148, 16]], [[30113, 24079], [475, -11]], [[25902, 24266], [97, -265]], [[25999, 24001], [151, 1], [-50, -327], [-287, -136], [-284, -69], [55, 200], [69, 62], [-13, 133], [-81, 66], [-13, 132], [71, 63], [70, 1], [69, 69], [146, 70]], [[28049, 23147], [-57, 9], [-59, -55], [66, -85]], [[27999, 23016], [-146, 1], [-73, 63], [-290, 134], [-76, 132]], [[27414, 23346], [214, 135]], [[28531, 22565], [-16, -84]], [[28515, 22481], [124, -33]], [[28639, 22448], [-3, -158], [-109, 16], [-104, -81], [-71, 67], [0, -67], [-137, 1]], [[28215, 22226], [-141, 0], [-72, 67], [0, 66], [71, 128], [70, 69], [77, 42], [63, 21]], [[29627, 22863], [-274, 39], [-135, -89], [-67, 14]], [[29909, 23024], [-122, -121], [-66, -29], [-94, -11]], [[29661, 22682], [181, -41]], [[29842, 22641], [149, 51], [149, 51]], [[30140, 22743], [276, 9]], [[30416, 22752], [128, -84]], [[30111, 22280], [-190, -66]], [[29921, 22214], [-176, -9]], [[29745, 22205], [-180, 145]], [[29565, 22350], [-26, 84]], [[29539, 22434], [122, 248]], [[30043, 21512], [129, -94]], [[30172, 21418], [-7, -225], [90, -107]], [[30255, 21086], [-45, -141], [-102, -121]], [[30108, 20824], [-116, 154], [0, 365]], [[29992, 21343], [-6, 84], [57, 85]], [[31924, 19852], [330, 59], [-106, -106], [-184, -53], [-40, 100]], [[32479, 20006], [24, -8], [43, 148], [49, 44], [116, -2], [86, 63], [152, -71], [202, 61], [65, 52], [177, -6], [52, 14]], [[33445, 20301], [-60, -118], [-83, -15], [-24, -421], [-249, -202], [-115, -68]], [[32450, 19457], [144, 180], [-10, 85], [-93, 30]], [[32491, 19752], [-12, 254]], [[32361, 19407], [59, 182], [17, 5], [5, 76], [49, 82]], [[28820, 19406], [540, -157], [574, -463], [115, 44], [74, 156], [-47, 208], [272, 189], [195, -67], [35, -95], [284, -130]], [[30862, 19091], [-21, -2122], [0, -428], [-150, -4], [0, -103]], [[30691, 16434], [-680, 503], [-521, 363], [-149, -106]], [[29341, 17194], [-115, -84], [-111, 123], [-230, 78]], [[28885, 17311], [-284, 280], [-107, 318], [77, 67], [-54, 810]], [[28517, 18786], [115, 296], [194, 178], [-6, 146]], [[28383, 20266], [211, 72], [149, -72], [8, -391], [-157, -212], [30, -112], [196, -145]], [[28517, 18786], [-73, 402], [-103, 100], [-100, 162], [-15, 224], [97, 73], [60, 519]], [[26749, 19847], [589, 346], [1045, 73]], [[28885, 17311], [-682, -580], [-114, -153], [-140, -166], [-227, -68]], [[27722, 16344], [-147, -28], [-316, 455], [-912, 869]], [[26347, 17640], [-567, 491]], [[25780, 18131], [-2, 89]], [[25778, 18220], [2, 246], [724, 477], [42, 65], [93, 173], [263, 11], [-153, 655]], [[25778, 18220], [-676, 0]], [[25102, 18220], [257, 148], [254, 338], [-23, 286], [92, 297], [535, 718], [295, -132], [237, -28]], [[29414, 13800], [-150, -315], [85, -373], [155, -328], [14, -149]], [[29518, 12635], [-17, -124], [-208, 109], [-213, 3]], [[29080, 12623], [-3, 25], [-292, 9]], [[28785, 12657], [0, -35]], [[28785, 12622], [-233, 30]], [[28552, 12652], [21, 206], [-214, 298]], [[28359, 13156], [231, 516], [194, -117], [155, 451], [88, 146], [129, 422], [130, 194], [-86, 252]], [[29200, 15020], [52, -6], [93, -215], [-3, -279], [40, -112], [59, -66], [-39, -12], [-186, 15], [-37, -73], [184, -250], [51, -222]], [[31680, 11622], [37, -192], [-211, -257]], [[31506, 11173], [-25, 115], [-35, 261]], [[31446, 11549], [97, -12], [43, 102], [94, -17]], [[32981, 11126], [-67, -357], [114, -157], [-33, -299], [73, -340], [97, -129]], [[32526, 9599], [-177, 9]], [[32349, 9608], [2, 14], [1, 10], [-35, 98], [-43, 232], [-74, 100], [-162, 27]], [[31709, 10352], [-100, 277], [-102, 227], [-1, 317]], [[31680, 11622], [43, 15], [-1, 152], [-59, 126]], [[31663, 11915], [56, 16]], [[31719, 11931], [155, 1], [156, 2], [155, 1]], [[32185, 11935], [142, -116], [142, -117], [143, -116], [142, -116]], [[32754, 11470], [114, -172], [113, -172]], [[26649, 13251], [-57, 365], [87, 354], [-3, 259]], [[26676, 14229], [-4, 330], [414, 26]], [[27086, 14585], [-16, -92], [107, -530], [-24, -310], [108, -169]], [[27261, 13484], [-44, -73], [-568, -160]], [[32349, 9608], [-60, 3]], [[32291, 9195], [36, -7], [38, -44], [110, -216]], [[25780, 18131], [0, -25], [4, -251]], [[25784, 17855], [-513, 4], [5, -563], [-164, -80], [17, -383], [-612, -27]], [[24517, 16806], [175, 573], [216, 520], [194, 321]], [[26347, 17640], [-255, -1], [156, -2084], [-185, -14], [-383, 52], [-322, -11], [-118, -196]], [[25240, 15386], [-322, 420], [-325, -124]], [[24593, 15682], [9, 112], [68, 239], [-59, 444], [-50, 166], [-44, 163]], [[25784, 17855], [-4, 276]], [[25240, 15386], [59, -310], [69, -202]], [[25368, 14874], [-138, -27], [-112, 70], [-99, 15]], [[25019, 14932], [-457, -84]], [[24562, 14848], [-15, 174]], [[24547, 15022], [400, 29], [60, 41], [-60, 59], [-133, 30], [-228, -50]], [[24586, 15131], [-134, 249], [141, 302]], [[25019, 14932], [-2, -44], [2, -165], [-169, -159], [-62, 0]], [[24788, 14564], [-182, 198], [-44, 86]], [[25368, 14874], [341, 9], [173, -503]], [[25882, 14380], [-26, -34], [49, -306], [-103, -230]], [[25802, 13810], [-93, -80], [-23, 113], [-51, 163], [-96, 3]], [[25539, 14009], [-141, 331], [-105, -6], [-211, -202]], [[25082, 14132], [-294, 432]], [[25340, 13647], [199, 362]], [[25802, 13810], [-11, -234], [177, -147], [-17, -325]], [[25951, 13104], [-257, 157], [-176, 230], [-178, 156]], [[27722, 16344], [-36, -789], [-408, -56], [-170, -83]], [[27108, 15416], [-118, 40], [-330, -176], [-287, -394], [-121, -445]], [[26252, 14441], [-370, -61]], [[26252, 14441], [138, -168], [286, -44]], [[26649, 13251], [-227, 59], [-471, -206]], [[27108, 15416], [65, -263], [54, -141], [99, -95], [68, 21], [44, -178]], [[27215, 14561], [-129, 24]], [[29341, 17194], [141, -586], [-73, -564], [-1, -66], [-2, -62], [7, -57], [-306, -558], [28, -144]], [[29135, 15157], [-169, -136], [-296, 52], [-145, -123], [-322, 83], [-285, 152], [-167, -32], [-116, -255], [-10, -178]], [[29135, 15157], [65, -137]], [[28359, 13156], [-380, -68], [-245, 484], [-235, -26]], [[28785, 12622], [3, -253]], [[28788, 12369], [-302, -8]], [[28486, 12361], [66, 291]], [[28788, 12369], [-3, 288]], [[29080, 12623], [-14, -207], [158, 33], [38, -100], [-98, -244], [84, -58], [8, -237], [-53, -210], [-34, 4], [-16, 86], [-42, -72], [-73, 18], [-61, 113], [-57, -122], [-99, 10], [46, -300], [-56, 41], [-55, -87]], [[28756, 11291], [-374, 699], [85, 38], [19, 333]], [[30691, 16434], [2, -832], [-150, -11], [-138, -424], [7, -241], [112, -379]], [[30524, 14547], [-158, -54], [-205, -333], [-213, -36], [-38, -15], [44, -61], [-76, -135], [-270, -109], [-45, 67], [-149, -71]], [[30524, 14547], [123, -246], [-28, -236], [101, -52], [164, -144], [-12, -71], [184, -192], [3, -122], [122, -99], [33, -133]], [[31214, 13252], [-330, 28], [-232, -63], [-295, -129], [-177, 27], [-166, 162], [-143, -172], [12, -193]], [[29883, 12912], [-174, 43], [-128, -29], [-63, -291]], [[29883, 12912], [-113, -541], [12, -133], [-38, -194], [-226, -376], [3, -253], [-5, -31], [-232, -315], [-40, 142], [-194, -75]], [[29050, 11136], [-36, 59], [-126, -145]], [[28888, 11050], [-132, 241]], [[28919, 10880], [46, 12], [6, 172], [79, 72]], [[31214, 13252], [101, -150], [205, 75], [194, -226]], [[31714, 12951], [72, -333], [-199, -309], [-44, -199], [-11, -266]], [[31532, 11844], [-39, -28], [-71, -193], [24, -74]], [[31358, 10116], [-15, -500]], [[31138, 9540], [-315, 107]], [[30693, 9761], [-274, -64], [22, 174], [-78, 197], [3, 472], [-192, 10], [3, 82], [-157, -14], [0, -96], [-22, -27], [-16, -101], [-264, -19], [-150, 491], [-519, -9], [-126, -46]], [[28923, 10811], [-4, 69]], [[31714, 12951], [200, -19], [215, 47], [72, 105]], [[32201, 13084], [57, -179], [78, -207], [18, -173], [-58, -122], [-91, -180], [-20, -57], [0, -231]], [[32185, 11935], [-466, -4]], [[31663, 11915], [-79, -85], [-52, 14]], [[33569, 14936], [45, -124], [-118, -117], [94, -27]], [[33590, 14668], [-51, -110]], [[33539, 14558], [-35, 28], [-139, -43], [-5, 140], [96, 204]], [[33456, 14887], [68, -25], [45, 74]], [[33338, 11782], [-91, 180], [-4, 55], [4, 747], [142, 258]], [[33389, 13022], [225, 187], [236, 20], [451, 672], [-151, 4], [-450, 215], [-204, 360], [43, 78]], [[33590, 14668], [166, -239], [1032, 355], [54, -66], [-234, -966], [-309, -578], [-245, -515], [-228, -63], [-410, -646], [-78, -168]], [[31203, 8304], [238, 353]], [[32045, 8108], [-86, -634]], [[31793, 7240], [-148, 10], [-148, 36]], [[28841, 8368], [1016, -28], [415, -128]], [[30272, 8212], [393, 93]], [[30089, 6709], [0, -798], [-182, -91], [-192, 32], [-75, 133], [-76, -101]], [[29564, 5884], [-56, 27], [-145, 316], [-113, 885], [-393, 1068], [-16, 188]], [[31761, 6473], [79, 14], [62, -165], [-64, -113], [-106, 56], [29, 208]], [[31255, 5802], [184, 1], [7, -128], [-115, -199], [-129, 132], [53, 194]], [[34514, 9521], [168, -711], [-31, -154], [-88, 82], [-12, -319], [-368, -1739], [-269, -155], [-219, 136], [-24, 319], [-94, 301], [187, 482], [0, 119], [-69, 428], [75, 282], [370, 176], [55, 66], [250, 632], [69, 55]], [[34357, 18696], [-137, 72], [-77, -113], [-61, -130]], [[33445, 20301], [80, 52], [173, -60], [51, -2], [89, 12]], [[34357, 18696], [-59, -91], [55, -126], [13, -69]], [[34716, 17654], [-1, 87], [45, 120], [33, 31], [47, -56], [6, -207], [-28, -77]], [[36301, 19953], [212, -87], [97, 158], [178, 91], [62, 197], [240, 45]], [[37090, 20357], [186, -50]], [[37276, 20307], [46, -68], [228, 152], [97, 11], [80, 159], [40, 28], [101, -124], [-20, -260], [271, 169], [205, -17]], [[38324, 20357], [-33, -115]], [[38291, 20242], [-78, -10]], [[38213, 20232], [-246, -50], [-122, -107], [-58, -389], [-140, -79], [8, -153], [-108, -51], [-89, -310], [-109, 45], [-278, -203], [-8, -220], [-325, -113], [-263, -11], [-229, 99]], [[40589, 18359], [294, -96]], [[41018, 16943], [-54, -237]], [[40964, 16706], [-128, 434], [-73, -158], [-267, -79]], [[39137, 14330], [112, -153], [167, -451], [-85, -232], [-171, -50], [-103, 388], [80, 498]], [[42307, 16898], [-116, -175], [-60, -50]], [[42131, 16673], [-242, -202], [-81, -31], [-51, -208], [26, -194], [164, -280], [-92, -307], [138, -247], [4, -175], [55, -287]], [[42052, 14742], [-138, -434], [2, 642], [-112, 520], [-139, 474], [-43, -170], [-178, -191], [-186, 56], [47, 373], [-279, 609], [-62, 85]], [[41734, 18342], [50, 57], [148, -209], [0, -372], [-190, -283], [89, -113], [33, -5], [157, -186], [59, -267], [227, -66]], [[42922, 15278], [-274, 39], [-92, -61], [-67, -176], [50, -305]], [[42539, 14775], [-271, 164], [4, 169], [-155, -22], [16, -265], [-136, -407], [24, -254], [96, 57], [55, -266], [77, -276], [104, -34], [98, -103]], [[42451, 13538], [-43, -116], [-56, 24], [-61, -64], [9, 157], [-144, 114], [-16, -93]], [[42140, 13560], [-220, 420], [-46, -62], [-16, 214], [194, 610]], [[42131, 16673], [74, -94], [9, -178], [105, 34], [-32, -173], [4, -267], [189, 137], [107, -5], [107, 59], [155, -214], [-8, -198], [126, -188], [-45, -308]], [[43259, 15362], [-8, -513], [-240, -164], [51, -141], [-174, 0], [-89, -124]], [[42799, 14420], [-12, -34], [-174, 90], [-74, 299]], [[42922, 15278], [116, -68], [221, 152]], [[44397, 13244], [43, -148], [-102, -74], [-97, 131]], [[44241, 13153], [52, 91], [104, 0]], [[51753, 7691], [50, 25], [380, -386], [-51, -5], [-379, 366]], [[46409, 20623], [144, -316], [38, -254], [-58, -226], [-274, -119], [-182, -22], [19, 197], [62, 130], [-93, 220], [77, 215]], [[46142, 20448], [58, 96], [209, 79]], [[46719, 21464], [-132, -362], [-332, -344], [154, -135]], [[46142, 20448], [-135, 28], [-85, -40], [-78, 68], [109, 282], [-177, 115]], [[45776, 20901], [413, 433], [530, 130]], [[40189, 22897], [137, 110], [239, 57], [407, 235], [307, -55], [107, -137], [376, -27], [126, 128], [-107, 137], [157, 238], [508, -156], [31, -201], [264, -73], [269, 110], [615, -330], [656, 241], [81, 0], [271, -96]], [[44633, 23078], [-168, -401], [420, 9], [220, -279], [-377, -59], [-564, -402], [-276, 82], [-44, -137], [63, -156], [-263, -246], [-389, -28], [-307, -131], [-120, -79], [-426, 201], [-809, 73], [-48, 102], [-55, 54], [-355, 347], [-426, 55], [63, 293], [-138, 256], [-445, 265]], [[24547, 15022], [39, 109]], [[25340, 13647], [-60, 66], [-121, 198], [-77, 221]], [[39261, 18805], [461, -237], [318, -178], [316, -115]], [[31769, 27611], [-334, -312]], [[28790, 25113], [-120, 68], [-420, -338], [-348, 195], [-116, 663], [599, 451], [127, -51], [85, 188], [631, 637], [145, 248], [168, 85], [186, 146], [177, 127], [145, 37], [192, -31], [170, 123], [387, 82], [347, -5], [162, 17], [255, -90], [207, -54]], [[19814, 30354], [4390, 124], [118, -133], [-1300, -292], [1243, 27], [-550, -146], [108, -65], [1103, 289], [505, -195], [-273, -138], [-199, 64], [-185, -3], [-87, -68], [9, -67], [-817, -212], [23, -134], [463, 8], [59, -402], [-570, 124], [-128, -334], [635, 12], [-264, -603], [-708, -15], [38, -200], [158, 71], [389, -193], [-207, -334], [-567, 250], [-101, 65], [-377, -272], [890, -116], [-1034, -418], [-356, 57], [-507, -348], [-194, -206], [-186, 61], [-132, -133], [-288, -447], [-317, -757], [-365, 140], [-377, 89], [11, -89], [-568, 784], [-100, 267], [-107, 62], [-122, 329], [106, 348], [264, 10], [23, 210], [-438, -59], [-130, 215], [378, 122], [-138, 112], [-297, -24], [-178, 683], [-337, 279], [-694, 96], [-1107, 74], [-88, 184], [745, -24], [22, 71], [-940, 119], [-27, 102], [1188, 213], [-64, 126], [-351, 47], [2020, 465], [110, -172], [52, 183], [725, 117]], [[31285, 25207], [17, -193], [-74, -265]], [[31228, 24749], [-42, 21]], [[31186, 24770], [-307, 113], [-150, -43]], [[30729, 24840], [-163, 35], [-184, -32], [-36, 102], [11, 126], [516, 213], [165, -4], [247, -73]], [[31186, 24770], [90, -45]], [[31276, 24725], [10, -98], [42, -152]], [[31328, 24475], [-90, -76], [-165, -40]], [[31073, 24359], [-98, 82], [-165, 61], [-411, 22], [-151, -73]], [[30248, 24451], [7, 164], [89, 168], [124, 30], [176, -168], [106, 52], [-21, 143]], [[31073, 24359], [42, -85], [-132, -70], [-69, -146], [-301, -73]], [[30613, 23985], [-25, 83]], [[30588, 24068], [-96, 3]], [[30492, 24071], [22, 126], [-228, 70], [-61, 3]], [[30225, 24270], [23, 181]], [[31328, 24475], [407, -119], [0, -201], [278, -301], [-207, -37], [73, -222]], [[31879, 23595], [-125, -31], [-174, -208], [-160, 22], [-204, 151], [-206, 46], [-221, -39], [-134, -60]], [[30655, 23476], [-19, 82]], [[30691, 23730], [-78, 255]], [[31080, 22738], [31, 8], [127, 34], [218, -107], [27, -104], [94, -91], [34, -149], [-170, 25], [11, -95], [-144, -134]], [[31879, 23595], [218, 60], [122, -48], [218, -421], [401, -45], [200, -125], [84, -33], [-43, -343], [-148, 8], [-116, -161]], [[32815, 22487], [-188, -71], [-343, -157], [99, -166], [199, 17], [-23, -83], [-411, -157], [-182, 223], [199, 124], [-148, 75], [-244, 29], [-213, -240]], [[30416, 22752], [67, 178]], [[30710, 23241], [-55, 235]], [[33107, 21667], [85, 41], [500, -190], [267, -37], [96, -129], [-20, -85]], [[34035, 21267], [85, -55], [-16, -75], [-267, 69]], [[33837, 21206], [-221, -36]], [[33616, 21170], [-52, 70], [-210, 26]], [[33354, 21266], [-31, 239], [-216, 162]], [[33798, 20885], [-24, 37], [-127, 20], [8, 174], [-39, 54]], [[33837, 21206], [111, -86], [-38, -75], [83, -90], [0, -75], [91, -49], [0, -152]], [[34020, 20674], [-62, 115], [-103, 80], [-31, -25]], [[35202, 20353], [-21, 336], [-165, 256], [35, 220], [-79, 175]], [[35504, 21215], [165, -20], [-17, 180], [128, 87], [102, 69], [233, -101], [19, -209], [251, -40], [90, -259], [507, -367], [119, -68], [-11, -130]], [[37748, 20984], [-89, 35], [62, 61], [-23, 73], [-148, -90], [-147, -215], [-131, 17], [-74, -90], [143, -79], [24, -141], [-89, -248]], [[37630, 21365], [176, 59], [-155, -169], [213, -12], [213, -135], [-213, -152], [-116, 28]], [[37748, 20984], [-47, -51], [-178, 0], [-23, -113], [290, 23], [360, -51]], [[38150, 20792], [27, -158], [175, -51], [31, -248], [-59, 22]], [[39153, 21396], [-318, -237], [-178, -12], [-77, -141], [-232, 12], [-198, -226]], [[29181, 22310], [179, 62], [179, 62]], [[29565, 22350], [-4, 4]], [[29561, 22354], [0, 0], [-25, 14]], [[29536, 22368], [-80, -154], [-97, -74], [-218, -20]], [[29141, 22120], [-38, 42]], [[29103, 22162], [78, 148]], [[30172, 21418], [159, -3], [49, 22], [60, 11]], [[30440, 21448], [107, -133]], [[30547, 21315], [-28, -133]], [[30519, 21182], [-148, -40], [-116, -56]], [[31168, 21832], [110, -72], [43, -29]], [[31321, 21731], [51, -27], [-62, -70], [-93, -166], [82, -112]], [[31299, 21356], [-145, 21], [-113, -54], [43, -97]], [[31084, 21226], [-65, 5], [-122, -28], [-179, 74], [-54, 1], [-136, -54]], [[30528, 21224], [19, 91]], [[30440, 21448], [43, 8], [-22, 89], [48, 9], [29, 61], [-100, 126], [65, 132]], [[29880, 21465], [-126, 98]], [[29754, 21563], [-199, 248], [-83, 220], [191, 18], [145, -1], [158, -45]], [[29966, 22003], [36, -164], [9, -135]], [[30011, 21704], [-125, -103]], [[29886, 21601], [-6, -136]], [[33456, 14887], [-99, 186], [-77, 50], [-143, 198], [-224, -1], [-128, 90], [-52, -166], [-156, 42]], [[32577, 15286], [-13, 187], [77, 242], [6, 181], [77, 53], [118, 51], [44, 117], [177, -665], [18, 91], [193, -185], [280, -382], [15, -40]], [[33389, 13022], [-174, 62], [-180, -179], [-204, 27], [-343, 231]], [[32488, 13163], [-34, 165], [-62, -1], [-73, 238], [-139, 243], [-137, 62], [38, 137], [123, -8], [64, 536], [54, -20], [4, 15], [119, 400], [70, 8], [17, 139], [45, 209]], [[30140, 22743], [-298, -102]], [[29661, 22682], [-34, 181]], [[35361, 7562], [109, 67], [40, -228], [-122, 17], [-27, 144]], [[35697, 7778], [153, -82], [-50, -136], [-120, 13], [17, 205]], [[33568, 9553], [223, -9], [-86, -154], [-118, 18], [-19, 145]], [[29195, 20093], [112, -52], [-83, -104], [-29, 156]], [[33338, 11782], [-212, -284], [-145, -372]], [[32981, 11126], [-227, 344]], [[32754, 11470], [-569, 465]], [[32201, 13084], [51, 75]], [[32252, 13159], [236, 4]], [[43336, 16875], [-189, -175], [-174, -378], [495, -813], [74, -542], [-47, -338], [-348, -243], [-35, -169], [-244, -209], [-11, 339], [-58, 73]], [[43259, 15362], [-35, 328], [-336, 542], [-206, 180], [198, 158], [-48, 43], [-223, 110], [-228, 355]], [[42381, 17078], [108, 62], [232, -56], [213, 197], [205, -135], [-8, -164], [205, -107]], [[16248, 14704], [38, -244], [-11, -312], [93, -6], [-39, 409], [257, 136], [152, -28], [105, -188], [292, -13], [195, -100], [184, 153], [232, -23], [-152, -62], [102, -74], [194, -108], [199, -249]], [[17972, 13245], [-106, -122], [-178, -65], [-88, -186], [-274, 220], [128, -397], [101, -17], [-132, -176], [-202, -205], [-179, 85], [-63, 250]], [[34674, 17906], [18, 1], [5, -73], [-10, -24], [-15, 35], [2, 61]], [[27326, 13509], [-65, -25]], [[17877, 15081], [44, -109], [-84, -20], [-17, 127], [57, 2]], [[17956, 15266], [29, -88], [-114, -20], [15, 97], [70, 11]], [[17908, 15711], [-106, -66], [-32, 191], [138, -125]], [[18137, 15105], [48, -109], [-85, -16], [-21, 123], [58, 2]], [[17911, 15435], [46, -109], [-84, -20], [-20, 127], [58, 2]], [[17353, 16175], [-33, -150], [-28, 157], [61, -7]], [[16992, 16094], [-40, 190], [269, -183], [-229, -7]], [[26774, 21640], [134, 0], [69, -133], [314, 1], [13, 0]], [[27304, 21508], [-9, -16]], [[27295, 21492], [1, -34]], [[27296, 21458], [16, 1], [33, 4]], [[27345, 21463], [2, 33]], [[27347, 21496], [-26, 12]], [[27321, 21508], [46, 0], [39, 0], [58, 0], [63, -5]], [[27527, 21503], [45, -64], [3, -90], [-165, -141], [-102, -22], [-100, -96], [-168, -291], [65, -163], [-125, -227], [-183, -218], [-352, 14], [-199, -150], [-91, 33], [-135, 193]], [[26020, 20281], [-33, 514], [54, 133], [39, 387], [-202, 61], [-137, -1]], [[25741, 21375], [-62, 214], [178, 212], [917, -161]], [[26020, 20281], [-126, -31], [-175, 23], [35, 267], [-131, 96], [162, 504], [-44, 235]], [[37272, 17360], [-205, 373], [-384, -23], [-337, -62]], [[38291, 20242], [123, 8], [359, -310]], [[17928, 15511], [-101, -67], [-32, 191], [133, -124]], [[37851, 13122], [23, 80], [53, 57], [74, 21], [68, -23], [46, -59], [15, -80], [-23, -80], [-51, -57], [-71, -21], [-71, 23], [-48, 59], [-15, 80]], [[35323, 11189], [18, 80], [50, 57], [72, 21], [71, -22], [52, -56], [22, -80], [-16, -81], [-48, -59], [-70, -22], [-73, 22], [-55, 59], [-23, 81]], [[29539, 22434], [-358, -124]], [[29181, 22310], [12, 44], [-161, 13], [-114, 54], [-279, 27]], [[28639, 22448], [-90, 24]], [[28549, 22472], [-9, 24]], [[28540, 22496], [-16, 29]], [[28524, 22525], [7, 40]], [[28644, 22551], [391, 46]], [[42307, 16898], [31, -91], [63, 3], [-20, 268]], [[15349, 17676], [79, -287], [-9, -28], [-34, -9], [-103, 202], [34, 128], [33, -6]], [[17741, 15919], [-11, 64], [117, 2], [-47, -65], [-59, -1]], [[17817, 14843], [42, -109], [-84, -19], [-16, 127], [58, 1]], [[27295, 21492], [12, 22]], [[27307, 21514], [40, -18]], [[27345, 21463], [-49, -5]], [[28958, 21779], [-10, 1], [-2, 12], [9, 7], [8, 1], [0, -12], [-5, -9]], [[45927, 10106], [-13, 79]], [[45914, 10185], [96, 59], [138, -13], [-221, -125]], [[28062, 22987], [-63, 29]], [[42671, 12452], [67, 20]], [[42738, 12472], [66, -22], [47, -55], [16, -79], [-21, -76], [-49, -52], [-67, -20], [-66, 21], [-45, 54], [-16, 76], [20, 79], [48, 54]], [[30224, 6420], [-47, -64]], [[31793, 7240], [129, -980]], [[32032, 6255], [-51, -330], [-103, -128], [-296, -532], [-88, -115], [-286, -325], [-261, -142], [-581, -73], [-280, -106], [-239, 124], [-78, 321], [75, 73], [-280, 862]], [[18160, 18312], [0, -4], [0, -3], [0, -3], [0, -3], [0, -4], [0, -3], [-1, -3], [0, -3], [0, -4], [-1, -3], [0, -3], [-1, -3], [0, -3], [-1, -4], [0, -3], [-1, -3], [-1, -3], [0, -3], [-1, -3], [-1, -3], [-1, -3], [0, -3], [-1, -4], [-1, -3], [-1, -2], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-2, -3], [-1, -3], [-1, -2], [-1, -3], [-2, -3], [-1, -2], [-1, -3], [-2, -3], [-1, -2], [-1, -3], [-2, -2], [-1, -3], [-2, -2], [-1, -2], [-2, -3], [-2, -2], [-1, -2], [-2, -3], [-2, -2], [-1, -2], [-2, -2], [-2, -2], [-2, -2], [-1, -2], [-2, -2], [-2, -2], [-2, -1], [-2, -2], [-2, -2], [-2, -2], [-2, -1], [-2, -2], [-2, -1], [-2, -2], [-2, -1], [-2, -2], [-2, -1], [-2, -1], [-2, -1], [-2, -1], [-2, -1], [-2, -2], [-3, -1], [-2, 0], [-2, -1], [-2, -1], [-2, -1], [-2, -1], [-3, 0], [-2, -1], [-2, 0], [-2, -1], [-3, 0], [-2, -1], [-2, 0], [-2, 0], [-2, 0], [-3, -1], [-2, 0], [-2, 0], [-2, 0], [-3, 0], [-2, 1], [-2, 0], [-2, 0], [-3, 0], [-2, 1], [-2, 0], [-2, 1], [-2, 0], [-3, 1], [-2, 0], [-2, 1], [-2, 1], [-2, 1], [-2, 1], [-3, 0], [-2, 1], [-2, 2], [-2, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 2], [-2, 1], [-2, 2], [-2, 1], [-2, 2], [-2, 1], [-2, 2], [-2, 2], [-2, 2], [-2, 1], [-1, 2], [-2, 2], [-2, 2], [-2, 2], [-2, 2], [-1, 2], [-2, 2], [-2, 2], [-1, 3], [-2, 2], [-1, 2], [-2, 3], [-2, 2], [-1, 2], [-1, 3], [-2, 2], [-1, 3], [-2, 2], [-1, 3], [-1, 3], [-2, 2], [-1, 3], [-1, 3], [-1, 2], [-1, 3], [-2, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 2], [0, 3], [-1, 4], [-1, 3], [-1, 3], [-1, 3], [0, 3], [-1, 3], [0, 3], [-1, 3], [-1, 3], [0, 4], [-1, 3], [0, 3], [0, 3], [-1, 3], [0, 4], [0, 3], [0, 3], [-1, 3], [0, 4], [0, 3], [0, 3], [0, 3], [0, 4], [0, 3], [0, 3], [0, 4], [0, 3], [1, 3], [0, 3], [0, 4], [0, 3], [1, 3], [0, 3], [1, 3], [0, 4], [1, 3], [0, 3], [1, 3], [0, 3], [1, 4], [1, 3], [0, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 2], [1, 3], [1, 3], [1, 3], [2, 3], [1, 2], [1, 3], [2, 3], [1, 2], [1, 3], [2, 2], [1, 3], [2, 2], [1, 3], [2, 2], [2, 2], [1, 3], [2, 2], [1, 2], [2, 2], [2, 2], [2, 2], [1, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [1, 2], [2, 1], [2, 2], [2, 2], [2, 1], [2, 2], [2, 1], [2, 2], [2, 1], [2, 1], [2, 2], [3, 1], [2, 1], [2, 1], [2, 1], [2, 1], [2, 1], [2, 1], [3, 1], [2, 0], [2, 1], [2, 1], [2, 0], [3, 1], [2, 0], [2, 1], [2, 0], [2, 0], [3, 1], [2, 0], [2, 0], [2, 0], [3, 0], [2, 0], [2, 0], [2, 0], [3, 0], [2, -1], [2, 0], [2, 0], [2, -1], [3, 0], [2, -1], [2, 0], [2, -1], [2, -1], [3, 0], [2, -1], [2, -1], [2, -1], [2, -1], [2, -1], [2, -1], [2, -1], [3, -1], [2, -2], [2, -1], [2, -1], [2, -2], [2, -1], [2, -2], [2, -1], [2, -2], [1, -2], [2, -1], [2, -2], [2, -2], [2, -2], [2, -2], [2, -2], [1, -2], [2, -2], [2, -2], [1, -2], [2, -2], [2, -2], [1, -2], [2, -3], [1, -2], [2, -2], [1, -3], [2, -2], [1, -3], [2, -2], [1, -3], [1, -2], [2, -3], [1, -3], [1, -2], [2, -3], [1, -3], [1, -3], [1, -3], [1, -2], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [0, -3], [1, -3], [1, -3], [1, -3], [0, -3], [1, -4], [0, -3], [1, -3], [0, -3], [1, -3], [0, -4], [1, -3], [0, -3], [0, -3], [1, -3], [0, -4], [0, -3], [0, -3], [0, -3], [0, -4], [0, -3], [0, -3]], [[19086, 15913], [0, -4], [0, -3], [0, -3], [0, -3], [0, -4], [0, -3], [-1, -3], [0, -3], [0, -4], [-1, -3], [0, -3], [0, -3], [-1, -3], [0, -4], [-1, -3], [-1, -3], [0, -3], [-1, -3], [-1, -3], [0, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [0, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-2, -3], [-1, -3], [-1, -3], [-1, -2], [-1, -3], [-1, -3], [-2, -2], [-1, -3], [-1, -3], [-2, -2], [-1, -3], [-2, -2], [-1, -3], [-2, -2], [-1, -2], [-2, -3], [-1, -2], [-2, -2], [-2, -3], [-1, -2], [-2, -2], [-2, -2], [-1, -2], [-2, -2], [-2, -2], [-2, -2], [-2, -2], [-2, -1], [-1, -2], [-2, -2], [-2, -2], [-2, -1], [-2, -2], [-2, -1], [-2, -2], [-2, -1], [-2, -1], [-2, -2], [-2, -1], [-2, -1], [-3, -1], [-2, -1], [-2, -2], [-2, 0], [-2, -1], [-2, -1], [-2, -1], [-3, -1], [-2, -1], [-2, 0], [-2, -1], [-2, 0], [-3, -1], [-2, 0], [-2, -1], [-2, 0], [-3, 0], [-2, 0], [-2, -1], [-2, 0], [-3, 0], [-2, 0], [-2, 0], [-2, 1], [-3, 0], [-2, 0], [-2, 0], [-2, 1], [-2, 0], [-3, 1], [-2, 0], [-2, 1], [-2, 0], [-3, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 0], [-3, 2], [-2, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 2], [-2, 1], [-2, 1], [-2, 2], [-2, 1], [-2, 2], [-2, 1], [-2, 2], [-2, 2], [-2, 2], [-2, 1], [-2, 2], [-2, 2], [-1, 2], [-2, 2], [-2, 2], [-2, 2], [-1, 2], [-2, 2], [-2, 3], [-1, 2], [-2, 2], [-2, 3], [-1, 2], [-2, 2], [-1, 3], [-2, 2], [-1, 3], [-2, 2], [-1, 3], [-1, 3], [-2, 2], [-1, 3], [-1, 3], [-1, 2], [-2, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [0, 3], [-1, 3], [-1, 3], [0, 3], [-1, 3], [-1, 3], [0, 4], [-1, 3], [0, 3], [-1, 3], [0, 3], [0, 4], [-1, 3], [0, 3], [0, 3], [0, 4], [0, 3], [-1, 3], [0, 3], [0, 4], [0, 3], [0, 3], [0, 4], [0, 3], [1, 3], [0, 3], [0, 4], [0, 3], [1, 3], [0, 3], [0, 4], [1, 3], [0, 3], [1, 3], [0, 3], [1, 3], [1, 4], [0, 3], [1, 3], [1, 3], [0, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 2], [1, 3], [1, 3], [1, 3], [2, 3], [1, 2], [1, 3], [1, 3], [2, 2], [1, 3], [2, 2], [1, 3], [2, 2], [1, 3], [2, 2], [1, 2], [2, 3], [1, 2], [2, 2], [2, 2], [1, 2], [2, 2], [2, 2], [2, 2], [1, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 1], [2, 2], [2, 2], [2, 1], [1, 2], [2, 1], [3, 2], [2, 1], [2, 1], [2, 2], [2, 1], [2, 1], [2, 1], [2, 1], [2, 1], [2, 1], [3, 1], [2, 1], [2, 0], [2, 1], [2, 1], [3, 0], [2, 1], [2, 0], [2, 1], [2, 0], [3, 0], [2, 1], [2, 0], [2, 0], [3, 0], [2, 0], [2, 0], [2, 0], [3, 0], [2, 0], [2, -1], [2, 0], [3, 0], [2, -1], [2, 0], [2, -1], [3, 0], [2, -1], [2, -1], [2, 0], [2, -1], [2, -1], [3, -1], [2, -1], [2, -1], [2, -1], [2, -1], [2, -1], [2, -2], [2, -1], [2, -1], [3, -2], [2, -1], [2, -2], [2, -1], [2, -2], [1, -2], [2, -1], [2, -2], [2, -2], [2, -2], [2, -2], [2, -2], [2, -2], [1, -2], [2, -2], [2, -2], [1, -2], [2, -2], [2, -2], [1, -3], [2, -2], [2, -2], [1, -3], [2, -2], [1, -3], [2, -2], [1, -3], [1, -2], [2, -3], [1, -3], [1, -2], [2, -3], [1, -3], [1, -3], [1, -3], [1, -2], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [0, -3], [1, -3], [1, -4], [0, -3], [1, -3], [1, -3], [0, -3], [0, -3], [1, -4], [0, -3], [1, -3], [0, -3], [0, -4], [0, -3], [1, -3], [0, -3], [0, -4], [0, -3], [0, -3]], [[18724, 14713], [0, -4], [0, -3], [0, -3], [0, -3], [0, -4], [0, -3], [0, -3], [-1, -4], [0, -3], [0, -3], [-1, -3], [0, -3], [-1, -4], [0, -3], [-1, -3], [0, -3], [-1, -3], [-1, -3], [0, -3], [-1, -4], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [0, -3], [-1, -3], [-2, -2], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -2], [-2, -3], [-1, -3], [-1, -2], [-2, -3], [-1, -2], [-2, -3], [-1, -2], [-1, -3], [-2, -2], [-2, -3], [-1, -2], [-2, -2], [-1, -3], [-2, -2], [-2, -2], [-1, -2], [-2, -2], [-2, -2], [-2, -2], [-1, -2], [-2, -2], [-2, -2], [-2, -2], [-2, -1], [-2, -2], [-2, -2], [-2, -1], [-2, -2], [-2, -1], [-2, -2], [-2, -1], [-2, -2], [-2, -1], [-2, -1], [-2, -1], [-2, -2], [-2, -1], [-2, -1], [-2, -1], [-3, -1], [-2, 0], [-2, -1], [-2, -1], [-2, -1], [-2, 0], [-3, -1], [-2, -1], [-2, 0], [-2, 0], [-2, -1], [-3, 0], [-2, 0], [-2, -1], [-2, 0], [-3, 0], [-2, 0], [-2, 0], [-2, 0], [-3, 0], [-2, 1], [-2, 0], [-2, 0], [-3, 1], [-2, 0], [-2, 0], [-2, 1], [-2, 1], [-3, 0], [-2, 1], [-2, 1], [-2, 1], [-2, 0], [-3, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 2], [-2, 1], [-2, 1], [-2, 1], [-2, 2], [-2, 1], [-2, 2], [-2, 1], [-2, 2], [-2, 1], [-2, 2], [-2, 2], [-2, 1], [-2, 2], [-2, 2], [-2, 2], [-1, 2], [-2, 2], [-2, 2], [-2, 2], [-1, 2], [-2, 2], [-2, 2], [-1, 3], [-2, 2], [-1, 2], [-2, 3], [-2, 2], [-1, 3], [-2, 2], [-1, 3], [-1, 2], [-2, 3], [-1, 2], [-1, 3], [-2, 3], [-1, 2], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-2, 3], [-1, 2], [-1, 3], [-1, 3], [-1, 3], [0, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 4], [0, 3], [-1, 3], [-1, 3], [0, 3], [-1, 3], [0, 3], [-1, 4], [0, 3], [-1, 3], [0, 3], [0, 3], [-1, 4], [0, 3], [0, 3], [0, 4], [-1, 3], [0, 3], [0, 3], [0, 4], [0, 3], [0, 3], [0, 3], [1, 4], [0, 3], [0, 3], [0, 3], [1, 4], [0, 3], [0, 3], [1, 3], [0, 4], [1, 3], [0, 3], [1, 3], [0, 3], [1, 3], [1, 3], [0, 4], [1, 3], [1, 3], [1, 3], [0, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 2], [1, 3], [2, 3], [1, 3], [1, 3], [1, 2], [1, 3], [2, 3], [1, 2], [1, 3], [2, 3], [1, 2], [2, 3], [1, 2], [2, 2], [1, 3], [2, 2], [1, 2], [2, 3], [2, 2], [1, 2], [2, 2], [2, 2], [2, 2], [1, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [1, 1], [2, 2], [2, 2], [2, 1], [2, 2], [2, 1], [2, 1], [2, 2], [2, 1], [3, 1], [2, 2], [2, 1], [2, 1], [2, 1], [2, 1], [2, 1], [2, 1], [3, 0], [2, 1], [2, 1], [2, 1], [2, 0], [3, 1], [2, 0], [2, 1], [2, 0], [2, 0], [3, 1], [2, 0], [2, 0], [2, 0], [3, 0], [2, 0], [2, 0], [2, 0], [3, 0], [2, -1], [2, 0], [2, 0], [3, -1], [2, 0], [2, -1], [2, 0], [2, -1], [3, -1], [2, -1], [2, 0], [2, -1], [2, -1], [2, -1], [3, -1], [2, -1], [2, -1], [2, -2], [2, -1], [2, -1], [2, -2], [2, -1], [2, -1], [2, -2], [2, -1], [2, -2], [2, -2], [2, -1], [2, -2], [2, -2], [1, -2], [2, -2], [2, -2], [2, -2], [2, -2], [1, -2], [2, -2], [2, -2], [1, -2], [2, -3], [2, -2], [1, -2], [2, -3], [1, -2], [2, -2], [1, -3], [2, -2], [1, -3], [1, -3], [2, -2], [1, -3], [1, -3], [2, -2], [1, -3], [1, -3], [1, -3], [1, -3], [1, -2], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [0, -3], [1, -4], [1, -3], [0, -3], [1, -3], [1, -3], [0, -3], [1, -3], [0, -4], [0, -3], [1, -3], [0, -3], [0, -4], [1, -3], [0, -3], [0, -3], [0, -4], [0, -3], [0, -3], [0, -3]], [[48994, 15111], [0, -3], [0, -4], [0, -3], [0, -3], [-1, -4], [0, -3], [0, -3], [0, -3], [-1, -4], [0, -3], [-1, -3], [0, -4], [0, -3], [-1, -3], [-1, -3], [0, -3], [-1, -3], [0, -4], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [0, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-2, -3], [-1, -2], [-1, -3], [-1, -3], [-1, -3], [-2, -2], [-1, -3], [-1, -3], [-2, -2], [-1, -3], [-2, -2], [-1, -3], [-2, -2], [-1, -3], [-2, -2], [-1, -2], [-2, -3], [-2, -2], [-1, -2], [-2, -2], [-2, -2], [-2, -2], [-1, -2], [-2, -2], [-2, -2], [-2, -2], [-2, -2], [-2, -2], [-1, -1], [-2, -2], [-2, -2], [-2, -1], [-2, -2], [-2, -1], [-2, -2], [-2, -1], [-2, -1], [-3, -2], [-2, -1], [-2, -1], [-2, -1], [-2, -1], [-2, -1], [-2, -1], [-2, -1], [-3, -1], [-2, -1], [-2, 0], [-2, -1], [-2, -1], [-3, 0], [-2, -1], [-2, 0], [-2, 0], [-2, -1], [-3, 0], [-2, 0], [-2, 0], [-2, 0], [-3, -1], [-2, 1], [-2, 0], [-2, 0], [-3, 0], [-2, 0], [-2, 1], [-2, 0], [-3, 0], [-2, 1], [-2, 0], [-2, 1], [-2, 1], [-3, 0], [-2, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 1], [-3, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 2], [-2, 1], [-2, 1], [-2, 2], [-2, 1], [-2, 2], [-2, 1], [-2, 2], [-2, 2], [-2, 1], [-2, 2], [-2, 2], [-1, 2], [-2, 2], [-2, 2], [-2, 2], [-2, 2], [-1, 2], [-2, 2], [-2, 2], [-1, 2], [-2, 3], [-2, 2], [-1, 2], [-2, 3], [-1, 2], [-2, 3], [-1, 2], [-2, 3], [-1, 2], [-1, 3], [-2, 3], [-1, 2], [-1, 3], [-1, 3], [-2, 3], [-1, 2], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [0, 3], [-1, 3], [-1, 3], [-1, 4], [0, 3], [-1, 3], [0, 3], [-1, 3], [0, 3], [-1, 4], [0, 3], [-1, 3], [0, 4], [0, 3], [-1, 3], [0, 3], [0, 4], [0, 3], [0, 3], [0, 4], [0, 3], [0, 3], [0, 3], [0, 4], [0, 3], [0, 3], [0, 4], [1, 3], [0, 3], [0, 4], [1, 3], [0, 3], [1, 3], [0, 3], [1, 4], [0, 3], [1, 3], [0, 3], [1, 3], [1, 4], [1, 3], [0, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 2], [1, 3], [2, 3], [1, 3], [1, 3], [1, 2], [2, 3], [1, 2], [1, 3], [2, 3], [1, 2], [2, 3], [1, 2], [2, 2], [1, 3], [2, 2], [2, 2], [1, 3], [2, 2], [2, 2], [1, 2], [2, 2], [2, 2], [2, 2], [2, 2], [1, 2], [2, 2], [2, 2], [2, 1], [2, 2], [2, 2], [2, 1], [2, 2], [2, 1], [2, 2], [2, 1], [2, 1], [2, 1], [2, 2], [2, 1], [2, 1], [3, 1], [2, 1], [2, 1], [2, 1], [2, 1], [2, 0], [3, 1], [2, 1], [2, 0], [2, 1], [2, 0], [3, 1], [2, 0], [2, 1], [2, 0], [3, 0], [2, 0], [2, 0], [2, 0], [3, 0], [2, 0], [2, 0], [2, 0], [3, 0], [2, -1], [2, 0], [2, -1], [2, 0], [3, -1], [2, 0], [2, -1], [2, -1], [2, 0], [3, -1], [2, -1], [2, -1], [2, -1], [2, -1], [2, -1], [2, -1], [2, -2], [3, -1], [2, -1], [2, -1], [2, -2], [2, -1], [2, -2], [2, -1], [2, -2], [2, -2], [1, -1], [2, -2], [2, -2], [2, -2], [2, -2], [2, -2], [1, -2], [2, -2], [2, -2], [2, -2], [1, -2], [2, -3], [2, -2], [1, -2], [2, -3], [1, -2], [2, -2], [1, -3], [2, -2], [1, -3], [2, -3], [1, -2], [1, -3], [2, -2], [1, -3], [1, -3], [1, -3], [1, -3], [2, -2], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [0, -3], [1, -3], [1, -3], [1, -3], [1, -4], [0, -3], [1, -3], [0, -3], [1, -3], [1, -4], [0, -3], [0, -3], [1, -3], [0, -3], [1, -4], [0, -3], [0, -3], [0, -4], [1, -3], [0, -3], [0, -4], [0, -3], [0, -3]], [[49630, 13837], [0, -3], [0, -3], [-1, -3], [0, -4], [0, -3], [0, -3], [0, -4], [-1, -3], [0, -3], [0, -3], [-1, -4], [0, -3], [-1, -3], [0, -3], [-1, -4], [0, -3], [-1, -3], [-1, -3], [0, -3], [-1, -3], [-1, -3], [-1, -4], [-1, -3], [0, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -2], [-1, -3], [-2, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -2], [-2, -3], [-1, -3], [-1, -3], [-2, -2], [-1, -3], [-1, -2], [-2, -3], [-1, -2], [-2, -3], [-1, -2], [-2, -2], [-2, -3], [-1, -2], [-2, -2], [-2, -3], [-1, -2], [-2, -2], [-2, -2], [-2, -2], [-1, -2], [-2, -2], [-2, -2], [-2, -1], [-2, -2], [-2, -2], [-2, -2], [-2, -1], [-2, -2], [-2, -1], [-2, -2], [-2, -1], [-2, -2], [-2, -1], [-2, -1], [-2, -1], [-2, -2], [-2, -1], [-2, -1], [-2, -1], [-2, -1], [-3, -1], [-2, 0], [-2, -1], [-2, -1], [-2, 0], [-3, -1], [-2, -1], [-2, 0], [-2, -1], [-2, 0], [-3, 0], [-2, -1], [-2, 0], [-2, 0], [-3, 0], [-2, 0], [-2, 0], [-2, 0], [-3, 0], [-2, 0], [-2, 1], [-2, 0], [-3, 0], [-2, 1], [-2, 0], [-2, 1], [-2, 1], [-3, 0], [-2, 1], [-2, 1], [-2, 0], [-2, 1], [-2, 1], [-3, 1], [-2, 1], [-2, 1], [-2, 2], [-2, 1], [-2, 1], [-2, 1], [-2, 2], [-2, 1], [-2, 2], [-2, 1], [-2, 2], [-2, 1], [-2, 2], [-2, 2], [-2, 2], [-2, 1], [-2, 2], [-1, 2], [-2, 2], [-2, 2], [-2, 2], [-2, 2], [-1, 2], [-2, 3], [-2, 2], [-1, 2], [-2, 3], [-1, 2], [-2, 2], [-1, 3], [-2, 2], [-1, 3], [-2, 2], [-1, 3], [-2, 2], [-1, 3], [-1, 3], [-1, 3], [-2, 2], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 2], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 4], [-1, 3], [0, 3], [-1, 3], [-1, 3], [0, 3], [-1, 3], [-1, 4], [0, 3], [-1, 3], [0, 3], [0, 4], [-1, 3], [0, 3], [0, 3], [-1, 4], [0, 3], [0, 3], [0, 4], [0, 3], [0, 3], [0, 3], [0, 4], [0, 3], [0, 3], [0, 4], [0, 3], [0, 3], [1, 4], [0, 3], [0, 3], [1, 3], [0, 4], [0, 3], [1, 3], [0, 3], [1, 3], [1, 4], [0, 3], [1, 3], [1, 3], [0, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [2, 2], [1, 3], [1, 3], [1, 2], [2, 3], [1, 3], [2, 2], [1, 3], [2, 2], [1, 3], [2, 2], [1, 2], [2, 3], [1, 2], [2, 2], [2, 2], [1, 3], [2, 2], [2, 2], [2, 2], [2, 2], [1, 2], [2, 1], [2, 2], [2, 2], [2, 2], [2, 1], [2, 2], [2, 2], [2, 1], [2, 2], [2, 1], [2, 1], [2, 2], [2, 1], [2, 1], [2, 1], [2, 2], [2, 1], [3, 1], [2, 1], [2, 0], [2, 1], [2, 1], [2, 1], [3, 0], [2, 1], [2, 1], [2, 0], [2, 0], [3, 1], [2, 0], [2, 0], [2, 1], [3, 0], [2, 0], [2, 0], [2, 0], [3, 0], [2, 0], [2, -1], [2, 0], [3, 0], [2, -1], [2, 0], [2, 0], [2, -1], [3, -1], [2, 0], [2, -1], [2, -1], [2, -1], [3, 0], [2, -1], [2, -1], [2, -1], [2, -2], [2, -1], [2, -1], [2, -1], [2, -2], [2, -1], [2, -1], [2, -2], [2, -1], [2, -2], [2, -2], [2, -1], [2, -2], [2, -2], [2, -2], [2, -1], [2, -2], [1, -2], [2, -2], [2, -2], [2, -2], [1, -3], [2, -2], [2, -2], [1, -2], [2, -3], [2, -2], [1, -2], [2, -3], [1, -2], [2, -3], [1, -2], [1, -3], [2, -3], [1, -2], [1, -3], [2, -3], [1, -2], [1, -3], [1, -3], [1, -3], [2, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [0, -3], [1, -3], [1, -3], [1, -3], [1, -3], [0, -3], [1, -3], [1, -3], [0, -4], [1, -3], [0, -3], [1, -3], [0, -3], [1, -4], [0, -3], [0, -3], [1, -3], [0, -4], [0, -3], [0, -3], [0, -4], [1, -3], [0, -3], [0, -4]], [[51449, 10244], [0, -3], [0, -4], [0, -3], [0, -3], [0, -3], [-1, -4], [0, -3], [0, -3], [0, -4], [-1, -3], [0, -3], [-1, -3], [0, -4], [-1, -3], [0, -3], [-1, -3], [0, -3], [-1, -4], [-1, -3], [-1, -3], [0, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -2], [-2, -3], [-1, -3], [-1, -3], [-1, -2], [-2, -3], [-1, -3], [-1, -2], [-2, -3], [-1, -2], [-2, -3], [-1, -2], [-2, -3], [-1, -2], [-2, -2], [-2, -3], [-1, -2], [-2, -2], [-2, -2], [-1, -2], [-2, -2], [-2, -2], [-2, -2], [-2, -2], [-1, -2], [-2, -2], [-2, -2], [-2, -1], [-2, -2], [-2, -2], [-2, -1], [-2, -2], [-2, -1], [-2, -2], [-2, -1], [-2, -1], [-2, -2], [-2, -1], [-2, -1], [-3, -1], [-2, -1], [-2, -1], [-2, -1], [-2, -1], [-2, -1], [-2, -1], [-3, 0], [-2, -1], [-2, -1], [-2, 0], [-2, -1], [-3, 0], [-2, 0], [-2, -1], [-2, 0], [-3, 0], [-2, 0], [-2, 0], [-2, 0], [-3, 0], [-2, 0], [-2, 0], [-2, 0], [-3, 0], [-2, 1], [-2, 0], [-2, 0], [-2, 1], [-3, 0], [-2, 1], [-2, 1], [-2, 0], [-2, 1], [-3, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 1], [-3, 1], [-2, 2], [-2, 1], [-2, 1], [-2, 2], [-2, 1], [-2, 2], [-2, 1], [-2, 2], [-2, 2], [-1, 1], [-2, 2], [-2, 2], [-2, 2], [-2, 2], [-2, 2], [-1, 2], [-2, 2], [-2, 2], [-2, 2], [-1, 2], [-2, 2], [-2, 3], [-1, 2], [-2, 2], [-1, 3], [-2, 2], [-1, 3], [-2, 2], [-1, 3], [-2, 2], [-1, 3], [-1, 3], [-2, 2], [-1, 3], [-1, 3], [-1, 3], [-2, 2], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [0, 3], [-1, 3], [-1, 3], [-1, 3], [0, 4], [-1, 3], [-1, 3], [0, 3], [-1, 3], [0, 4], [-1, 3], [0, 3], [0, 3], [-1, 4], [0, 3], [0, 3], [0, 4], [-1, 3], [0, 3], [0, 3], [0, 4], [0, 3], [0, 3], [0, 4], [0, 3], [0, 3], [1, 4], [0, 3], [0, 3], [0, 3], [1, 4], [0, 3], [0, 3], [1, 3], [0, 4], [1, 3], [0, 3], [1, 3], [1, 3], [0, 4], [1, 3], [1, 3], [1, 3], [0, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [2, 2], [1, 3], [1, 3], [1, 3], [2, 2], [1, 3], [1, 3], [2, 2], [1, 3], [2, 2], [1, 3], [2, 2], [1, 3], [2, 2], [1, 2], [2, 3], [2, 2], [1, 2], [2, 2], [2, 2], [2, 2], [1, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [1, 1], [2, 2], [2, 2], [2, 1], [2, 2], [2, 1], [2, 2], [2, 1], [2, 1], [2, 2], [3, 1], [2, 1], [2, 1], [2, 1], [2, 1], [2, 1], [2, 1], [3, 1], [2, 1], [2, 0], [2, 1], [2, 1], [3, 0], [2, 1], [2, 0], [2, 0], [2, 1], [3, 0], [2, 0], [2, 0], [2, 0], [3, 0], [2, 0], [2, 0], [2, 0], [3, 0], [2, 0], [2, -1], [2, 0], [3, 0], [2, -1], [2, 0], [2, -1], [2, -1], [3, 0], [2, -1], [2, -1], [2, -1], [2, -1], [2, -1], [2, -1], [3, -1], [2, -1], [2, -1], [2, -2], [2, -1], [2, -1], [2, -2], [2, -1], [2, -2], [2, -1], [2, -2], [2, -2], [2, -1], [2, -2], [2, -2], [1, -2], [2, -2], [2, -2], [2, -2], [2, -2], [1, -2], [2, -2], [2, -2], [1, -2], [2, -3], [2, -2], [1, -2], [2, -3], [1, -2], [2, -3], [1, -2], [2, -3], [1, -2], [1, -3], [2, -3], [1, -2], [1, -3], [1, -3], [2, -3], [1, -2], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [0, -3], [1, -3], [1, -3], [1, -4], [0, -3], [1, -3], [0, -3], [1, -3], [0, -4], [1, -3], [0, -3], [1, -3], [0, -4], [0, -3], [0, -3], [1, -3], [0, -4], [0, -3], [0, -3], [0, -4], [0, -3]], [[53865, 10511], [0, -4], [0, -3], [0, -3], [0, -3], [0, -4], [0, -3], [0, -3], [-1, -4], [0, -3], [0, -3], [-1, -3], [0, -4], [-1, -3], [0, -3], [-1, -3], [0, -3], [-1, -4], [-1, -3], [-1, -3], [0, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -2], [-1, -3], [-2, -3], [-1, -3], [-1, -2], [-2, -3], [-1, -2], [-2, -3], [-1, -2], [-2, -3], [-1, -2], [-2, -3], [-1, -2], [-2, -2], [-1, -3], [-2, -2], [-2, -2], [-1, -2], [-2, -2], [-2, -2], [-2, -2], [-1, -2], [-2, -2], [-2, -2], [-2, -2], [-2, -2], [-2, -2], [-2, -1], [-2, -2], [-2, -1], [-2, -2], [-2, -1], [-2, -2], [-2, -1], [-2, -2], [-2, -1], [-2, -1], [-2, -1], [-2, -1], [-2, -1], [-2, -1], [-3, -1], [-2, -1], [-2, -1], [-2, -1], [-2, 0], [-3, -1], [-2, -1], [-2, 0], [-2, -1], [-2, 0], [-3, -1], [-2, 0], [-2, 0], [-2, 0], [-3, 0], [-2, -1], [-2, 0], [-2, 0], [-3, 1], [-2, 0], [-2, 0], [-2, 0], [-2, 0], [-3, 1], [-2, 0], [-2, 1], [-2, 0], [-3, 1], [-2, 1], [-2, 0], [-2, 1], [-2, 1], [-2, 1], [-3, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 2], [-2, 1], [-2, 2], [-2, 1], [-2, 2], [-2, 1], [-2, 2], [-2, 1], [-2, 2], [-2, 2], [-2, 2], [-2, 2], [-2, 2], [-1, 2], [-2, 2], [-2, 2], [-2, 2], [-1, 2], [-2, 2], [-2, 2], [-1, 3], [-2, 2], [-1, 2], [-2, 3], [-2, 2], [-1, 3], [-1, 2], [-2, 3], [-1, 2], [-2, 3], [-1, 2], [-1, 3], [-2, 3], [-1, 3], [-1, 2], [-1, 3], [-1, 3], [-1, 3], [-2, 3], [-1, 3], [-1, 3], [-1, 3], [0, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [0, 3], [-1, 3], [-1, 4], [0, 3], [-1, 3], [0, 3], [-1, 3], [0, 4], [-1, 3], [0, 3], [0, 3], [-1, 4], [0, 3], [0, 3], [0, 4], [0, 3], [0, 3], [-1, 3], [0, 4], [0, 3], [1, 3], [0, 4], [0, 3], [0, 3], [0, 4], [0, 3], [1, 3], [0, 3], [0, 4], [1, 3], [0, 3], [1, 3], [0, 4], [1, 3], [0, 3], [1, 3], [1, 3], [0, 3], [1, 4], [1, 3], [1, 3], [1, 3], [1, 3], [0, 3], [1, 3], [1, 3], [1, 3], [2, 3], [1, 2], [1, 3], [1, 3], [1, 3], [1, 3], [2, 2], [1, 3], [1, 3], [2, 2], [1, 3], [2, 3], [1, 2], [1, 3], [2, 2], [2, 2], [1, 3], [2, 2], [1, 2], [2, 3], [2, 2], [1, 2], [2, 2], [2, 2], [2, 2], [1, 2], [2, 2], [2, 2], [2, 2], [2, 1], [2, 2], [2, 2], [2, 1], [2, 2], [2, 2], [2, 1], [2, 1], [2, 2], [2, 1], [2, 1], [2, 2], [2, 1], [2, 1], [2, 1], [2, 1], [3, 1], [2, 1], [2, 1], [2, 0], [2, 1], [2, 1], [3, 0], [2, 1], [2, 0], [2, 1], [3, 0], [2, 0], [2, 1], [2, 0], [2, 0], [3, 0], [2, 0], [2, 0], [2, 0], [3, 0], [2, 0], [2, -1], [2, 0], [3, 0], [2, -1], [2, 0], [2, -1], [2, 0], [3, -1], [2, -1], [2, 0], [2, -1], [2, -1], [3, -1], [2, -1], [2, -1], [2, -1], [2, -1], [2, -2], [2, -1], [2, -1], [2, -2], [2, -1], [2, -1], [2, -2], [2, -2], [2, -1], [2, -2], [2, -2], [2, -1], [2, -2], [2, -2], [2, -2], [1, -2], [2, -2], [2, -2], [2, -2], [1, -2], [2, -2], [2, -3], [1, -2], [2, -2], [1, -3], [2, -2], [1, -2], [2, -3], [1, -2], [2, -3], [1, -3], [2, -2], [1, -3], [1, -3], [2, -2], [1, -3], [1, -3], [1, -3], [1, -3], [1, -2], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [0, -4], [1, -3], [1, -3], [1, -3], [0, -3], [1, -3], [0, -4], [1, -3], [0, -3], [1, -3], [0, -4], [0, -3], [1, -3], [0, -3], [0, -4], [0, -3], [0, -3], [0, -4], [0, -3], [0, -3]], [[53441, 12095], [0, -3], [0, -3], [0, -4], [-1, -3], [0, -3], [0, -4], [0, -3], [-1, -3], [0, -3], [0, -4], [-1, -3], [0, -3], [-1, -3], [0, -4], [-1, -3], [0, -3], [-1, -3], [-1, -3], [0, -3], [-1, -4], [-1, -3], [-1, -3], [-1, -3], [0, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-2, -2], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-2, -2], [-1, -3], [-1, -3], [-2, -2], [-1, -3], [-1, -2], [-2, -3], [-1, -2], [-2, -3], [-1, -2], [-2, -3], [-2, -2], [-1, -2], [-2, -3], [-2, -2], [-1, -2], [-2, -2], [-2, -2], [-1, -2], [-2, -2], [-2, -2], [-2, -2], [-2, -2], [-2, -1], [-2, -2], [-2, -2], [-2, -1], [-1, -2], [-2, -2], [-2, -1], [-3, -1], [-2, -2], [-2, -1], [-2, -1], [-2, -2], [-2, -1], [-2, -1], [-2, -1], [-2, -1], [-2, -1], [-3, -1], [-2, -1], [-2, 0], [-2, -1], [-2, -1], [-3, 0], [-2, -1], [-2, 0], [-2, -1], [-2, 0], [-3, 0], [-2, -1], [-2, 0], [-2, 0], [-3, 0], [-2, 0], [-2, 0], [-2, 0], [-3, 0], [-2, 0], [-2, 1], [-2, 0], [-3, 0], [-2, 1], [-2, 0], [-2, 1], [-2, 0], [-3, 1], [-2, 1], [-2, 0], [-2, 1], [-2, 1], [-2, 1], [-3, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 2], [-2, 1], [-2, 1], [-2, 2], [-2, 1], [-2, 1], [-2, 2], [-2, 2], [-2, 1], [-2, 2], [-2, 2], [-2, 1], [-2, 2], [-2, 2], [-1, 2], [-2, 2], [-2, 2], [-2, 2], [-1, 2], [-2, 2], [-2, 2], [-1, 3], [-2, 2], [-2, 2], [-1, 3], [-2, 2], [-1, 3], [-2, 2], [-1, 3], [-2, 2], [-1, 3], [-1, 2], [-2, 3], [-1, 3], [-1, 2], [-2, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 2], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [0, 4], [-1, 3], [-1, 3], [0, 3], [-1, 3], [-1, 3], [0, 4], [-1, 3], [0, 3], [0, 3], [-1, 4], [0, 3], [0, 3], [-1, 3], [0, 4], [0, 3], [0, 3], [0, 4], [0, 3], [0, 3], [0, 4], [0, 3], [0, 3], [0, 3], [0, 4], [0, 3], [1, 3], [0, 4], [0, 3], [1, 3], [0, 3], [0, 4], [1, 3], [0, 3], [1, 3], [1, 3], [0, 4], [1, 3], [1, 3], [0, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 2], [2, 3], [1, 3], [1, 3], [2, 2], [1, 3], [1, 2], [2, 3], [1, 3], [2, 2], [1, 2], [2, 3], [1, 2], [2, 2], [2, 3], [1, 2], [2, 2], [2, 2], [1, 2], [2, 3], [2, 2], [2, 1], [1, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 1], [2, 2], [2, 1], [2, 2], [2, 1], [2, 2], [2, 1], [2, 2], [2, 1], [2, 1], [2, 1], [2, 1], [2, 1], [3, 1], [2, 1], [2, 1], [2, 1], [2, 1], [2, 1], [3, 0], [2, 1], [2, 0], [2, 1], [2, 0], [3, 1], [2, 0], [2, 0], [2, 0], [3, 1], [2, 0], [2, 0], [2, 0], [3, 0], [2, -1], [2, 0], [2, 0], [3, 0], [2, -1], [2, 0], [2, -1], [2, 0], [3, -1], [2, 0], [2, -1], [2, -1], [2, -1], [3, -1], [2, -1], [2, -1], [2, -1], [2, -1], [2, -1], [2, -1], [2, -1], [2, -2], [2, -1], [3, -2], [2, -1], [2, -2], [1, -1], [2, -2], [2, -1], [2, -2], [2, -2], [2, -2], [2, -2], [2, -2], [2, -1], [1, -2], [2, -3], [2, -2], [1, -2], [2, -2], [2, -2], [1, -3], [2, -2], [2, -2], [1, -3], [2, -2], [1, -2], [2, -3], [1, -3], [1, -2], [2, -3], [1, -2], [1, -3], [2, -3], [1, -3], [1, -2], [1, -3], [1, -3], [2, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [0, -3], [1, -3], [1, -3], [1, -3], [1, -3], [0, -3], [1, -3], [1, -4], [0, -3], [1, -3], [0, -3], [1, -3], [0, -4], [1, -3], [0, -3], [0, -3], [1, -4], [0, -3], [0, -3], [0, -4], [1, -3], [0, -3], [0, -3], [0, -4]], [[52819, 13589], [0, -3], [0, -3], [0, -4], [0, -3], [0, -3], [-1, -4], [0, -3], [0, -3], [0, -3], [-1, -4], [0, -3], [-1, -3], [0, -3], [-1, -4], [0, -3], [-1, -3], [0, -3], [-1, -3], [-1, -4], [-1, -3], [0, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -2], [-1, -3], [-2, -3], [-1, -3], [-1, -3], [-1, -2], [-2, -3], [-1, -2], [-2, -3], [-1, -3], [-1, -2], [-2, -3], [-1, -2], [-2, -2], [-2, -3], [-1, -2], [-2, -2], [-1, -3], [-2, -2], [-2, -2], [-2, -2], [-1, -2], [-2, -2], [-2, -2], [-2, -2], [-2, -2], [-1, -2], [-2, -1], [-2, -2], [-2, -2], [-2, -2], [-2, -1], [-2, -2], [-2, -1], [-2, -2], [-2, -1], [-2, -1], [-2, -1], [-2, -2], [-2, -1], [-3, -1], [-2, -1], [-2, -1], [-2, -1], [-2, -1], [-2, -1], [-2, 0], [-3, -1], [-2, -1], [-2, 0], [-2, -1], [-3, 0], [-2, -1], [-2, 0], [-2, -1], [-2, 0], [-3, 0], [-2, 0], [-2, 0], [-2, 0], [-3, 0], [-2, 0], [-2, 0], [-2, 0], [-3, 0], [-2, 1], [-2, 0], [-2, 1], [-3, 0], [-2, 1], [-2, 0], [-2, 1], [-2, 1], [-2, 0], [-3, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 1], [-3, 2], [-2, 1], [-2, 1], [-2, 1], [-2, 2], [-2, 1], [-2, 2], [-2, 1], [-2, 2], [-2, 2], [-2, 2], [-1, 1], [-2, 2], [-2, 2], [-2, 2], [-2, 2], [-2, 2], [-1, 2], [-2, 2], [-2, 2], [-1, 2], [-2, 3], [-2, 2], [-1, 2], [-2, 3], [-1, 2], [-2, 2], [-1, 3], [-2, 2], [-1, 3], [-2, 3], [-1, 2], [-1, 3], [-2, 2], [-1, 3], [-1, 3], [-1, 3], [-2, 3], [-1, 2], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [0, 3], [-1, 3], [-1, 3], [-1, 4], [0, 3], [-1, 3], [-1, 3], [0, 3], [-1, 4], [0, 3], [-1, 3], [0, 3], [0, 4], [-1, 3], [0, 3], [0, 3], [0, 4], [-1, 3], [0, 3], [0, 4], [0, 3], [0, 3], [0, 3], [0, 4], [0, 3], [0, 3], [1, 4], [0, 3], [0, 3], [0, 3], [1, 4], [0, 3], [0, 3], [1, 4], [0, 3], [1, 3], [0, 3], [1, 3], [1, 4], [0, 3], [1, 3], [1, 3], [1, 3], [0, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [2, 3], [1, 2], [1, 3], [1, 3], [2, 2], [1, 3], [1, 3], [2, 2], [1, 3], [2, 2], [1, 3], [2, 2], [1, 3], [2, 2], [1, 2], [2, 3], [2, 2], [1, 2], [2, 2], [2, 2], [1, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [1, 2], [2, 1], [2, 2], [2, 2], [2, 1], [2, 2], [2, 1], [2, 2], [2, 1], [2, 1], [2, 2], [3, 1], [2, 1], [2, 1], [2, 1], [2, 1], [2, 1], [2, 1], [3, 1], [2, 1], [2, 0], [2, 1], [2, 1], [2, 0], [3, 1], [2, 0], [2, 1], [2, 0], [3, 0], [2, 0], [2, 0], [2, 1], [3, 0], [2, 0], [2, -1], [2, 0], [3, 0], [2, 0], [2, 0], [2, -1], [2, 0], [3, -1], [2, 0], [2, -1], [2, -1], [3, 0], [2, -1], [2, -1], [2, -1], [2, -1], [2, -1], [2, -1], [3, -1], [2, -1], [2, -1], [2, -2], [2, -1], [2, -1], [2, -2], [2, -1], [2, -2], [2, -1], [2, -2], [2, -2], [2, -1], [2, -2], [1, -2], [2, -2], [2, -2], [2, -2], [2, -2], [1, -2], [2, -2], [2, -2], [2, -2], [1, -2], [2, -3], [1, -2], [2, -2], [2, -3], [1, -2], [2, -3], [1, -2], [1, -3], [2, -2], [1, -3], [2, -3], [1, -2], [1, -3], [1, -3], [2, -2], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [0, -3], [1, -3], [1, -3], [1, -3], [0, -4], [1, -3], [0, -3], [1, -3], [0, -3], [1, -4], [0, -3], [1, -3], [0, -4], [0, -3], [0, -3], [1, -3], [0, -4], [0, -3], [0, -3], [0, -4], [0, -3]], [[52328, 12044], [0, -3], [0, -4], [0, -3], [0, -3], [0, -3], [0, -4], [-1, -3], [0, -3], [0, -4], [-1, -3], [0, -3], [0, -3], [-1, -4], [0, -3], [-1, -3], [-1, -3], [0, -3], [-1, -3], [-1, -4], [0, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -2], [-1, -3], [-1, -3], [-2, -3], [-1, -3], [-1, -2], [-2, -3], [-1, -3], [-1, -2], [-2, -3], [-1, -2], [-2, -3], [-1, -2], [-2, -3], [-1, -2], [-2, -2], [-2, -2], [-1, -3], [-2, -2], [-2, -2], [-1, -2], [-2, -2], [-2, -2], [-2, -2], [-1, -2], [-2, -2], [-2, -2], [-2, -2], [-2, -1], [-2, -2], [-2, -2], [-2, -1], [-2, -2], [-2, -1], [-2, -2], [-2, -1], [-2, -1], [-2, -2], [-2, -1], [-2, -1], [-2, -1], [-2, -1], [-3, -1], [-2, -1], [-2, -1], [-2, -1], [-2, 0], [-2, -1], [-3, -1], [-2, 0], [-2, -1], [-2, 0], [-3, -1], [-2, 0], [-2, -1], [-2, 0], [-2, 0], [-3, 0], [-2, 0], [-2, 0], [-2, 0], [-3, 0], [-2, 0], [-2, 0], [-2, 0], [-3, 1], [-2, 0], [-2, 1], [-2, 0], [-3, 1], [-2, 0], [-2, 1], [-2, 1], [-2, 0], [-2, 1], [-3, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 2], [-2, 1], [-3, 1], [-2, 2], [-2, 1], [-2, 2], [-2, 1], [-1, 2], [-2, 2], [-2, 1], [-2, 2], [-2, 2], [-2, 2], [-2, 2], [-2, 2], [-1, 2], [-2, 2], [-2, 2], [-2, 2], [-1, 2], [-2, 3], [-1, 2], [-2, 2], [-2, 2], [-1, 3], [-2, 2], [-1, 3], [-2, 2], [-1, 3], [-1, 2], [-2, 3], [-1, 3], [-1, 2], [-2, 3], [-1, 3], [-1, 3], [-1, 3], [-2, 2], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [0, 3], [-1, 3], [-1, 3], [-1, 3], [0, 4], [-1, 3], [-1, 3], [0, 3], [-1, 3], [0, 3], [-1, 4], [0, 3], [-1, 3], [0, 3], [0, 4], [-1, 3], [0, 3], [0, 4], [0, 3], [-1, 3], [0, 3], [0, 4], [0, 3], [0, 3], [0, 4], [0, 3], [1, 3], [0, 4], [0, 3], [0, 3], [1, 3], [0, 4], [0, 3], [1, 3], [0, 3], [1, 4], [0, 3], [1, 3], [0, 3], [1, 3], [1, 4], [0, 3], [1, 3], [1, 3], [1, 3], [0, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [2, 3], [1, 2], [1, 3], [1, 3], [2, 3], [1, 2], [1, 3], [2, 3], [1, 2], [1, 3], [2, 2], [1, 3], [2, 2], [1, 3], [2, 2], [2, 2], [1, 3], [2, 2], [1, 2], [2, 2], [2, 2], [2, 2], [1, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 1], [2, 2], [1, 2], [2, 1], [2, 2], [2, 1], [2, 2], [3, 1], [2, 1], [2, 2], [2, 1], [2, 1], [2, 1], [2, 1], [2, 1], [2, 1], [3, 1], [2, 1], [2, 1], [2, 0], [2, 1], [2, 1], [3, 0], [2, 1], [2, 0], [2, 0], [3, 1], [2, 0], [2, 0], [2, 0], [3, 0], [2, 0], [2, 0], [2, 0], [3, 0], [2, 0], [2, 0], [2, -1], [2, 0], [3, 0], [2, -1], [2, 0], [2, -1], [3, -1], [2, 0], [2, -1], [2, -1], [2, -1], [2, -1], [3, -1], [2, -1], [2, -1], [2, -1], [2, -1], [2, -2], [2, -1], [2, -1], [2, -2], [2, -1], [2, -2], [2, -1], [2, -2], [2, -2], [2, -1], [2, -2], [2, -2], [2, -2], [1, -2], [2, -2], [2, -2], [2, -2], [1, -2], [2, -2], [2, -2], [1, -2], [2, -3], [2, -2], [1, -2], [2, -3], [1, -2], [2, -3], [1, -2], [2, -3], [1, -2], [1, -3], [2, -3], [1, -2], [1, -3], [2, -3], [1, -3], [1, -2], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [0, -3], [1, -3], [1, -4], [0, -3], [1, -3], [1, -3], [0, -3], [1, -4], [0, -3], [0, -3], [1, -3], [0, -4], [0, -3], [1, -3], [0, -3], [0, -4], [0, -3], [0, -3], [0, -4], [0, -3]], [[18961, 15279], [0, -3], [0, -4], [0, -3], [-1, -3], [0, -3], [0, -4], [0, -3], [-1, -3], [0, -3], [0, -4], [-1, -3], [0, -3], [0, -3], [-1, -3], [-1, -4], [0, -3], [-1, -3], [0, -3], [-1, -3], [-1, -3], [-1, -3], [0, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-2, -2], [-1, -3], [-1, -3], [-1, -3], [-2, -2], [-1, -3], [-1, -3], [-2, -2], [-1, -3], [-1, -2], [-2, -3], [-1, -2], [-2, -2], [-2, -3], [-1, -2], [-2, -2], [-1, -2], [-2, -3], [-2, -2], [-2, -2], [-1, -2], [-2, -2], [-2, -2], [-2, -2], [-2, -2], [-1, -1], [-2, -2], [-2, -2], [-2, -1], [-2, -2], [-2, -2], [-2, -1], [-2, -2], [-2, -1], [-2, -1], [-2, -2], [-2, -1], [-2, -1], [-2, -1], [-3, -1], [-2, -1], [-2, -1], [-2, -1], [-2, -1], [-2, -1], [-2, -1], [-3, 0], [-2, -1], [-2, -1], [-2, 0], [-2, -1], [-3, 0], [-2, -1], [-2, 0], [-2, 0], [-3, 0], [-2, 0], [-2, -1], [-2, 0], [-3, 0], [-2, 1], [-2, 0], [-2, 0], [-3, 0], [-2, 0], [-2, 1], [-2, 0], [-3, 1], [-2, 0], [-2, 1], [-2, 1], [-2, 0], [-3, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 1], [-3, 1], [-2, 1], [-2, 1], [-2, 2], [-2, 1], [-2, 1], [-2, 2], [-2, 1], [-2, 2], [-2, 2], [-2, 1], [-2, 2], [-2, 2], [-1, 1], [-2, 2], [-2, 2], [-2, 2], [-2, 2], [-2, 2], [-1, 2], [-2, 2], [-2, 3], [-1, 2], [-2, 2], [-2, 2], [-1, 3], [-2, 2], [-1, 2], [-2, 3], [-1, 2], [-2, 3], [-1, 2], [-1, 3], [-2, 3], [-1, 2], [-1, 3], [-2, 3], [-1, 3], [-1, 2], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [0, 3], [-1, 3], [-1, 3], [0, 3], [-1, 4], [0, 3], [-1, 3], [0, 3], [-1, 3], [0, 4], [0, 3], [-1, 3], [0, 3], [0, 4], [0, 3], [-1, 3], [0, 3], [0, 4], [0, 3], [0, 3], [0, 3], [0, 4], [0, 3], [1, 3], [0, 3], [0, 4], [0, 3], [1, 3], [0, 3], [0, 4], [1, 3], [0, 3], [1, 3], [0, 3], [1, 4], [1, 3], [0, 3], [1, 3], [1, 3], [1, 3], [0, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 2], [1, 3], [2, 3], [1, 3], [1, 2], [1, 3], [2, 3], [1, 2], [1, 3], [2, 2], [1, 3], [2, 2], [1, 3], [2, 2], [1, 2], [2, 3], [2, 2], [1, 2], [2, 2], [2, 2], [1, 3], [2, 2], [2, 2], [2, 2], [2, 1], [1, 2], [2, 2], [2, 2], [2, 2], [2, 1], [2, 2], [2, 1], [2, 2], [2, 1], [2, 2], [2, 1], [2, 1], [2, 2], [2, 1], [2, 1], [2, 1], [2, 1], [3, 1], [2, 1], [2, 1], [2, 1], [2, 1], [2, 0], [3, 1], [2, 0], [2, 1], [2, 0], [3, 1], [2, 0], [2, 1], [2, 0], [3, 0], [2, 0], [2, 0], [2, 0], [2, 0], [3, 0], [2, 0], [2, 0], [2, 0], [3, -1], [2, 0], [2, -1], [2, 0], [3, -1], [2, 0], [2, -1], [2, 0], [2, -1], [3, -1], [2, -1], [2, -1], [2, -1], [2, -1], [2, -1], [2, -1], [3, -1], [2, -2], [2, -1], [2, -1], [2, -2], [2, -1], [2, -2], [2, -1], [2, -2], [2, -1], [2, -2], [1, -2], [2, -2], [2, -2], [2, -1], [2, -2], [2, -2], [1, -2], [2, -3], [2, -2], [2, -2], [1, -2], [2, -2], [1, -3], [2, -2], [2, -2], [1, -3], [2, -2], [1, -3], [2, -2], [1, -3], [1, -2], [2, -3], [1, -3], [1, -2], [2, -3], [1, -3], [1, -3], [1, -2], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [0, -3], [1, -3], [1, -3], [0, -3], [1, -4], [1, -3], [0, -3], [1, -3], [0, -3], [1, -4], [0, -3], [0, -3], [1, -3], [0, -4], [0, -3], [0, -3], [0, -3], [1, -4], [0, -3], [0, -3]], [[18885, 17287], [0, -3], [0, -4], [0, -3], [0, -3], [0, -3], [-1, -4], [0, -3], [0, -3], [0, -3], [-1, -4], [0, -3], [-1, -3], [0, -3], [-1, -3], [0, -4], [-1, -3], [-1, -3], [0, -3], [-1, -3], [-1, -3], [0, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -2], [-2, -3], [-1, -3], [-1, -3], [-1, -2], [-2, -3], [-1, -2], [-2, -3], [-1, -3], [-1, -2], [-2, -3], [-1, -2], [-2, -2], [-2, -3], [-1, -2], [-2, -2], [-1, -2], [-2, -3], [-2, -2], [-2, -2], [-1, -2], [-2, -2], [-2, -2], [-2, -2], [-2, -1], [-2, -2], [-1, -2], [-2, -2], [-2, -1], [-2, -2], [-2, -2], [-2, -1], [-2, -2], [-2, -1], [-2, -1], [-2, -2], [-2, -1], [-2, -1], [-3, -1], [-2, -1], [-2, -1], [-2, -1], [-2, -1], [-2, -1], [-2, -1], [-3, -1], [-2, 0], [-2, -1], [-2, -1], [-2, 0], [-3, -1], [-2, 0], [-2, 0], [-2, -1], [-3, 0], [-2, 0], [-2, 0], [-2, 0], [-3, -1], [-2, 1], [-2, 0], [-2, 0], [-2, 0], [-3, 0], [-2, 1], [-2, 0], [-2, 0], [-3, 1], [-2, 0], [-2, 1], [-2, 1], [-2, 0], [-3, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 1], [-3, 1], [-2, 1], [-2, 1], [-2, 2], [-2, 1], [-2, 1], [-2, 2], [-2, 1], [-2, 2], [-2, 2], [-2, 1], [-2, 2], [-1, 2], [-2, 2], [-2, 1], [-2, 2], [-2, 2], [-2, 2], [-1, 2], [-2, 2], [-2, 2], [-1, 3], [-2, 2], [-2, 2], [-1, 2], [-2, 3], [-1, 2], [-2, 2], [-1, 3], [-2, 2], [-1, 3], [-2, 3], [-1, 2], [-1, 3], [-2, 2], [-1, 3], [-1, 3], [-1, 3], [-2, 2], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [0, 3], [-1, 3], [-1, 3], [-1, 3], [0, 3], [-1, 3], [-1, 3], [0, 4], [-1, 3], [0, 3], [-1, 3], [0, 3], [0, 4], [-1, 3], [0, 3], [0, 3], [0, 4], [-1, 3], [0, 3], [0, 3], [0, 4], [0, 3], [0, 3], [0, 3], [0, 4], [0, 3], [1, 3], [0, 4], [0, 3], [0, 3], [1, 3], [0, 3], [0, 4], [1, 3], [0, 3], [1, 3], [0, 3], [1, 4], [1, 3], [0, 3], [1, 3], [1, 3], [1, 3], [0, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 2], [2, 3], [1, 3], [1, 3], [1, 2], [2, 3], [1, 3], [1, 2], [2, 3], [1, 2], [2, 3], [1, 2], [2, 3], [1, 2], [2, 2], [1, 3], [2, 2], [2, 2], [1, 2], [2, 2], [2, 3], [2, 2], [1, 2], [2, 2], [2, 1], [2, 2], [2, 2], [2, 2], [1, 2], [2, 1], [2, 2], [2, 1], [2, 2], [2, 1], [2, 2], [2, 1], [2, 1], [3, 2], [2, 1], [2, 1], [2, 1], [2, 1], [2, 1], [2, 1], [2, 1], [3, 1], [2, 1], [2, 0], [2, 1], [2, 0], [3, 1], [2, 1], [2, 0], [2, 0], [2, 1], [3, 0], [2, 0], [2, 0], [2, 0], [3, 0], [2, 0], [2, 0], [2, 0], [3, 0], [2, 0], [2, -1], [2, 0], [3, 0], [2, -1], [2, -1], [2, 0], [2, -1], [3, 0], [2, -1], [2, -1], [2, -1], [2, -1], [2, -1], [3, -1], [2, -1], [2, -1], [2, -1], [2, -2], [2, -1], [2, -1], [2, -2], [2, -1], [2, -2], [2, -1], [2, -2], [2, -1], [2, -2], [2, -2], [2, -2], [1, -2], [2, -1], [2, -2], [2, -2], [2, -2], [1, -3], [2, -2], [2, -2], [1, -2], [2, -2], [2, -3], [1, -2], [2, -2], [1, -3], [2, -2], [1, -3], [2, -2], [1, -3], [1, -2], [2, -3], [1, -3], [1, -2], [1, -3], [2, -3], [1, -3], [1, -2], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [0, -3], [1, -3], [1, -3], [1, -3], [0, -3], [1, -4], [0, -3], [1, -3], [0, -3], [1, -3], [0, -4], [1, -3], [0, -3], [0, -3], [0, -3], [1, -4], [0, -3], [0, -3], [0, -4], [0, -3], [0, -3]], [[19061, 16588], [0, -3], [-1, -3], [0, -3], [0, -4], [0, -3], [0, -3], [0, -4], [-1, -3], [0, -3], [0, -3], [-1, -3], [0, -4], [-1, -3], [0, -3], [-1, -3], [0, -3], [-1, -3], [0, -4], [-1, -3], [-1, -3], [-1, -3], [0, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -2], [-1, -3], [-1, -3], [-2, -3], [-1, -2], [-1, -3], [-1, -3], [-2, -2], [-1, -3], [-1, -3], [-2, -2], [-1, -3], [-2, -2], [-1, -3], [-2, -2], [-1, -2], [-2, -3], [-2, -2], [-1, -2], [-2, -2], [-2, -2], [-1, -2], [-2, -2], [-2, -2], [-2, -2], [-2, -2], [-1, -2], [-2, -2], [-2, -2], [-2, -1], [-2, -2], [-2, -2], [-2, -1], [-2, -2], [-2, -1], [-2, -2], [-2, -1], [-2, -1], [-2, -1], [-2, -2], [-2, -1], [-2, -1], [-2, -1], [-3, -1], [-2, -1], [-2, -1], [-2, -1], [-2, 0], [-2, -1], [-3, -1], [-2, 0], [-2, -1], [-2, 0], [-3, -1], [-2, 0], [-2, 0], [-2, -1], [-2, 0], [-3, 0], [-2, 0], [-2, 0], [-2, 0], [-3, 0], [-2, 0], [-2, 0], [-2, 1], [-3, 0], [-2, 0], [-2, 1], [-2, 0], [-3, 1], [-2, 0], [-2, 1], [-2, 1], [-2, 0], [-3, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 1], [-3, 2], [-2, 1], [-2, 1], [-2, 1], [-2, 2], [-2, 1], [-2, 2], [-2, 1], [-2, 2], [-2, 2], [-2, 1], [-2, 2], [-2, 2], [-1, 2], [-2, 2], [-2, 2], [-2, 2], [-2, 2], [-1, 2], [-2, 2], [-2, 2], [-1, 2], [-2, 2], [-2, 3], [-1, 2], [-2, 2], [-1, 3], [-2, 2], [-1, 3], [-2, 2], [-1, 3], [-2, 3], [-1, 2], [-1, 3], [-2, 3], [-1, 2], [-1, 3], [-1, 3], [-1, 3], [-2, 2], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [0, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [0, 4], [-1, 3], [-1, 3], [0, 3], [-1, 3], [0, 3], [-1, 4], [0, 3], [-1, 3], [0, 3], [0, 3], [0, 4], [-1, 3], [0, 3], [0, 4], [0, 3], [0, 3], [0, 3], [0, 4], [0, 3], [0, 3], [0, 3], [0, 4], [0, 3], [1, 3], [0, 3], [0, 4], [0, 3], [1, 3], [0, 3], [1, 3], [0, 4], [1, 3], [0, 3], [1, 3], [1, 3], [0, 3], [1, 3], [1, 3], [1, 4], [0, 3], [1, 3], [1, 3], [1, 2], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [2, 3], [1, 2], [1, 3], [1, 3], [2, 2], [1, 3], [1, 3], [2, 2], [1, 3], [2, 2], [1, 3], [2, 2], [1, 3], [2, 2], [1, 2], [2, 2], [1, 3], [2, 2], [2, 2], [2, 2], [1, 2], [2, 2], [2, 2], [2, 2], [2, 2], [1, 2], [2, 1], [2, 2], [2, 2], [2, 1], [2, 2], [2, 1], [2, 2], [2, 1], [2, 2], [2, 1], [2, 1], [2, 1], [2, 1], [3, 2], [2, 1], [2, 1], [2, 0], [2, 1], [2, 1], [2, 1], [3, 1], [2, 0], [2, 1], [2, 0], [2, 1], [3, 0], [2, 1], [2, 0], [2, 0], [3, 0], [2, 1], [2, 0], [2, 0], [3, 0], [2, 0], [2, -1], [2, 0], [3, 0], [2, 0], [2, -1], [2, 0], [3, -1], [2, 0], [2, -1], [2, 0], [2, -1], [3, -1], [2, -1], [2, -1], [2, 0], [2, -1], [2, -1], [3, -2], [2, -1], [2, -1], [2, -1], [2, -1], [2, -2], [2, -1], [2, -2], [2, -1], [2, -2], [2, -1], [2, -2], [2, -2], [2, -1], [2, -2], [2, -2], [1, -2], [2, -2], [2, -2], [2, -2], [2, -2], [1, -2], [2, -2], [2, -3], [1, -2], [2, -2], [2, -2], [1, -3], [2, -2], [1, -3], [2, -2], [1, -3], [1, -2], [2, -3], [1, -3], [2, -2], [1, -3], [1, -3], [1, -2], [1, -3], [2, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -2], [1, -3], [1, -3], [1, -3], [1, -4], [0, -3], [1, -3], [1, -3], [1, -3], [0, -3], [1, -3], [0, -3], [1, -4], [0, -3], [1, -3], [0, -3], [1, -3], [0, -4], [0, -3], [1, -3], [0, -3], [0, -4], [0, -3], [0, -3], [0, -3], [1, -4]], [[18406, 14297], [0, -3], [-1, -3], [0, -3], [0, -4], [0, -3], [0, -3], [0, -3], [-1, -4], [0, -3], [0, -3], [-1, -3], [0, -4], [-1, -3], [0, -3], [-1, -3], [0, -3], [-1, -3], [-1, -3], [0, -4], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [0, -3], [-2, -3], [-1, -3], [-1, -2], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -2], [-2, -3], [-1, -3], [-1, -2], [-2, -3], [-1, -3], [-2, -2], [-1, -3], [-2, -2], [-1, -2], [-2, -3], [-1, -2], [-2, -2], [-1, -3], [-2, -2], [-2, -2], [-1, -2], [-2, -2], [-2, -2], [-2, -2], [-1, -2], [-2, -2], [-2, -2], [-2, -2], [-2, -2], [-2, -1], [-2, -2], [-2, -1], [-2, -2], [-2, -2], [-2, -1], [-2, -1], [-2, -2], [-2, -1], [-2, -1], [-2, -2], [-2, -1], [-2, -1], [-2, -1], [-2, -1], [-3, -1], [-2, -1], [-2, 0], [-2, -1], [-2, -1], [-3, -1], [-2, 0], [-2, -1], [-2, 0], [-2, -1], [-3, 0], [-2, 0], [-2, -1], [-2, 0], [-3, 0], [-2, 0], [-2, 0], [-2, 0], [-3, 0], [-2, 0], [-2, 0], [-2, 1], [-2, 0], [-3, 0], [-2, 1], [-2, 0], [-2, 1], [-3, 0], [-2, 1], [-2, 1], [-2, 1], [-2, 0], [-2, 1], [-3, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 2], [-2, 1], [-2, 1], [-2, 2], [-2, 1], [-2, 1], [-2, 2], [-2, 2], [-2, 1], [-2, 2], [-2, 1], [-2, 2], [-2, 2], [-2, 2], [-2, 2], [-1, 2], [-2, 2], [-2, 2], [-2, 2], [-1, 2], [-2, 2], [-2, 2], [-1, 3], [-2, 2], [-1, 2], [-2, 3], [-2, 2], [-1, 2], [-1, 3], [-2, 2], [-1, 3], [-2, 3], [-1, 2], [-1, 3], [-2, 3], [-1, 2], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 2], [-2, 3], [-1, 3], [-1, 3], [0, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [0, 4], [-1, 3], [-1, 3], [0, 3], [-1, 3], [0, 3], [-1, 3], [0, 4], [-1, 3], [0, 3], [0, 3], [-1, 4], [0, 3], [0, 3], [0, 3], [0, 4], [0, 3], [-1, 3], [0, 3], [0, 4], [1, 3], [0, 3], [0, 4], [0, 3], [0, 3], [0, 3], [1, 4], [0, 3], [0, 3], [1, 3], [0, 3], [1, 4], [0, 3], [1, 3], [0, 3], [1, 3], [1, 3], [0, 3], [1, 4], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [0, 3], [1, 3], [2, 2], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 2], [2, 3], [1, 3], [1, 2], [2, 3], [1, 2], [2, 3], [1, 2], [2, 3], [1, 2], [2, 3], [1, 2], [2, 2], [1, 3], [2, 2], [2, 2], [1, 2], [2, 2], [2, 2], [2, 2], [1, 2], [2, 2], [2, 2], [2, 2], [2, 1], [2, 2], [2, 2], [2, 1], [2, 2], [2, 1], [2, 2], [2, 1], [2, 2], [2, 1], [2, 1], [2, 1], [2, 2], [2, 1], [2, 1], [2, 1], [3, 1], [2, 0], [2, 1], [2, 1], [2, 1], [3, 0], [2, 1], [2, 1], [2, 0], [2, 0], [3, 1], [2, 0], [2, 0], [2, 1], [3, 0], [2, 0], [2, 0], [2, 0], [3, 0], [2, 0], [2, -1], [2, 0], [2, 0], [3, -1], [2, 0], [2, 0], [2, -1], [3, -1], [2, 0], [2, -1], [2, -1], [2, -1], [2, 0], [3, -1], [2, -1], [2, -1], [2, -1], [2, -2], [2, -1], [2, -1], [2, -1], [2, -2], [2, -1], [2, -2], [2, -1], [2, -2], [2, -1], [2, -2], [2, -2], [2, -1], [2, -2], [2, -2], [2, -2], [1, -2], [2, -2], [2, -2], [2, -2], [1, -2], [2, -2], [2, -2], [1, -3], [2, -2], [1, -2], [2, -3], [2, -2], [1, -3], [1, -2], [2, -3], [1, -2], [2, -3], [1, -2], [1, -3], [2, -3], [1, -2], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [2, -2], [1, -3], [0, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -4], [0, -3], [1, -3], [1, -3], [0, -3], [1, -3], [0, -3], [1, -4], [0, -3], [1, -3], [0, -3], [0, -3], [1, -4], [0, -3], [0, -3], [0, -3], [0, -4], [0, -3], [1, -3], [0, -4]], [[18577, 17878], [0, -4], [0, -3], [0, -3], [0, -3], [0, -4], [0, -3], [-1, -3], [0, -3], [0, -4], [-1, -3], [0, -3], [0, -3], [-1, -4], [0, -3], [-1, -3], [-1, -3], [0, -3], [-1, -3], [-1, -3], [0, -3], [-1, -4], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -2], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -2], [-1, -3], [-2, -3], [-1, -3], [-1, -2], [-2, -3], [-1, -2], [-1, -3], [-2, -2], [-1, -3], [-2, -2], [-1, -3], [-2, -2], [-2, -2], [-1, -2], [-2, -3], [-2, -2], [-1, -2], [-2, -2], [-2, -2], [-2, -2], [-1, -2], [-2, -2], [-2, -2], [-2, -2], [-2, -1], [-2, -2], [-2, -2], [-2, -1], [-2, -2], [-2, -1], [-2, -2], [-2, -1], [-2, -2], [-2, -1], [-2, -1], [-2, -1], [-2, -1], [-2, -2], [-2, -1], [-2, -1], [-2, -1], [-3, 0], [-2, -1], [-2, -1], [-2, -1], [-2, 0], [-3, -1], [-2, 0], [-2, -1], [-2, 0], [-2, -1], [-3, 0], [-2, 0], [-2, -1], [-2, 0], [-3, 0], [-2, 0], [-2, 0], [-2, 0], [-3, 0], [-2, 1], [-2, 0], [-2, 0], [-3, 1], [-2, 0], [-2, 1], [-2, 0], [-2, 1], [-3, 0], [-2, 1], [-2, 1], [-2, 1], [-2, 0], [-3, 1], [-2, 1], [-2, 1], [-2, 2], [-2, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 2], [-2, 1], [-2, 2], [-2, 1], [-2, 2], [-2, 1], [-2, 2], [-2, 2], [-2, 1], [-2, 2], [-2, 2], [-2, 2], [-1, 2], [-2, 2], [-2, 2], [-2, 2], [-1, 2], [-2, 2], [-2, 3], [-1, 2], [-2, 2], [-2, 2], [-1, 3], [-2, 2], [-1, 3], [-2, 2], [-1, 3], [-2, 2], [-1, 3], [-1, 2], [-2, 3], [-1, 3], [-1, 3], [-1, 2], [-1, 3], [-2, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 2], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [0, 3], [-1, 4], [-1, 3], [-1, 3], [0, 3], [-1, 3], [-1, 3], [0, 3], [-1, 3], [0, 4], [-1, 3], [0, 3], [0, 3], [-1, 4], [0, 3], [0, 3], [-1, 3], [0, 4], [0, 3], [0, 3], [0, 3], [0, 4], [0, 3], [0, 3], [0, 3], [0, 4], [0, 3], [0, 3], [1, 4], [0, 3], [0, 3], [1, 3], [0, 3], [1, 4], [0, 3], [1, 3], [0, 3], [1, 3], [0, 3], [1, 4], [1, 3], [0, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 2], [1, 3], [1, 3], [1, 3], [1, 2], [2, 3], [1, 3], [1, 2], [2, 3], [1, 3], [2, 2], [1, 3], [1, 2], [2, 2], [2, 3], [1, 2], [2, 2], [1, 3], [2, 2], [2, 2], [1, 2], [2, 2], [2, 2], [2, 2], [1, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 1], [2, 2], [2, 2], [2, 1], [2, 2], [2, 1], [2, 2], [2, 1], [2, 1], [2, 1], [2, 2], [2, 1], [2, 1], [2, 1], [2, 1], [2, 1], [3, 1], [2, 1], [2, 0], [2, 1], [2, 1], [3, 0], [2, 1], [2, 0], [2, 1], [2, 0], [3, 0], [2, 1], [2, 0], [2, 0], [3, 0], [2, 0], [2, 0], [2, 0], [3, 0], [2, 0], [2, -1], [2, 0], [3, 0], [2, -1], [2, 0], [2, -1], [3, 0], [2, -1], [2, -1], [2, 0], [2, -1], [2, -1], [3, -1], [2, -1], [2, -1], [2, -1], [2, -1], [2, -2], [2, -1], [2, -1], [2, -1], [2, -2], [2, -1], [2, -2], [2, -1], [2, -2], [2, -2], [2, -1], [2, -2], [2, -2], [2, -2], [2, -2], [2, -2], [1, -2], [2, -2], [2, -2], [2, -2], [1, -2], [2, -2], [2, -3], [1, -2], [2, -2], [1, -3], [2, -2], [1, -2], [2, -3], [1, -2], [2, -3], [1, -3], [1, -2], [2, -3], [1, -3], [1, -2], [1, -3], [2, -3], [1, -3], [1, -2], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [0, -3], [1, -3], [1, -3], [1, -3], [0, -4], [1, -3], [1, -3], [0, -3], [1, -3], [0, -3], [1, -4], [0, -3], [1, -3], [0, -3], [0, -3], [0, -4], [1, -3], [0, -3], [0, -4], [0, -3], [0, -3], [0, -3]], [[27797, 20969], [0, -4], [0, -3], [0, -3], [-1, -3], [0, -4], [0, -3], [0, -3], [-1, -3], [0, -4], [0, -3], [-1, -3], [0, -3], [-1, -4], [0, -3], [-1, -3], [0, -3], [-1, -3], [-1, -3], [0, -3], [-1, -3], [-1, -4], [-1, -3], [-1, -3], [0, -3], [-1, -3], [-1, -3], [-1, -2], [-1, -3], [-1, -3], [-2, -3], [-1, -3], [-1, -3], [-1, -2], [-1, -3], [-2, -3], [-1, -3], [-1, -2], [-2, -3], [-1, -2], [-1, -3], [-2, -2], [-1, -3], [-2, -2], [-1, -3], [-2, -2], [-2, -2], [-1, -2], [-2, -3], [-2, -2], [-1, -2], [-2, -2], [-2, -2], [-1, -2], [-2, -2], [-2, -2], [-2, -2], [-2, -2], [-2, -1], [-2, -2], [-2, -2], [-2, -1], [-1, -2], [-2, -1], [-2, -2], [-3, -1], [-2, -2], [-2, -1], [-2, -1], [-2, -1], [-2, -1], [-2, -2], [-2, -1], [-2, -1], [-2, -1], [-3, 0], [-2, -1], [-2, -1], [-2, -1], [-2, 0], [-3, -1], [-2, 0], [-2, -1], [-2, 0], [-2, -1], [-3, 0], [-2, 0], [-2, -1], [-2, 0], [-3, 0], [-2, 0], [-2, 0], [-2, 0], [-3, 0], [-2, 1], [-2, 0], [-2, 0], [-3, 1], [-2, 0], [-2, 1], [-2, 0], [-2, 1], [-3, 0], [-2, 1], [-2, 1], [-2, 1], [-2, 0], [-2, 1], [-3, 1], [-2, 1], [-2, 2], [-2, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 2], [-2, 1], [-2, 2], [-2, 1], [-2, 2], [-2, 1], [-2, 2], [-2, 2], [-2, 1], [-2, 2], [-2, 2], [-1, 2], [-2, 2], [-2, 2], [-2, 2], [-1, 2], [-2, 2], [-2, 2], [-1, 3], [-2, 2], [-2, 2], [-1, 2], [-2, 3], [-1, 2], [-2, 3], [-1, 2], [-2, 3], [-1, 2], [-1, 3], [-2, 2], [-1, 3], [-1, 3], [-2, 3], [-1, 2], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 2], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 4], [0, 3], [-1, 3], [-1, 3], [0, 3], [-1, 3], [-1, 3], [0, 3], [-1, 4], [0, 3], [0, 3], [-1, 3], [0, 4], [0, 3], [-1, 3], [0, 3], [0, 4], [0, 3], [0, 3], [0, 3], [0, 4], [0, 3], [0, 3], [0, 3], [0, 4], [0, 3], [0, 3], [1, 3], [0, 4], [0, 3], [1, 3], [0, 3], [0, 4], [1, 3], [0, 3], [1, 3], [1, 3], [0, 3], [1, 4], [1, 3], [0, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 2], [1, 3], [1, 3], [1, 3], [1, 3], [2, 2], [1, 3], [1, 3], [2, 2], [1, 3], [1, 3], [2, 2], [1, 3], [2, 2], [1, 2], [2, 3], [1, 2], [2, 2], [2, 3], [1, 2], [2, 2], [2, 2], [1, 2], [2, 2], [2, 2], [2, 2], [1, 2], [2, 2], [2, 2], [2, 2], [2, 1], [2, 2], [2, 2], [2, 1], [2, 2], [2, 1], [2, 2], [2, 1], [2, 1], [2, 1], [2, 2], [2, 1], [2, 1], [2, 1], [3, 1], [2, 1], [2, 1], [2, 0], [2, 1], [2, 1], [3, 1], [2, 0], [2, 1], [2, 0], [2, 1], [3, 0], [2, 0], [2, 1], [2, 0], [3, 0], [2, 0], [2, 0], [2, 0], [3, 0], [2, 0], [2, 0], [2, -1], [3, 0], [2, 0], [2, -1], [2, 0], [2, -1], [3, 0], [2, -1], [2, -1], [2, -1], [2, 0], [3, -1], [2, -1], [2, -1], [2, -1], [2, -1], [2, -1], [2, -2], [2, -1], [2, -1], [2, -1], [3, -2], [2, -1], [2, -2], [1, -1], [2, -2], [2, -2], [2, -1], [2, -2], [2, -2], [2, -2], [2, -2], [2, -2], [1, -2], [2, -2], [2, -2], [1, -2], [2, -2], [2, -2], [1, -3], [2, -2], [2, -2], [1, -3], [2, -2], [1, -2], [2, -3], [1, -2], [1, -3], [2, -3], [1, -2], [1, -3], [2, -3], [1, -2], [1, -3], [1, -3], [1, -3], [2, -3], [1, -2], [1, -3], [1, -3], [1, -3], [1, -3], [0, -3], [1, -3], [1, -3], [1, -3], [1, -3], [0, -3], [1, -4], [1, -3], [0, -3], [1, -3], [0, -3], [1, -3], [0, -4], [1, -3], [0, -3], [0, -3], [1, -4], [0, -3], [0, -3], [0, -3], [1, -4], [0, -3], [0, -3], [0, -3]], [[29298, 21803], [0, -3], [0, -2], [0, -2], [0, -2], [0, -3], [-1, -2], [0, -2], [0, -2], [0, -3], [0, -2], [-1, -2], [0, -2], [0, -3], [-1, -2], [0, -2], [0, -2], [-1, -2], [0, -2], [-1, -3], [0, -2], [-1, -2], [0, -2], [-1, -2], [-1, -2], [0, -2], [-1, -2], [-1, -2], [0, -2], [-1, -2], [-1, -2], [-1, -2], [0, -2], [-1, -2], [-1, -2], [-1, -2], [-1, -2], [-1, -1], [-1, -2], [-1, -2], [0, -2], [-1, -1], [-1, -2], [-1, -2], [-2, -1], [-1, -2], [-1, -2], [-1, -1], [-1, -2], [-1, -1], [-1, -2], [-1, -1], [-2, -2], [-1, -1], [-1, -1], [-1, -2], [-1, -1], [-2, -1], [-1, -1], [-1, -2], [-2, -1], [-1, -1], [-1, -1], [-2, -1], [-1, -1], [-1, -1], [-2, -1], [-1, -1], [-2, -1], [-1, 0], [-1, -1], [-2, -1], [-1, -1], [-2, 0], [-1, -1], [-2, -1], [-1, 0], [-2, -1], [-1, 0], [-2, -1], [-1, 0], [-2, 0], [-1, -1], [-2, 0], [-1, 0], [-2, -1], [-1, 0], [-2, 0], [-1, 0], [-2, 0], [-1, 0], [-2, 0], [-1, 0], [-2, 0], [-1, 0], [-2, 0], [-1, 1], [-2, 0], [-1, 0], [-2, 1], [-1, 0], [-2, 0], [-1, 1], [-2, 0], [-1, 1], [-2, 0], [-1, 1], [-2, 1], [-1, 0], [-1, 1], [-2, 1], [-1, 1], [-2, 0], [-1, 1], [-2, 1], [-1, 1], [-1, 1], [-2, 1], [-1, 1], [-1, 1], [-2, 1], [-1, 1], [-1, 2], [-2, 1], [-1, 1], [-1, 1], [-1, 2], [-1, 1], [-2, 1], [-1, 2], [-1, 1], [-3, 0], [-1, 2], [0, 2], [-1, 2], [-1, 2], [-1, 1], [-1, 2], [0, 2], [-1, 2], [-1, 2], [-1, 2], [-1, 2], [-1, 2], [0, 1], [-1, 2], [-1, 2], [-1, 2], [-1, 2], [0, 2], [-1, 2], [-1, 2], [-1, 2], [-1, 2], [-1, 2], [0, 1], [-1, 2], [-1, 2], [-1, 2], [-1, 2], [0, 2], [-1, 2], [-1, 1], [-1, 2], [-1, 2], [2, 4], [-1, 2], [0, 2], [0, 3], [-1, 2], [0, 2], [0, 2], [0, 3], [0, 2], [-1, 2], [0, 2], [0, 3], [0, 2], [0, 2], [0, 2], [0, 3], [0, 2], [0, 2], [0, 2], [0, 3], [0, 2], [0, 2], [1, 2], [0, 3], [0, 2], [0, 2], [0, 2], [1, 3], [0, 2], [0, 2], [1, 2], [0, 2], [1, 3], [0, 2], [1, 2], [0, 2], [1, 2], [0, 2], [1, 2], [0, 2], [1, 3], [1, 2], [0, 2], [1, 2], [1, 2], [1, 2], [0, 2], [1, 1], [1, 2], [1, 2], [1, 2], [0, 2], [1, 2], [1, 2], [1, 1], [1, 2], [1, 2], [1, 2], [1, 1], [1, 2], [1, 1], [1, 2], [2, 2], [1, 1], [1, 2], [1, 1], [1, 2], [1, 1], [2, 1], [1, 2], [1, 1], [1, 1], [1, 2], [2, 1], [1, 1], [1, 1], [2, 1], [1, 1], [1, 1], [2, 1], [1, 1], [1, 1], [2, 1], [1, 1], [2, 1], [1, 1], [2, 0], [1, 1], [1, 1], [2, 0], [1, 1], [2, 1], [1, 0], [2, 1], [1, 0], [2, 0], [1, 1], [2, 0], [1, 0], [2, 1], [1, 0], [2, 0], [1, 0], [2, 0], [1, 0], [2, 0], [1, 0], [2, 0], [1, 0], [2, 0], [1, 0], [2, 0], [1, -1], [2, 0], [1, 0], [2, -1], [1, 0], [2, 0], [1, -1], [2, 0], [1, -1], [2, -1], [1, 0], [2, -1], [1, -1], [2, 0], [1, -1], [1, -1], [2, -1], [1, -1], [2, -1], [1, -1], [1, -1], [2, -1], [1, -1], [1, -1], [2, -1], [1, -1], [1, -1], [2, -2], [1, -1], [1, -1], [1, -2], [1, -1], [2, -1], [1, -2], [1, -1], [1, -2], [1, -1], [1, -2], [1, -2], [1, -1], [2, -2], [1, -1], [1, -2], [1, -2], [0, -2], [1, -1], [1, -2], [1, -2], [1, -2], [1, -2], [1, -2], [1, -2], [0, -1], [1, -2], [1, -2], [1, -2], [0, -2], [1, -2], [1, -2], [0, -3], [1, -2], [1, -2], [0, -2], [1, -2], [0, -2], [1, -2], [0, -2], [1, -3], [0, -2], [0, -2], [1, -2], [0, -2], [0, -3], [1, -2], [0, -2], [0, -2], [0, -3], [0, -2], [1, -2], [0, -2], [0, -3], [0, -2], [0, -2], [0, -2]], [[23593, 15620], [0, -3], [0, -4], [0, -3], [0, -3], [-1, -4], [0, -3], [0, -3], [0, -3], [-1, -4], [0, -3], [-1, -3], [0, -3], [0, -3], [-1, -4], [-1, -3], [0, -3], [-1, -3], [0, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [0, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-2, -3], [-1, -2], [-1, -3], [-1, -3], [-2, -2], [-1, -3], [-1, -3], [-2, -2], [-1, -3], [-2, -2], [-1, -3], [-2, -2], [-1, -2], [-2, -3], [-1, -2], [-2, -2], [-2, -3], [-1, -2], [-2, -2], [-2, -2], [-2, -2], [-1, -2], [-2, -2], [-2, -2], [-2, -2], [-2, -1], [-2, -2], [-1, -2], [-2, -2], [-2, -1], [-2, -2], [-2, -1], [-2, -2], [-2, -1], [-2, -1], [-2, -2], [-3, -1], [-2, -1], [-2, -1], [-2, -1], [-2, -1], [-2, -1], [-2, -1], [-2, -1], [-3, -1], [-2, -1], [-2, -1], [-2, 0], [-2, -1], [-3, 0], [-2, -1], [-2, 0], [-2, -1], [-2, 0], [-3, 0], [-2, 0], [-2, -1], [-2, 0], [-3, 0], [-2, 0], [-2, 0], [-2, 1], [-3, 0], [-2, 0], [-2, 0], [-2, 1], [-3, 0], [-2, 1], [-2, 0], [-2, 1], [-2, 0], [-3, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 1], [-3, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 2], [-2, 1], [-2, 1], [-2, 2], [-2, 1], [-2, 2], [-2, 1], [-2, 2], [-2, 2], [-2, 2], [-2, 1], [-1, 2], [-2, 2], [-2, 2], [-2, 2], [-2, 2], [-1, 2], [-2, 2], [-2, 2], [-1, 3], [-2, 2], [-2, 2], [-1, 3], [-2, 2], [-1, 2], [-2, 3], [-1, 2], [-2, 3], [-1, 2], [-1, 3], [-2, 3], [-1, 2], [-1, 3], [-1, 3], [-2, 2], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [0, 3], [-1, 3], [-1, 3], [-1, 3], [0, 3], [-1, 3], [0, 3], [-1, 4], [0, 3], [-1, 3], [0, 3], [-1, 3], [0, 4], [0, 3], [0, 3], [-1, 3], [0, 4], [0, 3], [0, 3], [0, 4], [0, 3], [0, 3], [0, 3], [0, 4], [0, 3], [0, 3], [1, 3], [0, 4], [0, 3], [0, 3], [1, 3], [0, 4], [1, 3], [0, 3], [1, 3], [0, 3], [1, 3], [0, 4], [1, 3], [1, 3], [1, 3], [0, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 2], [1, 3], [1, 3], [2, 3], [1, 3], [1, 2], [1, 3], [2, 3], [1, 2], [1, 3], [2, 2], [1, 3], [2, 2], [1, 3], [2, 2], [1, 2], [2, 3], [2, 2], [1, 2], [2, 2], [2, 2], [1, 2], [2, 2], [2, 2], [2, 2], [2, 2], [1, 2], [2, 2], [2, 2], [2, 1], [2, 2], [2, 2], [2, 1], [2, 2], [2, 1], [2, 2], [2, 1], [2, 1], [2, 2], [2, 1], [2, 1], [2, 1], [3, 1], [2, 1], [2, 1], [2, 1], [2, 1], [2, 0], [3, 1], [2, 1], [2, 0], [2, 1], [2, 0], [3, 1], [2, 0], [2, 0], [2, 1], [3, 0], [2, 0], [2, 0], [2, 0], [3, 0], [2, 0], [2, 0], [2, 0], [3, -1], [2, 0], [2, 0], [2, -1], [2, 0], [3, -1], [2, 0], [2, -1], [2, -1], [2, 0], [3, -1], [2, -1], [2, -1], [2, -1], [2, -1], [2, -1], [2, -1], [2, -1], [3, -2], [2, -1], [2, -1], [2, -2], [2, -1], [2, -2], [2, -1], [2, -2], [2, -2], [1, -1], [2, -2], [2, -2], [2, -2], [2, -2], [2, -2], [1, -2], [2, -2], [2, -2], [2, -2], [1, -2], [2, -2], [2, -2], [1, -3], [2, -2], [1, -2], [2, -3], [1, -2], [2, -3], [1, -2], [2, -3], [1, -2], [1, -3], [2, -3], [1, -2], [1, -3], [1, -3], [2, -3], [1, -3], [1, -2], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [0, -3], [1, -3], [1, -3], [1, -3], [1, -3], [0, -3], [1, -4], [0, -3], [1, -3], [1, -3], [0, -3], [0, -3], [1, -4], [0, -3], [1, -3], [0, -3], [0, -4], [0, -3], [1, -3], [0, -3], [0, -4], [0, -3], [0, -3]], [[28225, 12249], [0, -3], [0, -3], [0, -3], [0, -4], [0, -3], [0, -3], [-1, -3], [0, -4], [0, -3], [-1, -3], [0, -3], [-1, -4], [0, -3], [-1, -3], [0, -3], [-1, -3], [0, -3], [-1, -4], [-1, -3], [-1, -3], [0, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -2], [-1, -3], [-1, -3], [-1, -3], [-2, -3], [-1, -2], [-1, -3], [-1, -3], [-2, -2], [-1, -3], [-1, -3], [-2, -2], [-1, -3], [-2, -2], [-1, -2], [-2, -3], [-1, -2], [-2, -2], [-2, -3], [-1, -2], [-2, -2], [-2, -2], [-1, -2], [-2, -2], [-2, -2], [-2, -2], [-2, -2], [-1, -2], [-2, -2], [-2, -2], [-2, -1], [-2, -2], [-2, -2], [-2, -1], [-2, -2], [-2, -1], [-2, -1], [-2, -2], [-2, -1], [-2, -1], [-2, -2], [-2, -1], [-2, -1], [-3, -1], [-2, -1], [-2, -1], [-2, -1], [-2, 0], [-2, -1], [-3, -1], [-2, -1], [-2, 0], [-2, -1], [-2, 0], [-3, -1], [-2, 0], [-2, 0], [-2, -1], [-3, 0], [-2, 0], [-2, 0], [-2, 0], [-3, 0], [-2, 0], [-2, 0], [-2, 0], [-3, 1], [-2, 0], [-2, 0], [-2, 1], [-2, 0], [-3, 1], [-2, 0], [-2, 1], [-2, 1], [-2, 1], [-3, 0], [-2, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 2], [-3, 1], [-2, 1], [-2, 2], [-2, 1], [-2, 1], [-2, 2], [-2, 1], [-2, 2], [-1, 2], [-2, 1], [-2, 2], [-2, 2], [-2, 2], [-2, 2], [-2, 2], [-1, 2], [-2, 2], [-2, 2], [-2, 2], [-1, 2], [-2, 2], [-2, 3], [-1, 2], [-2, 2], [-1, 3], [-2, 2], [-1, 2], [-2, 3], [-1, 2], [-2, 3], [-1, 3], [-1, 2], [-2, 3], [-1, 3], [-1, 2], [-1, 3], [-1, 3], [-2, 3], [-1, 3], [-1, 2], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [0, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [0, 4], [-1, 3], [0, 3], [-1, 3], [-1, 3], [0, 3], [0, 4], [-1, 3], [0, 3], [-1, 3], [0, 4], [0, 3], [0, 3], [-1, 3], [0, 4], [0, 3], [0, 3], [0, 3], [0, 4], [0, 3], [0, 3], [0, 3], [1, 4], [0, 3], [0, 3], [0, 3], [1, 4], [0, 3], [1, 3], [0, 3], [0, 4], [1, 3], [1, 3], [0, 3], [1, 3], [0, 3], [1, 3], [1, 4], [1, 3], [1, 3], [0, 3], [1, 3], [1, 3], [1, 3], [1, 2], [1, 3], [1, 3], [1, 3], [2, 3], [1, 3], [1, 2], [1, 3], [1, 3], [2, 3], [1, 2], [1, 3], [2, 2], [1, 3], [2, 2], [1, 3], [2, 2], [1, 3], [2, 2], [1, 2], [2, 2], [2, 3], [1, 2], [2, 2], [2, 2], [2, 2], [1, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 1], [2, 2], [1, 2], [2, 1], [2, 2], [2, 1], [2, 2], [2, 1], [2, 2], [2, 1], [3, 1], [2, 1], [2, 2], [2, 1], [2, 1], [2, 1], [2, 1], [2, 0], [3, 1], [2, 1], [2, 1], [2, 0], [2, 1], [3, 1], [2, 0], [2, 0], [2, 1], [2, 0], [3, 0], [2, 1], [2, 0], [2, 0], [3, 0], [2, 0], [2, 0], [2, 0], [3, -1], [2, 0], [2, 0], [2, -1], [3, 0], [2, 0], [2, -1], [2, -1], [2, 0], [3, -1], [2, -1], [2, -1], [2, 0], [2, -1], [2, -1], [3, -1], [2, -1], [2, -2], [2, -1], [2, -1], [2, -1], [2, -2], [2, -1], [2, -2], [2, -1], [2, -2], [2, -1], [2, -2], [2, -2], [2, -1], [2, -2], [1, -2], [2, -2], [2, -2], [2, -2], [2, -2], [1, -2], [2, -2], [2, -2], [1, -3], [2, -2], [2, -2], [1, -2], [2, -3], [1, -2], [2, -3], [1, -2], [2, -3], [1, -2], [1, -3], [2, -2], [1, -3], [1, -3], [1, -3], [2, -2], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -2], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [0, -3], [1, -4], [1, -3], [1, -3], [0, -3], [1, -3], [0, -3], [1, -3], [0, -4], [1, -3], [0, -3], [1, -3], [0, -4], [0, -3], [1, -3], [0, -3], [0, -4], [0, -3], [0, -3], [0, -3], [0, -4]], [[47343, 13620], [0, -3], [0, -4], [0, -3], [0, -3], [-1, -4], [0, -3], [0, -3], [0, -3], [-1, -4], [0, -3], [0, -3], [-1, -3], [0, -4], [-1, -3], [0, -3], [-1, -3], [-1, -3], [0, -4], [-1, -3], [-1, -3], [-1, -3], [0, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-2, -2], [-1, -3], [-1, -3], [-1, -3], [-2, -2], [-1, -3], [-1, -3], [-2, -2], [-1, -3], [-2, -2], [-1, -3], [-2, -2], [-1, -3], [-2, -2], [-1, -2], [-2, -3], [-2, -2], [-1, -2], [-2, -2], [-2, -2], [-1, -2], [-2, -2], [-2, -2], [-2, -2], [-2, -2], [-2, -2], [-1, -2], [-2, -1], [-2, -2], [-2, -2], [-2, -1], [-2, -2], [-2, -1], [-2, -2], [-2, -1], [-2, -1], [-2, -2], [-3, -1], [-2, -1], [-2, -1], [-2, -1], [-2, -1], [-2, -1], [-2, -1], [-2, -1], [-3, -1], [-2, 0], [-2, -1], [-2, -1], [-2, 0], [-3, -1], [-2, 0], [-2, 0], [-2, -1], [-3, 0], [-2, 0], [-2, 0], [-2, 0], [-3, -1], [-2, 1], [-2, 0], [-2, 0], [-3, 0], [-2, 0], [-2, 1], [-2, 0], [-2, 0], [-3, 1], [-2, 0], [-2, 1], [-2, 1], [-2, 0], [-3, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 1], [-3, 1], [-2, 1], [-2, 1], [-2, 2], [-2, 1], [-2, 1], [-2, 2], [-2, 1], [-2, 2], [-2, 1], [-2, 2], [-2, 2], [-2, 1], [-2, 2], [-1, 2], [-2, 2], [-2, 2], [-2, 2], [-2, 2], [-1, 2], [-2, 2], [-2, 2], [-2, 2], [-1, 2], [-2, 3], [-1, 2], [-2, 2], [-2, 3], [-1, 2], [-2, 3], [-1, 2], [-1, 3], [-2, 2], [-1, 3], [-2, 3], [-1, 2], [-1, 3], [-1, 3], [-2, 3], [-1, 2], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [0, 3], [-1, 3], [-1, 3], [0, 4], [-1, 3], [-1, 3], [0, 3], [-1, 3], [0, 4], [-1, 3], [0, 3], [-1, 3], [0, 4], [0, 3], [0, 3], [-1, 3], [0, 4], [0, 3], [0, 3], [0, 4], [0, 3], [0, 3], [0, 4], [0, 3], [0, 3], [0, 3], [1, 4], [0, 3], [0, 3], [0, 4], [1, 3], [0, 3], [1, 3], [0, 4], [1, 3], [0, 3], [1, 3], [1, 3], [0, 3], [1, 4], [1, 3], [0, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 2], [1, 3], [2, 3], [1, 3], [1, 3], [1, 2], [2, 3], [1, 3], [2, 2], [1, 3], [1, 2], [2, 3], [1, 2], [2, 2], [2, 3], [1, 2], [2, 2], [1, 3], [2, 2], [2, 2], [2, 2], [1, 2], [2, 2], [2, 2], [2, 2], [2, 2], [1, 2], [2, 2], [2, 1], [2, 2], [2, 2], [2, 1], [2, 2], [2, 1], [2, 2], [2, 1], [2, 1], [2, 2], [2, 1], [2, 1], [3, 1], [2, 1], [2, 1], [2, 1], [2, 1], [2, 1], [3, 0], [2, 1], [2, 1], [2, 0], [2, 1], [3, 0], [2, 1], [2, 0], [2, 1], [2, 0], [3, 0], [2, 0], [2, 0], [2, 0], [3, 0], [2, 0], [2, 0], [2, 0], [3, 0], [2, -1], [2, 0], [2, -1], [3, 0], [2, -1], [2, 0], [2, -1], [2, -1], [3, 0], [2, -1], [2, -1], [2, -1], [2, -1], [2, -1], [2, -1], [2, -1], [3, -1], [2, -2], [2, -1], [2, -1], [2, -2], [2, -1], [2, -2], [2, -1], [2, -2], [2, -2], [2, -1], [1, -2], [2, -2], [2, -2], [2, -2], [2, -2], [2, -2], [1, -2], [2, -2], [2, -2], [1, -2], [2, -3], [2, -2], [1, -2], [2, -3], [1, -2], [2, -2], [1, -3], [2, -2], [1, -3], [2, -2], [1, -3], [1, -3], [2, -2], [1, -3], [1, -3], [1, -3], [2, -3], [1, -2], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [0, -3], [1, -3], [1, -3], [1, -4], [0, -3], [1, -3], [1, -3], [0, -3], [1, -3], [0, -4], [1, -3], [0, -3], [0, -3], [1, -4], [0, -3], [0, -3], [0, -4], [1, -3], [0, -3], [0, -3], [0, -4], [0, -3]], [[30693, 9761], [-7, -467]], [[30391, 9294], [0, -729]], [[30591, 8287], [-319, -75]], [[28841, 8368], [10, 302], [88, 390], [47, 238], [110, 101], [69, 335], [-126, 421], [60, 110], [-176, 546]], [[28919, 10880], [-31, 170]], [[16701, 696], [-130, 44], [-82, -1], [-268, 47], [-7, 272], [-139, -20], [-48, 212], [318, 939], [-113, 487], [62, 766], [125, 238], [-35, 398], [202, 550], [-62, 710], [35, 375], [99, 268], [103, 282], [12, 449], [230, 408]], [[18912, 6593], [129, -187], [-57, -184], [-269, -273], [-199, -321], [-16, -65]], [[18322, 5029], [0, -114], [-27, -25], [-29, -105], [32, -207], [191, -160], [-32, -159], [124, -120], [-151, -353], [-612, -200], [-118, 45], [6, -91], [27, -134], [-24, -232], [-230, -57], [-175, 101], [-28, -59], [18, -215], [198, -31], [16, -147], [-188, 27], [84, -78], [-207, -403], [-200, -109], [-91, -173], [18, -85], [126, -120], [125, -5], [20, -56], [-9, -132], [-211, -174], [-305, -477], [42, -181], [87, -137], [-98, 33]], [[16754, 116], [6, 397], [523, -346], [-31, -68], [-498, 17]], [[48613, 9514], [210, -492], [120, -159], [131, -613], [26, -274], [368, -284], [169, -504], [113, 33], [367, -651], [74, -793], [-160, -739], [-124, -126], [-277, -876], [7, -125], [-251, -66], [-271, -279], [-221, 230], [-218, -175], [-469, 191], [-97, 175], [-72, 334], [-365, 91], [165, 518], [-353, -450], [-298, 615], [-369, 141], [-372, -52], [-522, -181], [-303, -306], [-202, -9], [-286, 29], [-356, -269], [-386, 181], [105, 386], [-118, 687], [-207, 591], [-108, 242], [97, -97], [-14, 113], [121, -221], [-5, 164], [-130, 314], [83, 599], [41, -52], [191, 76], [193, 185], [653, 221], [176, 551], [114, 149], [88, -237], [253, 647], [235, 185], [204, -209], [174, -32], [71, 318], [353, 502], [485, -245], [243, 273], [-3, -293], [-217, -543], [521, -466], [259, -165], [97, 826], [173, 701], [94, -285]], [[48857, 3216], [247, -104], [240, 87], [45, -38], [-18, -372], [-196, -214], [-123, 28], [-83, 131], [-52, 115], [-83, 301], [23, 66]], [[34035, 21267], [221, -7], [135, 63]], [[34391, 21323], [176, -239], [97, -66], [-138, -95], [-94, -339]], [[19484, 11754], [-45, 136], [20, 197], [38, 36], [310, -28], [-79, -274], [-130, -50], [-114, -17]], [[19318, 13111], [79, -117], [81, -430], [94, -39], [2, -127], [-390, -588], [66, -22], [171, 163], [16, -152], [57, -86], [165, 58], [-21, -178], [43, 142], [32, 9], [134, 257], [95, 17], [364, -186], [164, -225], [652, -151], [642, -467], [93, -634], [-238, -513], [-114, -136], [-269, -468], [-41, -996], [-435, -1131], [-352, -15], [-631, -498], [-21, -664], [-165, -242], [-166, -422], [-176, -164], [-113, -266], [-86, -98]], [[12807, 29361], [-25, -126], [-417, 25], [-97, 183], [539, -82]], [[18014, 22435], [-43, -126], [108, -32], [-65, -118], [-144, -11], [-47, 92], [137, 218], [54, -23]], [[6956, 24420], [115, 105], [177, -412], [-292, 307]], [[7280, 24026], [-65, -165], [151, -300], [-329, 386], [38, 87], [205, -8]], [[5865, 27398], [790, -181], [1017, 232], [408, -25], [24, 71], [366, -177], [186, 92], [1027, -238], [-21, -200], [564, -17], [318, -175], [141, 282], [430, 36], [818, -137], [76, 141], [302, -44], [129, -58], [296, -114], [259, 315], [-113, 189], [-357, 181], [184, 315], [270, -16], [319, -315], [65, -163], [555, -487], [374, 343], [-87, 181], [633, -110], [-6, -473], [-799, -110], [102, -63], [-205, -189], [-340, 142], [-260, -16], [427, -142], [254, -24], [-232, -260], [-243, 24], [-81, -87], [-514, 87], [541, -181], [-422, -260], [-216, -331], [-21, -268], [54, -134], [194, 0], [92, -378], [265, 47], [837, -417], [432, -55], [16, -457], [243, -339], [119, -47], [211, 220], [-173, 536], [475, 378], [-86, 315], [-254, 174], [216, 244], [-135, 575], [659, 24], [627, -323], [-22, -323], [373, -276], [383, 496], [443, -725], [54, -244], [179, -212], [427, -126], [-524, -174], [97, -118], [405, 221], [243, -205], [27, -237], [-200, -165], [-276, -79], [-145, -181], [-1005, -8], [-335, -268], [-281, -370], [-16, -102], [281, 323], [421, 205], [260, -79], [10, -111], [-356, -86], [308, -47], [-87, -166], [616, -394], [-702, -409], [-33, 267], [249, 182], [-49, 55], [-378, -158]], [[16982, 22017], [-113, 473], [-206, 79], [-155, -422], [-174, -114], [-529, -8], [-298, -307], [-332, -3], [35, -160], [-548, -269], [-87, 73], [94, 739], [-157, 109], [-193, 233], [-535, 310], [-141, -68], [-319, 13], [-228, 123], [-172, 0], [-134, 169], [-32, -88], [-4176, 0]], [[8582, 22899], [-886, 875], [-259, 331]], [[7437, 24105], [56, 168], [46, 139], [-281, 165], [-556, 717], [-286, -205], [-260, 308], [-113, -32], [-108, -8], [-65, 24], [-5, 2017]], [[14308, 28335], [-286, -228], [302, -308], [-119, 379], [411, 165], [243, -32], [65, -315], [248, 24], [244, 87], [170, -30], [512, -100], [748, -429], [-22, -332], [831, -487], [-116, -316], [-584, 441], [-119, -291], [524, -418], [-70, -228], [-578, 275], [0, -126], [459, -299], [-21, -71], [-821, 410], [-265, 205], [-488, -37], [-209, -3], [-43, 150], [135, 94], [253, -26], [503, 420], [-446, 315], [-1504, 276], [-713, 299], [-11, 213], [254, 292], [513, 31]], [[15810, 30375], [2080, -149], [-805, -244], [-465, -197], [-291, -142], [-816, -63], [308, -142], [-141, -181], [-302, -79], [-584, -55], [616, -118], [-426, -161], [-223, 54], [-1193, 28], [367, 166], [-145, 118], [556, 23], [-438, 71], [281, 158], [373, 0], [-492, 315], [892, -150], [-384, 189], [-1323, 260], [1318, 205], [1237, 94]], [[9246, 27975], [176, 170], [502, 130], [420, -168], [232, -184], [81, 142], [426, 278], [232, -402], [378, -261], [333, -322], [-529, -167], [-393, 36], [-938, -80], [-756, 292], [835, 189], [-434, -38], [-565, 147], [0, 238]], [[18738, 23467], [-216, -418], [135, 103], [119, -189], [248, 0], [33, -292], [102, -71], [-59, -228], [-162, 78], [-65, 111], [-114, -118], [-86, 141], [-324, 24], [-259, -24], [199, 197], [22, 158], [238, 496], [189, 32]], [[13318, 28976], [609, -254], [928, 66], [202, -74], [76, -37], [-135, -152], [-185, -41], [-928, -10], [-633, 61], [-741, 512], [807, -71]], [[9486, 28788], [236, 147], [369, -65], [247, -122], [372, 0], [-212, 76], [-28, 106], [219, 87], [511, -208], [35, -87], [-177, -136], [-345, 15], [-653, -137], [-206, 71], [487, 101], [-967, 10], [112, 142]], [[8419, 28466], [409, 30], [623, -74], [255, -149], [-562, -224], [-572, -312], [-388, 193], [235, 536]], [[13057, 29945], [-118, 66], [1266, -423], [-644, -333], [-653, 213], [-435, 289], [584, 188]], [[8574, 28849], [567, 263], [412, 52], [169, -45], [-469, -412], [-679, 142]], [[14254, 26610], [778, -473], [-475, 63], [-324, -181], [-55, 95], [-221, 7], [146, 245], [54, 244], [97, 0]], [[11750, 28312], [726, 71], [80, -477], [-323, -142], [-629, 355], [146, 193]], [[11388, 28971], [403, -51], [272, -116], [-265, 177], [591, -10], [80, -355], [-448, -30], [-612, 207], [-21, 178]], [[13523, 28378], [-264, -254], [-282, -20], [-28, -162], [-187, 0], [-101, 197], [10, 274], [852, -35]], [[7863, 23301], [319, -110], [281, -276], [43, -154], [-255, 57], [-523, 475], [135, 8]], [[10049, 29367], [379, 65], [209, -65], [-49, -87], [-62, -132], [-317, -35], [-459, 117], [299, 137]], [[16586, 78], [144, -8], [40, -70], [-217, 12], [33, 66]], [[16263, 199], [163, 10], [71, -178], [-254, 133], [20, 35]], [[15752, 1220], [48, -54], [-61, -173], [-14, 178], [27, 49]], [[15712, 1309], [81, 336], [61, -79], [27, -237], [-169, -20]], [[16701, 696], [-269, -126], [-45, -263], [-235, 143], [-156, 153], [-41, 306], [-44, 60], [24, 34], [-81, 138], [57, 144], [-6, 261], [20, 84], [-54, 114], [67, 93], [-253, 69], [155, 168], [173, 55], [142, 814], [-244, 99], [138, 417], [-53, 428], [318, 957], [-12, 749], [168, 895], [27, 1631]], [[16754, 116], [-277, 17], [-62, 198], [97, 244], [249, 12], [-7, -471]], [[16162, 263], [-278, 242], [-44, 93], [393, -266], [-71, -69]], [[15745, 890], [112, 39], [51, -187], [-68, -65], [-95, 213]], [[15993, 2963], [20, -331], [-129, 25], [109, 306]], [[15989, 2178], [-115, 0], [98, 350], [17, -350]], [[14389, 17203], [327, 78], [1225, -577], [-22, -127], [-449, -80], [-50, 187], [-700, 408], [-58, -3], [-136, -132], [-174, -8], [37, 254]], [[14517, 16849], [91, -122], [-83, -58], [-28, 53], [20, 127]], [[28832, 24465], [124, -22], [15, -241], [-94, -72], [-132, 38], [13, 199], [74, 98]], [[28368, 24136], [1, 69], [-75, 129], [12, 308], [369, 185], [8, -162], [-48, -23], [92, -109], [-22, -301], [-110, -97]], [[18377, 876], [23, -62], [-230, -159], [-62, 74], [133, 179], [136, -32]], [[18103, 919], [-77, -194], [-71, 3], [148, 191]], [[53923, 8279], [78, -48], [16, -111], [-127, 44], [2, 168], [31, -53]], [[53870, 8548], [166, -40], [-108, -65], [-58, 105]], [[28500, 21571], [25, -191], [-53, -149], [-72, 90], [-34, 155], [134, 95]], [[28215, 22226], [0, -67], [-71, -198], [70, -261]], [[28214, 21700], [-208, -132], [-413, 67], [-66, -132]], [[27321, 21508], [-14, 6]], [[27307, 21514], [-3, -6]], [[26774, 21640], [76, 67], [74, 423], [-236, 440], [-265, 73], [-59, 159], [34, 27], [93, -11], [103, 56], [259, -59], [-50, 245], [78, 5], [211, -55], [203, 141], [28, 177], [91, 18]], [[30519, 21182], [9, 42]], [[31084, 21226], [-65, -145]], [[31019, 21081], [-135, 47], [-83, -14], [-83, -42], [-68, 14], [100, -136], [-84, 56], [23, -98], [-81, 75], [26, -89], [-141, 145], [103, -295], [-49, -70], [74, -14], [74, -141], [19, -107], [-144, 37], [32, -122], [-96, 56], [67, -177], [-10, -99], [-70, 117], [-23, -89], [-70, 127], [-45, -56], [-10, 154], [-90, 80], [36, 84], [77, 28], [163, -56], [39, 33], [-113, 51], [-205, -28], [-144, 272]], [[30634, 19953], [398, -75], [-19, -56], [-186, -19], [-215, 75], [22, 75]], [[44776, 13045], [43, -485], [168, -199], [-168, -6], [-61, -435], [-134, -32], [-79, -615], [-203, -34], [-429, 126], [-74, 96], [-172, 29], [-195, 592], [-11, 335]], [[43461, 12417], [119, 103], [138, -187], [249, 80], [71, 85], [148, -80], [137, 63], [82, 313], [62, 23], [34, 281], [212, 3], [63, -56]], [[41345, 13355], [405, -70], [157, -313], [114, -59], [394, -557], [525, -799], [25, -426], [-165, -123], [-617, 612], [-7, 243], [-291, 496], [-111, 306], [-114, 66], [8, 187], [-328, 375], [5, 62]], [[48293, 11582], [-3, -1432]], [[48290, 10150], [-161, 211], [-347, -54], [182, 340], [-122, 314], [-326, 199], [-366, 103], [-99, 2], [-125, 283], [309, 108], [-238, -17], [-293, 323], [304, 108], [235, -83], [35, -120], [-18, -161], [43, -166], [34, 54], [114, -190], [161, 264], [119, 38], [-22, 45], [116, 91], [306, -215], [74, 0], [88, -45]], [[45899, 12533], [37, -66], [-134, -219], [-584, 12], [-85, -161], [116, -265], [128, 141], [244, 74], [37, -58], [17, -182], [-338, -70], [169, -299], [176, -179], [-31, -353], [-229, 45], [-156, 430], [9, 199], [-105, -79], [34, -66], [-17, -530], [-97, -16], [-54, 58], [23, 422], [-88, 0], [-17, 194], [125, 579], [54, 153], [130, 145], [451, -116], [185, 207]], [[43158, 10851], [591, -118], [110, 62], [239, -120], [72, -116], [238, -59], [7, -60], [-49, -61], [-281, -65], [-367, 180], [-462, -6], [-72, 122], [-187, 41], [-53, 15], [158, 185], [56, 0]], [[46424, 12727], [22, -521], [-82, -426], [-119, -12], [-48, 223], [28, 331], [96, 306], [103, 99]], [[46353, 11520], [201, 20], [170, -62], [51, -120], [-14, -54], [-215, 83], [-236, -54], [43, 187]], [[45927, 10106], [-226, -120], [-11, 60], [224, 139]], [[45170, 10215], [47, 61], [337, 6], [10, -60], [-394, -7]], [[44633, 10275], [291, -56], [-273, -65], [-18, 121]], [[43276, 11585], [75, -6], [6, -140], [-107, 3], [26, 143]], [[46225, 11350], [-125, -37], [-59, 144], [141, 9], [43, -116]], [[45211, 9921], [-176, 70], [-17, 47], [183, -57], [10, -60]], [[43139, 11470], [-254, 246], [131, 121], [123, -367]], [[29103, 22162], [-74, 0], [-71, -182], [214, -485], [332, -203], [66, -62], [68, -1], [238, -257], [-34, -86], [-80, 77], [-139, -65], [59, -199], [-142, -193], [-88, -38], [-27, 432], [-66, 67], [-401, 269], [-331, 462], [-139, 67], [-140, -66], [-134, 1]], [[28998, 20518], [417, 18], [-31, -272], [-52, -87], [-381, 236], [47, 105]], [[28518, 20718], [-186, -32], [-22, 467], [190, 32], [40, -227], [-22, -240]], [[48290, 21253], [170, -410], [-85, -267], [-78, -48], [-7, -247], [-78, -401], [-85, -66], [-183, -67], [-114, -8], [-174, 65], [33, -172], [-182, -191], [-109, 139], [0, 79], [60, 86], [-214, -13], [-237, -105], [-57, -77], [-58, 78], [-120, -28], [4, 107], [67, -12], [198, 242], [256, 28], [144, 44], [177, 101], [77, 304], [46, -210], [216, 210], [183, 315], [0, 352], [150, 172]], [[48369, 22130], [98, -19], [241, -276], [288, 57], [-13, -324], [-216, 9], [-130, -229], [-380, 124], [-98, -238], [-45, 219], [78, 181], [163, 96], [53, 219], [-39, 181]], [[46729, 19588], [55, -11], [117, -60], [39, -165], [-93, -325], [-81, -91], [-187, 109], [9, 115], [95, 167], [-85, -19], [-59, 139], [190, 141]], [[47009, 19343], [-8, 145], [-43, -18], [122, 163], [99, -30], [22, 68], [65, 24], [69, -45], [24, -79], [-83, -133], [-118, 2], [-62, -135], [-87, 38]], [[44397, 13244], [233, 415], [76, 52], [85, -125], [-7, -149], [89, -17], [196, -113], [-117, -75], [-79, 6], [63, -119], [-160, -74]], [[43461, 12417], [46, 138], [66, 34], [203, -131], [59, 279], [246, 103], [77, 173], [83, 140]], [[42451, 13538], [146, -194], [52, -169], [-2, -265], [-2, -143], [57, -45], [71, -257], [0, -5], [-35, 12]], [[42671, 12452], [-19, -21], [-20, 52], [-315, 297], [16, 60], [-101, 160], [-48, 235], [-2, 144], [-42, 181]], [[52879, 2991], [96, 91], [70, 198], [194, -102], [59, -203], [-231, -332], [58, -102], [-47, -32], [-59, 27], [-151, -91], [-36, -161], [-88, -214], [-147, -155], [-173, 5], [-245, 86], [-55, 80], [106, 214], [183, 188], [210, 112], [190, 177], [66, 214]], [[53115, 4610], [198, -196], [99, -337], [66, -80], [-8, 251], [103, -347], [173, -86], [132, 102], [55, -27], [-30, -182], [-58, -161], [-114, 6], [-7, -129], [-136, -299], [-140, -102], [-95, 64], [95, 241], [-216, 155], [-19, 54], [144, 107], [22, 251], [-321, 707], [57, 8]], [[32228, 19019], [42, 63]], [[32235, 18994], [-7, 25]], [[48293, 11582], [501, -280], [219, -174], [9, -174], [275, -140], [40, -151], [-148, -7], [615, -841], [-110, -21], [-395, 146], [-243, 424], [-210, 111], [-77, -50], [-80, -179], [-162, -146], [-214, 23], [-23, 27]], [[49899, 11232], [110, -48], [-38, -237], [-263, -180], [-123, -7], [-191, 125], [5, 69], [167, -20], [185, 6], [148, 146], [0, 146]], [[49772, 11582], [185, -146], [145, -178], [22, -66], [-33, -111], [-31, 36], [-55, 215], [-251, 215], [18, 35]], [[45287, 16256], [200, -45], [31, -336], [-172, -342], [43, -171], [12, -141], [105, -5], [67, -138], [-58, -44], [-220, 112], [-58, 57], [-12, 68], [47, 64], [-8, 67], [-74, -85], [-39, 85], [-51, 336], [94, -45], [-24, 205], [59, 313], [58, 45]], [[45580, 13967], [65, 86], [56, -23], [51, -86], [51, 109], [47, -46], [-4, 148], [113, 142], [137, -193], [35, -370], [-63, -205], [-62, 222], [-70, -154], [74, -91], [-51, -165], [-187, 159], [-43, 171], [39, 125], [-106, 74], [-15, -51], [-82, -57], [-43, 103], [-51, -188], [-55, -17], [47, 244], [117, 63]], [[45061, 14650], [82, -193], [-129, -103], [-297, -398], [4, 74], [102, 171], [168, 222], [70, 227]], [[45608, 14673], [-180, -233], [-4, 319], [184, -86]], [[45627, 14178], [-129, 108], [141, 273], [-12, -381]], [[45791, 14725], [94, -109], [43, -290], [-55, 23], [-86, 199], [4, 177]], [[45779, 14901], [145, 11], [59, -341], [-99, 80], [-105, 250]], [[45612, 14793], [19, 119], [121, -136], [-4, -57], [-86, 108], [-50, -34]], [[29965, 24063], [107, 215], [153, -8]], [[30492, 24071], [-379, 8]], [[31769, 27611], [461, -278], [333, -25], [732, -327], [35, -155], [-207, -138], [-330, -60], [-803, 215], [325, -206], [35, -327], [384, -173], [-166, 293], [302, -69], [242, -17], [-71, 198], [413, 224], [159, 447], [479, 0], [-119, -396], [266, 9], [41, 258], [1075, 259], [649, -78], [101, -52], [153, 61], [-372, 301], [739, -92], [371, -149], [360, -181], [118, 95], [-354, 181], [0, 318], [407, 422], [526, -43], [-136, -293], [118, -94], [-47, -422], [177, -138], [-218, -275], [-296, -190], [290, 17], [377, 302], [-17, 206], [277, 43], [124, -275], [272, -52], [-6, 43], [-213, 35], [12, 215], [-189, 86], [-401, -17], [-30, 155], [118, 181], [-189, 154], [290, 319], [590, -43], [508, -189], [100, -190], [77, -25], [-6, 215], [-401, 163], [-101, 215], [227, 98], [1323, 471], [1160, 111], [425, 18], [166, 179], [471, 96], [209, -209], [1173, -127], [-83, -215], [-1015, -396], [-260, -206], [903, 292], [484, -51], [697, -26], [1116, -52], [714, -585], [148, 275], [1121, -112], [124, 302], [1370, -147], [378, -284], [838, 43], [348, -112], [-17, -198], [746, -40], [402, 26], [157, 131], [1044, -57], [659, -215], [-1, -856], [-142, -79], [-169, -11], [-163, 73], [221, -144], [180, -332], [-63, -115], [-307, 95], [-633, -476], [-397, -141], [-604, -6], [-367, 23], [-55, -802], [-189, -338], [-310, -350], [-515, -520], [-170, 932], [50, 361], [1158, 925], [100, 294], [132, 56], [-279, -5], [-23, -226], [-422, -203], [-97, 62], [82, 214], [-426, -28], [-468, -440], [158, -124], [-538, -74], [-1354, 96], [-1010, -925], [592, -141], [220, -260], [0, -248], [-147, -695], [-348, -598], [-546, -750], [-441, 45]], [[46870, 21571], [-85, 429], [131, 107], [175, -73], [274, 592], [-23, 113], [-561, -130], [-54, 249], [-407, 186], [-313, 750], [-410, 113], [-372, -84], [-217, -678], [-375, -67]], [[40189, 22897], [-26, 18]], [[34503, 22304], [-231, -197], [-142, -202], [156, -110], [105, -472]], [[33107, 21667], [-497, 389], [137, 83], [5, 236], [222, 116], [-159, -4]], [[31276, 24725], [-48, 24]], [[31285, 25207], [33, 83], [311, 18], [-357, 130]], [[48526, 22383], [-92, -163], [-4, 592], [46, 565], [-81, 158], [8, 322], [89, 197], [77, 40], [89, -333], [-27, -192], [232, -762], [-240, 130], [-97, -288], [140, -378], [-140, 112]], [[35827, 28798], [685, 100], [504, 117], [464, -54], [-862, -215], [-868, -482], [-578, 60], [655, 474]], [[35809, 27618], [-673, 26], [-377, 310], [389, 327], [419, -77], [-141, -276], [383, -310]], [[40963, 29874], [130, 86], [372, 69], [732, -362], [-142, -232], [-1180, 163], [88, 276]], [[49104, 28729], [738, -26], [-100, -155], [-703, 60], [65, 121]], [[42510, 29590], [413, -155], [6, -87], [-927, -94], [242, 224], [266, 112]], [[47953, 28875], [992, -129], [-65, -129], [-968, -86], [-219, 155], [260, 189]], [[53945, 27773], [204, 56], [-3, -133], [-195, -43], [-6, 120]], [[0, 26425], [0, 857], [758, -337], [79, -251], [42, 175], [138, -3], [236, -36], [312, -183], [-226, -136], [-251, 43], [96, -129], [-32, -147], [-130, -25], [-337, 104], [-79, 150], [-170, 36], [-214, -25], [-105, 197], [-69, -274], [-48, -16]], [[5, 27686], [12, 175], [251, -9], [114, -87], [-377, -79]], [[29835, 29734], [248, 88], [836, 15], [362, -121], [-396, -144], [-575, -44], [-475, 206]], [[29688, 29711], [440, -268], [-296, -267], [-113, -264], [-560, 217], [-13, 112], [330, 139], [-89, 68], [-331, -163], [-227, 125], [-222, 268], [887, -33], [194, 66]], [[30228, 29472], [604, -274], [-663, -69], [59, 343]], [[31472, 21187], [-50, -57], [-140, 15], [-162, -107], [-101, 43]], [[31299, 21356], [28, -103], [145, -66]], [[31472, 21187], [148, 17], [189, -9], [342, 215], [678, -176], [525, 32]], [[32479, 20006], [-200, 57], [-231, -5], [-157, 80], [-266, -61], [-96, 9], [-239, 103], [-244, 339], [-45, 394], [159, 78], [393, 75], [-81, 112]], [[26546, 25035], [8, -134], [240, -127], [4, -66], [-63, -267], [555, -724], [-136, -328], [-71, -67], [-363, -1], [4, -66], [-147, -1], [-279, -135], [-73, -1], [64, 134], [276, 201], [-152, 66], [-17, 260], [224, 2], [-86, 199], [-12, 197], [-152, -1], [-176, 395], [195, 462], [157, 2]], [[25902, 24266], [152, 1], [162, -135], [9, -129], [-226, -2]], [[16982, 22017], [-437, -268], [-157, -315], [146, -134], [-594, -149], [-87, -441], [-119, 70], [60, -202], [-76, -184], [-108, 276], [-32, -410], [162, -338], [-794, -670], [-125, -378], [222, -851], [-43, -331], [-103, -31], [-481, 1103], [-124, -103], [-184, 166], [-599, -24], [167, -268], [-740, 122], [-448, -334], [-33, -497]], [[9457, 19307], [-167, 252], [-346, 182], [-573, 1276], [43, 118], [6, 126], [-65, 307], [92, 670], [-124, 512], [362, -87], [-103, 236]], [[7437, 24105], [-708, 984], [-200, -165], [-459, 284], [-216, 39], [-886, 211], [-642, -337], [-91, 10], [0, 122], [76, 211], [250, 92], [-78, 52], [-235, -113], [-363, -361], [132, -89], [-804, -634], [-279, -165], [-630, -175], [-42, 46], [1092, 677], [-126, 275], [-500, -70], [-31, 340], [-303, -52], [-325, 392], [262, 333], [555, 86], [-36, 288], [-577, -92], [-494, 248], [533, 231], [390, -158], [110, 153], [-785, 377], [44, 116], [647, 300], [825, 195], [979, -120], [1343, -238]], [[6556, 24869], [103, 55], [113, -47], [60, -394], [-276, 386]], [[1477, 24115], [71, 147], [222, -102], [-139, -93], [-154, 48]], [[1026, 23915], [369, 55], [0, -68], [-294, -45], [-75, 58]], [[52129, 8909], [168, -156], [-48, -112], [-93, 102], [-27, 166]], [[52349, 8536], [75, -50], [-49, -4], [-26, 54]], [[45337, 17647], [86, -69], [-72, -307], [-198, -231], [-9, 125], [38, 243], [155, 239]], [[43534, 16514], [248, 34], [-51, -305], [-147, -107], [-178, 79], [128, 299]], [[46870, 21571], [-151, -107]], [[45776, 20901], [-408, -228], [-42, 463], [-364, -392], [-182, -37], [-8, -135], [449, -153], [294, -67], [-19, -85], [-255, -96], [-233, -361], [403, -644], [35, -451], [-503, -1180], [-322, -344], [-398, -150], [-23, 7], [-8, -35], [-42, -40], [-396, -137], [-50, -243], [-89, 11], [-50, 248], [-229, 23]], [[28243, 21315], [0, -2], [0, -3], [-1, -3], [0, -3], [0, -3], [0, -3], [0, -3], [-1, -3], [0, -3], [0, -3], [-1, -3], [0, -3], [0, -2], [-1, -3], [0, -3], [-1, -3], [0, -3], [-1, -3], [-1, -2], [0, -3], [-1, -3], [-1, -3], [-1, -2], [0, -3], [-1, -3], [-1, -2], [-1, -3], [-1, -3], [-1, -2], [-1, -3], [-1, -2], [-1, -3], [-1, -2], [-1, -3], [-1, -2], [-1, -3], [-2, -2], [-1, -2], [-1, -3], [-1, -2], [-2, -2], [-1, -2], [-1, -2], [-2, -3], [-1, -2], [-2, -2], [-1, -2], [-2, -2], [-1, -2], [-2, -2], [-1, -1], [-2, -2], [-1, -2], [-2, -2], [-2, -1], [-1, -2], [-2, -2], [-2, -1], [-1, -2], [-2, -1], [-2, -2], [-2, -1], [-1, -2], [-2, -1], [-2, -1], [-2, -1], [-2, -2], [-2, -1], [-1, -1], [-2, -1], [-2, -1], [-2, -1], [-2, -1], [-2, 0], [-2, -1], [-2, -1], [-2, -1], [-2, 0], [-2, -1], [-2, 0], [-2, -1], [-2, 0], [-2, -1], [-2, 0], [-2, 0], [-2, -1], [-2, 0], [-2, 0], [-2, 0], [-2, 0], [-2, 0], [-2, 0], [-2, 0], [-2, 0], [-2, 1], [-2, 0], [-2, 0], [-2, 1], [-2, 0], [-2, 1], [-2, 0], [-2, 1], [-2, 0], [-2, 1], [-2, 1], [-2, 1], [-2, 0], [-2, 1], [-1, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 2], [-2, 1], [-1, 1], [-2, 1], [-2, 2], [-2, 1], [-2, 2], [-1, 1], [-2, 2], [-2, 1], [-1, 2], [-2, 2], [-2, 1], [-1, 2], [-2, 2], [-2, 2], [-1, 1], [-2, 2], [-1, 2], [-2, 2], [-1, 2], [-2, 2], [-1, 2], [-1, 3], [-2, 2], [-1, 2], [-1, 2], [-2, 2], [-1, 3], [-1, 2], [-1, 2], [-1, 3], [-2, 2], [-1, 3], [-1, 2], [-1, 3], [-1, 2], [-1, 3], [-1, 2], [-1, 3], [-1, 3], [-1, 2], [0, 3], [-1, 3], [-1, 2], [-1, 3], [0, 3], [-1, 3], [-1, 2], [0, 3], [-1, 3], [0, 3], [-1, 3], [0, 3], [-1, 2], [0, 3], [-1, 3], [0, 3], [0, 3], [0, 3], [-1, 3], [0, 3], [0, 3], [0, 3], [0, 3], [0, 3], [0, 2], [0, 3], [0, 3], [0, 3], [0, 3], [0, 3], [0, 3], [1, 3], [0, 3], [0, 3], [0, 3], [1, 3], [0, 2], [1, 3], [0, 3], [1, 3], [0, 3], [1, 3], [0, 2], [1, 3], [1, 3], [0, 3], [1, 3], [1, 2], [1, 3], [0, 3], [1, 2], [1, 3], [1, 3], [1, 2], [1, 3], [1, 2], [1, 3], [1, 2], [1, 3], [2, 2], [1, 2], [1, 3], [1, 2], [1, 2], [2, 3], [1, 2], [1, 2], [2, 2], [1, 2], [1, 3], [2, 2], [1, 2], [2, 2], [1, 2], [2, 1], [1, 2], [2, 2], [2, 2], [1, 2], [2, 1], [2, 2], [1, 2], [2, 1], [2, 2], [1, 1], [2, 2], [2, 1], [2, 1], [2, 2], [1, 1], [2, 1], [2, 1], [2, 2], [2, 1], [2, 1], [2, 1], [1, 1], [2, 0], [2, 1], [2, 1], [2, 1], [2, 1], [2, 0], [2, 1], [2, 0], [2, 1], [2, 0], [2, 1], [2, 0], [2, 0], [2, 0], [2, 1], [2, 0], [2, 0], [2, 0], [2, 0], [2, 0], [2, 0], [2, -1], [2, 0], [2, 0], [2, 0], [2, -1], [2, 0], [2, -1], [2, 0], [2, -1], [2, 0], [2, -1], [2, -1], [2, -1], [2, -1], [2, 0], [2, -1], [2, -1], [2, -1], [1, -1], [2, -2], [2, -1], [2, -1], [2, -1], [2, -2], [1, -1], [2, -1], [2, -2], [2, -1], [1, -2], [2, -1], [2, -2], [1, -2], [2, -1], [2, -2], [1, -2], [2, -2], [1, -2], [2, -1], [1, -2], [2, -2], [1, -2], [2, -2], [1, -3], [2, -2], [1, -2], [1, -2], [2, -2], [1, -3], [1, -2], [1, -2], [2, -3], [1, -2], [1, -2], [1, -3], [1, -2], [1, -3], [1, -2], [1, -3], [1, -2], [1, -3], [1, -3], [1, -2], [1, -3], [0, -3], [1, -2], [1, -3], [1, -3], [0, -3], [1, -3], [1, -2], [0, -3], [1, -3], [0, -3], [1, -3], [0, -3], [0, -2], [1, -3], [0, -3], [0, -3], [1, -3], [0, -3], [0, -3], [0, -3], [0, -3], [1, -3], [0, -3], [0, -3]], [[1353, 10157], [0, -3], [0, -3], [0, -4], [0, -3], [0, -3], [0, -3], [0, -4], [0, -3], [-1, -3], [0, -3], [0, -4], [-1, -3], [0, -3], [0, -3], [-1, -3], [0, -4], [-1, -3], [-1, -3], [0, -3], [-1, -3], [-1, -3], [0, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [0, -3], [-1, -3], [-1, -3], [-2, -2], [-1, -3], [-1, -3], [-1, -3], [-1, -2], [-1, -3], [-2, -3], [-1, -2], [-1, -3], [-2, -2], [-1, -3], [-1, -2], [-2, -3], [-1, -2], [-2, -2], [-1, -3], [-2, -2], [-2, -2], [-1, -2], [-2, -2], [-1, -2], [-2, -3], [-2, -2], [-2, -1], [-1, -2], [-2, -2], [-2, -2], [-2, -2], [-2, -1], [-2, -2], [-2, -2], [-1, -1], [-2, -2], [-2, -1], [-2, -2], [-2, -1], [-2, -1], [-2, -2], [-2, -1], [-2, -1], [-3, -1], [-2, -1], [-2, -1], [-2, -1], [-2, -1], [-2, -1], [-2, 0], [-3, -1], [-2, -1], [-2, 0], [-2, -1], [-2, 0], [-2, -1], [-3, 0], [-2, -1], [-2, 0], [-2, 0], [-3, 0], [-2, 0], [-2, 0], [-2, 0], [-3, 0], [-2, 0], [-2, 0], [-2, 0], [-3, 1], [-2, 0], [-2, 1], [-2, 0], [-2, 1], [-3, 0], [-2, 1], [-2, 1], [-2, 0], [-2, 1], [-3, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 1], [-3, 1], [-2, 2], [-2, 1], [-2, 1], [-2, 2], [-2, 1], [-2, 2], [-2, 1], [-2, 2], [-2, 2], [-2, 1], [-2, 2], [-2, 2], [-2, 2], [-1, 2], [-2, 1], [-2, 2], [-2, 3], [-2, 2], [-2, 2], [-1, 2], [-2, 2], [-2, 2], [-1, 3], [-2, 2], [-2, 2], [-1, 3], [-2, 2], [-1, 3], [-2, 2], [-1, 3], [-2, 2], [-1, 3], [-1, 3], [-2, 2], [-1, 3], [-1, 3], [-2, 3], [-1, 2], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [0, 3], [-1, 3], [-1, 4], [0, 3], [-1, 3], [-1, 3], [0, 3], [-1, 4], [0, 3], [-1, 3], [0, 3], [0, 4], [-1, 3], [0, 3], [0, 3], [0, 4], [0, 3], [0, 3], [-1, 3], [0, 4], [0, 3], [0, 3], [1, 3], [0, 4], [0, 3], [0, 3], [0, 3], [1, 4], [0, 3], [0, 3], [1, 3], [0, 4], [1, 3], [0, 3], [1, 3], [0, 3], [1, 3], [1, 3], [0, 3], [1, 3], [1, 3], [1, 3], [0, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 2], [2, 3], [1, 3], [1, 3], [1, 2], [1, 3], [2, 3], [1, 2], [1, 3], [2, 2], [1, 3], [2, 2], [1, 2], [2, 3], [1, 2], [2, 2], [1, 2], [2, 3], [2, 2], [1, 2], [2, 2], [2, 2], [1, 2], [2, 2], [2, 2], [2, 1], [2, 2], [2, 2], [1, 1], [2, 2], [2, 2], [2, 1], [2, 2], [2, 1], [2, 1], [2, 2], [2, 1], [2, 1], [2, 1], [2, 1], [3, 1], [2, 1], [2, 1], [2, 1], [2, 1], [2, 1], [2, 0], [3, 1], [2, 1], [2, 0], [2, 1], [2, 0], [3, 1], [2, 0], [2, 0], [2, 0], [2, 0], [3, 1], [2, 0], [2, 0], [2, -1], [3, 0], [2, 0], [2, 0], [2, 0], [3, -1], [2, 0], [2, -1], [2, 0], [3, -1], [2, -1], [2, 0], [2, -1], [2, -1], [3, -1], [2, -1], [2, -1], [2, -1], [2, -1], [2, -1], [2, -1], [2, -1], [3, -2], [2, -1], [2, -1], [2, -2], [2, -1], [2, -2], [2, -2], [2, -1], [2, -2], [2, -2], [2, -1], [1, -2], [2, -2], [2, -2], [2, -2], [2, -2], [2, -2], [1, -2], [2, -3], [2, -2], [1, -2], [2, -2], [2, -3], [1, -2], [2, -2], [1, -3], [2, -2], [2, -3], [1, -2], [1, -3], [2, -3], [1, -2], [2, -3], [1, -3], [1, -3], [1, -2], [2, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [0, -3], [1, -3], [1, -3], [1, -3], [0, -3], [1, -4], [0, -3], [1, -3], [0, -3], [1, -4], [0, -3], [1, -3], [0, -3], [0, -4], [1, -3], [0, -3], [0, -3], [0, -4], [0, -3]], [[46470, 9858], [0, -3], [0, -3], [0, -4], [0, -3], [0, -3], [0, -4], [0, -3], [-1, -3], [0, -3], [0, -4], [-1, -3], [0, -3], [-1, -3], [0, -4], [-1, -3], [0, -3], [-1, -3], [-1, -3], [-1, -3], [0, -4], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -2], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-2, -2], [-1, -3], [-1, -3], [-2, -2], [-1, -3], [-2, -3], [-1, -2], [-2, -3], [-1, -2], [-2, -2], [-1, -3], [-2, -2], [-1, -2], [-2, -3], [-2, -2], [-1, -2], [-2, -2], [-2, -2], [-2, -2], [-1, -2], [-2, -2], [-2, -2], [-2, -2], [-2, -1], [-2, -2], [-2, -2], [-2, -1], [-2, -2], [-2, -2], [-2, -1], [-2, -1], [-2, -2], [-2, -1], [-2, -1], [-2, -2], [-2, -1], [-2, -1], [-2, -1], [-2, -1], [-3, -1], [-2, -1], [-2, -1], [-2, 0], [-2, -1], [-3, -1], [-2, 0], [-2, -1], [-2, 0], [-2, -1], [-3, 0], [-2, 0], [-2, -1], [-2, 0], [-3, 0], [-2, 0], [-2, 0], [-2, 0], [-3, 0], [-2, 0], [-2, 0], [-2, 1], [-2, 0], [-3, 0], [-2, 1], [-2, 0], [-2, 1], [-3, 0], [-2, 1], [-2, 1], [-2, 0], [-2, 1], [-2, 1], [-3, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 2], [-2, 1], [-2, 1], [-2, 2], [-2, 1], [-2, 1], [-2, 2], [-2, 2], [-2, 1], [-2, 2], [-2, 2], [-2, 1], [-2, 2], [-2, 2], [-2, 2], [-1, 2], [-2, 2], [-2, 2], [-2, 2], [-1, 2], [-2, 2], [-2, 3], [-1, 2], [-2, 2], [-1, 3], [-2, 2], [-2, 2], [-1, 3], [-1, 2], [-2, 3], [-1, 3], [-2, 2], [-1, 3], [-1, 3], [-2, 2], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 2], [-2, 3], [-1, 3], [-1, 3], [-1, 3], [0, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 4], [0, 3], [-1, 3], [-1, 3], [0, 3], [-1, 3], [0, 4], [-1, 3], [0, 3], [-1, 3], [0, 4], [0, 3], [-1, 3], [0, 3], [0, 4], [0, 3], [0, 3], [0, 4], [-1, 3], [0, 3], [0, 4], [1, 3], [0, 3], [0, 3], [0, 4], [0, 3], [0, 3], [1, 4], [0, 3], [0, 3], [1, 3], [0, 4], [1, 3], [0, 3], [1, 3], [0, 3], [1, 4], [1, 3], [0, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [0, 3], [1, 3], [1, 3], [1, 3], [2, 3], [1, 3], [1, 3], [1, 3], [1, 2], [1, 3], [2, 3], [1, 3], [1, 2], [2, 3], [1, 2], [2, 3], [1, 2], [1, 3], [2, 2], [2, 3], [1, 2], [2, 2], [1, 3], [2, 2], [2, 2], [1, 2], [2, 2], [2, 2], [2, 2], [1, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 1], [2, 2], [2, 1], [2, 2], [2, 1], [2, 2], [2, 1], [2, 2], [2, 1], [2, 1], [2, 1], [2, 1], [2, 1], [2, 1], [3, 1], [2, 1], [2, 1], [2, 1], [2, 0], [2, 1], [3, 1], [2, 0], [2, 1], [2, 0], [3, 1], [2, 0], [2, 0], [2, 0], [2, 0], [3, 1], [2, 0], [2, 0], [2, -1], [3, 0], [2, 0], [2, 0], [2, 0], [3, -1], [2, 0], [2, -1], [2, 0], [2, -1], [3, -1], [2, 0], [2, -1], [2, -1], [2, -1], [3, -1], [2, -1], [2, -1], [2, -1], [2, -1], [2, -1], [2, -1], [2, -2], [2, -1], [2, -2], [2, -1], [2, -2], [2, -1], [2, -2], [2, -1], [2, -2], [2, -2], [2, -2], [2, -2], [2, -2], [1, -2], [2, -2], [2, -2], [2, -2], [1, -2], [2, -2], [2, -2], [1, -3], [2, -2], [1, -2], [2, -3], [1, -2], [2, -3], [1, -2], [2, -3], [1, -2], [2, -3], [1, -2], [1, -3], [2, -3], [1, -3], [1, -2], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [0, -3], [1, -3], [1, -3], [1, -4], [0, -3], [1, -3], [0, -3], [1, -3], [0, -4], [1, -3], [0, -3], [0, -3], [1, -4], [0, -3], [0, -3], [0, -4], [0, -3], [0, -3], [0, -3], [0, -4]], [[28515, 22481], [9, 44]], [[28524, 22525], [11, -21], [5, -8]], [[28549, 22472], [-34, 9]], [[16182, 16900], [68, 67], [127, -110], [-195, 43]], [[17411, 16261], [-23, -58], [-38, -20], [31, 86], [30, -8]], [[17579, 16128], [6, 24], [28, 5], [-34, -29]], [[17623, 15963], [40, 1], [7, -66], [-47, 65]], [[17719, 15805], [2, 35], [13, -34], [-15, -1]], [[35563, 17737], [131, -350], [157, -34], [232, -275], [-302, -724], [-427, -465], [-297, -69]], [[35516, 17861], [31, 42], [8, -86], [0, 0]], [[32191, 14367], [-112, 140], [-12, 177]], [[32067, 14684], [22, 145]], [[32089, 14829], [-79, 4], [-3, -63], [-96, -1], [42, -55], [13, -143], [-179, -281]], [[31787, 14290], [-63, -6], [-136, 122], [-61, -44], [-3, -74], [-76, -10], [-39, -78], [-110, -2], [-20, 59]], [[31279, 14257], [-230, -7], [-77, 188], [-115, -26], [-134, -402], [-3, 3], [-101, 52], [28, 236], [-123, 246], [-112, 379], [-7, 241], [138, 424], [150, 11], [-2, 832], [0, 103], [150, 4], [0, 428], [1227, 5], [75, -68], [56, 36], [243, 287], [191, -241], [81, -724], [172, -147], [-44, -117], [-118, -51], [-77, -53], [-6, -181], [-77, -242], [13, -187], [-45, -209], [-17, -139], [-70, -8], [-119, -400], [-4, -15], [-54, 20], [-33, -279], [-1, -5], [-55, -6], [12, 122]], [[29754, 21563], [-96, -18], [-141, 98], [-132, 150], [-83, 163], [-129, 10], [-67, 150], [35, 4]], [[29536, 22368], [25, -14]], [[29561, 22354], [184, -149]], [[29921, 22214], [45, -211]], [[29985, 21682], [26, 22]], [[30172, 21418], [-77, 56]], [[30095, 21474], [20, 30], [38, 45], [-168, 133]], [[29992, 21343], [-112, 122]], [[29886, 21601], [99, 81]], [[30095, 21474], [-52, 38]], [[945, 7768], [0, -4], [1, -3], [0, -3], [0, -3], [-1, -4], [0, -3], [0, -3], [0, -3], [0, -4], [0, -3], [-1, -3], [0, -3], [0, -3], [-1, -4], [0, -3], [-1, -3], [0, -3], [-1, -3], [-1, -3], [0, -3], [-1, -3], [-1, -4], [0, -3], [-1, -3], [-1, -3], [-1, -2], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -2], [-1, -3], [-1, -3], [-1, -2], [-2, -3], [-1, -3], [-1, -2], [-2, -3], [-1, -2], [-1, -3], [-2, -2], [-1, -3], [-2, -2], [-1, -2], [-2, -2], [-1, -3], [-2, -2], [-2, -2], [-1, -2], [-2, -2], [-2, -2], [-1, -2], [-2, -2], [-2, -2], [-2, -1], [-2, -2], [-1, -2], [-2, -2], [-2, -1], [-2, -2], [-2, -1], [-2, -2], [-2, -1], [-2, -2], [-2, -1], [-2, -1], [-2, -1], [-2, -1], [-2, -2], [-2, -1], [-2, -1], [-2, 0], [-3, -1], [-2, -1], [-2, -1], [-2, -1], [-2, 0], [-2, -1], [-3, 0], [-2, -1], [-2, 0], [-2, -1], [-2, 0], [-3, 0], [-2, 0], [-2, -1], [-2, 0], [-3, 0], [-2, 0], [-2, 0], [-2, 1], [-2, 0], [-3, 0], [-2, 0], [-2, 1], [-2, 0], [-3, 1], [-2, 0], [-2, 1], [-2, 0], [-3, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 0], [-2, 1], [-3, 1], [-2, 2], [-2, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 2], [-2, 1], [-2, 2], [-2, 1], [-2, 2], [-3, 1], [-1, 2], [-2, 2], [-2, 2], [-2, 1], [-2, 2], [-2, 2], [-2, 2], [-2, 2], [-2, 2], [-1, 2], [-2, 2], [-2, 2], [-2, 3], [-1, 2], [-2, 2], [-2, 2], [-1, 3], [-2, 2], [-2, 3], [-1, 2], [-2, 3], [-1, 2], [-1, 3], [-2, 3], [-1, 2], [-2, 3], [-1, 3], [-1, 2], [-2, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 2], [-1, 3], [-1, 3], [-1, 3], [-1, 4], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [0, 3], [-1, 3], [-1, 3], [0, 4], [-1, 3], [-1, 3], [0, 3], [-1, 3], [0, 4], [0, 3], [-1, 3], [0, 3], [0, 4], [-1, 3], [0, 3], [0, 3], [0, 4], [0, 3], [0, 3], [0, 4], [0, 3], [0, 3], [0, 3], [0, 4], [0, 3], [0, 3], [1, 3], [0, 3], [0, 4], [1, 3], [0, 3], [1, 3], [0, 3], [1, 3], [0, 4], [1, 3], [0, 3], [1, 3], [1, 3], [1, 3], [0, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 2], [1, 3], [1, 3], [1, 3], [1, 3], [1, 2], [2, 3], [1, 2], [1, 3], [2, 3], [1, 2], [1, 3], [2, 2], [1, 3], [2, 2], [1, 2], [2, 3], [1, 2], [2, 2], [1, 2], [2, 2], [2, 2], [1, 2], [2, 2], [2, 2], [1, 2], [2, 2], [2, 2], [2, 2], [2, 1], [2, 2], [2, 2], [1, 1], [2, 2], [2, 1], [2, 2], [2, 1], [2, 1], [2, 1], [2, 2], [2, 1], [3, 1], [2, 1], [2, 1], [2, 1], [2, 1], [2, 1], [2, 0], [2, 1], [3, 1], [2, 0], [2, 1], [2, 0], [2, 1], [3, 0], [2, 0], [2, 1], [2, 0], [3, 0], [2, 0], [2, 0], [2, 0], [2, 0], [3, 0], [2, 0], [2, -1], [2, 0], [3, 0], [2, -1], [2, 0], [2, -1], [3, 0], [2, -1], [2, -1], [2, 0], [2, -1], [3, -1], [2, -1], [2, -1], [2, -1], [2, -1], [2, -1], [2, -2], [3, -1], [2, -1], [2, -1], [2, -2], [2, -1], [2, -2], [2, -1], [2, -2], [2, -2], [2, -1], [2, -2], [2, -2], [2, -2], [2, -2], [1, -2], [2, -2], [2, -2], [2, -2], [2, -2], [1, -2], [2, -2], [2, -2], [1, -3], [2, -2], [2, -2], [1, -3], [2, -2], [1, -3], [2, -2], [1, -3], [2, -3], [1, -2], [2, -3], [1, -2], [1, -3], [2, -3], [1, -3], [1, -3], [1, -2], [1, -3], [2, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [0, -3], [1, -3], [1, -4], [1, -3], [0, -3], [1, -3], [1, -3], [0, -3], [1, -4], [0, -3], [1, -3], [0, -3], [1, -3], [0, -4], [0, -3], [1, -3], [0, -3], [0, -4], [0, -3], [0, -3]], [[1314, 9144], [0, -3], [0, -4], [0, -3], [0, -3], [0, -4], [-1, -3], [0, -3], [0, -3], [0, -3], [0, -4], [-1, -3], [0, -3], [-1, -3], [0, -4], [0, -3], [-1, -3], [-1, -3], [0, -3], [-1, -3], [0, -3], [-1, -3], [-1, -3], [-1, -3], [0, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -2], [-2, -3], [-1, -3], [-1, -2], [-1, -3], [-2, -3], [-1, -2], [-1, -3], [-2, -2], [-1, -3], [-1, -2], [-2, -2], [-1, -3], [-2, -2], [-2, -2], [-1, -2], [-2, -3], [-1, -2], [-2, -2], [-2, -2], [-2, -2], [-1, -2], [-2, -2], [-2, -2], [-2, -1], [-1, -2], [-2, -2], [-2, -1], [-2, -2], [-2, -2], [-2, -1], [-2, -2], [-2, -1], [-2, -1], [-2, -2], [-2, -1], [-2, -1], [-2, -1], [-2, -1], [-2, -1], [-2, -1], [-3, -1], [-2, -1], [-2, -1], [-2, -1], [-2, -1], [-2, 0], [-3, -1], [-2, 0], [-2, -1], [-2, 0], [-2, -1], [-3, 0], [-2, 0], [-2, 0], [-2, 0], [-2, -1], [-3, 0], [-2, 0], [-2, 1], [-2, 0], [-3, 0], [-2, 0], [-2, 0], [-2, 1], [-3, 0], [-2, 1], [-2, 0], [-2, 1], [-3, 0], [-2, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 1], [-3, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 2], [-2, 1], [-2, 1], [-3, 2], [-2, 1], [-2, 2], [-2, 2], [-2, 1], [-1, 2], [-2, 2], [-2, 1], [-2, 2], [-2, 2], [-2, 2], [-2, 2], [-2, 2], [-1, 2], [-2, 2], [-2, 3], [-2, 2], [-1, 2], [-2, 2], [-2, 3], [-1, 2], [-2, 2], [-1, 3], [-2, 2], [-1, 3], [-2, 2], [-1, 3], [-2, 3], [-1, 2], [-1, 3], [-2, 3], [-1, 2], [-1, 3], [-1, 3], [-2, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [0, 3], [-1, 3], [-1, 3], [-1, 3], [0, 3], [-1, 3], [-1, 4], [0, 3], [-1, 3], [0, 3], [-1, 4], [0, 3], [-1, 3], [0, 3], [0, 3], [0, 4], [-1, 3], [0, 3], [0, 4], [0, 3], [0, 3], [0, 3], [0, 4], [0, 3], [0, 3], [0, 3], [0, 4], [0, 3], [1, 3], [0, 3], [0, 4], [1, 3], [0, 3], [1, 3], [0, 3], [1, 3], [0, 4], [1, 3], [0, 3], [1, 3], [1, 3], [0, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 2], [1, 3], [1, 3], [1, 3], [1, 2], [2, 3], [1, 3], [1, 2], [1, 3], [2, 2], [1, 3], [2, 2], [1, 3], [2, 2], [1, 2], [2, 3], [1, 2], [2, 2], [1, 2], [2, 2], [2, 2], [1, 3], [2, 2], [2, 1], [2, 2], [1, 2], [2, 2], [2, 2], [2, 1], [2, 2], [2, 2], [2, 1], [2, 2], [2, 1], [2, 2], [2, 1], [2, 1], [2, 2], [2, 1], [2, 1], [2, 1], [2, 1], [2, 1], [2, 1], [2, 1], [3, 1], [2, 0], [2, 1], [2, 1], [2, 0], [2, 1], [3, 0], [2, 1], [2, 0], [2, 1], [2, 0], [3, 0], [2, 0], [2, 0], [2, 0], [3, 0], [2, 0], [2, 0], [2, 0], [3, 0], [2, -1], [2, 0], [2, -1], [3, 0], [2, -1], [2, 0], [2, -1], [2, -1], [3, 0], [2, -1], [2, -1], [2, -1], [2, -1], [2, -1], [3, -1], [2, -1], [2, -1], [2, -2], [2, -1], [2, -1], [2, -2], [2, -1], [2, -2], [2, -1], [2, -2], [2, -2], [2, -1], [2, -2], [2, -2], [2, -2], [2, -2], [2, -1], [1, -2], [2, -3], [2, -2], [2, -2], [2, -2], [1, -2], [2, -2], [2, -3], [1, -2], [2, -2], [1, -3], [2, -2], [1, -3], [2, -2], [1, -3], [2, -2], [1, -3], [2, -3], [1, -2], [1, -3], [2, -3], [1, -3], [1, -2], [1, -3], [1, -3], [1, -3], [1, -3], [2, -3], [1, -3], [1, -3], [0, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [0, -4], [1, -3], [1, -3], [0, -3], [1, -3], [0, -3], [1, -4], [0, -3], [1, -3], [0, -3], [0, -4], [1, -3], [0, -3], [0, -3], [0, -4], [1, -3], [0, -3]], [[1672, 7972], [1, -3], [0, -3], [0, -3], [0, -4], [-1, -3], [0, -3], [0, -3], [0, -4], [0, -3], [0, -3], [-1, -3], [0, -4], [0, -3], [-1, -3], [0, -3], [-1, -3], [0, -3], [-1, -3], [0, -4], [-1, -3], [-1, -3], [-1, -3], [0, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -2], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -2], [-1, -3], [-1, -3], [-2, -2], [-1, -3], [-1, -3], [-1, -2], [-2, -3], [-1, -2], [-2, -2], [-1, -3], [-2, -2], [-1, -2], [-2, -3], [-1, -2], [-2, -2], [-1, -2], [-2, -2], [-2, -2], [-2, -2], [-1, -2], [-2, -2], [-2, -2], [-2, -2], [-1, -2], [-2, -1], [-2, -2], [-2, -1], [-2, -2], [-2, -2], [-2, -1], [-2, -1], [-2, -2], [-2, -1], [-2, -1], [-2, -2], [-2, -1], [-2, -1], [-2, -1], [-2, -1], [-2, -1], [-2, -1], [-3, 0], [-2, -1], [-2, -1], [-2, -1], [-2, 0], [-2, -1], [-3, 0], [-2, -1], [-2, 0], [-2, 0], [-2, -1], [-3, 0], [-2, 0], [-2, 0], [-2, 0], [-3, 0], [-2, 0], [-2, 0], [-2, 0], [-3, 1], [-2, 0], [-2, 0], [-2, 1], [-3, 0], [-2, 1], [-2, 0], [-2, 1], [-2, 1], [-3, 1], [-2, 0], [-2, 1], [-2, 1], [-2, 1], [-2, 1], [-3, 1], [-2, 1], [-2, 2], [-2, 1], [-2, 1], [-2, 2], [-2, 1], [-2, 1], [-2, 2], [-2, 2], [-2, 1], [-2, 2], [-2, 1], [-2, 2], [-2, 2], [-2, 2], [-2, 2], [-2, 2], [-2, 2], [-2, 2], [-1, 2], [-2, 2], [-2, 2], [-2, 2], [-1, 3], [-2, 2], [-2, 2], [-1, 3], [-2, 2], [-1, 2], [-2, 3], [-1, 2], [-2, 3], [-1, 3], [-2, 2], [-1, 3], [-2, 3], [-1, 2], [-1, 3], [-1, 3], [-2, 3], [-1, 3], [-1, 2], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 4], [-1, 3], [0, 3], [-1, 3], [-1, 3], [0, 3], [-1, 3], [-1, 4], [0, 3], [-1, 3], [0, 3], [0, 4], [-1, 3], [0, 3], [0, 3], [-1, 4], [0, 3], [0, 3], [0, 3], [0, 4], [0, 3], [0, 3], [0, 4], [0, 3], [0, 3], [0, 3], [0, 4], [0, 3], [1, 3], [0, 3], [0, 3], [1, 4], [0, 3], [1, 3], [0, 3], [1, 3], [0, 3], [1, 3], [0, 4], [1, 3], [1, 3], [1, 3], [0, 3], [1, 3], [1, 3], [1, 3], [1, 2], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 2], [1, 3], [2, 3], [1, 2], [1, 3], [2, 2], [1, 3], [1, 2], [2, 3], [1, 2], [2, 3], [1, 2], [2, 2], [1, 3], [2, 2], [1, 2], [2, 2], [2, 2], [1, 2], [2, 2], [2, 2], [1, 2], [2, 2], [2, 2], [2, 1], [2, 2], [2, 2], [2, 1], [1, 2], [2, 1], [2, 2], [2, 1], [2, 2], [2, 1], [2, 1], [2, 1], [2, 2], [3, 1], [2, 1], [2, 1], [2, 1], [2, 0], [2, 1], [2, 1], [2, 1], [3, 0], [2, 1], [2, 1], [2, 0], [2, 0], [3, 1], [2, 0], [2, 0], [2, 1], [2, 0], [3, 0], [2, 0], [2, 0], [2, 0], [3, 0], [2, -1], [2, 0], [2, 0], [3, -1], [2, 0], [2, 0], [2, -1], [3, -1], [2, 0], [2, -1], [2, -1], [2, -1], [3, 0], [2, -1], [2, -1], [2, -1], [2, -1], [2, -2], [2, -1], [3, -1], [2, -1], [2, -2], [2, -1], [2, -2], [2, -1], [2, -2], [2, -1], [2, -2], [2, -2], [2, -1], [2, -2], [2, -2], [1, -2], [2, -2], [2, -2], [2, -2], [2, -2], [2, -2], [1, -2], [2, -2], [2, -3], [1, -2], [2, -2], [2, -3], [1, -2], [2, -3], [1, -2], [2, -3], [1, -2], [2, -3], [1, -2], [2, -3], [1, -3], [1, -2], [2, -3], [1, -3], [1, -3], [1, -3], [1, -3], [2, -2], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [0, -4], [1, -3], [1, -3], [1, -3], [0, -3], [1, -3], [1, -3], [0, -4], [1, -3], [0, -3], [1, -3], [0, -3], [1, -4], [0, -3], [0, -3], [1, -3], [0, -4], [0, -3], [0, -3], [0, -4]], [[3305, 7602], [0, -4], [0, -3], [0, -3], [0, -3], [0, -4], [0, -3], [-1, -3], [0, -3], [0, -4], [0, -3], [-1, -3], [0, -3], [0, -3], [-1, -4], [0, -3], [-1, -3], [0, -3], [-1, -3], [-1, -3], [0, -3], [-1, -3], [-1, -4], [0, -3], [-1, -3], [-1, -3], [-1, -2], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -3], [-1, -2], [-1, -3], [-2, -3], [-1, -2], [-1, -3], [-1, -3], [-2, -2], [-1, -3], [-1, -2], [-2, -3], [-1, -2], [-2, -3], [-1, -2], [-2, -2], [-1, -2], [-2, -3], [-2, -2], [-1, -2], [-2, -2], [-2, -2], [-1, -2], [-2, -2], [-2, -2], [-2, -2], [-1, -2], [-2, -1], [-2, -2], [-2, -2], [-2, -1], [-2, -2], [-2, -1], [-2, -2], [-2, -1], [-2, -2], [-2, -1], [-2, -1], [-2, -1], [-2, -1], [-2, -2], [-2, -1], [-2, -1], [-2, 0], [-2, -1], [-3, -1], [-2, -1], [-2, -1], [-2, 0], [-2, -1], [-3, 0], [-2, -1], [-2, 0], [-2, -1], [-2, 0], [-3, 0], [-2, 0], [-2, -1], [-2, 0], [-3, 0], [-2, 0], [-2, 0], [-2, 1], [-2, 0], [-3, 0], [-2, 0], [-2, 1], [-2, 0], [-3, 1], [-2, 0], [-2, 1], [-2, 0], [-3, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 0], [-2, 1], [-3, 1], [-2, 2], [-2, 1], [-2, 1], [-2, 1], [-2, 1], [-2, 2], [-2, 1], [-2, 2], [-2, 1], [-2, 2], [-2, 1], [-2, 2], [-2, 2], [-2, 1], [-2, 2], [-2, 2], [-2, 2], [-2, 2], [-2, 2], [-1, 2], [-2, 2], [-2, 2], [-2, 2], [-1, 3], [-2, 2], [-2, 2], [-1, 2], [-2, 3], [-2, 2], [-1, 3], [-2, 2], [-1, 3], [-2, 2], [-1, 3], [-1, 3], [-2, 2], [-1, 3], [-1, 3], [-2, 2], [-1, 3], [-1, 3], [-1, 3], [-2, 3], [-1, 3], [-1, 3], [-1, 2], [-1, 3], [-1, 3], [-1, 3], [-1, 4], [0, 3], [-1, 3], [-1, 3], [-1, 3], [-1, 3], [0, 3], [-1, 3], [0, 4], [-1, 3], [-1, 3], [0, 3], [-1, 3], [0, 4], [0, 3], [-1, 3], [0, 3], [0, 4], [0, 3], [-1, 3], [0, 3], [0, 4], [0, 3], [0, 3], [0, 3], [0, 4], [0, 3], [0, 3], [1, 4], [0, 3], [0, 3], [0, 3], [1, 3], [0, 4], [0, 3], [1, 3], [0, 3], [1, 3], [0, 3], [1, 4], [1, 3], [0, 3], [1, 3], [1, 3], [0, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 2], [1, 3], [1, 3], [1, 3], [1, 2], [2, 3], [1, 3], [1, 2], [1, 3], [2, 3], [1, 2], [1, 3], [2, 2], [1, 3], [2, 2], [1, 2], [2, 3], [1, 2], [2, 2], [2, 2], [1, 2], [2, 2], [2, 2], [1, 2], [2, 2], [2, 2], [2, 2], [2, 2], [1, 2], [2, 1], [2, 2], [2, 2], [2, 1], [2, 2], [2, 1], [2, 2], [2, 1], [2, 1], [2, 1], [2, 2], [2, 1], [2, 1], [2, 1], [2, 1], [3, 1], [2, 1], [2, 1], [2, 0], [2, 1], [2, 1], [2, 0], [3, 1], [2, 0], [2, 1], [2, 0], [3, 0], [2, 1], [2, 0], [2, 0], [2, 0], [3, 0], [2, 0], [2, 0], [2, 0], [3, 0], [2, -1], [2, 0], [2, 0], [3, -1], [2, 0], [2, -1], [2, 0], [2, -1], [3, -1], [2, 0], [2, -1], [2, -1], [2, -1], [3, -1], [2, -1], [2, -1], [2, -1], [2, -2], [2, -1], [2, -1], [2, -1], [2, -2], [2, -1], [3, -2], [2, -1], [1, -2], [2, -2], [2, -1], [2, -2], [2, -2], [2, -2], [2, -2], [2, -2], [2, -2], [2, -2], [1, -2], [2, -2], [2, -2], [1, -2], [2, -2], [2, -3], [1, -2], [2, -2], [2, -3], [1, -2], [2, -3], [1, -2], [2, -3], [1, -3], [1, -2], [2, -3], [1, -3], [1, -2], [2, -3], [1, -3], [1, -3], [1, -2], [2, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [1, -3], [0, -3], [1, -3], [1, -3], [1, -4], [1, -3], [0, -3], [1, -3], [0, -3], [1, -3], [1, -4], [0, -3], [0, -3], [1, -3], [0, -3], [1, -4], [0, -3], [0, -3], [0, -4], [1, -3], [0, -3], [0, -3]], [[31279, 14257], [11, -31], [1, -5], [8, -23], [108, 2]], [[31407, 14200], [0, -1], [2, 1]], [[31409, 14200], [39, 78]], [[31448, 14278], [0, 1], [76, 9]], [[31524, 14288], [3, 74], [61, 44]], [[31588, 14406], [136, -122]], [[31724, 14284], [63, 6]], [[31787, 14290], [179, 281]], [[31966, 14571], [-13, 143], [-42, 55], [96, 1], [3, 63], [79, -4]], [[32067, 14684], [12, -177]], [[32079, 14507], [112, -140]], [[32191, 14367], [-12, -122], [55, 6]], [[32234, 14251], [-30, -252], [-123, 8], [-38, -137], [137, -62], [139, -243], [73, -238], [62, 1], [34, -165], [-36, -1], [-15, 0], [-18, -1], [-167, -2], [-51, -75], [-72, -105], [-215, -47], [-200, 19], [-194, 226], [-205, -75], [-101, 150], [-33, 133], [-122, 99], [-3, 122], [-184, 192], [12, 71], [-161, 141]], [[30723, 14010], [134, 402], [115, 26]], [[30972, 14438], [77, -188]], [[31049, 14250], [230, 7]], [[46409, 20623], [-209, -79], [-58, -96]], [[32442, 17229], [-122, -143], [-121, -144], [-56, -36], [-75, 68]], [[38294, 19344], [-132, 74]], [[38162, 19418], [-41, 296], [95, 119], [-215, 210]], [[38001, 20043], [79, 163]], [[38428, 19214], [97, 86]], [[38525, 19300], [-4, 59], [93, 44], [110, -74], [168, -32]], [[30152, 21549], [44, 44], [-15, 32], [34, 20], [19, -34], [26, -3], [17, -41], [28, -12], [-4, -23], [57, -21], [-29, -73], [4, -19]], [[46022, 10162], [222, -185]], [[18176, 14415], [-321, 317]], [[18472, 14766], [-561, 211]], [[18704, 15274], [-513, -270]], [[18829, 15885], [-862, -663]], [[17095, 16203], [867, 1954], [10, 16]], [[18810, 16526], [-890, -990]], [[32069, 16974], [564, 12]], [[18650, 17181], [-823, -1195]], [[18359, 17743], [-727, -1783]], [[40937, 18039], [246, 39], [90, 111], [170, 153], [261, -96]], [[38773, 19940], [156, 91], [97, 21], [100, -130], [53, 20], [-51, -186], [-73, -45], [-18, -85], [-59, -15], [-2, -1]], [[27602, 21129], [-266, 332]], [[28163, 21478], [51, 218]], [[29123, 21806], [-158, -11]], [[32270, 19082], [11, -13], [-46, -75]], [[32419, 19058], [-38, -26], [-44, -6], [-9, 9], [10, 42], [40, 40]], [[32378, 19117], [-13, 16], [-22, 1], [2, 47], [3, 48]], [[32370, 19287], [34, -18], [28, -15]], [[32252, 13159], [11, 25], [82, 44], [22, 17], [8, -6], [15, 13], [5, 0], [-4, -20], [15, -3], [2, 5], [7, 0], [-1, -18], [-4, -10], [-4, -12], [13, -33], [18, 1], [0, 11], [7, 5], [6, -4], [2, -12]], [[38268, 19356], [0, 1], [0, 1], [0, 2], [0, 1], [0, 2], [0, 0], [0, 0], [-2, 21], [-1, 3], [-1, 2], [-1, 1], [-2, 1], [-2, 1], [-3, 1], [-4, 1], [-3, 0], [-4, 1], [-1, 1], [-2, 1], [-2, 2], [-21, 26], [0, 1], [-2, 2], [-1, 2], [0, 2], [0, 4], [-1, 3], [0, 3], [1, 4], [1, 2], [0, 1], [2, 2], [2, 1], [1, 0], [4, 2], [1, 1], [2, 2], [2, 4], [2, 3], [1, 6], [7, 25], [0, 4], [0, 2], [0, 3], [-1, 3], [-1, 2], [-1, 1], [-1, 2], [-2, 2], [-4, 4], [-4, 3], [-5, 3], [-2, 2], [-3, 2], [-2, 1], [-1, 3], [-2, 4], [-1, 4], [0, 2], [0, 1], [1, 6], [0, 3], [1, 1], [0, 1], [1, 3], [1, 3], [3, 7], [2, 3], [1, 1], [2, 1], [2, 1], [3, 0], [4, 0], [2, 0], [3, 1], [2, 1], [3, 2], [2, 1], [2, 2], [3, 3], [3, 3], [3, 4], [0, 1], [2, 3], [1, 5], [0, 3], [0, 1], [0, 2], [-1, 2], [-1, 2], [-1, 1], [-1, 1], [-4, 1], [-23, 2], [-6, -1], [-3, -1], [-2, -1], [-2, -1], [-2, 0], [-1, 1], [-1, 0], [-3, 2], [-1, 1], [-1, 2], [-2, 2], [-1, 3], [-1, 2], [-1, 3], [0, 3], [1, 4], [1, 2], [1, 2], [2, 2], [2, 2], [2, 1], [3, 1], [2, 2], [2, 2], [1, 3], [0, 1], [0, 2], [-1, 3], [-4, 15], [-2, 3], [0, 0], [-1, 1], [-3, 1], [-1, 1], [-1, 0], [-1, -1], [-3, 0], [-4, 0], [-4, 1], [-1, 1], [-4, 3], [-1, 3], [-1, 2], [-1, 2], [-1, 1], [0, 4], [0, 1], [0, 1], [2, 4], [10, 21], [4, 6], [5, 19], [0, 1], [0, 2], [1, 2], [1, 2], [1, 1], [2, 1], [3, 2], [12, 3], [9, 1], [3, 1], [2, 1], [6, 7], [2, 1], [1, 1], [4, 3], [8, 4], [4, 1], [4, 1], [3, 0], [2, 0], [9, -3], [4, -2], [2, -1], [4, -2], [3, -2], [4, -2], [12, -5], [5, -2], [3, -1], [56, -13], [7, -1], [4, -1], [7, 0], [1, 0], [8, 0], [15, -11], [1, -1], [5, -3], [1, 0], [37, -12], [4, 0], [19, 1], [2, 0], [2, 1], [1, 1], [1, 1], [1, 2], [2, 3], [2, 3], [0, 1], [1, 1], [3, 3], [6, 6], [6, 3], [3, 2], [4, 0], [2, 0], [3, 0], [3, -1], [3, -1], [4, -3], [3, -3], [3, -1], [1, -1], [1, 1], [2, 1], [6, 3], [1, 1], [1, 1], [0, 1], [1, 2], [1, 4], [5, 9], [2, 3], [1, 1], [19, 11], [3, 2], [3, 1], [1, 0], [2, 0], [2, -1], [2, -2], [21, -2], [7, 0], [1, 0], [3, -1], [2, -1], [1, -2], [2, -3], [1, -2], [2, -4], [1, -1], [2, -2], [2, -2], [3, -1], [1, 0], [1, -1], [3, 1], [5, 2], [1, 1]], [[31444, 14270], [4, 8]], [[31524, 14288], [3, 74], [61, 44]], [[31724, 14284], [63, 6], [179, 281]], [[32089, 14829], [-22, -145], [12, -177]], [[32234, 14251], [-1, -12]], [[30726, 14008], [-3, 2]], [[30723, 14010], [134, 402], [115, 26]], [[31049, 14250], [230, 7]], [[31279, 14257], [12, -36], [8, -23], [108, 2]], [[31407, 14200], [2, 0]], [[31409, 14200], [35, 70]], [[38001, 20043], [79, 162], [0, 0], [133, 27]], [[38890, 19296], [2, 1]], [[38525, 19300], [-100, -83]], [[38425, 19217], [-108, 113], [-24, 15], [-131, 73]], [[32077, 12246], [31, 13], [-12, -30], [23, 0], [3, -37], [20, 30], [29, -36], [25, 25], [2, -68], [43, -77], [10, 44], [51, 22], [25, -43], [-119, -61], [11, -97], [-40, -54], [18, -25], [-29, 7], [25, -41], [-46, 10], [7, -44], [-25, -1], [17, -21], [-53, -36], [25, 13], [14, -32], [-51, -3], [22, -29], [60, 20], [11, -32], [-61, -72], [-72, 36], [-13, -53], [25, -53], [-20, 16], [-21, -46], [9, 115], [-22, -6], [-3, 30], [-20, -40], [5, 26], [-50, 42], [-24, -33], [15, -33], [-20, 17], [-15, -27], [15, -35], [-19, 26], [-17, -41], [11, 47], [-22, 17], [9, 38], [-22, 4], [-3, 72], [37, 159], [-23, 107], [51, 107], [-17, 40], [67, 23], [12, 32], [17, -16], [13, 54], [2, -44], [33, 22], [14, -23], [32, 75]], [[31475, 10855], [29, 62], [-43, 121], [25, 211], [-32, -42], [16, 209], [28, -5], [-1, -87], [49, -147], [-11, -100], [29, -24], [-6, -96], [32, -94], [-36, -84], [36, -55], [30, 11], [63, -112], [2, -119], [85, -201], [6, -70], [-24, -12], [-53, 70], [-22, -23], [-14, 33], [22, 64], [-47, 66], [-23, 134], [-93, 117], [-47, 173]], [[32385, 8992], [-55, 89], [-25, -61], [-23, 42], [12, 83], [-48, 73], [4, 100], [-45, 139], [43, 138], [-9, 265], [-54, 136], [15, 66], [75, -101], [41, -231], [36, -98], [-2, -28], [-47, -179], [26, -282], [31, -6], [25, -145]], [[36030, 21829], [-60, 5], [7, 122], [18, 27], [27, 71], [-7, 58], [3, 43], [-58, 6], [1, 26], [-5, 1], [-2, -8], [-2, -38], [-20, 2], [-16, -34], [-1, -41], [24, -3], [-25, -22], [-11, -18], [-1, -15], [6, -1], [10, 3], [5, 13], [-2, -51], [11, -1], [-22, -71], [2, 6], [-6, 1], [1, 11], [-5, -8], [0, -29], [-12, 4], [-45, -11], [-11, 109], [17, 48], [9, 15], [8, 34], [20, 27], [5, 26], [10, 17], [10, 68], [74, 6], [9, 11], [9, 3], [-9, -59], [51, 1], [24, 96], [-60, 6], [28, 24], [44, 0], [-3, -58], [35, 14], [101, -11], [0, -16], [-21, 3], [-19, -40], [-37, 15], [-69, -25], [-2, -42], [13, -4], [46, 8], [26, -12], [-8, -103], [24, -72], [13, -11], [-8, -22], [-7, -39], [-24, -19], [-18, -30], [-35, -22], [-60, 6]], [[13805, 22900], [147, -49], [128, 2], [87, -174], [152, -8], [-27, -74], [67, -70], [-30, -68], [65, -21], [-29, -13], [18, -28], [-25, -29], [11, -18], [51, 15], [19, -50], [172, -34], [172, -34], [21, 24], [12, -14], [-24, -9], [30, 5], [-25, -21], [130, 1], [61, -75], [8, -49], [43, 0], [-10, -32], [21, -20], [-17, -5], [67, -82], [-67, 15], [17, -30], [-15, -47], [-84, 56], [-44, -28], [7, 43], [-36, -8], [28, 46], [-31, -12], [-20, 74], [-62, 4], [52, -64], [13, -79], [-72, -116], [0, -162], [-72, -52], [-29, -21], [-57, 221], [-91, -22], [-41, -70], [-40, 24], [12, 60], [79, 77], [4, 107], [-23, 40], [29, 7], [-18, 52], [-241, 109], [-18, -54], [29, -25], [-71, -32], [-21, -109], [5, 50], [-24, -31], [15, 79], [-78, -66], [-68, -185], [14, -58], [-17, -36], [44, -83], [-16, -218], [-68, -110], [-57, -31], [-57, 31], [-36, 98], [7, 125], [-22, 98], [88, 343], [-41, 12], [-52, -69], [-16, 9], [32, 80], [29, 12], [99, 202], [1, -51], [64, 45], [-25, -45], [14, -18], [59, 78], [106, 31], [116, -55], [17, 45], [112, -10], [-55, 44], [-11, 56], [-104, 6], [11, 64], [-179, -22], [-76, -56], [-106, 19], [-70, 85], [-71, -16], [22, 31], [-50, -45], [5, 50], [-31, 53], [-270, -146], [-46, 29], [-30, -22], [29, 65], [-16, 15], [-137, -57], [-50, 12], [200, 187], [217, 110], [30, 81], [57, 21], [-27, -58], [29, 12], [39, 106], [26, -21], [-37, -72], [34, 50], [19, -11], [15, 39], [-24, 45]], [[13997, 22085], [-38, -23], [-19, -73], [57, 96]], [[13849, 22537], [33, 27], [-68, 0], [-58, -61], [28, 3], [-2, -45], [67, 76]], [[14615, 22237], [-50, -21], [172, -69], [46, 31], [-35, -31], [20, -8], [41, 61], [-14, 23], [-18, -38], [-19, 54], [-36, -31], [-20, 34], [-43, -19], [7, -26], [-51, 40]], [[15176, 21640], [-29, -13], [-65, 29], [103, 111], [209, 47], [85, -40], [43, 19], [-29, 1], [30, 37], [-107, 1], [82, 20], [19, -8], [-15, -11], [179, 81], [-44, -42], [-42, -40], [46, -25], [-36, -32], [17, -61], [-79, -55], [-127, -19], [-134, 31], [-93, -25], [-13, -6]], [[15188, 21564], [24, 3], [4, -31], [-127, -109], [-149, -85], [-149, -85], [-114, -25], [-89, 16], [54, 18], [-114, 40], [99, 204], [26, 5], [-3, -27], [10, -4], [25, -8], [-2, -32], [-88, -17], [-16, -45], [93, -35], [17, 47], [80, 29], [79, 86], [183, -24], [-50, 16], [37, 39], [170, 24]], [[31804, 12633], [0, -80], [-116, -176], [-33, 62], [164, 240], [-15, -46]], [[16687, 8592], [-57, 2], [6, 45], [-56, 50], [0, -30], [-32, 16], [12, 61], [28, -34], [-29, 68], [13, 26], [26, 9], [101, -148], [37, -7], [-21, -24], [11, -33], [38, -24], [-55, -24], [14, -35], [-36, 24], [3, 49], [33, 8], [-40, 39], [4, -38]], [[31268, 14379], [176, 0], [-1, -110], [-34, -69], [-35, -1], [-26, 0], [-1, 0], [-13, 0], [-35, 0], [0, -1], [-1, 4], [-8, 24], [-11, 31], [0, 0], [-11, 37], [0, 85]]],
  "objects": {
    "general": {
      "type": "GeometryCollection",
      "geometries": [{
        "arcs": [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Israel",
          "SOVEREIGN": "Israel",
          "ISO_3_CODE": "ISR",
          "ISO_2_CODE": "IL",
          "UN_CODE": 376,
          "WHO_CODE": 3150,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[12, 13, 14, 15, 16, 17, 18, 19, 20, 21]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Saudi Arabia",
          "SOVEREIGN": "Saudi Arabia",
          "ISO_3_CODE": "SAU",
          "ISO_2_CODE": "SA",
          "UN_CODE": 682,
          "WHO_CODE": 3340,
          "WHO_REGION": "EMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 2
        }
      }, {
        "arcs": [[22, -22, -8, 23, -3, 24]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Jordan",
          "SOVEREIGN": "Jordan",
          "ISO_3_CODE": "JOR",
          "ISO_2_CODE": "JO",
          "UN_CODE": 400,
          "WHO_CODE": 3170,
          "WHO_REGION": "EMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 1
        }
      }, {
        "arcs": [[25, 26, 27, 28, -18]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "United Arab Emirates",
          "SOVEREIGN": "United Arab Emirates",
          "ISO_3_CODE": "ARE",
          "ISO_2_CODE": "AE",
          "UN_CODE": 784,
          "WHO_CODE": 3405,
          "WHO_REGION": "EMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[-20, 29, 30]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Yemen",
          "SOVEREIGN": "Yemen",
          "ISO_3_CODE": "YEM",
          "ISO_2_CODE": "YE",
          "UN_CODE": 887,
          "WHO_CODE": 3420,
          "WHO_REGION": "EMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 15
        }
      }, {
        "arcs": [[31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "India",
          "SOVEREIGN": "India",
          "ISO_3_CODE": "IND",
          "ISO_2_CODE": "IN",
          "UN_CODE": 356,
          "WHO_CODE": 3100,
          "WHO_REGION": "SEARO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 534
        }
      }, {
        "arcs": [[42, 43, 44, 45, 46, 47]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Kazakhstan",
          "SOVEREIGN": "Kazakhstan",
          "ISO_3_CODE": "KAZ",
          "ISO_2_CODE": "KZ",
          "UN_CODE": 398,
          "WHO_CODE": 4182,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 3
        }
      }, {
        "arcs": [[48, 49, 50, 51]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Panama",
          "SOVEREIGN": "Panama",
          "ISO_3_CODE": "PAN",
          "ISO_2_CODE": "PA",
          "UN_CODE": 591,
          "WHO_CODE": 2350,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[52, 53, -9, 54]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Egypt",
          "SOVEREIGN": "Egypt",
          "ISO_3_CODE": "EGY",
          "ISO_2_CODE": "EG",
          "UN_CODE": 818,
          "WHO_CODE": 1125,
          "WHO_REGION": "EMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 9
        }
      }, {
        "arcs": [[55, 56, 57, 58, 59, 60, -50]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Colombia",
          "SOVEREIGN": "Colombia",
          "ISO_3_CODE": "COL",
          "ISO_2_CODE": "CO",
          "UN_CODE": 170,
          "WHO_CODE": 2130,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 2
        }
      }, {
        "arcs": [[-60, 61, 62]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Ecuador",
          "SOVEREIGN": "Ecuador",
          "ISO_3_CODE": "ECU",
          "ISO_2_CODE": "EC",
          "UN_CODE": 218,
          "WHO_CODE": 2180,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 1
        }
      }, {
        "arcs": [[-62, -59, 63, 64, 65, 66]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Peru",
          "SOVEREIGN": "Peru",
          "ISO_3_CODE": "PER",
          "ISO_2_CODE": "PE",
          "UN_CODE": 604,
          "WHO_CODE": 2370,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 2
        }
      }, {
        "arcs": [[67, 68, 69, 70, 71]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Benin",
          "SOVEREIGN": "Benin",
          "ISO_3_CODE": "BEN",
          "ISO_2_CODE": "BJ",
          "UN_CODE": 204,
          "WHO_CODE": 1025,
          "WHO_REGION": "AFRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 8
        }
      }, {
        "arcs": [[72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Mozambique",
          "SOVEREIGN": "Mozambique",
          "ISO_3_CODE": "MOZ",
          "ISO_2_CODE": "MZ",
          "UN_CODE": 508,
          "WHO_CODE": 1320,
          "WHO_REGION": "AFRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 15
        }
      }, {
        "arcs": [[84, 85]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Dominican Republic",
          "SOVEREIGN": "Dominican Republic",
          "ISO_3_CODE": "DOM",
          "ISO_2_CODE": "DO",
          "UN_CODE": 214,
          "WHO_CODE": 2170,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 1
        }
      }, {
        "arcs": [[86, 87, 88, 89, 90, 91]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Botswana",
          "SOVEREIGN": "Botswana",
          "ISO_3_CODE": "BWA",
          "ISO_2_CODE": "BW",
          "UN_CODE": 72,
          "WHO_CODE": 1030,
          "WHO_REGION": "AFRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 1
        }
      }, {
        "arcs": [[92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Germany",
          "SOVEREIGN": "Germany",
          "ISO_3_CODE": "DEU",
          "ISO_2_CODE": "DE",
          "UN_CODE": 276,
          "WHO_CODE": 4085,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[-105, 105, 106]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Netherlands",
          "SOVEREIGN": "Netherlands",
          "ISO_3_CODE": "NLD",
          "ISO_2_CODE": "NL",
          "UN_CODE": 528,
          "WHO_CODE": 4210,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Iran (Islamic Republic of)",
          "SOVEREIGN": "Iran (Islamic Republic of)",
          "ISO_3_CODE": "IRN",
          "ISO_2_CODE": "IR",
          "UN_CODE": 364,
          "WHO_CODE": 3130,
          "WHO_REGION": "EMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 7
        }
      }, {
        "arcs": [[118, 119, 120, 121, 122, 123, -79, 124, 125, 126, -89, 127, 128, 129, 130, 131, 132, 133]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Zambia",
          "SOVEREIGN": "Zambia",
          "ISO_3_CODE": "ZMB",
          "ISO_2_CODE": "ZM",
          "UN_CODE": 894,
          "WHO_CODE": 1560,
          "WHO_REGION": "AFRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 12
        }
      }, {
        "arcs": [[134, 135, 136, 137, 138, 139, 140, 141]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Romania",
          "SOVEREIGN": "Romania",
          "ISO_3_CODE": "ROU",
          "ISO_2_CODE": "RO",
          "UN_CODE": 642,
          "WHO_CODE": 4270,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[142]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Iceland",
          "SOVEREIGN": "Iceland",
          "ISO_3_CODE": "ISL",
          "ISO_2_CODE": "IS",
          "UN_CODE": 352,
          "WHO_CODE": 4160,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[143, 144, 145, 146, 147]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Mexico",
          "SOVEREIGN": "Mexico",
          "ISO_3_CODE": "MEX",
          "ISO_2_CODE": "MX",
          "UN_CODE": 484,
          "WHO_CODE": 2310,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 3
        }
      }, {
        "arcs": [[148, 149, -146]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Belize",
          "SOVEREIGN": "Belize",
          "ISO_3_CODE": "BLZ",
          "ISO_2_CODE": "BZ",
          "UN_CODE": 84,
          "WHO_CODE": 2045,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[-150, 150, 151, 152, 153, -147]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Guatemala",
          "SOVEREIGN": "Guatemala",
          "ISO_3_CODE": "GTM",
          "ISO_2_CODE": "GT",
          "UN_CODE": 320,
          "WHO_CODE": 2250,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 3
        }
      }, {
        "arcs": [[154, 155, 156]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "El Salvador",
          "SOVEREIGN": "El Salvador",
          "ISO_3_CODE": "SLV",
          "ISO_2_CODE": "SV",
          "UN_CODE": 222,
          "WHO_CODE": 2190,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 1
        }
      }, {
        "arcs": [[157, 158, -155, 159, -152, 160]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Honduras",
          "SOVEREIGN": "Honduras",
          "ISO_3_CODE": "HND",
          "ISO_2_CODE": "HN",
          "UN_CODE": 340,
          "WHO_CODE": 2280,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 1
        }
      }, {
        "arcs": [[-86, 161]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Haiti",
          "SOVEREIGN": "Haiti",
          "ISO_3_CODE": "HTI",
          "ISO_2_CODE": "HT",
          "UN_CODE": 332,
          "WHO_CODE": 2270,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 5
        }
      }, {
        "arcs": [[162]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Jamaica",
          "SOVEREIGN": "Jamaica",
          "ISO_3_CODE": "JAM",
          "ISO_2_CODE": "JM",
          "UN_CODE": 388,
          "WHO_CODE": 2290,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[163, 164, 165, -158]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Nicaragua",
          "SOVEREIGN": "Nicaragua",
          "ISO_3_CODE": "NIC",
          "ISO_2_CODE": "NI",
          "UN_CODE": 558,
          "WHO_CODE": 2340,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 1
        }
      }, {
        "arcs": [[-165, 166, -52, 167]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Costa Rica",
          "SOVEREIGN": "Costa Rica",
          "ISO_3_CODE": "CRI",
          "ISO_2_CODE": "CR",
          "UN_CODE": 188,
          "WHO_CODE": 2140,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[168, 169, 170, 171]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Guyana",
          "SOVEREIGN": "Guyana",
          "ISO_3_CODE": "GUY",
          "ISO_2_CODE": "GY",
          "UN_CODE": 328,
          "WHO_CODE": 2260,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[172, 173, 174, -170]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Suriname",
          "SOVEREIGN": "Suriname",
          "ISO_3_CODE": "SUR",
          "ISO_2_CODE": "SR",
          "UN_CODE": 740,
          "WHO_CODE": 2430,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[175, 176, -174]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "French Guiana",
          "SOVEREIGN": "France",
          "ISO_3_CODE": "GUF",
          "ISO_2_CODE": "GF",
          "UN_CODE": 254,
          "WHO_CODE": 2210,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Other",
          "REAL_VALUE": null
        }
      }, {
        "arcs": [[177]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Trinidad and Tobago",
          "SOVEREIGN": "Trinidad and Tobago",
          "ISO_3_CODE": "TTO",
          "ISO_2_CODE": "TT",
          "UN_CODE": 780,
          "WHO_CODE": 2440,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[178, 179, 180, -65, 181]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Bolivia (Plurinational State of)",
          "SOVEREIGN": "Bolivia (Plurinational State of)",
          "ISO_3_CODE": "BOL",
          "ISO_2_CODE": "BO",
          "UN_CODE": 68,
          "WHO_CODE": 2060,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 3
        }
      }, {
        "arcs": [[182, -179, 183]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Paraguay",
          "SOVEREIGN": "Paraguay",
          "ISO_3_CODE": "PRY",
          "ISO_2_CODE": "PY",
          "UN_CODE": 600,
          "WHO_CODE": 2360,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 1
        }
      }, {
        "arcs": [[184, 185, 186]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Uruguay",
          "SOVEREIGN": "Uruguay",
          "ISO_3_CODE": "URY",
          "ISO_2_CODE": "UY",
          "UN_CODE": 858,
          "WHO_CODE": 2460,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[187, 188, 189, 190]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Finland",
          "SOVEREIGN": "Finland",
          "ISO_3_CODE": "FIN",
          "ISO_2_CODE": "FI",
          "UN_CODE": 246,
          "WHO_CODE": 4070,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[191, 192, -189]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Sweden",
          "SOVEREIGN": "Sweden",
          "ISO_3_CODE": "SWE",
          "ISO_2_CODE": "SE",
          "UN_CODE": 752,
          "WHO_CODE": 4290,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[193, 194, 195, 196, 197, 198, -96, 199, 200, 201]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Poland",
          "SOVEREIGN": "Poland",
          "ISO_3_CODE": "POL",
          "ISO_2_CODE": "PL",
          "UN_CODE": 616,
          "WHO_CODE": 4230,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[202, 203]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Ireland",
          "SOVEREIGN": "Ireland",
          "ISO_3_CODE": "IRL",
          "ISO_2_CODE": "IE",
          "UN_CODE": 372,
          "WHO_CODE": 4170,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[-106, -104, 204, 205, 206]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Belgium",
          "SOVEREIGN": "Belgium",
          "ISO_3_CODE": "BEL",
          "ISO_2_CODE": "BE",
          "UN_CODE": 56,
          "WHO_CODE": 4020,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[-101, 207, 208, 209, 210]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Switzerland",
          "SOVEREIGN": "Switzerland",
          "ISO_3_CODE": "CHE",
          "ISO_2_CODE": "CH",
          "UN_CODE": 756,
          "WHO_CODE": 4300,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[211, -97, -199, 212]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Czech Republic",
          "SOVEREIGN": "Czech Republic",
          "ISO_3_CODE": "CZE",
          "ISO_2_CODE": "CZ",
          "UN_CODE": 203,
          "WHO_CODE": 4045,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[213, 214, 215, 216, -141, 217, 218, 219, 220, 221]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Hungary",
          "SOVEREIGN": "Hungary",
          "ISO_3_CODE": "HUN",
          "ISO_2_CODE": "HU",
          "UN_CODE": 348,
          "WHO_CODE": 4150,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[222, 223, 224, 225, 226]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Albania",
          "SOVEREIGN": "Albania",
          "ISO_3_CODE": "ALB",
          "ISO_2_CODE": "AL",
          "UN_CODE": 8,
          "WHO_CODE": 4005,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[227]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Cyprus",
          "SOVEREIGN": "Cyprus",
          "ISO_3_CODE": "CYP",
          "ISO_2_CODE": "CY",
          "UN_CODE": 196,
          "WHO_CODE": 3080,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[228, 229, -25, -2, 230, 231]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Syrian Arab Republic",
          "SOVEREIGN": "Syrian Arab Republic",
          "ISO_3_CODE": "SYR",
          "ISO_2_CODE": "SY",
          "UN_CODE": 760,
          "WHO_CODE": 3370,
          "WHO_REGION": "EMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 1
        }
      }, {
        "arcs": [[-231, -1, 232]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Lebanon",
          "SOVEREIGN": "Lebanon",
          "ISO_3_CODE": "LBN",
          "ISO_2_CODE": "LB",
          "UN_CODE": 422,
          "WHO_CODE": 3210,
          "WHO_REGION": "EMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[233, 234, 235, 236, 237, 238]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Libyan Arab Jamahiriya",
          "SOVEREIGN": "Libyan Arab Jamahiriya",
          "ISO_3_CODE": "LBY",
          "ISO_2_CODE": "LY",
          "UN_CODE": 434,
          "WHO_CODE": 1250,
          "WHO_REGION": "EMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[239, -239, 240]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Tunisia",
          "SOVEREIGN": "Tunisia",
          "ISO_3_CODE": "TUN",
          "ISO_2_CODE": "TN",
          "UN_CODE": 788,
          "WHO_CODE": 1520,
          "WHO_REGION": "EMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 1
        }
      }, {
        "arcs": [[241, -241, -238, 242, 243, 244, 245, 246]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Algeria",
          "SOVEREIGN": "Algeria",
          "ISO_3_CODE": "DZA",
          "ISO_2_CODE": "DZ",
          "UN_CODE": 12,
          "WHO_CODE": 1010,
          "WHO_REGION": "AFRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 4
        }
      }, {
        "arcs": [[-247, 247, 248]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Morocco",
          "SOVEREIGN": "Morocco",
          "ISO_3_CODE": "MAR",
          "ISO_2_CODE": "MA",
          "UN_CODE": 504,
          "WHO_CODE": 1310,
          "WHO_REGION": "EMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 4
        }
      }, {
        "arcs": [[249, 250, 251, 252, 253, 254, 255, 256]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Cameroon",
          "SOVEREIGN": "Cameroon",
          "ISO_3_CODE": "CMR",
          "ISO_2_CODE": "CM",
          "UN_CODE": 120,
          "WHO_CODE": 1045,
          "WHO_REGION": "AFRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 13
        }
      }, {
        "arcs": [[257, 258, 259]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Burundi",
          "SOVEREIGN": "Burundi",
          "ISO_3_CODE": "BDI",
          "ISO_2_CODE": "BI",
          "UN_CODE": 108,
          "WHO_CODE": 1040,
          "WHO_REGION": "AFRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 10
        }
      }, {
        "arcs": [[260, -84, 261, 262, -123, 263, -258, 264, 265, 266, 267, 268]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "United Republic of Tanzania",
          "SOVEREIGN": "United Republic of Tanzania",
          "ISO_3_CODE": "TZA",
          "ISO_2_CODE": "TZ",
          "UN_CODE": 834,
          "WHO_CODE": 1546,
          "WHO_REGION": "AFRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 25
        }
      }, {
        "arcs": [[269, 270, 271, 272]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Ghana",
          "SOVEREIGN": "Ghana",
          "ISO_3_CODE": "GHA",
          "ISO_2_CODE": "GH",
          "UN_CODE": 288,
          "WHO_CODE": 1180,
          "WHO_REGION": "AFRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 12
        }
      }, {
        "arcs": [[273, -82, 274, -80, -124, -263]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Malawi",
          "SOVEREIGN": "Malawi",
          "ISO_3_CODE": "MWI",
          "ISO_2_CODE": "MW",
          "UN_CODE": 454,
          "WHO_CODE": 1270,
          "WHO_REGION": "AFRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 15
        }
      }, {
        "arcs": [[-248, -246, 275, 276, 277]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Western Sahara",
          "SOVEREIGN": "Western Sahara",
          "ISO_3_CODE": "ESH",
          "ISO_2_CODE": "EH",
          "UN_CODE": 732,
          "WHO_CODE": 33,
          "WHO_REGION": "AFRO",
          "WHO_STATUS": "Other",
          "REAL_VALUE": null
        }
      }, {
        "arcs": [[278, 279, 280, -277, 281, -245]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Mauritania",
          "SOVEREIGN": "Mauritania",
          "ISO_3_CODE": "MRT",
          "ISO_2_CODE": "MR",
          "UN_CODE": 478,
          "WHO_CODE": 1290,
          "WHO_REGION": "AFRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 2
        }
      }, {
        "arcs": [[-280, 282, 283, 284, 285, 286, 287]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Senegal",
          "SOVEREIGN": "Senegal",
          "ISO_3_CODE": "SEN",
          "ISO_2_CODE": "SN",
          "UN_CODE": 686,
          "WHO_CODE": 1390,
          "WHO_REGION": "AFRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 9
        }
      }, {
        "arcs": [[-285, 288, 289]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Guinea-Bissau",
          "SOVEREIGN": "Guinea-Bissau",
          "ISO_3_CODE": "GNB",
          "ISO_2_CODE": "GW",
          "UN_CODE": 624,
          "WHO_CODE": 1192,
          "WHO_REGION": "AFRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 3
        }
      }, {
        "arcs": [[-289, -284, 290, 291, 292, 293, 294]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Guinea",
          "SOVEREIGN": "Guinea",
          "ISO_3_CODE": "GIN",
          "ISO_2_CODE": "GN",
          "UN_CODE": 324,
          "WHO_CODE": 1190,
          "WHO_REGION": "AFRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 10
        }
      }, {
        "arcs": [[295, -293, 296, 297]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Liberia",
          "SOVEREIGN": "Liberia",
          "ISO_3_CODE": "LBR",
          "ISO_2_CODE": "LR",
          "UN_CODE": 430,
          "WHO_CODE": 1240,
          "WHO_REGION": "AFRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 7
        }
      }, {
        "arcs": [[-244, 298, 299, 300, -291, -283, -279]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Mali",
          "SOVEREIGN": "Mali",
          "ISO_3_CODE": "MLI",
          "ISO_2_CODE": "ML",
          "UN_CODE": 466,
          "WHO_CODE": 1280,
          "WHO_REGION": "AFRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 24
        }
      }, {
        "arcs": [[-301, 301, -270, 302, -297, -292]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Côte d'Ivoire",
          "SOVEREIGN": "Côte d'Ivoire",
          "ISO_3_CODE": "CIV",
          "ISO_2_CODE": "CI",
          "UN_CODE": 384,
          "WHO_CODE": 1115,
          "WHO_REGION": "AFRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 21
        }
      }, {
        "arcs": [[303, -68, 304, -271, -302, -300]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Burkina Faso",
          "SOVEREIGN": "Burkina Faso",
          "ISO_3_CODE": "BFA",
          "ISO_2_CODE": "BF",
          "UN_CODE": 854,
          "WHO_CODE": 1035,
          "WHO_REGION": "AFRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 19
        }
      }, {
        "arcs": [[-243, -237, 305, 306, -69, -304, -299]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Niger",
          "SOVEREIGN": "Niger",
          "ISO_3_CODE": "NER",
          "ISO_2_CODE": "NE",
          "UN_CODE": 562,
          "WHO_CODE": 1330,
          "WHO_REGION": "AFRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 34
        }
      }, {
        "arcs": [[-70, -307, 307, -256, 308]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Nigeria",
          "SOVEREIGN": "Nigeria",
          "ISO_3_CODE": "NGA",
          "ISO_2_CODE": "NG",
          "UN_CODE": 566,
          "WHO_CODE": 1340,
          "WHO_REGION": "AFRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 175
        }
      }, {
        "arcs": [[-254, 309, 310, 311]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Equatorial Guinea",
          "SOVEREIGN": "Equatorial Guinea",
          "ISO_3_CODE": "GNQ",
          "ISO_2_CODE": "GQ",
          "UN_CODE": 226,
          "WHO_CODE": 1130,
          "WHO_REGION": "AFRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 1
        }
      }, {
        "arcs": [[-311, 312, -252, 313, 314]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Gabon",
          "SOVEREIGN": "Gabon",
          "ISO_3_CODE": "GAB",
          "ISO_2_CODE": "GA",
          "UN_CODE": 266,
          "WHO_CODE": 1160,
          "WHO_REGION": "AFRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 1
        }
      }, {
        "arcs": [[-257, -308, -306, -236, 315, 316]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Chad",
          "SOVEREIGN": "Chad",
          "ISO_3_CODE": "TCD",
          "ISO_2_CODE": "TD",
          "UN_CODE": 148,
          "WHO_CODE": 1080,
          "WHO_REGION": "AFRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 15
        }
      }, {
        "arcs": [[-250, -317, 317, 318, 319]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Central African Republic",
          "SOVEREIGN": "Central African Republic",
          "ISO_3_CODE": "CAF",
          "ISO_2_CODE": "CF",
          "UN_CODE": 140,
          "WHO_CODE": 1070,
          "WHO_REGION": "AFRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 5
        }
      }, {
        "arcs": [[-314, -251, -320, 320, 321, 322]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Congo",
          "SOVEREIGN": "Congo",
          "ISO_3_CODE": "COG",
          "ISO_2_CODE": "CG",
          "UN_CODE": 178,
          "WHO_CODE": 1100,
          "WHO_REGION": "AFRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 3
        }
      }, {
        "arcs": [[323, -321, -319, 324, 325, 326, -259, -264, -122, 327, -120, 328, -134, 329, 330]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Democratic Republic of the Congo",
          "SOVEREIGN": "Democratic Republic of the Congo",
          "ISO_3_CODE": "COD",
          "ISO_2_CODE": "CD",
          "UN_CODE": 180,
          "WHO_CODE": 1555,
          "WHO_REGION": "AFRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 95
        }
      }, {
        "arcs": [[331, 332, 333, -266, 334, -326]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Uganda",
          "SOVEREIGN": "Uganda",
          "ISO_3_CODE": "UGA",
          "ISO_2_CODE": "UG",
          "UN_CODE": 800,
          "WHO_CODE": 1530,
          "WHO_REGION": "AFRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 28
        }
      }, {
        "arcs": [[-265, -260, -327, -335]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Rwanda",
          "SOVEREIGN": "Rwanda",
          "ISO_3_CODE": "RWA",
          "ISO_2_CODE": "RW",
          "UN_CODE": 646,
          "WHO_CODE": 1370,
          "WHO_REGION": "AFRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 12
        }
      }, {
        "arcs": [[335, 336, 337, 338]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Djibouti",
          "SOVEREIGN": "Djibouti",
          "ISO_3_CODE": "DJI",
          "ISO_2_CODE": "DJ",
          "UN_CODE": 262,
          "WHO_CODE": 1120,
          "WHO_REGION": "EMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 1
        }
      }, {
        "arcs": [[339, 340, -337, 341]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Somalia",
          "SOVEREIGN": "Somalia",
          "ISO_3_CODE": "SOM",
          "ISO_2_CODE": "SO",
          "UN_CODE": 706,
          "WHO_CODE": 1420,
          "WHO_REGION": "EMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 14
        }
      }, {
        "arcs": [[342, -125, -78, 343, -76, 344, -90, -127]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Zimbabwe",
          "SOVEREIGN": "Zimbabwe",
          "ISO_3_CODE": "ZWE",
          "ISO_2_CODE": "ZW",
          "UN_CODE": 716,
          "WHO_CODE": 1570,
          "WHO_REGION": "AFRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 6
        }
      }, {
        "arcs": [[345, 346, -128, -88, 347, 348]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Namibia",
          "SOVEREIGN": "Namibia",
          "ISO_3_CODE": "NAM",
          "ISO_2_CODE": "NA",
          "UN_CODE": 516,
          "WHO_CODE": 1325,
          "WHO_REGION": "AFRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[349]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Swaziland",
          "SOVEREIGN": "Swaziland",
          "ISO_3_CODE": "SWZ",
          "ISO_2_CODE": "SZ",
          "UN_CODE": 748,
          "WHO_CODE": 1480,
          "WHO_REGION": "AFRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[350]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Lesotho",
          "SOVEREIGN": "Lesotho",
          "ISO_3_CODE": "LSO",
          "ISO_2_CODE": "LS",
          "UN_CODE": 426,
          "WHO_CODE": 1230,
          "WHO_REGION": "AFRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[351]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Madagascar",
          "SOVEREIGN": "Madagascar",
          "ISO_3_CODE": "MDG",
          "ISO_2_CODE": "MG",
          "UN_CODE": 450,
          "WHO_CODE": 1260,
          "WHO_REGION": "AFRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 14
        }
      }, {
        "arcs": [[352, -13, -23, -230, 353, -113]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Iraq",
          "SOVEREIGN": "Iraq",
          "ISO_3_CODE": "IRQ",
          "ISO_2_CODE": "IQ",
          "UN_CODE": 368,
          "WHO_CODE": 3140,
          "WHO_REGION": "EMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 20
        }
      }, {
        "arcs": [[354, -14, -353]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Kuwait",
          "SOVEREIGN": "Kuwait",
          "ISO_3_CODE": "KWT",
          "ISO_2_CODE": "KW",
          "UN_CODE": 414,
          "WHO_CODE": 3190,
          "WHO_REGION": "EMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[-16, 355]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Qatar",
          "SOVEREIGN": "Qatar",
          "ISO_3_CODE": "QAT",
          "ISO_2_CODE": "QA",
          "UN_CODE": 634,
          "WHO_CODE": 3320,
          "WHO_REGION": "EMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[356, 357, 358, 359, 360, 361, -110]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Afghanistan",
          "SOVEREIGN": "Afghanistan",
          "ISO_3_CODE": "AFG",
          "ISO_2_CODE": "AF",
          "UN_CODE": 4,
          "WHO_CODE": 3010,
          "WHO_REGION": "EMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 65
        }
      }, {
        "arcs": [[362, -34]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Bhutan",
          "SOVEREIGN": "Bhutan",
          "ISO_3_CODE": "BTN",
          "ISO_2_CODE": "BT",
          "UN_CODE": 64,
          "WHO_CODE": 3027,
          "WHO_REGION": "SEARO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 1
        }
      }, {
        "arcs": [[363, 364, -37]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Bangladesh",
          "SOVEREIGN": "Bangladesh",
          "ISO_3_CODE": "BGD",
          "ISO_2_CODE": "BD",
          "UN_CODE": 50,
          "WHO_CODE": 3025,
          "WHO_REGION": "SEARO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 69
        }
      }, {
        "arcs": [[365]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Sri Lanka",
          "SOVEREIGN": "Sri Lanka",
          "ISO_3_CODE": "LKA",
          "ISO_2_CODE": "LK",
          "UN_CODE": 144,
          "WHO_CODE": 3365,
          "WHO_REGION": "SEARO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 1
        }
      }, {
        "arcs": [[366, 367, 368, -364, -36, 369]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Myanmar",
          "SOVEREIGN": "Myanmar",
          "ISO_3_CODE": "MMR",
          "ISO_2_CODE": "MM",
          "UN_CODE": 104,
          "WHO_CODE": 3270,
          "WHO_REGION": "SEARO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 26
        }
      }, {
        "arcs": [[370, 371, 372, 373, -368, 374]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Thailand",
          "SOVEREIGN": "Thailand",
          "ISO_3_CODE": "THA",
          "ISO_2_CODE": "TH",
          "UN_CODE": 764,
          "WHO_CODE": 3380,
          "WHO_REGION": "SEARO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 4
        }
      }, {
        "arcs": [[375, 376, -371, 377]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Cambodia",
          "SOVEREIGN": "Cambodia",
          "ISO_3_CODE": "KHM",
          "ISO_2_CODE": "KH",
          "UN_CODE": 116,
          "WHO_CODE": 3050,
          "WHO_REGION": "WPRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 10
        }
      }, {
        "arcs": [[378, 379]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Brunei Darussalam",
          "SOVEREIGN": "Brunei Darussalam",
          "ISO_3_CODE": "BRN",
          "ISO_2_CODE": "BN",
          "UN_CODE": 96,
          "WHO_CODE": 3030,
          "WHO_REGION": "WPRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[380]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "New Caledonia",
          "SOVEREIGN": "France",
          "ISO_3_CODE": "NCL",
          "ISO_2_CODE": "NC",
          "UN_CODE": 540,
          "WHO_CODE": 5120,
          "WHO_REGION": "WPRO",
          "WHO_STATUS": "Other",
          "REAL_VALUE": null
        }
      }, {
        "arcs": [[381, 382]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Republic of Korea",
          "SOVEREIGN": "Republic of Korea",
          "ISO_3_CODE": "KOR",
          "ISO_2_CODE": "KR",
          "UN_CODE": 410,
          "WHO_CODE": 3325,
          "WHO_REGION": "WPRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[383, -383, 384, 385]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Democratic People's Republic of Korea",
          "SOVEREIGN": "Democratic People's Republic of Korea",
          "ISO_3_CODE": "PRK",
          "ISO_2_CODE": "KP",
          "UN_CODE": 408,
          "WHO_CODE": 3083,
          "WHO_REGION": "SEARO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 5
        }
      }, {
        "arcs": [[386, 387]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Mongolia",
          "SOVEREIGN": "Mongolia",
          "ISO_3_CODE": "MNG",
          "ISO_2_CODE": "MN",
          "UN_CODE": 496,
          "WHO_CODE": 3260,
          "WHO_REGION": "WPRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[-287, 388]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Gambia",
          "SOVEREIGN": "Gambia",
          "ISO_3_CODE": "GMB",
          "ISO_2_CODE": "GM",
          "UN_CODE": 270,
          "WHO_CODE": 1170,
          "WHO_REGION": "AFRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 1
        }
      }, {
        "arcs": [[-294, -296, 389]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Sierra Leone",
          "SOVEREIGN": "Sierra Leone",
          "ISO_3_CODE": "SLE",
          "ISO_2_CODE": "SL",
          "UN_CODE": 694,
          "WHO_CODE": 1410,
          "WHO_REGION": "AFRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 12
        }
      }, {
        "arcs": [[-32, 390]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Nepal",
          "SOVEREIGN": "Nepal",
          "ISO_3_CODE": "NPL",
          "ISO_2_CODE": "NP",
          "UN_CODE": 524,
          "WHO_CODE": 3280,
          "WHO_REGION": "SEARO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 14
        }
      }, {
        "arcs": [[391, -190, -193, 392]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Norway",
          "SOVEREIGN": "Norway",
          "ISO_3_CODE": "NOR",
          "ISO_2_CODE": "NO",
          "UN_CODE": 578,
          "WHO_CODE": 4220,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[393]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Greenland",
          "SOVEREIGN": "Denmark",
          "ISO_3_CODE": "GRL",
          "ISO_2_CODE": "GL",
          "UN_CODE": 0,
          "WHO_CODE": 2220,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Other",
          "REAL_VALUE": null
        }
      }, {
        "arcs": [[394, 395, 396, 397]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Estonia",
          "SOVEREIGN": "Estonia",
          "ISO_3_CODE": "EST",
          "ISO_2_CODE": "EE",
          "UN_CODE": 233,
          "WHO_CODE": 4055,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[398, 399, 400, 401, 402, -397]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Latvia",
          "SOVEREIGN": "Latvia",
          "ISO_3_CODE": "LVA",
          "ISO_2_CODE": "LV",
          "UN_CODE": 428,
          "WHO_CODE": 4186,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[-402, 403, 404, 405, 406, 407]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Lithuania",
          "SOVEREIGN": "Lithuania",
          "ISO_3_CODE": "LTU",
          "ISO_2_CODE": "LT",
          "UN_CODE": 440,
          "WHO_CODE": 4188,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[-401, 408, 409, 410, -195, 411, -404]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Belarus",
          "SOVEREIGN": "Belarus",
          "ISO_3_CODE": "BLR",
          "ISO_2_CODE": "BY",
          "UN_CODE": 112,
          "WHO_CODE": 4018,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[-135, 412]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Republic of Moldova",
          "SOVEREIGN": "Republic of Moldova",
          "ISO_3_CODE": "MDA",
          "ISO_2_CODE": "MD",
          "UN_CODE": 498,
          "WHO_CODE": 4260,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[413, 414, -136, -413, -142, -217, 415, -197, 416, -410]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Ukraine",
          "SOVEREIGN": "Ukraine",
          "ISO_3_CODE": "UKR",
          "ISO_2_CODE": "UA",
          "UN_CODE": 804,
          "WHO_CODE": 4303,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[417, 418, 419, 420, 421]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Georgia",
          "SOVEREIGN": "Georgia",
          "ISO_3_CODE": "GEO",
          "ISO_2_CODE": "GE",
          "UN_CODE": 268,
          "WHO_CODE": 4084,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[422, -420, 423, -117, 424, -115]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Armenia",
          "SOVEREIGN": "Armenia",
          "ISO_3_CODE": "ARM",
          "ISO_2_CODE": "AM",
          "UN_CODE": 51,
          "WHO_CODE": 4007,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[425, -47, 426, -357, -109]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Turkmenistan",
          "SOVEREIGN": "Turkmenistan",
          "ISO_3_CODE": "TKM",
          "ISO_2_CODE": "TM",
          "UN_CODE": 795,
          "WHO_CODE": 4302,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 2
        }
      }, {
        "arcs": [[427, -358, -427, -46, 428]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Uzbekistan",
          "SOVEREIGN": "Uzbekistan",
          "ISO_3_CODE": "UZB",
          "ISO_2_CODE": "UZ",
          "UN_CODE": 860,
          "WHO_CODE": 4335,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 6
        }
      }, {
        "arcs": [[-359, -428, 429, 430]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Tajikistan",
          "SOVEREIGN": "Tajikistan",
          "ISO_3_CODE": "TJK",
          "ISO_2_CODE": "TJ",
          "UN_CODE": 762,
          "WHO_CODE": 4301,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 4
        }
      }, {
        "arcs": [[431, -430, -429, -45]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Kyrgyzstan",
          "SOVEREIGN": "Kyrgyzstan",
          "ISO_3_CODE": "KGZ",
          "ISO_2_CODE": "KG",
          "UN_CODE": 417,
          "WHO_CODE": 4184,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 1
        }
      }, {
        "arcs": [[432, -221, 433, 434, 435, 436, 437]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Slovenia",
          "SOVEREIGN": "Slovenia",
          "ISO_3_CODE": "SVN",
          "ISO_2_CODE": "SI",
          "UN_CODE": 705,
          "WHO_CODE": 4276,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[438, 439, 440, 441, -224]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "The former Yugoslav Republic of Macedonia",
          "SOVEREIGN": "The former Yugoslav Republic of Macedonia",
          "ISO_3_CODE": "MKD",
          "ISO_2_CODE": "MK",
          "UN_CODE": 807,
          "WHO_CODE": 4195,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[442, 443, 444, 445, 446, -440, 447, -139]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Bulgaria",
          "SOVEREIGN": "Bulgaria",
          "ISO_3_CODE": "BGR",
          "ISO_2_CODE": "BG",
          "UN_CODE": 100,
          "WHO_CODE": 4030,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[448, 449, 450, 451, 452]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Bosnia and Herzegovina",
          "SOVEREIGN": "Bosnia and Herzegovina",
          "ISO_3_CODE": "BIH",
          "ISO_2_CODE": "BA",
          "UN_CODE": 70,
          "WHO_CODE": 4025,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[-339, 453, 454]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Eritrea",
          "SOVEREIGN": "Eritrea",
          "ISO_3_CODE": "ERI",
          "ISO_2_CODE": "ER",
          "UN_CODE": 232,
          "WHO_CODE": 1135,
          "WHO_REGION": "AFRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 2
        }
      }, {
        "arcs": [[-338, -341, 455, 456, -454]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Ethiopia",
          "SOVEREIGN": "Ethiopia",
          "ISO_3_CODE": "ETH",
          "ISO_2_CODE": "ET",
          "UN_CODE": 231,
          "WHO_CODE": 1140,
          "WHO_REGION": "AFRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 86
        }
      }, {
        "arcs": [[-416, -216, 457, -214, 458, -213, -198]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Slovakia",
          "SOVEREIGN": "Slovakia",
          "ISO_3_CODE": "SVK",
          "ISO_2_CODE": "SK",
          "UN_CODE": 703,
          "WHO_CODE": 4274,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[459]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Réunion",
          "SOVEREIGN": "France",
          "ISO_3_CODE": "REU",
          "ISO_2_CODE": "RE",
          "UN_CODE": 638,
          "WHO_CODE": 1360,
          "WHO_REGION": "AFRO",
          "WHO_STATUS": "Other",
          "REAL_VALUE": null
        }
      }, {
        "arcs": [[460]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Mauritius",
          "SOVEREIGN": "Mauritius",
          "ISO_3_CODE": "MUS",
          "ISO_2_CODE": "MU",
          "UN_CODE": 480,
          "WHO_CODE": 1300,
          "WHO_REGION": "AFRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[461]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Comoros",
          "SOVEREIGN": "Comoros",
          "ISO_3_CODE": "COM",
          "ISO_2_CODE": "KM",
          "UN_CODE": 174,
          "WHO_CODE": 1090,
          "WHO_REGION": "AFRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[462]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Malta",
          "SOVEREIGN": "Malta",
          "ISO_3_CODE": "MLT",
          "ISO_2_CODE": "MT",
          "UN_CODE": 470,
          "WHO_CODE": 4200,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[-456, -340, 463, 464, 465, -333, 466, 467]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Kenya",
          "SOVEREIGN": "Kenya",
          "ISO_3_CODE": "KEN",
          "ISO_2_CODE": "KE",
          "UN_CODE": 404,
          "WHO_CODE": 1220,
          "WHO_REGION": "AFRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 22
        }
      }, {
        "arcs": [[468, -376, 469, 470]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Viet Nam",
          "SOVEREIGN": "Viet Nam",
          "ISO_3_CODE": "VNM",
          "ISO_2_CODE": "VN",
          "UN_CODE": 704,
          "WHO_CODE": 3408,
          "WHO_REGION": "WPRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 5
        }
      }, {
        "arcs": [[471, -172, 472, -57]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Venezuela (Bolivarian Republic of)",
          "SOVEREIGN": "Venezuela (Bolivarian Republic of)",
          "ISO_3_CODE": "VEN",
          "ISO_2_CODE": "VE",
          "UN_CODE": 862,
          "WHO_CODE": 2470,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 1
        }
      }, {
        "arcs": [[473]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Bahrain",
          "SOVEREIGN": "Bahrain",
          "ISO_3_CODE": "BHR",
          "ISO_2_CODE": "BH",
          "UN_CODE": 48,
          "WHO_CODE": 3020,
          "WHO_REGION": "EMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[-272, -305, -72, 474]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Togo",
          "SOVEREIGN": "Togo",
          "ISO_3_CODE": "TGO",
          "ISO_2_CODE": "TG",
          "UN_CODE": 768,
          "WHO_CODE": 1510,
          "WHO_REGION": "AFRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 5
        }
      }, {
        "arcs": [[475]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Saint Vincent and the Grenadines",
          "SOVEREIGN": "Saint Vincent and the Grenadines",
          "ISO_3_CODE": "VCT",
          "ISO_2_CODE": "VC",
          "UN_CODE": 670,
          "WHO_CODE": 2420,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[476]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Saint Lucia",
          "SOVEREIGN": "Saint Lucia",
          "ISO_3_CODE": "LCA",
          "ISO_2_CODE": "LC",
          "UN_CODE": 662,
          "WHO_CODE": 2400,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[477]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Guadeloupe",
          "SOVEREIGN": "France",
          "ISO_3_CODE": "GLP",
          "ISO_2_CODE": "GP",
          "UN_CODE": 312,
          "WHO_CODE": 2240,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Other",
          "REAL_VALUE": null
        }
      }, {
        "arcs": [[478]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Barbados",
          "SOVEREIGN": "Barbados",
          "ISO_3_CODE": "BRB",
          "ISO_2_CODE": "BB",
          "UN_CODE": 52,
          "WHO_CODE": 2040,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[479]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Martinique",
          "SOVEREIGN": "France",
          "ISO_3_CODE": "MTQ",
          "ISO_2_CODE": "MQ",
          "UN_CODE": 474,
          "WHO_CODE": 2300,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Other",
          "REAL_VALUE": null
        }
      }, {
        "arcs": [[480]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "United States Virgin Islands",
          "SOVEREIGN": "United States of America",
          "ISO_3_CODE": "VIR",
          "ISO_2_CODE": "VI",
          "UN_CODE": 850,
          "WHO_CODE": 2455,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Other",
          "REAL_VALUE": null
        }
      }, {
        "arcs": [[481]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Puerto Rico",
          "SOVEREIGN": "United States of America",
          "ISO_3_CODE": "PRI",
          "ISO_2_CODE": "PR",
          "UN_CODE": 630,
          "WHO_CODE": 2380,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Associate member",
          "REAL_VALUE": null
        }
      }, {
        "arcs": [[482, 483, 484, 485, 486, 487, 488, 489, 490, 491]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Spain",
          "SOVEREIGN": "Spain",
          "ISO_3_CODE": "ESP",
          "ISO_2_CODE": "ES",
          "UN_CODE": 724,
          "WHO_CODE": 4280,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[-491, 492]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Portugal",
          "SOVEREIGN": "Portugal",
          "ISO_3_CODE": "PRT",
          "ISO_2_CODE": "PT",
          "UN_CODE": 620,
          "WHO_CODE": 4240,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[-40, -39, 493, -111, -362, -361, 494]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Pakistan",
          "SOVEREIGN": "Pakistan",
          "ISO_3_CODE": "PAK",
          "ISO_2_CODE": "PK",
          "UN_CODE": 586,
          "WHO_CODE": 3290,
          "WHO_REGION": "EMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 77
        }
      }, {
        "arcs": [[495]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Dominica",
          "SOVEREIGN": "Dominica",
          "ISO_3_CODE": "DMA",
          "ISO_2_CODE": "DM",
          "UN_CODE": 212,
          "WHO_CODE": 2160,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[496]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Maldives",
          "SOVEREIGN": "Maldives",
          "ISO_3_CODE": "MDV",
          "ISO_2_CODE": "MV",
          "UN_CODE": 462,
          "WHO_CODE": 3255,
          "WHO_REGION": "SERAO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[497]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Seychelles",
          "SOVEREIGN": "Seychelles",
          "ISO_3_CODE": "SYC",
          "ISO_2_CODE": "SC",
          "UN_CODE": 690,
          "WHO_CODE": 1400,
          "WHO_REGION": "AFRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[-98, -212, -459, -222, 498, 499, 500, 501, 502, 503, -100, 504]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Austria",
          "SOVEREIGN": "Austria",
          "ISO_3_CODE": "AUT",
          "ISO_2_CODE": "AT",
          "UN_CODE": 40,
          "WHO_CODE": 4010,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[-470, -378, -375, -367, 505]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Lao People's Democratic Republic",
          "SOVEREIGN": "Lao People's Democratic Republic",
          "ISO_3_CODE": "LAO",
          "ISO_2_CODE": "LA",
          "UN_CODE": 418,
          "WHO_CODE": 3200,
          "WHO_REGION": "WPRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 3
        }
      }, {
        "arcs": [[506]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Bahamas",
          "SOVEREIGN": "Bahamas",
          "ISO_3_CODE": "BHS",
          "ISO_2_CODE": "BS",
          "UN_CODE": 44,
          "WHO_CODE": 2030,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[507]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Antigua and Barbuda",
          "SOVEREIGN": "Antigua and Barbuda",
          "ISO_3_CODE": "ATG",
          "ISO_2_CODE": "AG",
          "UN_CODE": 28,
          "WHO_CODE": 2010,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[508]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Grenada",
          "SOVEREIGN": "Grenada",
          "ISO_3_CODE": "GRD",
          "ISO_2_CODE": "GD",
          "UN_CODE": 308,
          "WHO_CODE": 2230,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[-485, 509, 510, -487, 511]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Andorra",
          "SOVEREIGN": "Andorra",
          "ISO_3_CODE": "AND",
          "ISO_2_CODE": "AD",
          "UN_CODE": 20,
          "WHO_CODE": 4008,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[512]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "San Marino",
          "SOVEREIGN": "San Marino",
          "ISO_3_CODE": "SMR",
          "ISO_2_CODE": "SM",
          "UN_CODE": 674,
          "WHO_CODE": 4275,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[513, 514]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Timor-Leste",
          "SOVEREIGN": "Timor-Leste",
          "ISO_3_CODE": "TLS",
          "ISO_2_CODE": "TL",
          "UN_CODE": 626,
          "WHO_CODE": 3087,
          "WHO_REGION": "SEARO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 1
        }
      }, {
        "arcs": [[-103, 515, -205]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Luxembourg",
          "SOVEREIGN": "Luxembourg",
          "ISO_3_CODE": "LUX",
          "ISO_2_CODE": "LU",
          "UN_CODE": 442,
          "WHO_CODE": 4190,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[516, 517]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Singapore",
          "SOVEREIGN": "Singapore",
          "ISO_3_CODE": "SGP",
          "ISO_2_CODE": "SG",
          "UN_CODE": 702,
          "WHO_CODE": 3350,
          "WHO_REGION": "WPRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[-87, 518, -91, -345, 519, -74, 520, -348], [-351], [-350]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "South Africa",
          "SOVEREIGN": "South Africa",
          "ISO_3_CODE": "ZAF",
          "ISO_2_CODE": "ZA",
          "UN_CODE": 710,
          "WHO_CODE": 1430,
          "WHO_REGION": "AFRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 7
        }
      }, {
        "arcs": [[521]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Puerto Rico",
          "SOVEREIGN": "United States of America",
          "ISO_3_CODE": "PRI",
          "ISO_2_CODE": "PR",
          "UN_CODE": 630,
          "WHO_CODE": 2380,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Associate member",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[522]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Saint Lucia",
          "SOVEREIGN": "Saint Lucia",
          "ISO_3_CODE": "LCA",
          "ISO_2_CODE": "LC",
          "UN_CODE": 662,
          "WHO_CODE": 2400,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[523]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Saint Vincent and the Grenadines",
          "SOVEREIGN": "Saint Vincent and the Grenadines",
          "ISO_3_CODE": "VCT",
          "ISO_2_CODE": "VC",
          "UN_CODE": 670,
          "WHO_CODE": 2420,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[524]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Guam",
          "SOVEREIGN": "United States of America",
          "ISO_3_CODE": "GUM",
          "ISO_2_CODE": "GU",
          "UN_CODE": 316,
          "WHO_CODE": 5100,
          "WHO_REGION": "WPRO",
          "WHO_STATUS": "Associate member",
          "REAL_VALUE": null
        }
      }, {
        "arcs": [[525]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Micronesia (Federated States of)",
          "SOVEREIGN": "Micronesia (Federated States of)",
          "ISO_3_CODE": "FSM",
          "ISO_2_CODE": "FM",
          "UN_CODE": 583,
          "WHO_CODE": 5108,
          "WHO_REGION": "WPRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[526]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Solomon Islands",
          "SOVEREIGN": "Solomon Islands",
          "ISO_3_CODE": "SLB",
          "ISO_2_CODE": "SB",
          "UN_CODE": 90,
          "WHO_CODE": 5198,
          "WHO_REGION": "WPRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[527]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Tuvalu",
          "SOVEREIGN": "Tuvalu",
          "ISO_3_CODE": "TUV",
          "ISO_2_CODE": "TV",
          "UN_CODE": 798,
          "WHO_CODE": 5205,
          "WHO_REGION": "WPRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[528]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Kiribati",
          "SOVEREIGN": "Kiribati",
          "ISO_3_CODE": "KIR",
          "ISO_2_CODE": "KI",
          "UN_CODE": 296,
          "WHO_CODE": 5105,
          "WHO_REGION": "WPRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[529]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Marshall Islands",
          "SOVEREIGN": "Marshall Islands",
          "ISO_3_CODE": "MHL",
          "ISO_2_CODE": "MH",
          "UN_CODE": 584,
          "WHO_CODE": 5107,
          "WHO_REGION": "WPRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[530]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Nauru",
          "SOVEREIGN": "Nauru",
          "ISO_3_CODE": "NRU",
          "ISO_2_CODE": "NR",
          "UN_CODE": 520,
          "WHO_CODE": 5110,
          "WHO_REGION": "WPRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[531]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Barbados",
          "SOVEREIGN": "Barbados",
          "ISO_3_CODE": "BRB",
          "ISO_2_CODE": "BB",
          "UN_CODE": 52,
          "WHO_CODE": 2040,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[532]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Antigua and Barbuda",
          "SOVEREIGN": "Antigua and Barbuda",
          "ISO_3_CODE": "ATG",
          "ISO_2_CODE": "AG",
          "UN_CODE": 28,
          "WHO_CODE": 2010,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[533]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Dominica",
          "SOVEREIGN": "Dominica",
          "ISO_3_CODE": "DMA",
          "ISO_2_CODE": "DM",
          "UN_CODE": 212,
          "WHO_CODE": 2160,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[534]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Grenada",
          "SOVEREIGN": "Grenada",
          "ISO_3_CODE": "GRD",
          "ISO_2_CODE": "GD",
          "UN_CODE": 308,
          "WHO_CODE": 2230,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[535]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Saint Kitts and Nevis",
          "SOVEREIGN": "Saint Kitts and Nevis",
          "ISO_3_CODE": "KNA",
          "ISO_2_CODE": "KN",
          "UN_CODE": 659,
          "WHO_CODE": 2385,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[536]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Andorra",
          "SOVEREIGN": "Andorra",
          "ISO_3_CODE": "AND",
          "ISO_2_CODE": "AD",
          "UN_CODE": 20,
          "WHO_CODE": 4008,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[537]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "San Marino",
          "SOVEREIGN": "San Marino",
          "ISO_3_CODE": "SMR",
          "ISO_2_CODE": "SM",
          "UN_CODE": 674,
          "WHO_CODE": 4275,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[538]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Cape Verde",
          "SOVEREIGN": "Cape Verde",
          "ISO_3_CODE": "CPV",
          "ISO_2_CODE": "CV",
          "UN_CODE": 132,
          "WHO_CODE": 1060,
          "WHO_REGION": "AFRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[539]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Sao Tome and Principe",
          "SOVEREIGN": "Sao Tome and Principe",
          "ISO_3_CODE": "STP",
          "ISO_2_CODE": "ST",
          "UN_CODE": 678,
          "WHO_CODE": 1385,
          "WHO_REGION": "AFRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[540]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Palau",
          "SOVEREIGN": "Palau",
          "ISO_3_CODE": "PLW",
          "ISO_2_CODE": "PW",
          "UN_CODE": 585,
          "WHO_CODE": 5180,
          "WHO_REGION": "WPRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[[-330, 541, -132, 542, -130, 543, -346, 544]], [[-324, 545, -322]]],
        "type": "MultiPolygon",
        "properties": {
          "CNTRY_TERR": "Angola",
          "SOVEREIGN": "Angola",
          "ISO_3_CODE": "AGO",
          "ISO_2_CODE": "AO",
          "UN_CODE": 24,
          "WHO_CODE": 1020,
          "WHO_REGION": "AFRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 34
        }
      }, {
        "arcs": [[[546, -180, -183, 547, -187, 548]], [[549]]],
        "type": "MultiPolygon",
        "properties": {
          "CNTRY_TERR": "Argentina",
          "SOVEREIGN": "Argentina",
          "ISO_3_CODE": "ARG",
          "ISO_2_CODE": "AR",
          "UN_CODE": 32,
          "WHO_CODE": 2020,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[[550]], [[551]]],
        "type": "MultiPolygon",
        "properties": {
          "CNTRY_TERR": "Australia",
          "SOVEREIGN": "Australia",
          "ISO_3_CODE": "AUS",
          "ISO_2_CODE": "AU",
          "UN_CODE": 36,
          "WHO_CODE": 5020,
          "WHO_REGION": "WPRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[[-118, -424, -419, 552, 553]], [[-116, -425]]],
        "type": "MultiPolygon",
        "properties": {
          "CNTRY_TERR": "Azerbaijan",
          "SOVEREIGN": "Azerbaijan",
          "ISO_3_CODE": "AZE",
          "ISO_2_CODE": "AZ",
          "UN_CODE": 31,
          "WHO_CODE": 4012,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 2
        }
      }, {
        "arcs": [[[554]], [[-185, -548, -184, -182, -64, -58, -473, -171, -175, -177, 555]]],
        "type": "MultiPolygon",
        "properties": {
          "CNTRY_TERR": "Brazil",
          "SOVEREIGN": "Brazil",
          "ISO_3_CODE": "BRA",
          "ISO_2_CODE": "BR",
          "UN_CODE": 76,
          "WHO_CODE": 2070,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 17
        }
      }, {
        "arcs": [[[556]], [[557]], [[558]], [[559]], [[560, 561, 562, 563]], [[564]], [[565]], [[566]], [[567]], [[568]], [[569]], [[570]], [[571]], [[572]], [[573]], [[574]], [[575]], [[576]], [[577]], [[578]]],
        "type": "MultiPolygon",
        "properties": {
          "CNTRY_TERR": "Canada",
          "SOVEREIGN": "Canada",
          "ISO_3_CODE": "CAN",
          "ISO_2_CODE": "CA",
          "UN_CODE": 124,
          "WHO_CODE": 2090,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[[579]], [[580]], [[581]], [[582]], [[-547, 583, -66, -181]], [[584]], [[585]], [[586]], [[587]], [[588]]],
        "type": "MultiPolygon",
        "properties": {
          "CNTRY_TERR": "Chile",
          "SOVEREIGN": "Chile",
          "ISO_3_CODE": "CHL",
          "ISO_2_CODE": "CL",
          "UN_CODE": 152,
          "WHO_CODE": 2120,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[[589]], [[590]]],
        "type": "MultiPolygon",
        "properties": {
          "CNTRY_TERR": "Cuba",
          "SOVEREIGN": "Cuba",
          "ISO_3_CODE": "CUB",
          "ISO_2_CODE": "CU",
          "UN_CODE": 192,
          "WHO_CODE": 2150,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[[591]], [[-94, 592]]],
        "type": "MultiPolygon",
        "properties": {
          "CNTRY_TERR": "Denmark",
          "SOVEREIGN": "Denmark",
          "ISO_3_CODE": "DNK",
          "ISO_2_CODE": "DK",
          "UN_CODE": 208,
          "WHO_CODE": 4050,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[[593]], [[594]]],
        "type": "MultiPolygon",
        "properties": {
          "CNTRY_TERR": "Falkland Islands (Malvinas)",
          "SOVEREIGN": "United Kingdom of Great Britain and Northern Ireland",
          "ISO_3_CODE": "FLK",
          "ISO_2_CODE": "FK",
          "UN_CODE": 238,
          "WHO_CODE": 2200,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Other",
          "REAL_VALUE": null
        }
      }, {
        "arcs": [[[595]], [[596]]],
        "type": "MultiPolygon",
        "properties": {
          "CNTRY_TERR": "Fiji",
          "SOVEREIGN": "Fiji",
          "ISO_3_CODE": "FJI",
          "ISO_2_CODE": "FJ",
          "UN_CODE": 242,
          "WHO_CODE": 5070,
          "WHO_REGION": "WPRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[[597]], [[-206, -516, -102, -211, 598, 599, -489, 600, 601, -483, 602]]],
        "type": "MultiPolygon",
        "properties": {
          "CNTRY_TERR": "France",
          "SOVEREIGN": "France",
          "ISO_3_CODE": "FRA",
          "ISO_2_CODE": "FR",
          "UN_CODE": 250,
          "WHO_CODE": 4080,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[[-225, -442, 603, -446, 604, 605]], [[606]]],
        "type": "MultiPolygon",
        "properties": {
          "CNTRY_TERR": "Greece",
          "SOVEREIGN": "Greece",
          "ISO_3_CODE": "GRC",
          "ISO_2_CODE": "GR",
          "UN_CODE": 300,
          "WHO_CODE": 4140,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[[607, 608]], [[609]], [[610, 611]], [[612]], [[613]], [[614]], [[615]], [[616, -514]], [[617]], [[618]], [[619]], [[620]], [[621]], [[622]]],
        "type": "MultiPolygon",
        "properties": {
          "CNTRY_TERR": "Indonesia",
          "SOVEREIGN": "Indonesia",
          "ISO_3_CODE": "IDN",
          "ISO_2_CODE": "ID",
          "UN_CODE": 360,
          "WHO_CODE": 3110,
          "WHO_REGION": "SEARO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 39
        }
      }, {
        "arcs": [[[-438, 623, -599, -210, -500]], [[624]], [[625]]],
        "type": "MultiPolygon",
        "properties": {
          "CNTRY_TERR": "Italy",
          "SOVEREIGN": "Italy",
          "ISO_3_CODE": "ITA",
          "ISO_2_CODE": "IT",
          "UN_CODE": 380,
          "WHO_CODE": 4180,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[[626]], [[627]], [[628]], [[629]]],
        "type": "MultiPolygon",
        "properties": {
          "CNTRY_TERR": "Japan",
          "SOVEREIGN": "Japan",
          "ISO_3_CODE": "JPN",
          "ISO_2_CODE": "JP",
          "UN_CODE": 392,
          "WHO_CODE": 3160,
          "WHO_REGION": "WPRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[[-379, 630, -609, 631]], [[-373, 632, -517, 633]]],
        "type": "MultiPolygon",
        "properties": {
          "CNTRY_TERR": "Malaysia",
          "SOVEREIGN": "Malaysia",
          "ISO_3_CODE": "MYS",
          "ISO_2_CODE": "MY",
          "UN_CODE": 458,
          "WHO_CODE": 3236,
          "WHO_REGION": "WPRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 1
        }
      }, {
        "arcs": [[[634]], [[635]]],
        "type": "MultiPolygon",
        "properties": {
          "CNTRY_TERR": "New Zealand",
          "SOVEREIGN": "New Zealand",
          "ISO_3_CODE": "NZL",
          "ISO_2_CODE": "NZ",
          "UN_CODE": 554,
          "WHO_CODE": 5150,
          "WHO_REGION": "WPRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[[-24, -7, -6, -5, -4]], [[636, -11, 637]]],
        "type": "MultiPolygon",
        "properties": {
          "CNTRY_TERR": "West Bank and Gaza Strip",
          "SOVEREIGN": "West Bank and Gaza Strip",
          "ISO_3_CODE": "PSE",
          "ISO_2_CODE": "PS",
          "UN_CODE": 0,
          "WHO_CODE": 12,
          "WHO_REGION": "EMRO",
          "WHO_STATUS": "Other",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[[638, -611]], [[639]], [[640]]],
        "type": "MultiPolygon",
        "properties": {
          "CNTRY_TERR": "Papua New Guinea",
          "SOVEREIGN": "Papua New Guinea",
          "ISO_3_CODE": "PNG",
          "ISO_2_CODE": "PG",
          "UN_CODE": 598,
          "WHO_CODE": 5195,
          "WHO_REGION": "WPRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 3
        }
      }, {
        "arcs": [[[641]], [[642]], [[643]], [[644]], [[645]], [[646]], [[647]], [[648]]],
        "type": "MultiPolygon",
        "properties": {
          "CNTRY_TERR": "Philippines",
          "SOVEREIGN": "Philippines",
          "ISO_3_CODE": "PHL",
          "ISO_2_CODE": "PH",
          "UN_CODE": 608,
          "WHO_CODE": 3300,
          "WHO_REGION": "WPRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 10
        }
      }, {
        "arcs": [[[649, -407, 650, -201]], [[651, 652, -387, 653, -43, 654, -553, -418, 655, -414, -409, -400, 656, -395, 657, -191, -392]], [[658]], [[659]], [[660]], [[661]], [[662]], [[663]], [[664]], [[665]], [[666]], [[667]]],
        "type": "MultiPolygon",
        "properties": {
          "CNTRY_TERR": "Russian Federation",
          "SOVEREIGN": "Russian Federation",
          "ISO_3_CODE": "RUS",
          "ISO_2_CODE": "RU",
          "UN_CODE": 643,
          "WHO_CODE": 4272,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[[668]], [[669]], [[670]]],
        "type": "MultiPolygon",
        "properties": {
          "CNTRY_TERR": "Svalbard and Jan Mayen Islands",
          "SOVEREIGN": "Norway",
          "ISO_3_CODE": "SJM",
          "ISO_2_CODE": "SJ",
          "UN_CODE": 744,
          "WHO_CODE": 28,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Other",
          "REAL_VALUE": null
        }
      }, {
        "arcs": [[[671, -605, -445, 672]], [[673, -421, -423, -114, -354, -229, 674]]],
        "type": "MultiPolygon",
        "properties": {
          "CNTRY_TERR": "Turkey",
          "SOVEREIGN": "Turkey",
          "ISO_3_CODE": "TUR",
          "ISO_2_CODE": "TR",
          "UN_CODE": 792,
          "WHO_CODE": 3400,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 7
        }
      }, {
        "arcs": [[[675]], [[676, -203]]],
        "type": "MultiPolygon",
        "properties": {
          "CNTRY_TERR": "United Kingdom of Great Britain and Northern Ireland",
          "SOVEREIGN": "United Kingdom of Great Britain and Northern Ireland",
          "ISO_3_CODE": "GBR",
          "ISO_2_CODE": "GB",
          "UN_CODE": 826,
          "WHO_CODE": 4308,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[[-562, 677, -144, 678]], [[-564, 679]], [[680]], [[681]], [[682]]],
        "type": "MultiPolygon",
        "properties": {
          "CNTRY_TERR": "United States of America",
          "SOVEREIGN": "United States of America",
          "ISO_3_CODE": "USA",
          "ISO_2_CODE": "US",
          "UN_CODE": 840,
          "WHO_CODE": 2450,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[[683]], [[684]]],
        "type": "MultiPolygon",
        "properties": {
          "CNTRY_TERR": "Vanuatu",
          "SOVEREIGN": "Vanuatu",
          "ISO_3_CODE": "VUT",
          "ISO_2_CODE": "VU",
          "UN_CODE": 548,
          "WHO_CODE": 5207,
          "WHO_REGION": "WPRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[[685]], [[686]], [[-653, 687, -386, 688, -471, -506, -370, -35, -363, -33, -391, -42, -41, -495, -360, -431, -432, -44, -654, -388]]],
        "type": "MultiPolygon",
        "properties": {
          "CNTRY_TERR": "China",
          "SOVEREIGN": "China",
          "ISO_3_CODE": "CHN",
          "ISO_2_CODE": "CN",
          "UN_CODE": 156,
          "WHO_CODE": 3068,
          "WHO_REGION": "WPRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 74
        }
      }, {
        "arcs": [[689]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Monaco",
          "SOVEREIGN": "Monaco",
          "ISO_3_CODE": "MCO",
          "ISO_2_CODE": "MC",
          "UN_CODE": 492,
          "WHO_CODE": 4205,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[690]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Tokelau",
          "SOVEREIGN": "New Zealand",
          "ISO_3_CODE": "TKL",
          "ISO_2_CODE": "TK",
          "UN_CODE": 772,
          "WHO_CODE": 5199,
          "WHO_REGION": "WPRO",
          "WHO_STATUS": "Associate member",
          "REAL_VALUE": null
        }
      }, {
        "arcs": [[691]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Timor-Leste",
          "SOVEREIGN": "Timor-Leste",
          "ISO_3_CODE": "TLS",
          "ISO_2_CODE": "TL",
          "UN_CODE": 626,
          "WHO_CODE": 3087,
          "WHO_REGION": "SEARO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 1
        }
      }, {
        "arcs": [[692, 693, -502, 694]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Liechtenstein",
          "SOVEREIGN": "Liechtenstein",
          "ISO_3_CODE": "LIE",
          "ISO_2_CODE": "LI",
          "UN_CODE": 438,
          "WHO_CODE": 4185,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Other",
          "REAL_VALUE": null
        }
      }, {
        "arcs": [[695]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Turks and Caicos Islands",
          "SOVEREIGN": "United Kingdom of Great Britain and Northern Ireland",
          "ISO_3_CODE": "TCA",
          "ISO_2_CODE": "TC",
          "UN_CODE": 796,
          "WHO_CODE": 2445,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Other",
          "REAL_VALUE": null
        }
      }, {
        "arcs": [[696]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "British Virgin Islands",
          "SOVEREIGN": "United Kingdom of Great Britain and Northern Ireland",
          "ISO_3_CODE": "VGB",
          "ISO_2_CODE": "VG",
          "UN_CODE": 92,
          "WHO_CODE": 30,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Other",
          "REAL_VALUE": null
        }
      }, {
        "arcs": [[697]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Anguilla",
          "SOVEREIGN": "United Kingdom of Great Britain and Northern Ireland",
          "ISO_3_CODE": "AIA",
          "ISO_2_CODE": "AI",
          "UN_CODE": 660,
          "WHO_CODE": 2005,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Other",
          "REAL_VALUE": null
        }
      }, {
        "arcs": [[698]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Saint Kitts and Nevis",
          "SOVEREIGN": "Saint Kitts and Nevis",
          "ISO_3_CODE": "KNA",
          "ISO_2_CODE": "KN",
          "UN_CODE": 659,
          "WHO_CODE": 2385,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[699]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Montserrat",
          "SOVEREIGN": "United Kingdom of Great Britain and Northern Ireland",
          "ISO_3_CODE": "MSR",
          "ISO_2_CODE": "MS",
          "UN_CODE": 500,
          "WHO_CODE": 2320,
          "WHO_REGION": "AMRO",
          "WHO_STATUS": "Other",
          "REAL_VALUE": null
        }
      }, {
        "arcs": [[[-30, -19, -29, 700]], [[-27, 701]]],
        "type": "MultiPolygon",
        "properties": {
          "CNTRY_TERR": "Oman",
          "SOVEREIGN": "Oman",
          "ISO_3_CODE": "OMN",
          "ISO_2_CODE": "OM",
          "UN_CODE": 512,
          "WHO_CODE": 3285,
          "WHO_REGION": "EMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[702, 703, 704, 705, 706]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Sudan",
          "SOVEREIGN": "Sudan",
          "ISO_3_CODE": "SDN",
          "ISO_2_CODE": "SD",
          "UN_CODE": 729,
          "WHO_CODE": 1470,
          "WHO_REGION": "EMRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 16
        }
      }, {
        "arcs": [[-450, 707, -436, 708, 709, -219, 710]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Croatia",
          "SOVEREIGN": "Croatia",
          "ISO_3_CODE": "HRV",
          "ISO_2_CODE": "HR",
          "UN_CODE": 191,
          "WHO_CODE": 4038,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[711, -451, -711, -218, -140, -448, -439, 712, 713]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Serbia",
          "SOVEREIGN": "Serbia",
          "ISO_3_CODE": "SRB",
          "ISO_2_CODE": "RS",
          "UN_CODE": 0,
          "WHO_CODE": 0,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[714, -453, 715, -714, 716, -227]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Montenegro",
          "SOVEREIGN": "Montenegro",
          "ISO_3_CODE": "MNE",
          "ISO_2_CODE": "ME",
          "UN_CODE": 0,
          "WHO_CODE": 0,
          "WHO_REGION": "EURO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[717]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Tonga",
          "SOVEREIGN": "Tonga",
          "ISO_3_CODE": "TON",
          "ISO_2_CODE": "TO",
          "UN_CODE": 776,
          "WHO_CODE": 5200,
          "WHO_REGION": "WPRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[718]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Samoa",
          "SOVEREIGN": "Samoa",
          "ISO_3_CODE": "WSM",
          "ISO_2_CODE": "WS",
          "UN_CODE": 882,
          "WHO_CODE": 5197,
          "WHO_REGION": "WPRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[719]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Niue",
          "SOVEREIGN": "New Zealand",
          "ISO_3_CODE": "NIU",
          "ISO_2_CODE": "NU",
          "UN_CODE": 570,
          "WHO_CODE": 5170,
          "WHO_REGION": "WPRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[720]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "Cook Islands",
          "SOVEREIGN": "New Zealand",
          "ISO_3_CODE": "COK",
          "ISO_2_CODE": "CK",
          "UN_CODE": 184,
          "WHO_CODE": 5060,
          "WHO_REGION": "WPRO",
          "WHO_STATUS": "Member state",
          "REAL_VALUE": 0
        }
      }, {
        "arcs": [[721, 722, 723, 724, 725, 726, 727, 728, 729, -704, 730, 731, 732, 733, 734, 735, 736]],
        "type": "Polygon",
        "properties": {
          "CNTRY_TERR": "South Sudan",
          "SOVEREIGN": "South Sudan",
          "ISO_3_CODE": "SSD",
          "ISO_2_CODE": "SS",
          "UN_CODE": 728,
          "WHO_CODE": 0,
          "WHO_REGION": "AFRO",
          "WHO_STATUS": "Member State",
          "REAL_VALUE": 0
        }
      }]
    },
    "maskline_general": {
      "type": "GeometryCollection",
      "geometries": [{
        "type": "MultiLineString",
        "arcs": [[737], [738], [739, 740, 741], [742, 743]],
        "properties": {
          "ID": 31,
          "COUNTRY": "Wline",
          "LENGTH": 14.488
        }
      }, {
        "type": "LineString",
        "arcs": [744],
        "properties": {
          "ID": 30,
          "COUNTRY": "Bline_Kosovo",
          "LENGTH": 4.585
        }
      }, {
        "type": "MultiLineString",
        "arcs": [[745], [746], [747], [748], [749], [750], [751], [752], [753], [754], [755], [756], [757], [758], [759]],
        "properties": {
          "ID": 1,
          "COUNTRY": "Fline",
          "LENGTH": 137.745
        }
      }, {
        "type": "MultiLineString",
        "arcs": [[760], [761, 762, -5, 763]],
        "properties": {
          "ID": 5,
          "COUNTRY": "Gaza",
          "LENGTH": 3.15
        }
      }, {
        "type": "LineString",
        "arcs": [764],
        "properties": {
          "ID": 30,
          "COUNTRY": "Bline_Sudan",
          "LENGTH": 4.585
        }
      }, {
        "type": "LineString",
        "arcs": [765],
        "properties": {
          "ID": 0,
          "COUNTRY": "Cont_ja_ka",
          "LENGTH": 0
        }
      }, {
        "type": "LineString",
        "arcs": [766, 724, 767, 726, 768, 729, 769, 731, 732, 770],
        "properties": {
          "ID": 0,
          "COUNTRY": "South_sud",
          "LENGTH": 0
        }
      }, {
        "type": "LineString",
        "arcs": [771, 772, 735, 773],
        "properties": {
          "ID": 0,
          "COUNTRY": "South_sud",
          "LENGTH": 0
        }
      }, {
        "type": "LineString",
        "arcs": [774, 775, 776],
        "properties": {
          "ID": 0,
          "COUNTRY": "Abyei border",
          "LENGTH": 0
        }
      }, {
        "type": "LineString",
        "arcs": [774, 775, 776],
        "properties": {
          "ID": 0,
          "COUNTRY": "Abyei border1",
          "LENGTH": 0
        }
      }]
    },
    "maskpoly_general": {
      "type": "GeometryCollection",
      "geometries": [{
        "arcs": [[740, 777, -361, 494, 40, 778, -744, 779, 780]],
        "type": "Polygon"
      }, {
        "arcs": [[[781]], [[782]], [[783]], [[784]], [[785], [786], [787], [788]], [[789]], [[790]], [[791]], [[792]]],
        "type": "MultiPolygon"
      }, {
        "arcs": [[793]],
        "type": "Polygon"
      }]
    }
  }
};
},{}],"../node_modules/d3-svg-legend/node_modules/d3-selection/src/namespaces.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.xhtml = void 0;
var xhtml = "http://www.w3.org/1999/xhtml";
exports.xhtml = xhtml;
var _default = {
  svg: "http://www.w3.org/2000/svg",
  xhtml: xhtml,
  xlink: "http://www.w3.org/1999/xlink",
  xml: "http://www.w3.org/XML/1998/namespace",
  xmlns: "http://www.w3.org/2000/xmlns/"
};
exports.default = _default;
},{}],"../node_modules/d3-svg-legend/node_modules/d3-selection/src/namespace.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _namespaces = _interopRequireDefault(require("./namespaces"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(name) {
  var prefix = name += "",
      i = prefix.indexOf(":");
  if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
  return _namespaces.default.hasOwnProperty(prefix) ? {
    space: _namespaces.default[prefix],
    local: name
  } : name;
}
},{"./namespaces":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/namespaces.js"}],"../node_modules/d3-svg-legend/node_modules/d3-selection/src/creator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _namespace = _interopRequireDefault(require("./namespace"));

var _namespaces = require("./namespaces");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function creatorInherit(name) {
  return function () {
    var document = this.ownerDocument,
        uri = this.namespaceURI;
    return uri === _namespaces.xhtml && document.documentElement.namespaceURI === _namespaces.xhtml ? document.createElement(name) : document.createElementNS(uri, name);
  };
}

function creatorFixed(fullname) {
  return function () {
    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
  };
}

function _default(name) {
  var fullname = (0, _namespace.default)(name);
  return (fullname.local ? creatorFixed : creatorInherit)(fullname);
}
},{"./namespace":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/namespace.js","./namespaces":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/namespaces.js"}],"../node_modules/d3-svg-legend/node_modules/d3-selection/src/local.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = local;
var nextId = 0;

function local() {
  return new Local();
}

function Local() {
  this._ = "@" + (++nextId).toString(36);
}

Local.prototype = local.prototype = {
  constructor: Local,
  get: function (node) {
    var id = this._;

    while (!(id in node)) if (!(node = node.parentNode)) return;

    return node[id];
  },
  set: function (node, value) {
    return node[this._] = value;
  },
  remove: function (node) {
    return this._ in node && delete node[this._];
  },
  toString: function () {
    return this._;
  }
};
},{}],"../node_modules/d3-svg-legend/node_modules/d3-selection/src/matcher.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var matcher = function (selector) {
  return function () {
    return this.matches(selector);
  };
};

if (typeof document !== "undefined") {
  var element = document.documentElement;

  if (!element.matches) {
    var vendorMatches = element.webkitMatchesSelector || element.msMatchesSelector || element.mozMatchesSelector || element.oMatchesSelector;

    matcher = function (selector) {
      return function () {
        return vendorMatches.call(this, selector);
      };
    };
  }
}

var _default = matcher;
exports.default = _default;
},{}],"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/on.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.customEvent = customEvent;
exports.event = void 0;
var filterEvents = {};
var event = null;
exports.event = event;

if (typeof document !== "undefined") {
  var element = document.documentElement;

  if (!("onmouseenter" in element)) {
    filterEvents = {
      mouseenter: "mouseover",
      mouseleave: "mouseout"
    };
  }
}

function filterContextListener(listener, index, group) {
  listener = contextListener(listener, index, group);
  return function (event) {
    var related = event.relatedTarget;

    if (!related || related !== this && !(related.compareDocumentPosition(this) & 8)) {
      listener.call(this, event);
    }
  };
}

function contextListener(listener, index, group) {
  return function (event1) {
    var event0 = event; // Events can be reentrant (e.g., focus).

    exports.event = event = event1;

    try {
      listener.call(this, this.__data__, index, group);
    } finally {
      exports.event = event = event0;
    }
  };
}

function parseTypenames(typenames) {
  return typenames.trim().split(/^|\s+/).map(function (t) {
    var name = "",
        i = t.indexOf(".");
    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
    return {
      type: t,
      name: name
    };
  });
}

function onRemove(typename) {
  return function () {
    var on = this.__on;
    if (!on) return;

    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.capture);
      } else {
        on[++i] = o;
      }
    }

    if (++i) on.length = i;else delete this.__on;
  };
}

function onAdd(typename, value, capture) {
  var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;
  return function (d, i, group) {
    var on = this.__on,
        o,
        listener = wrap(value, i, group);
    if (on) for (var j = 0, m = on.length; j < m; ++j) {
      if ((o = on[j]).type === typename.type && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.capture);
        this.addEventListener(o.type, o.listener = listener, o.capture = capture);
        o.value = value;
        return;
      }
    }
    this.addEventListener(typename.type, listener, capture);
    o = {
      type: typename.type,
      name: typename.name,
      value: value,
      listener: listener,
      capture: capture
    };
    if (!on) this.__on = [o];else on.push(o);
  };
}

function _default(typename, value, capture) {
  var typenames = parseTypenames(typename + ""),
      i,
      n = typenames.length,
      t;

  if (arguments.length < 2) {
    var on = this.node().__on;

    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {
      for (i = 0, o = on[j]; i < n; ++i) {
        if ((t = typenames[i]).type === o.type && t.name === o.name) {
          return o.value;
        }
      }
    }
    return;
  }

  on = value ? onAdd : onRemove;
  if (capture == null) capture = false;

  for (i = 0; i < n; ++i) this.each(on(typenames[i], value, capture));

  return this;
}

function customEvent(event1, listener, that, args) {
  var event0 = event;
  event1.sourceEvent = event;
  exports.event = event = event1;

  try {
    return listener.apply(that, args);
  } finally {
    exports.event = event = event0;
  }
}
},{}],"../node_modules/d3-svg-legend/node_modules/d3-selection/src/sourceEvent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _on = require("./selection/on");

function _default() {
  var current = _on.event,
      source;

  while (source = current.sourceEvent) current = source;

  return current;
}
},{"./selection/on":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/on.js"}],"../node_modules/d3-svg-legend/node_modules/d3-selection/src/point.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(node, event) {
  var svg = node.ownerSVGElement || node;

  if (svg.createSVGPoint) {
    var point = svg.createSVGPoint();
    point.x = event.clientX, point.y = event.clientY;
    point = point.matrixTransform(node.getScreenCTM().inverse());
    return [point.x, point.y];
  }

  var rect = node.getBoundingClientRect();
  return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
}
},{}],"../node_modules/d3-svg-legend/node_modules/d3-selection/src/mouse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _sourceEvent = _interopRequireDefault(require("./sourceEvent"));

var _point = _interopRequireDefault(require("./point"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(node) {
  var event = (0, _sourceEvent.default)();
  if (event.changedTouches) event = event.changedTouches[0];
  return (0, _point.default)(node, event);
}
},{"./sourceEvent":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/sourceEvent.js","./point":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/point.js"}],"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selector.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function none() {}

function _default(selector) {
  return selector == null ? none : function () {
    return this.querySelector(selector);
  };
}
},{}],"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/select.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./index");

var _selector = _interopRequireDefault(require("../selector"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(select) {
  if (typeof select !== "function") select = (0, _selector.default)(select);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node) subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
      }
    }
  }

  return new _index.Selection(subgroups, this._parents);
}
},{"./index":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/index.js","../selector":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selector.js"}],"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selectorAll.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function empty() {
  return [];
}

function _default(selector) {
  return selector == null ? empty : function () {
    return this.querySelectorAll(selector);
  };
}
},{}],"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/selectAll.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./index");

var _selectorAll = _interopRequireDefault(require("../selectorAll"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(select) {
  if (typeof select !== "function") select = (0, _selectorAll.default)(select);

  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        subgroups.push(select.call(node, node.__data__, i, group));
        parents.push(node);
      }
    }
  }

  return new _index.Selection(subgroups, parents);
}
},{"./index":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/index.js","../selectorAll":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selectorAll.js"}],"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/filter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./index");

var _matcher = _interopRequireDefault(require("../matcher"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(match) {
  if (typeof match !== "function") match = (0, _matcher.default)(match);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }

  return new _index.Selection(subgroups, this._parents);
}
},{"./index":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/index.js","../matcher":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/matcher.js"}],"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/sparse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(update) {
  return new Array(update.length);
}
},{}],"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/enter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.EnterNode = EnterNode;

var _sparse = _interopRequireDefault(require("./sparse"));

var _index = require("./index");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  return new _index.Selection(this._enter || this._groups.map(_sparse.default), this._parents);
}

function EnterNode(parent, datum) {
  this.ownerDocument = parent.ownerDocument;
  this.namespaceURI = parent.namespaceURI;
  this._next = null;
  this._parent = parent;
  this.__data__ = datum;
}

EnterNode.prototype = {
  constructor: EnterNode,
  appendChild: function (child) {
    return this._parent.insertBefore(child, this._next);
  },
  insertBefore: function (child, next) {
    return this._parent.insertBefore(child, next);
  },
  querySelector: function (selector) {
    return this._parent.querySelector(selector);
  },
  querySelectorAll: function (selector) {
    return this._parent.querySelectorAll(selector);
  }
};
},{"./sparse":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/sparse.js","./index":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/index.js"}],"../node_modules/d3-svg-legend/node_modules/d3-selection/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/data.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./index");

var _enter = require("./enter");

var _constant = _interopRequireDefault(require("../constant"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var keyPrefix = "$"; // Protect against keys like “__proto__”.

function bindIndex(parent, group, enter, update, exit, data) {
  var i = 0,
      node,
      groupLength = group.length,
      dataLength = data.length; // Put any non-null nodes that fit into update.
  // Put any null nodes into enter.
  // Put any remaining data into enter.

  for (; i < dataLength; ++i) {
    if (node = group[i]) {
      node.__data__ = data[i];
      update[i] = node;
    } else {
      enter[i] = new _enter.EnterNode(parent, data[i]);
    }
  } // Put any non-null nodes that don’t fit into exit.


  for (; i < groupLength; ++i) {
    if (node = group[i]) {
      exit[i] = node;
    }
  }
}

function bindKey(parent, group, enter, update, exit, data, key) {
  var i,
      node,
      nodeByKeyValue = {},
      groupLength = group.length,
      dataLength = data.length,
      keyValues = new Array(groupLength),
      keyValue; // Compute the key for each node.
  // If multiple nodes have the same key, the duplicates are added to exit.

  for (i = 0; i < groupLength; ++i) {
    if (node = group[i]) {
      keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);

      if (keyValue in nodeByKeyValue) {
        exit[i] = node;
      } else {
        nodeByKeyValue[keyValue] = node;
      }
    }
  } // Compute the key for each datum.
  // If there a node associated with this key, join and add it to update.
  // If there is not (or the key is a duplicate), add it to enter.


  for (i = 0; i < dataLength; ++i) {
    keyValue = keyPrefix + key.call(parent, data[i], i, data);

    if (node = nodeByKeyValue[keyValue]) {
      update[i] = node;
      node.__data__ = data[i];
      nodeByKeyValue[keyValue] = null;
    } else {
      enter[i] = new _enter.EnterNode(parent, data[i]);
    }
  } // Add any remaining nodes that were not bound to data to exit.


  for (i = 0; i < groupLength; ++i) {
    if ((node = group[i]) && nodeByKeyValue[keyValues[i]] === node) {
      exit[i] = node;
    }
  }
}

function _default(value, key) {
  if (!value) {
    data = new Array(this.size()), j = -1;
    this.each(function (d) {
      data[++j] = d;
    });
    return data;
  }

  var bind = key ? bindKey : bindIndex,
      parents = this._parents,
      groups = this._groups;
  if (typeof value !== "function") value = (0, _constant.default)(value);

  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
    var parent = parents[j],
        group = groups[j],
        groupLength = group.length,
        data = value.call(parent, parent && parent.__data__, j, parents),
        dataLength = data.length,
        enterGroup = enter[j] = new Array(dataLength),
        updateGroup = update[j] = new Array(dataLength),
        exitGroup = exit[j] = new Array(groupLength);
    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key); // Now connect the enter nodes to their following update node, such that
    // appendChild can insert the materialized enter node before this node,
    // rather than at the end of the parent node.

    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
      if (previous = enterGroup[i0]) {
        if (i0 >= i1) i1 = i0 + 1;

        while (!(next = updateGroup[i1]) && ++i1 < dataLength);

        previous._next = next || null;
      }
    }
  }

  update = new _index.Selection(update, parents);
  update._enter = enter;
  update._exit = exit;
  return update;
}
},{"./index":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/index.js","./enter":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/enter.js","../constant":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/constant.js"}],"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/exit.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _sparse = _interopRequireDefault(require("./sparse"));

var _index = require("./index");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  return new _index.Selection(this._exit || this._groups.map(_sparse.default), this._parents);
}
},{"./sparse":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/sparse.js","./index":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/index.js"}],"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/merge.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./index");

function _default(selection) {
  for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }

  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }

  return new _index.Selection(merges, this._parents);
}
},{"./index":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/index.js"}],"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/order.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {
    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
      if (node = group[i]) {
        if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);
        next = node;
      }
    }
  }

  return this;
}
},{}],"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/sort.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./index");

function _default(compare) {
  if (!compare) compare = ascending;

  function compareNode(a, b) {
    return a && b ? compare(a.__data__, b.__data__) : !a - !b;
  }

  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        sortgroup[i] = node;
      }
    }

    sortgroup.sort(compareNode);
  }

  return new _index.Selection(sortgroups, this._parents).order();
}

function ascending(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}
},{"./index":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/index.js"}],"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/call.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var callback = arguments[0];
  arguments[0] = this;
  callback.apply(null, arguments);
  return this;
}
},{}],"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/nodes.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var nodes = new Array(this.size()),
      i = -1;
  this.each(function () {
    nodes[++i] = this;
  });
  return nodes;
}
},{}],"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
      var node = group[i];
      if (node) return node;
    }
  }

  return null;
}
},{}],"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/size.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var size = 0;
  this.each(function () {
    ++size;
  });
  return size;
}
},{}],"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/empty.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  return !this.node();
}
},{}],"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/each.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(callback) {
  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
      if (node = group[i]) callback.call(node, node.__data__, i, group);
    }
  }

  return this;
}
},{}],"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/attr.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _namespace = _interopRequireDefault(require("../namespace"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function attrRemove(name) {
  return function () {
    this.removeAttribute(name);
  };
}

function attrRemoveNS(fullname) {
  return function () {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}

function attrConstant(name, value) {
  return function () {
    this.setAttribute(name, value);
  };
}

function attrConstantNS(fullname, value) {
  return function () {
    this.setAttributeNS(fullname.space, fullname.local, value);
  };
}

function attrFunction(name, value) {
  return function () {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttribute(name);else this.setAttribute(name, v);
  };
}

function attrFunctionNS(fullname, value) {
  return function () {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);else this.setAttributeNS(fullname.space, fullname.local, v);
  };
}

function _default(name, value) {
  var fullname = (0, _namespace.default)(name);

  if (arguments.length < 2) {
    var node = this.node();
    return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
  }

  return this.each((value == null ? fullname.local ? attrRemoveNS : attrRemove : typeof value === "function" ? fullname.local ? attrFunctionNS : attrFunction : fullname.local ? attrConstantNS : attrConstant)(fullname, value));
}
},{"../namespace":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/namespace.js"}],"../node_modules/d3-svg-legend/node_modules/d3-selection/src/window.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(node) {
  return node.ownerDocument && node.ownerDocument.defaultView || // node is a Node
  node.document && node // node is a Window
  || node.defaultView; // node is a Document
}
},{}],"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/style.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _window = _interopRequireDefault(require("../window"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function styleRemove(name) {
  return function () {
    this.style.removeProperty(name);
  };
}

function styleConstant(name, value, priority) {
  return function () {
    this.style.setProperty(name, value, priority);
  };
}

function styleFunction(name, value, priority) {
  return function () {
    var v = value.apply(this, arguments);
    if (v == null) this.style.removeProperty(name);else this.style.setProperty(name, v, priority);
  };
}

function _default(name, value, priority) {
  var node;
  return arguments.length > 1 ? this.each((value == null ? styleRemove : typeof value === "function" ? styleFunction : styleConstant)(name, value, priority == null ? "" : priority)) : (0, _window.default)(node = this.node()).getComputedStyle(node, null).getPropertyValue(name);
}
},{"../window":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/window.js"}],"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/property.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function propertyRemove(name) {
  return function () {
    delete this[name];
  };
}

function propertyConstant(name, value) {
  return function () {
    this[name] = value;
  };
}

function propertyFunction(name, value) {
  return function () {
    var v = value.apply(this, arguments);
    if (v == null) delete this[name];else this[name] = v;
  };
}

function _default(name, value) {
  return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value === "function" ? propertyFunction : propertyConstant)(name, value)) : this.node()[name];
}
},{}],"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/classed.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function classArray(string) {
  return string.trim().split(/^|\s+/);
}

function classList(node) {
  return node.classList || new ClassList(node);
}

function ClassList(node) {
  this._node = node;
  this._names = classArray(node.getAttribute("class") || "");
}

ClassList.prototype = {
  add: function (name) {
    var i = this._names.indexOf(name);

    if (i < 0) {
      this._names.push(name);

      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  remove: function (name) {
    var i = this._names.indexOf(name);

    if (i >= 0) {
      this._names.splice(i, 1);

      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  contains: function (name) {
    return this._names.indexOf(name) >= 0;
  }
};

function classedAdd(node, names) {
  var list = classList(node),
      i = -1,
      n = names.length;

  while (++i < n) list.add(names[i]);
}

function classedRemove(node, names) {
  var list = classList(node),
      i = -1,
      n = names.length;

  while (++i < n) list.remove(names[i]);
}

function classedTrue(names) {
  return function () {
    classedAdd(this, names);
  };
}

function classedFalse(names) {
  return function () {
    classedRemove(this, names);
  };
}

function classedFunction(names, value) {
  return function () {
    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
  };
}

function _default(name, value) {
  var names = classArray(name + "");

  if (arguments.length < 2) {
    var list = classList(this.node()),
        i = -1,
        n = names.length;

    while (++i < n) if (!list.contains(names[i])) return false;

    return true;
  }

  return this.each((typeof value === "function" ? classedFunction : value ? classedTrue : classedFalse)(names, value));
}
},{}],"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/text.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function textRemove() {
  this.textContent = "";
}

function textConstant(value) {
  return function () {
    this.textContent = value;
  };
}

function textFunction(value) {
  return function () {
    var v = value.apply(this, arguments);
    this.textContent = v == null ? "" : v;
  };
}

function _default(value) {
  return arguments.length ? this.each(value == null ? textRemove : (typeof value === "function" ? textFunction : textConstant)(value)) : this.node().textContent;
}
},{}],"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/html.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function htmlRemove() {
  this.innerHTML = "";
}

function htmlConstant(value) {
  return function () {
    this.innerHTML = value;
  };
}

function htmlFunction(value) {
  return function () {
    var v = value.apply(this, arguments);
    this.innerHTML = v == null ? "" : v;
  };
}

function _default(value) {
  return arguments.length ? this.each(value == null ? htmlRemove : (typeof value === "function" ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML;
}
},{}],"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/raise.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function raise() {
  if (this.nextSibling) this.parentNode.appendChild(this);
}

function _default() {
  return this.each(raise);
}
},{}],"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/lower.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function lower() {
  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
}

function _default() {
  return this.each(lower);
}
},{}],"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/append.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _creator = _interopRequireDefault(require("../creator"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(name) {
  var create = typeof name === "function" ? name : (0, _creator.default)(name);
  return this.select(function () {
    return this.appendChild(create.apply(this, arguments));
  });
}
},{"../creator":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/creator.js"}],"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/insert.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _creator = _interopRequireDefault(require("../creator"));

var _selector = _interopRequireDefault(require("../selector"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function constantNull() {
  return null;
}

function _default(name, before) {
  var create = typeof name === "function" ? name : (0, _creator.default)(name),
      select = before == null ? constantNull : typeof before === "function" ? before : (0, _selector.default)(before);
  return this.select(function () {
    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
  });
}
},{"../creator":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/creator.js","../selector":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selector.js"}],"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/remove.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function remove() {
  var parent = this.parentNode;
  if (parent) parent.removeChild(this);
}

function _default() {
  return this.each(remove);
}
},{}],"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/datum.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(value) {
  return arguments.length ? this.property("__data__", value) : this.node().__data__;
}
},{}],"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/dispatch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _window = _interopRequireDefault(require("../window"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function dispatchEvent(node, type, params) {
  var window = (0, _window.default)(node),
      event = window.CustomEvent;

  if (event) {
    event = new event(type, params);
  } else {
    event = window.document.createEvent("Event");
    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;else event.initEvent(type, false, false);
  }

  node.dispatchEvent(event);
}

function dispatchConstant(type, params) {
  return function () {
    return dispatchEvent(this, type, params);
  };
}

function dispatchFunction(type, params) {
  return function () {
    return dispatchEvent(this, type, params.apply(this, arguments));
  };
}

function _default(type, params) {
  return this.each((typeof params === "function" ? dispatchFunction : dispatchConstant)(type, params));
}
},{"../window":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/window.js"}],"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Selection = Selection;
exports.default = exports.root = void 0;

var _select = _interopRequireDefault(require("./select"));

var _selectAll = _interopRequireDefault(require("./selectAll"));

var _filter = _interopRequireDefault(require("./filter"));

var _data = _interopRequireDefault(require("./data"));

var _enter = _interopRequireDefault(require("./enter"));

var _exit = _interopRequireDefault(require("./exit"));

var _merge = _interopRequireDefault(require("./merge"));

var _order = _interopRequireDefault(require("./order"));

var _sort = _interopRequireDefault(require("./sort"));

var _call = _interopRequireDefault(require("./call"));

var _nodes = _interopRequireDefault(require("./nodes"));

var _node = _interopRequireDefault(require("./node"));

var _size = _interopRequireDefault(require("./size"));

var _empty = _interopRequireDefault(require("./empty"));

var _each = _interopRequireDefault(require("./each"));

var _attr = _interopRequireDefault(require("./attr"));

var _style = _interopRequireDefault(require("./style"));

var _property = _interopRequireDefault(require("./property"));

var _classed = _interopRequireDefault(require("./classed"));

var _text = _interopRequireDefault(require("./text"));

var _html = _interopRequireDefault(require("./html"));

var _raise = _interopRequireDefault(require("./raise"));

var _lower = _interopRequireDefault(require("./lower"));

var _append = _interopRequireDefault(require("./append"));

var _insert = _interopRequireDefault(require("./insert"));

var _remove = _interopRequireDefault(require("./remove"));

var _datum = _interopRequireDefault(require("./datum"));

var _on = _interopRequireDefault(require("./on"));

var _dispatch = _interopRequireDefault(require("./dispatch"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var root = [null];
exports.root = root;

function Selection(groups, parents) {
  this._groups = groups;
  this._parents = parents;
}

function selection() {
  return new Selection([[document.documentElement]], root);
}

Selection.prototype = selection.prototype = {
  constructor: Selection,
  select: _select.default,
  selectAll: _selectAll.default,
  filter: _filter.default,
  data: _data.default,
  enter: _enter.default,
  exit: _exit.default,
  merge: _merge.default,
  order: _order.default,
  sort: _sort.default,
  call: _call.default,
  nodes: _nodes.default,
  node: _node.default,
  size: _size.default,
  empty: _empty.default,
  each: _each.default,
  attr: _attr.default,
  style: _style.default,
  property: _property.default,
  classed: _classed.default,
  text: _text.default,
  html: _html.default,
  raise: _raise.default,
  lower: _lower.default,
  append: _append.default,
  insert: _insert.default,
  remove: _remove.default,
  datum: _datum.default,
  on: _on.default,
  dispatch: _dispatch.default
};
var _default = selection;
exports.default = _default;
},{"./select":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/select.js","./selectAll":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/selectAll.js","./filter":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/filter.js","./data":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/data.js","./enter":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/enter.js","./exit":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/exit.js","./merge":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/merge.js","./order":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/order.js","./sort":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/sort.js","./call":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/call.js","./nodes":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/nodes.js","./node":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/node.js","./size":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/size.js","./empty":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/empty.js","./each":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/each.js","./attr":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/attr.js","./style":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/style.js","./property":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/property.js","./classed":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/classed.js","./text":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/text.js","./html":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/html.js","./raise":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/raise.js","./lower":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/lower.js","./append":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/append.js","./insert":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/insert.js","./remove":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/remove.js","./datum":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/datum.js","./on":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/on.js","./dispatch":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/dispatch.js"}],"../node_modules/d3-svg-legend/node_modules/d3-selection/src/select.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./selection/index");

function _default(selector) {
  return typeof selector === "string" ? new _index.Selection([[document.querySelector(selector)]], [document.documentElement]) : new _index.Selection([[selector]], _index.root);
}
},{"./selection/index":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/index.js"}],"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selectAll.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./selection/index");

function _default(selector) {
  return typeof selector === "string" ? new _index.Selection([document.querySelectorAll(selector)], [document.documentElement]) : new _index.Selection([selector == null ? [] : selector], _index.root);
}
},{"./selection/index":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/index.js"}],"../node_modules/d3-svg-legend/node_modules/d3-selection/src/touch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _sourceEvent = _interopRequireDefault(require("./sourceEvent"));

var _point = _interopRequireDefault(require("./point"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(node, touches, identifier) {
  if (arguments.length < 3) identifier = touches, touches = (0, _sourceEvent.default)().changedTouches;

  for (var i = 0, n = touches ? touches.length : 0, touch; i < n; ++i) {
    if ((touch = touches[i]).identifier === identifier) {
      return (0, _point.default)(node, touch);
    }
  }

  return null;
}
},{"./sourceEvent":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/sourceEvent.js","./point":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/point.js"}],"../node_modules/d3-svg-legend/node_modules/d3-selection/src/touches.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _sourceEvent = _interopRequireDefault(require("./sourceEvent"));

var _point = _interopRequireDefault(require("./point"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(node, touches) {
  if (touches == null) touches = (0, _sourceEvent.default)().touches;

  for (var i = 0, n = touches ? touches.length : 0, points = new Array(n); i < n; ++i) {
    points[i] = (0, _point.default)(node, touches[i]);
  }

  return points;
}
},{"./sourceEvent":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/sourceEvent.js","./point":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/point.js"}],"../node_modules/d3-svg-legend/node_modules/d3-selection/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "creator", {
  enumerable: true,
  get: function () {
    return _creator.default;
  }
});
Object.defineProperty(exports, "local", {
  enumerable: true,
  get: function () {
    return _local.default;
  }
});
Object.defineProperty(exports, "matcher", {
  enumerable: true,
  get: function () {
    return _matcher.default;
  }
});
Object.defineProperty(exports, "mouse", {
  enumerable: true,
  get: function () {
    return _mouse.default;
  }
});
Object.defineProperty(exports, "namespace", {
  enumerable: true,
  get: function () {
    return _namespace.default;
  }
});
Object.defineProperty(exports, "namespaces", {
  enumerable: true,
  get: function () {
    return _namespaces.default;
  }
});
Object.defineProperty(exports, "select", {
  enumerable: true,
  get: function () {
    return _select.default;
  }
});
Object.defineProperty(exports, "selectAll", {
  enumerable: true,
  get: function () {
    return _selectAll.default;
  }
});
Object.defineProperty(exports, "selection", {
  enumerable: true,
  get: function () {
    return _index.default;
  }
});
Object.defineProperty(exports, "selector", {
  enumerable: true,
  get: function () {
    return _selector.default;
  }
});
Object.defineProperty(exports, "selectorAll", {
  enumerable: true,
  get: function () {
    return _selectorAll.default;
  }
});
Object.defineProperty(exports, "touch", {
  enumerable: true,
  get: function () {
    return _touch.default;
  }
});
Object.defineProperty(exports, "touches", {
  enumerable: true,
  get: function () {
    return _touches.default;
  }
});
Object.defineProperty(exports, "window", {
  enumerable: true,
  get: function () {
    return _window.default;
  }
});
Object.defineProperty(exports, "event", {
  enumerable: true,
  get: function () {
    return _on.event;
  }
});
Object.defineProperty(exports, "customEvent", {
  enumerable: true,
  get: function () {
    return _on.customEvent;
  }
});

var _creator = _interopRequireDefault(require("./src/creator"));

var _local = _interopRequireDefault(require("./src/local"));

var _matcher = _interopRequireDefault(require("./src/matcher"));

var _mouse = _interopRequireDefault(require("./src/mouse"));

var _namespace = _interopRequireDefault(require("./src/namespace"));

var _namespaces = _interopRequireDefault(require("./src/namespaces"));

var _select = _interopRequireDefault(require("./src/select"));

var _selectAll = _interopRequireDefault(require("./src/selectAll"));

var _index = _interopRequireDefault(require("./src/selection/index"));

var _selector = _interopRequireDefault(require("./src/selector"));

var _selectorAll = _interopRequireDefault(require("./src/selectorAll"));

var _touch = _interopRequireDefault(require("./src/touch"));

var _touches = _interopRequireDefault(require("./src/touches"));

var _window = _interopRequireDefault(require("./src/window"));

var _on = require("./src/selection/on");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./src/creator":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/creator.js","./src/local":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/local.js","./src/matcher":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/matcher.js","./src/mouse":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/mouse.js","./src/namespace":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/namespace.js","./src/namespaces":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/namespaces.js","./src/select":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/select.js","./src/selectAll":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selectAll.js","./src/selection/index":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/index.js","./src/selector":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selector.js","./src/selectorAll":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selectorAll.js","./src/touch":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/touch.js","./src/touches":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/touches.js","./src/window":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/window.js","./src/selection/on":"../node_modules/d3-svg-legend/node_modules/d3-selection/src/selection/on.js"}],"../node_modules/d3-svg-legend/node_modules/d3-format/src/formatDecimal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

// Computes the decimal coefficient and exponent of the specified number x with
// significant digits p, where x is positive and p is in [1, 21] or undefined.
// For example, formatDecimal(1.23) returns ["123", 0].
function _default(x, p) {
  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity

  var i,
      coefficient = x.slice(0, i); // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
  // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).

  return [coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient, +x.slice(i + 1)];
}
},{}],"../node_modules/d3-svg-legend/node_modules/d3-format/src/exponent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _formatDecimal = _interopRequireDefault(require("./formatDecimal"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(x) {
  return x = (0, _formatDecimal.default)(Math.abs(x)), x ? x[1] : NaN;
}
},{"./formatDecimal":"../node_modules/d3-svg-legend/node_modules/d3-format/src/formatDecimal.js"}],"../node_modules/d3-svg-legend/node_modules/d3-format/src/formatGroup.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(grouping, thousands) {
  return function (value, width) {
    var i = value.length,
        t = [],
        j = 0,
        g = grouping[0],
        length = 0;

    while (i > 0 && g > 0) {
      if (length + g + 1 > width) g = Math.max(1, width - length);
      t.push(value.substring(i -= g, i + g));
      if ((length += g + 1) > width) break;
      g = grouping[j = (j + 1) % grouping.length];
    }

    return t.reverse().join(thousands);
  };
}
},{}],"../node_modules/d3-svg-legend/node_modules/d3-format/src/formatDefault.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x, p) {
  x = x.toPrecision(p);

  out: for (var n = x.length, i = 1, i0 = -1, i1; i < n; ++i) {
    switch (x[i]) {
      case ".":
        i0 = i1 = i;
        break;

      case "0":
        if (i0 === 0) i0 = i;
        i1 = i;
        break;

      case "e":
        break out;

      default:
        if (i0 > 0) i0 = 0;
        break;
    }
  }

  return i0 > 0 ? x.slice(0, i0) + x.slice(i1 + 1) : x;
}
},{}],"../node_modules/d3-svg-legend/node_modules/d3-format/src/formatPrefixAuto.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.prefixExponent = void 0;

var _formatDecimal = _interopRequireDefault(require("./formatDecimal"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var prefixExponent;
exports.prefixExponent = prefixExponent;

function _default(x, p) {
  var d = (0, _formatDecimal.default)(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
      exponent = d[1],
      i = exponent - (exports.prefixExponent = prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
      n = coefficient.length;
  return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join("0") : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i) : "0." + new Array(1 - i).join("0") + (0, _formatDecimal.default)(x, Math.max(0, p + i - 1))[0]; // less than 1y!
}
},{"./formatDecimal":"../node_modules/d3-svg-legend/node_modules/d3-format/src/formatDecimal.js"}],"../node_modules/d3-svg-legend/node_modules/d3-format/src/formatRounded.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _formatDecimal = _interopRequireDefault(require("./formatDecimal"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(x, p) {
  var d = (0, _formatDecimal.default)(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
      exponent = d[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}
},{"./formatDecimal":"../node_modules/d3-svg-legend/node_modules/d3-format/src/formatDecimal.js"}],"../node_modules/d3-svg-legend/node_modules/d3-format/src/formatTypes.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _formatDefault = _interopRequireDefault(require("./formatDefault"));

var _formatPrefixAuto = _interopRequireDefault(require("./formatPrefixAuto"));

var _formatRounded = _interopRequireDefault(require("./formatRounded"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = {
  "": _formatDefault.default,
  "%": function (x, p) {
    return (x * 100).toFixed(p);
  },
  "b": function (x) {
    return Math.round(x).toString(2);
  },
  "c": function (x) {
    return x + "";
  },
  "d": function (x) {
    return Math.round(x).toString(10);
  },
  "e": function (x, p) {
    return x.toExponential(p);
  },
  "f": function (x, p) {
    return x.toFixed(p);
  },
  "g": function (x, p) {
    return x.toPrecision(p);
  },
  "o": function (x) {
    return Math.round(x).toString(8);
  },
  "p": function (x, p) {
    return (0, _formatRounded.default)(x * 100, p);
  },
  "r": _formatRounded.default,
  "s": _formatPrefixAuto.default,
  "X": function (x) {
    return Math.round(x).toString(16).toUpperCase();
  },
  "x": function (x) {
    return Math.round(x).toString(16);
  }
};
exports.default = _default;
},{"./formatDefault":"../node_modules/d3-svg-legend/node_modules/d3-format/src/formatDefault.js","./formatPrefixAuto":"../node_modules/d3-svg-legend/node_modules/d3-format/src/formatPrefixAuto.js","./formatRounded":"../node_modules/d3-svg-legend/node_modules/d3-format/src/formatRounded.js"}],"../node_modules/d3-svg-legend/node_modules/d3-format/src/formatSpecifier.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _formatTypes = _interopRequireDefault(require("./formatTypes"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// [[fill]align][sign][symbol][0][width][,][.precision][type]
var re = /^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i;

function _default(specifier) {
  return new FormatSpecifier(specifier);
}

function FormatSpecifier(specifier) {
  if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
  var match,
      fill = match[1] || " ",
      align = match[2] || ">",
      sign = match[3] || "-",
      symbol = match[4] || "",
      zero = !!match[5],
      width = match[6] && +match[6],
      comma = !!match[7],
      precision = match[8] && +match[8].slice(1),
      type = match[9] || ""; // The "n" type is an alias for ",g".

  if (type === "n") comma = true, type = "g"; // Map invalid types to the default format.
  else if (!_formatTypes.default[type]) type = ""; // If zero fill is specified, padding goes after sign and before digits.

  if (zero || fill === "0" && align === "=") zero = true, fill = "0", align = "=";
  this.fill = fill;
  this.align = align;
  this.sign = sign;
  this.symbol = symbol;
  this.zero = zero;
  this.width = width;
  this.comma = comma;
  this.precision = precision;
  this.type = type;
}

FormatSpecifier.prototype.toString = function () {
  return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width == null ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision == null ? "" : "." + Math.max(0, this.precision | 0)) + this.type;
};
},{"./formatTypes":"../node_modules/d3-svg-legend/node_modules/d3-format/src/formatTypes.js"}],"../node_modules/d3-svg-legend/node_modules/d3-format/src/locale.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _exponent = _interopRequireDefault(require("./exponent"));

var _formatGroup = _interopRequireDefault(require("./formatGroup"));

var _formatSpecifier = _interopRequireDefault(require("./formatSpecifier"));

var _formatTypes = _interopRequireDefault(require("./formatTypes"));

var _formatPrefixAuto = require("./formatPrefixAuto");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var prefixes = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];

function identity(x) {
  return x;
}

function _default(locale) {
  var group = locale.grouping && locale.thousands ? (0, _formatGroup.default)(locale.grouping, locale.thousands) : identity,
      currency = locale.currency,
      decimal = locale.decimal;

  function newFormat(specifier) {
    specifier = (0, _formatSpecifier.default)(specifier);
    var fill = specifier.fill,
        align = specifier.align,
        sign = specifier.sign,
        symbol = specifier.symbol,
        zero = specifier.zero,
        width = specifier.width,
        comma = specifier.comma,
        precision = specifier.precision,
        type = specifier.type; // Compute the prefix and suffix.
    // For SI-prefix, the suffix is lazily computed.

    var prefix = symbol === "$" ? currency[0] : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
        suffix = symbol === "$" ? currency[1] : /[%p]/.test(type) ? "%" : ""; // What format function should we use?
    // Is this an integer type?
    // Can this type generate exponential notation?

    var formatType = _formatTypes.default[type],
        maybeSuffix = !type || /[defgprs%]/.test(type); // Set the default precision if not specified,
    // or clamp the specified precision to the supported range.
    // For significant precision, it must be in [1, 21].
    // For fixed precision, it must be in [0, 20].

    precision = precision == null ? type ? 6 : 12 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));

    function format(value) {
      var valuePrefix = prefix,
          valueSuffix = suffix,
          i,
          n,
          c;

      if (type === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value; // Convert negative to positive, and compute the prefix.
        // Note that -0 is not less than 0, but 1 / -0 is!

        var valueNegative = (value < 0 || 1 / value < 0) && (value *= -1, true); // Perform the initial formatting.

        value = formatType(value, precision); // If the original value was negative, it may be rounded to zero during
        // formatting; treat this as (positive) zero.

        if (valueNegative) {
          i = -1, n = value.length;
          valueNegative = false;

          while (++i < n) {
            if (c = value.charCodeAt(i), 48 < c && c < 58 || type === "x" && 96 < c && c < 103 || type === "X" && 64 < c && c < 71) {
              valueNegative = true;
              break;
            }
          }
        } // Compute the prefix and suffix.


        valuePrefix = (valueNegative ? sign === "(" ? sign : "-" : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
        valueSuffix = valueSuffix + (type === "s" ? prefixes[8 + _formatPrefixAuto.prefixExponent / 3] : "") + (valueNegative && sign === "(" ? ")" : ""); // Break the formatted value into the integer “value” part that can be
        // grouped, and fractional or exponential “suffix” part that is not.

        if (maybeSuffix) {
          i = -1, n = value.length;

          while (++i < n) {
            if (c = value.charCodeAt(i), 48 > c || c > 57) {
              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
              value = value.slice(0, i);
              break;
            }
          }
        }
      } // If the fill character is not "0", grouping is applied before padding.


      if (comma && !zero) value = group(value, Infinity); // Compute the padding.

      var length = valuePrefix.length + value.length + valueSuffix.length,
          padding = length < width ? new Array(width - length + 1).join(fill) : ""; // If the fill character is "0", grouping is applied after padding.

      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = ""; // Reconstruct the final output based on the desired alignment.

      switch (align) {
        case "<":
          return valuePrefix + value + valueSuffix + padding;

        case "=":
          return valuePrefix + padding + value + valueSuffix;

        case "^":
          return padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
      }

      return padding + valuePrefix + value + valueSuffix;
    }

    format.toString = function () {
      return specifier + "";
    };

    return format;
  }

  function formatPrefix(specifier, value) {
    var f = newFormat((specifier = (0, _formatSpecifier.default)(specifier), specifier.type = "f", specifier)),
        e = Math.max(-8, Math.min(8, Math.floor((0, _exponent.default)(value) / 3))) * 3,
        k = Math.pow(10, -e),
        prefix = prefixes[8 + e / 3];
    return function (value) {
      return f(k * value) + prefix;
    };
  }

  return {
    format: newFormat,
    formatPrefix: formatPrefix
  };
}
},{"./exponent":"../node_modules/d3-svg-legend/node_modules/d3-format/src/exponent.js","./formatGroup":"../node_modules/d3-svg-legend/node_modules/d3-format/src/formatGroup.js","./formatSpecifier":"../node_modules/d3-svg-legend/node_modules/d3-format/src/formatSpecifier.js","./formatTypes":"../node_modules/d3-svg-legend/node_modules/d3-format/src/formatTypes.js","./formatPrefixAuto":"../node_modules/d3-svg-legend/node_modules/d3-format/src/formatPrefixAuto.js"}],"../node_modules/d3-svg-legend/node_modules/d3-format/src/defaultLocale.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = defaultLocale;
exports.formatPrefix = exports.format = void 0;

var _locale = _interopRequireDefault(require("./locale"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var locale;
var format;
exports.format = format;
var formatPrefix;
exports.formatPrefix = formatPrefix;
defaultLocale({
  decimal: ".",
  thousands: ",",
  grouping: [3],
  currency: ["$", ""]
});

function defaultLocale(definition) {
  locale = (0, _locale.default)(definition);
  exports.format = format = locale.format;
  exports.formatPrefix = formatPrefix = locale.formatPrefix;
  return locale;
}
},{"./locale":"../node_modules/d3-svg-legend/node_modules/d3-format/src/locale.js"}],"../node_modules/d3-svg-legend/node_modules/d3-format/src/precisionFixed.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _exponent = _interopRequireDefault(require("./exponent"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(step) {
  return Math.max(0, -(0, _exponent.default)(Math.abs(step)));
}
},{"./exponent":"../node_modules/d3-svg-legend/node_modules/d3-format/src/exponent.js"}],"../node_modules/d3-svg-legend/node_modules/d3-format/src/precisionPrefix.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _exponent = _interopRequireDefault(require("./exponent"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(step, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor((0, _exponent.default)(value) / 3))) * 3 - (0, _exponent.default)(Math.abs(step)));
}
},{"./exponent":"../node_modules/d3-svg-legend/node_modules/d3-format/src/exponent.js"}],"../node_modules/d3-svg-legend/node_modules/d3-format/src/precisionRound.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _exponent = _interopRequireDefault(require("./exponent"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(step, max) {
  step = Math.abs(step), max = Math.abs(max) - step;
  return Math.max(0, (0, _exponent.default)(max) - (0, _exponent.default)(step)) + 1;
}
},{"./exponent":"../node_modules/d3-svg-legend/node_modules/d3-format/src/exponent.js"}],"../node_modules/d3-svg-legend/node_modules/d3-format/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "formatDefaultLocale", {
  enumerable: true,
  get: function () {
    return _defaultLocale.default;
  }
});
Object.defineProperty(exports, "format", {
  enumerable: true,
  get: function () {
    return _defaultLocale.format;
  }
});
Object.defineProperty(exports, "formatPrefix", {
  enumerable: true,
  get: function () {
    return _defaultLocale.formatPrefix;
  }
});
Object.defineProperty(exports, "formatLocale", {
  enumerable: true,
  get: function () {
    return _locale.default;
  }
});
Object.defineProperty(exports, "formatSpecifier", {
  enumerable: true,
  get: function () {
    return _formatSpecifier.default;
  }
});
Object.defineProperty(exports, "precisionFixed", {
  enumerable: true,
  get: function () {
    return _precisionFixed.default;
  }
});
Object.defineProperty(exports, "precisionPrefix", {
  enumerable: true,
  get: function () {
    return _precisionPrefix.default;
  }
});
Object.defineProperty(exports, "precisionRound", {
  enumerable: true,
  get: function () {
    return _precisionRound.default;
  }
});

var _defaultLocale = _interopRequireWildcard(require("./src/defaultLocale"));

var _locale = _interopRequireDefault(require("./src/locale"));

var _formatSpecifier = _interopRequireDefault(require("./src/formatSpecifier"));

var _precisionFixed = _interopRequireDefault(require("./src/precisionFixed"));

var _precisionPrefix = _interopRequireDefault(require("./src/precisionPrefix"));

var _precisionRound = _interopRequireDefault(require("./src/precisionRound"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }
},{"./src/defaultLocale":"../node_modules/d3-svg-legend/node_modules/d3-format/src/defaultLocale.js","./src/locale":"../node_modules/d3-svg-legend/node_modules/d3-format/src/locale.js","./src/formatSpecifier":"../node_modules/d3-svg-legend/node_modules/d3-format/src/formatSpecifier.js","./src/precisionFixed":"../node_modules/d3-svg-legend/node_modules/d3-format/src/precisionFixed.js","./src/precisionPrefix":"../node_modules/d3-svg-legend/node_modules/d3-format/src/precisionPrefix.js","./src/precisionRound":"../node_modules/d3-svg-legend/node_modules/d3-format/src/precisionRound.js"}],"../node_modules/d3-svg-legend/node_modules/d3-dispatch/src/dispatch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var noop = {
  value: function () {}
};

function dispatch() {
  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
    if (!(t = arguments[i] + "") || t in _) throw new Error("illegal type: " + t);
    _[t] = [];
  }

  return new Dispatch(_);
}

function Dispatch(_) {
  this._ = _;
}

function parseTypenames(typenames, types) {
  return typenames.trim().split(/^|\s+/).map(function (t) {
    var name = "",
        i = t.indexOf(".");
    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
    if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
    return {
      type: t,
      name: name
    };
  });
}

Dispatch.prototype = dispatch.prototype = {
  constructor: Dispatch,
  on: function (typename, callback) {
    var _ = this._,
        T = parseTypenames(typename + "", _),
        t,
        i = -1,
        n = T.length; // If no callback was specified, return the callback of the given type and name.

    if (arguments.length < 2) {
      while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;

      return;
    } // If a type was specified, set the callback for the given type and name.
    // Otherwise, if a null callback was specified, remove callbacks of the given name.


    if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);

    while (++i < n) {
      if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);
    }

    return this;
  },
  copy: function () {
    var copy = {},
        _ = this._;

    for (var t in _) copy[t] = _[t].slice();

    return new Dispatch(copy);
  },
  call: function (type, that) {
    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];
    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);

    for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
  },
  apply: function (type, that, args) {
    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);

    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
  }
};

function get(type, name) {
  for (var i = 0, n = type.length, c; i < n; ++i) {
    if ((c = type[i]).name === name) {
      return c.value;
    }
  }
}

function set(type, name, callback) {
  for (var i = 0, n = type.length; i < n; ++i) {
    if (type[i].name === name) {
      type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));
      break;
    }
  }

  if (callback != null) type.push({
    name: name,
    value: callback
  });
  return type;
}

var _default = dispatch;
exports.default = _default;
},{}],"../node_modules/d3-svg-legend/node_modules/d3-dispatch/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "dispatch", {
  enumerable: true,
  get: function () {
    return _dispatch.default;
  }
});

var _dispatch = _interopRequireDefault(require("./src/dispatch"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./src/dispatch":"../node_modules/d3-svg-legend/node_modules/d3-dispatch/src/dispatch.js"}],"../node_modules/d3-svg-legend/node_modules/d3-array/src/ascending.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}
},{}],"../node_modules/d3-svg-legend/node_modules/d3-array/src/bisector.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _ascending = _interopRequireDefault(require("./ascending"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(compare) {
  if (compare.length === 1) compare = ascendingComparator(compare);
  return {
    left: function (a, x, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a.length;

      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a[mid], x) < 0) lo = mid + 1;else hi = mid;
      }

      return lo;
    },
    right: function (a, x, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a.length;

      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a[mid], x) > 0) hi = mid;else lo = mid + 1;
      }

      return lo;
    }
  };
}

function ascendingComparator(f) {
  return function (d, x) {
    return (0, _ascending.default)(f(d), x);
  };
}
},{"./ascending":"../node_modules/d3-svg-legend/node_modules/d3-array/src/ascending.js"}],"../node_modules/d3-svg-legend/node_modules/d3-array/src/bisect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.bisectLeft = exports.bisectRight = void 0;

var _ascending = _interopRequireDefault(require("./ascending"));

var _bisector = _interopRequireDefault(require("./bisector"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ascendingBisect = (0, _bisector.default)(_ascending.default);
var bisectRight = ascendingBisect.right;
exports.bisectRight = bisectRight;
var bisectLeft = ascendingBisect.left;
exports.bisectLeft = bisectLeft;
var _default = bisectRight;
exports.default = _default;
},{"./ascending":"../node_modules/d3-svg-legend/node_modules/d3-array/src/ascending.js","./bisector":"../node_modules/d3-svg-legend/node_modules/d3-array/src/bisector.js"}],"../node_modules/d3-svg-legend/node_modules/d3-array/src/descending.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
}
},{}],"../node_modules/d3-svg-legend/node_modules/d3-array/src/number.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return x === null ? NaN : +x;
}
},{}],"../node_modules/d3-svg-legend/node_modules/d3-array/src/variance.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _number = _interopRequireDefault(require("./number"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(array, f) {
  var n = array.length,
      m = 0,
      a,
      d,
      s = 0,
      i = -1,
      j = 0;

  if (f == null) {
    while (++i < n) {
      if (!isNaN(a = (0, _number.default)(array[i]))) {
        d = a - m;
        m += d / ++j;
        s += d * (a - m);
      }
    }
  } else {
    while (++i < n) {
      if (!isNaN(a = (0, _number.default)(f(array[i], i, array)))) {
        d = a - m;
        m += d / ++j;
        s += d * (a - m);
      }
    }
  }

  if (j > 1) return s / (j - 1);
}
},{"./number":"../node_modules/d3-svg-legend/node_modules/d3-array/src/number.js"}],"../node_modules/d3-svg-legend/node_modules/d3-array/src/deviation.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _variance = _interopRequireDefault(require("./variance"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(array, f) {
  var v = (0, _variance.default)(array, f);
  return v ? Math.sqrt(v) : v;
}
},{"./variance":"../node_modules/d3-svg-legend/node_modules/d3-array/src/variance.js"}],"../node_modules/d3-svg-legend/node_modules/d3-array/src/extent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(array, f) {
  var i = -1,
      n = array.length,
      a,
      b,
      c;

  if (f == null) {
    while (++i < n) if ((b = array[i]) != null && b >= b) {
      a = c = b;
      break;
    }

    while (++i < n) if ((b = array[i]) != null) {
      if (a > b) a = b;
      if (c < b) c = b;
    }
  } else {
    while (++i < n) if ((b = f(array[i], i, array)) != null && b >= b) {
      a = c = b;
      break;
    }

    while (++i < n) if ((b = f(array[i], i, array)) != null) {
      if (a > b) a = b;
      if (c < b) c = b;
    }
  }

  return [a, c];
}
},{}],"../node_modules/d3-svg-legend/node_modules/d3-array/src/array.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.map = exports.slice = void 0;
var array = Array.prototype;
var slice = array.slice;
exports.slice = slice;
var map = array.map;
exports.map = map;
},{}],"../node_modules/d3-svg-legend/node_modules/d3-array/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"../node_modules/d3-svg-legend/node_modules/d3-array/src/identity.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return x;
}
},{}],"../node_modules/d3-svg-legend/node_modules/d3-array/src/range.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(start, stop, step) {
  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;
  var i = -1,
      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
      range = new Array(n);

  while (++i < n) {
    range[i] = start + i * step;
  }

  return range;
}
},{}],"../node_modules/d3-svg-legend/node_modules/d3-array/src/ticks.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.tickStep = tickStep;

var _range = _interopRequireDefault(require("./range"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var e10 = Math.sqrt(50),
    e5 = Math.sqrt(10),
    e2 = Math.sqrt(2);

function _default(start, stop, count) {
  var step = tickStep(start, stop, count);
  return (0, _range.default)(Math.ceil(start / step) * step, Math.floor(stop / step) * step + step / 2, // inclusive
  step);
}

function tickStep(start, stop, count) {
  var step0 = Math.abs(stop - start) / Math.max(0, count),
      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
      error = step0 / step1;
  if (error >= e10) step1 *= 10;else if (error >= e5) step1 *= 5;else if (error >= e2) step1 *= 2;
  return stop < start ? -step1 : step1;
}
},{"./range":"../node_modules/d3-svg-legend/node_modules/d3-array/src/range.js"}],"../node_modules/d3-svg-legend/node_modules/d3-array/src/threshold/sturges.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(values) {
  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;
}
},{}],"../node_modules/d3-svg-legend/node_modules/d3-array/src/histogram.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _array = require("./array");

var _bisect = _interopRequireDefault(require("./bisect"));

var _constant = _interopRequireDefault(require("./constant"));

var _extent = _interopRequireDefault(require("./extent"));

var _identity = _interopRequireDefault(require("./identity"));

var _ticks = _interopRequireDefault(require("./ticks"));

var _sturges = _interopRequireDefault(require("./threshold/sturges"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var value = _identity.default,
      domain = _extent.default,
      threshold = _sturges.default;

  function histogram(data) {
    var i,
        n = data.length,
        x,
        values = new Array(n);

    for (i = 0; i < n; ++i) {
      values[i] = value(data[i], i, data);
    }

    var xz = domain(values),
        x0 = xz[0],
        x1 = xz[1],
        tz = threshold(values, x0, x1); // Convert number of thresholds into uniform thresholds.

    if (!Array.isArray(tz)) tz = (0, _ticks.default)(x0, x1, tz); // Remove any thresholds outside the domain.

    var m = tz.length;

    while (tz[0] <= x0) tz.shift(), --m;

    while (tz[m - 1] >= x1) tz.pop(), --m;

    var bins = new Array(m + 1),
        bin; // Initialize bins.

    for (i = 0; i <= m; ++i) {
      bin = bins[i] = [];
      bin.x0 = i > 0 ? tz[i - 1] : x0;
      bin.x1 = i < m ? tz[i] : x1;
    } // Assign data to bins by value, ignoring any outside the domain.


    for (i = 0; i < n; ++i) {
      x = values[i];

      if (x0 <= x && x <= x1) {
        bins[(0, _bisect.default)(tz, x, 0, m)].push(data[i]);
      }
    }

    return bins;
  }

  histogram.value = function (_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : (0, _constant.default)(_), histogram) : value;
  };

  histogram.domain = function (_) {
    return arguments.length ? (domain = typeof _ === "function" ? _ : (0, _constant.default)([_[0], _[1]]), histogram) : domain;
  };

  histogram.thresholds = function (_) {
    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? (0, _constant.default)(_array.slice.call(_)) : (0, _constant.default)(_), histogram) : threshold;
  };

  return histogram;
}
},{"./array":"../node_modules/d3-svg-legend/node_modules/d3-array/src/array.js","./bisect":"../node_modules/d3-svg-legend/node_modules/d3-array/src/bisect.js","./constant":"../node_modules/d3-svg-legend/node_modules/d3-array/src/constant.js","./extent":"../node_modules/d3-svg-legend/node_modules/d3-array/src/extent.js","./identity":"../node_modules/d3-svg-legend/node_modules/d3-array/src/identity.js","./ticks":"../node_modules/d3-svg-legend/node_modules/d3-array/src/ticks.js","./threshold/sturges":"../node_modules/d3-svg-legend/node_modules/d3-array/src/threshold/sturges.js"}],"../node_modules/d3-svg-legend/node_modules/d3-array/src/quantile.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _number = _interopRequireDefault(require("./number"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(array, p, f) {
  if (f == null) f = _number.default;
  if (!(n = array.length)) return;
  if ((p = +p) <= 0 || n < 2) return +f(array[0], 0, array);
  if (p >= 1) return +f(array[n - 1], n - 1, array);
  var n,
      h = (n - 1) * p,
      i = Math.floor(h),
      a = +f(array[i], i, array),
      b = +f(array[i + 1], i + 1, array);
  return a + (b - a) * (h - i);
}
},{"./number":"../node_modules/d3-svg-legend/node_modules/d3-array/src/number.js"}],"../node_modules/d3-svg-legend/node_modules/d3-array/src/threshold/freedmanDiaconis.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _array = require("../array");

var _ascending = _interopRequireDefault(require("../ascending"));

var _number = _interopRequireDefault(require("../number"));

var _quantile = _interopRequireDefault(require("../quantile"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, min, max) {
  values = _array.map.call(values, _number.default).sort(_ascending.default);
  return Math.ceil((max - min) / (2 * ((0, _quantile.default)(values, 0.75) - (0, _quantile.default)(values, 0.25)) * Math.pow(values.length, -1 / 3)));
}
},{"../array":"../node_modules/d3-svg-legend/node_modules/d3-array/src/array.js","../ascending":"../node_modules/d3-svg-legend/node_modules/d3-array/src/ascending.js","../number":"../node_modules/d3-svg-legend/node_modules/d3-array/src/number.js","../quantile":"../node_modules/d3-svg-legend/node_modules/d3-array/src/quantile.js"}],"../node_modules/d3-svg-legend/node_modules/d3-array/src/threshold/scott.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _deviation = _interopRequireDefault(require("../deviation"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, min, max) {
  return Math.ceil((max - min) / (3.5 * (0, _deviation.default)(values) * Math.pow(values.length, -1 / 3)));
}
},{"../deviation":"../node_modules/d3-svg-legend/node_modules/d3-array/src/deviation.js"}],"../node_modules/d3-svg-legend/node_modules/d3-array/src/max.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(array, f) {
  var i = -1,
      n = array.length,
      a,
      b;

  if (f == null) {
    while (++i < n) if ((b = array[i]) != null && b >= b) {
      a = b;
      break;
    }

    while (++i < n) if ((b = array[i]) != null && b > a) a = b;
  } else {
    while (++i < n) if ((b = f(array[i], i, array)) != null && b >= b) {
      a = b;
      break;
    }

    while (++i < n) if ((b = f(array[i], i, array)) != null && b > a) a = b;
  }

  return a;
}
},{}],"../node_modules/d3-svg-legend/node_modules/d3-array/src/mean.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _number = _interopRequireDefault(require("./number"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(array, f) {
  var s = 0,
      n = array.length,
      a,
      i = -1,
      j = n;

  if (f == null) {
    while (++i < n) if (!isNaN(a = (0, _number.default)(array[i]))) s += a;else --j;
  } else {
    while (++i < n) if (!isNaN(a = (0, _number.default)(f(array[i], i, array)))) s += a;else --j;
  }

  if (j) return s / j;
}
},{"./number":"../node_modules/d3-svg-legend/node_modules/d3-array/src/number.js"}],"../node_modules/d3-svg-legend/node_modules/d3-array/src/median.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _ascending = _interopRequireDefault(require("./ascending"));

var _number = _interopRequireDefault(require("./number"));

var _quantile = _interopRequireDefault(require("./quantile"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(array, f) {
  var numbers = [],
      n = array.length,
      a,
      i = -1;

  if (f == null) {
    while (++i < n) if (!isNaN(a = (0, _number.default)(array[i]))) numbers.push(a);
  } else {
    while (++i < n) if (!isNaN(a = (0, _number.default)(f(array[i], i, array)))) numbers.push(a);
  }

  return (0, _quantile.default)(numbers.sort(_ascending.default), 0.5);
}
},{"./ascending":"../node_modules/d3-svg-legend/node_modules/d3-array/src/ascending.js","./number":"../node_modules/d3-svg-legend/node_modules/d3-array/src/number.js","./quantile":"../node_modules/d3-svg-legend/node_modules/d3-array/src/quantile.js"}],"../node_modules/d3-svg-legend/node_modules/d3-array/src/merge.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(arrays) {
  var n = arrays.length,
      m,
      i = -1,
      j = 0,
      merged,
      array;

  while (++i < n) j += arrays[i].length;

  merged = new Array(j);

  while (--n >= 0) {
    array = arrays[n];
    m = array.length;

    while (--m >= 0) {
      merged[--j] = array[m];
    }
  }

  return merged;
}
},{}],"../node_modules/d3-svg-legend/node_modules/d3-array/src/min.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(array, f) {
  var i = -1,
      n = array.length,
      a,
      b;

  if (f == null) {
    while (++i < n) if ((b = array[i]) != null && b >= b) {
      a = b;
      break;
    }

    while (++i < n) if ((b = array[i]) != null && a > b) a = b;
  } else {
    while (++i < n) if ((b = f(array[i], i, array)) != null && b >= b) {
      a = b;
      break;
    }

    while (++i < n) if ((b = f(array[i], i, array)) != null && a > b) a = b;
  }

  return a;
}
},{}],"../node_modules/d3-svg-legend/node_modules/d3-array/src/pairs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(array) {
  var i = 0,
      n = array.length - 1,
      p = array[0],
      pairs = new Array(n < 0 ? 0 : n);

  while (i < n) pairs[i] = [p, p = array[++i]];

  return pairs;
}
},{}],"../node_modules/d3-svg-legend/node_modules/d3-array/src/permute.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(array, indexes) {
  var i = indexes.length,
      permutes = new Array(i);

  while (i--) permutes[i] = array[indexes[i]];

  return permutes;
}
},{}],"../node_modules/d3-svg-legend/node_modules/d3-array/src/scan.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _ascending = _interopRequireDefault(require("./ascending"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(array, compare) {
  if (!(n = array.length)) return;
  var i = 0,
      n,
      j = 0,
      xi,
      xj = array[j];
  if (!compare) compare = _ascending.default;

  while (++i < n) if (compare(xi = array[i], xj) < 0 || compare(xj, xj) !== 0) xj = xi, j = i;

  if (compare(xj, xj) === 0) return j;
}
},{"./ascending":"../node_modules/d3-svg-legend/node_modules/d3-array/src/ascending.js"}],"../node_modules/d3-svg-legend/node_modules/d3-array/src/shuffle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(array, i0, i1) {
  var m = (i1 == null ? array.length : i1) - (i0 = i0 == null ? 0 : +i0),
      t,
      i;

  while (m) {
    i = Math.random() * m-- | 0;
    t = array[m + i0];
    array[m + i0] = array[i + i0];
    array[i + i0] = t;
  }

  return array;
}
},{}],"../node_modules/d3-svg-legend/node_modules/d3-array/src/sum.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(array, f) {
  var s = 0,
      n = array.length,
      a,
      i = -1;

  if (f == null) {
    while (++i < n) if (a = +array[i]) s += a; // Note: zero and null are equivalent.

  } else {
    while (++i < n) if (a = +f(array[i], i, array)) s += a;
  }

  return s;
}
},{}],"../node_modules/d3-svg-legend/node_modules/d3-array/src/transpose.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _min = _interopRequireDefault(require("./min"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(matrix) {
  if (!(n = matrix.length)) return [];

  for (var i = -1, m = (0, _min.default)(matrix, length), transpose = new Array(m); ++i < m;) {
    for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {
      row[j] = matrix[j][i];
    }
  }

  return transpose;
}

function length(d) {
  return d.length;
}
},{"./min":"../node_modules/d3-svg-legend/node_modules/d3-array/src/min.js"}],"../node_modules/d3-svg-legend/node_modules/d3-array/src/zip.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _transpose = _interopRequireDefault(require("./transpose"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  return (0, _transpose.default)(arguments);
}
},{"./transpose":"../node_modules/d3-svg-legend/node_modules/d3-array/src/transpose.js"}],"../node_modules/d3-svg-legend/node_modules/d3-array/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "bisect", {
  enumerable: true,
  get: function () {
    return _bisect.default;
  }
});
Object.defineProperty(exports, "bisectRight", {
  enumerable: true,
  get: function () {
    return _bisect.bisectRight;
  }
});
Object.defineProperty(exports, "bisectLeft", {
  enumerable: true,
  get: function () {
    return _bisect.bisectLeft;
  }
});
Object.defineProperty(exports, "ascending", {
  enumerable: true,
  get: function () {
    return _ascending.default;
  }
});
Object.defineProperty(exports, "bisector", {
  enumerable: true,
  get: function () {
    return _bisector.default;
  }
});
Object.defineProperty(exports, "descending", {
  enumerable: true,
  get: function () {
    return _descending.default;
  }
});
Object.defineProperty(exports, "deviation", {
  enumerable: true,
  get: function () {
    return _deviation.default;
  }
});
Object.defineProperty(exports, "extent", {
  enumerable: true,
  get: function () {
    return _extent.default;
  }
});
Object.defineProperty(exports, "histogram", {
  enumerable: true,
  get: function () {
    return _histogram.default;
  }
});
Object.defineProperty(exports, "thresholdFreedmanDiaconis", {
  enumerable: true,
  get: function () {
    return _freedmanDiaconis.default;
  }
});
Object.defineProperty(exports, "thresholdScott", {
  enumerable: true,
  get: function () {
    return _scott.default;
  }
});
Object.defineProperty(exports, "thresholdSturges", {
  enumerable: true,
  get: function () {
    return _sturges.default;
  }
});
Object.defineProperty(exports, "max", {
  enumerable: true,
  get: function () {
    return _max.default;
  }
});
Object.defineProperty(exports, "mean", {
  enumerable: true,
  get: function () {
    return _mean.default;
  }
});
Object.defineProperty(exports, "median", {
  enumerable: true,
  get: function () {
    return _median.default;
  }
});
Object.defineProperty(exports, "merge", {
  enumerable: true,
  get: function () {
    return _merge.default;
  }
});
Object.defineProperty(exports, "min", {
  enumerable: true,
  get: function () {
    return _min.default;
  }
});
Object.defineProperty(exports, "pairs", {
  enumerable: true,
  get: function () {
    return _pairs.default;
  }
});
Object.defineProperty(exports, "permute", {
  enumerable: true,
  get: function () {
    return _permute.default;
  }
});
Object.defineProperty(exports, "quantile", {
  enumerable: true,
  get: function () {
    return _quantile.default;
  }
});
Object.defineProperty(exports, "range", {
  enumerable: true,
  get: function () {
    return _range.default;
  }
});
Object.defineProperty(exports, "scan", {
  enumerable: true,
  get: function () {
    return _scan.default;
  }
});
Object.defineProperty(exports, "shuffle", {
  enumerable: true,
  get: function () {
    return _shuffle.default;
  }
});
Object.defineProperty(exports, "sum", {
  enumerable: true,
  get: function () {
    return _sum.default;
  }
});
Object.defineProperty(exports, "ticks", {
  enumerable: true,
  get: function () {
    return _ticks.default;
  }
});
Object.defineProperty(exports, "tickStep", {
  enumerable: true,
  get: function () {
    return _ticks.tickStep;
  }
});
Object.defineProperty(exports, "transpose", {
  enumerable: true,
  get: function () {
    return _transpose.default;
  }
});
Object.defineProperty(exports, "variance", {
  enumerable: true,
  get: function () {
    return _variance.default;
  }
});
Object.defineProperty(exports, "zip", {
  enumerable: true,
  get: function () {
    return _zip.default;
  }
});

var _bisect = _interopRequireWildcard(require("./src/bisect"));

var _ascending = _interopRequireDefault(require("./src/ascending"));

var _bisector = _interopRequireDefault(require("./src/bisector"));

var _descending = _interopRequireDefault(require("./src/descending"));

var _deviation = _interopRequireDefault(require("./src/deviation"));

var _extent = _interopRequireDefault(require("./src/extent"));

var _histogram = _interopRequireDefault(require("./src/histogram"));

var _freedmanDiaconis = _interopRequireDefault(require("./src/threshold/freedmanDiaconis"));

var _scott = _interopRequireDefault(require("./src/threshold/scott"));

var _sturges = _interopRequireDefault(require("./src/threshold/sturges"));

var _max = _interopRequireDefault(require("./src/max"));

var _mean = _interopRequireDefault(require("./src/mean"));

var _median = _interopRequireDefault(require("./src/median"));

var _merge = _interopRequireDefault(require("./src/merge"));

var _min = _interopRequireDefault(require("./src/min"));

var _pairs = _interopRequireDefault(require("./src/pairs"));

var _permute = _interopRequireDefault(require("./src/permute"));

var _quantile = _interopRequireDefault(require("./src/quantile"));

var _range = _interopRequireDefault(require("./src/range"));

var _scan = _interopRequireDefault(require("./src/scan"));

var _shuffle = _interopRequireDefault(require("./src/shuffle"));

var _sum = _interopRequireDefault(require("./src/sum"));

var _ticks = _interopRequireWildcard(require("./src/ticks"));

var _transpose = _interopRequireDefault(require("./src/transpose"));

var _variance = _interopRequireDefault(require("./src/variance"));

var _zip = _interopRequireDefault(require("./src/zip"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }
},{"./src/bisect":"../node_modules/d3-svg-legend/node_modules/d3-array/src/bisect.js","./src/ascending":"../node_modules/d3-svg-legend/node_modules/d3-array/src/ascending.js","./src/bisector":"../node_modules/d3-svg-legend/node_modules/d3-array/src/bisector.js","./src/descending":"../node_modules/d3-svg-legend/node_modules/d3-array/src/descending.js","./src/deviation":"../node_modules/d3-svg-legend/node_modules/d3-array/src/deviation.js","./src/extent":"../node_modules/d3-svg-legend/node_modules/d3-array/src/extent.js","./src/histogram":"../node_modules/d3-svg-legend/node_modules/d3-array/src/histogram.js","./src/threshold/freedmanDiaconis":"../node_modules/d3-svg-legend/node_modules/d3-array/src/threshold/freedmanDiaconis.js","./src/threshold/scott":"../node_modules/d3-svg-legend/node_modules/d3-array/src/threshold/scott.js","./src/threshold/sturges":"../node_modules/d3-svg-legend/node_modules/d3-array/src/threshold/sturges.js","./src/max":"../node_modules/d3-svg-legend/node_modules/d3-array/src/max.js","./src/mean":"../node_modules/d3-svg-legend/node_modules/d3-array/src/mean.js","./src/median":"../node_modules/d3-svg-legend/node_modules/d3-array/src/median.js","./src/merge":"../node_modules/d3-svg-legend/node_modules/d3-array/src/merge.js","./src/min":"../node_modules/d3-svg-legend/node_modules/d3-array/src/min.js","./src/pairs":"../node_modules/d3-svg-legend/node_modules/d3-array/src/pairs.js","./src/permute":"../node_modules/d3-svg-legend/node_modules/d3-array/src/permute.js","./src/quantile":"../node_modules/d3-svg-legend/node_modules/d3-array/src/quantile.js","./src/range":"../node_modules/d3-svg-legend/node_modules/d3-array/src/range.js","./src/scan":"../node_modules/d3-svg-legend/node_modules/d3-array/src/scan.js","./src/shuffle":"../node_modules/d3-svg-legend/node_modules/d3-array/src/shuffle.js","./src/sum":"../node_modules/d3-svg-legend/node_modules/d3-array/src/sum.js","./src/ticks":"../node_modules/d3-svg-legend/node_modules/d3-array/src/ticks.js","./src/transpose":"../node_modules/d3-svg-legend/node_modules/d3-array/src/transpose.js","./src/variance":"../node_modules/d3-svg-legend/node_modules/d3-array/src/variance.js","./src/zip":"../node_modules/d3-svg-legend/node_modules/d3-array/src/zip.js"}],"../node_modules/d3-svg-legend/node_modules/d3-scale/src/array.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.slice = exports.map = void 0;
var array = Array.prototype;
var map = array.map;
exports.map = map;
var slice = array.slice;
exports.slice = slice;
},{}],"../node_modules/d3-svg-legend/node_modules/d3-scale/src/ordinal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ordinal;
exports.implicit = void 0;

var _d3Collection = require("d3-collection");

var _array = require("./array");

var implicit = {
  name: "implicit"
};
exports.implicit = implicit;

function ordinal(range) {
  var index = (0, _d3Collection.map)(),
      domain = [],
      unknown = implicit;
  range = range == null ? [] : _array.slice.call(range);

  function scale(d) {
    var key = d + "",
        i = index.get(key);

    if (!i) {
      if (unknown !== implicit) return unknown;
      index.set(key, i = domain.push(d));
    }

    return range[(i - 1) % range.length];
  }

  scale.domain = function (_) {
    if (!arguments.length) return domain.slice();
    domain = [], index = (0, _d3Collection.map)();
    var i = -1,
        n = _.length,
        d,
        key;

    while (++i < n) if (!index.has(key = (d = _[i]) + "")) index.set(key, domain.push(d));

    return scale;
  };

  scale.range = function (_) {
    return arguments.length ? (range = _array.slice.call(_), scale) : range.slice();
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.copy = function () {
    return ordinal().domain(domain).range(range).unknown(unknown);
  };

  return scale;
}
},{"d3-collection":"../node_modules/d3-collection/src/index.js","./array":"../node_modules/d3-svg-legend/node_modules/d3-scale/src/array.js"}],"../node_modules/d3-svg-legend/node_modules/d3-scale/src/band.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = band;
exports.point = point;

var _d3Array = require("d3-array");

var _ordinal = _interopRequireDefault(require("./ordinal"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function band() {
  var scale = (0, _ordinal.default)().unknown(undefined),
      domain = scale.domain,
      ordinalRange = scale.range,
      range = [0, 1],
      step,
      bandwidth,
      round = false,
      paddingInner = 0,
      paddingOuter = 0,
      align = 0.5;
  delete scale.unknown;

  function rescale() {
    var n = domain().length,
        reverse = range[1] < range[0],
        start = range[reverse - 0],
        stop = range[1 - reverse];
    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
    if (round) step = Math.floor(step);
    start += (stop - start - step * (n - paddingInner)) * align;
    bandwidth = step * (1 - paddingInner);
    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);
    var values = (0, _d3Array.range)(n).map(function (i) {
      return start + step * i;
    });
    return ordinalRange(reverse ? values.reverse() : values);
  }

  scale.domain = function (_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };

  scale.range = function (_) {
    return arguments.length ? (range = [+_[0], +_[1]], rescale()) : range.slice();
  };

  scale.rangeRound = function (_) {
    return range = [+_[0], +_[1]], round = true, rescale();
  };

  scale.bandwidth = function () {
    return bandwidth;
  };

  scale.step = function () {
    return step;
  };

  scale.round = function (_) {
    return arguments.length ? (round = !!_, rescale()) : round;
  };

  scale.padding = function (_) {
    return arguments.length ? (paddingInner = paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;
  };

  scale.paddingInner = function (_) {
    return arguments.length ? (paddingInner = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;
  };

  scale.paddingOuter = function (_) {
    return arguments.length ? (paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingOuter;
  };

  scale.align = function (_) {
    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
  };

  scale.copy = function () {
    return band().domain(domain()).range(range).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);
  };

  return rescale();
}

function pointish(scale) {
  var copy = scale.copy;
  scale.padding = scale.paddingOuter;
  delete scale.paddingInner;
  delete scale.paddingOuter;

  scale.copy = function () {
    return pointish(copy());
  };

  return scale;
}

function point() {
  return pointish(band().paddingInner(1));
}
},{"d3-array":"../node_modules/d3-svg-legend/node_modules/d3-array/index.js","./ordinal":"../node_modules/d3-svg-legend/node_modules/d3-scale/src/ordinal.js"}],"../node_modules/d3-svg-legend/node_modules/d3-scale/src/constant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"../node_modules/d3-svg-legend/node_modules/d3-scale/src/number.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return +x;
}
},{}],"../node_modules/d3-svg-legend/node_modules/d3-scale/src/continuous.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deinterpolateLinear = deinterpolateLinear;
exports.copy = copy;
exports.default = continuous;

var _d3Array = require("d3-array");

var _d3Interpolate = require("d3-interpolate");

var _array = require("./array");

var _constant = _interopRequireDefault(require("./constant"));

var _number = _interopRequireDefault(require("./number"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var unit = [0, 1];

function deinterpolateLinear(a, b) {
  return (b -= a = +a) ? function (x) {
    return (x - a) / b;
  } : (0, _constant.default)(b);
}

function deinterpolateClamp(deinterpolate) {
  return function (a, b) {
    var d = deinterpolate(a = +a, b = +b);
    return function (x) {
      return x <= a ? 0 : x >= b ? 1 : d(x);
    };
  };
}

function reinterpolateClamp(reinterpolate) {
  return function (a, b) {
    var r = reinterpolate(a = +a, b = +b);
    return function (t) {
      return t <= 0 ? a : t >= 1 ? b : r(t);
    };
  };
}

function bimap(domain, range, deinterpolate, reinterpolate) {
  var d0 = domain[0],
      d1 = domain[1],
      r0 = range[0],
      r1 = range[1];
  if (d1 < d0) d0 = deinterpolate(d1, d0), r0 = reinterpolate(r1, r0);else d0 = deinterpolate(d0, d1), r0 = reinterpolate(r0, r1);
  return function (x) {
    return r0(d0(x));
  };
}

function polymap(domain, range, deinterpolate, reinterpolate) {
  var j = Math.min(domain.length, range.length) - 1,
      d = new Array(j),
      r = new Array(j),
      i = -1; // Reverse descending domains.

  if (domain[j] < domain[0]) {
    domain = domain.slice().reverse();
    range = range.slice().reverse();
  }

  while (++i < j) {
    d[i] = deinterpolate(domain[i], domain[i + 1]);
    r[i] = reinterpolate(range[i], range[i + 1]);
  }

  return function (x) {
    var i = (0, _d3Array.bisect)(domain, x, 1, j) - 1;
    return r[i](d[i](x));
  };
}

function copy(source, target) {
  return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp());
} // deinterpolate(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
// reinterpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding domain value x in [a,b].


function continuous(deinterpolate, reinterpolate) {
  var domain = unit,
      range = unit,
      interpolate = _d3Interpolate.interpolate,
      clamp = false,
      piecewise,
      output,
      input;

  function rescale() {
    piecewise = Math.min(domain.length, range.length) > 2 ? polymap : bimap;
    output = input = null;
    return scale;
  }

  function scale(x) {
    return (output || (output = piecewise(domain, range, clamp ? deinterpolateClamp(deinterpolate) : deinterpolate, interpolate)))(+x);
  }

  scale.invert = function (y) {
    return (input || (input = piecewise(range, domain, deinterpolateLinear, clamp ? reinterpolateClamp(reinterpolate) : reinterpolate)))(+y);
  };

  scale.domain = function (_) {
    return arguments.length ? (domain = _array.map.call(_, _number.default), rescale()) : domain.slice();
  };

  scale.range = function (_) {
    return arguments.length ? (range = _array.slice.call(_), rescale()) : range.slice();
  };

  scale.rangeRound = function (_) {
    return range = _array.slice.call(_), interpolate = _d3Interpolate.interpolateRound, rescale();
  };

  scale.clamp = function (_) {
    return arguments.length ? (clamp = !!_, rescale()) : clamp;
  };

  scale.interpolate = function (_) {
    return arguments.length ? (interpolate = _, rescale()) : interpolate;
  };

  return rescale();
}
},{"d3-array":"../node_modules/d3-svg-legend/node_modules/d3-array/index.js","d3-interpolate":"../node_modules/d3-interpolate/src/index.js","./array":"../node_modules/d3-svg-legend/node_modules/d3-scale/src/array.js","./constant":"../node_modules/d3-svg-legend/node_modules/d3-scale/src/constant.js","./number":"../node_modules/d3-svg-legend/node_modules/d3-scale/src/number.js"}],"../node_modules/d3-svg-legend/node_modules/d3-scale/src/tickFormat.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Array = require("d3-array");

var _d3Format = require("d3-format");

function _default(domain, count, specifier) {
  var start = domain[0],
      stop = domain[domain.length - 1],
      step = (0, _d3Array.tickStep)(start, stop, count == null ? 10 : count),
      precision;
  specifier = (0, _d3Format.formatSpecifier)(specifier == null ? ",f" : specifier);

  switch (specifier.type) {
    case "s":
      {
        var value = Math.max(Math.abs(start), Math.abs(stop));
        if (specifier.precision == null && !isNaN(precision = (0, _d3Format.precisionPrefix)(step, value))) specifier.precision = precision;
        return (0, _d3Format.formatPrefix)(specifier, value);
      }

    case "":
    case "e":
    case "g":
    case "p":
    case "r":
      {
        if (specifier.precision == null && !isNaN(precision = (0, _d3Format.precisionRound)(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
        break;
      }

    case "f":
    case "%":
      {
        if (specifier.precision == null && !isNaN(precision = (0, _d3Format.precisionFixed)(step))) specifier.precision = precision - (specifier.type === "%") * 2;
        break;
      }
  }

  return (0, _d3Format.format)(specifier);
}
},{"d3-array":"../node_modules/d3-svg-legend/node_modules/d3-array/index.js","d3-format":"../node_modules/d3-svg-legend/node_modules/d3-format/index.js"}],"../node_modules/d3-svg-legend/node_modules/d3-scale/src/linear.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.linearish = linearish;
exports.default = linear;

var _d3Array = require("d3-array");

var _d3Interpolate = require("d3-interpolate");

var _continuous = _interopRequireWildcard(require("./continuous"));

var _tickFormat = _interopRequireDefault(require("./tickFormat"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function linearish(scale) {
  var domain = scale.domain;

  scale.ticks = function (count) {
    var d = domain();
    return (0, _d3Array.ticks)(d[0], d[d.length - 1], count == null ? 10 : count);
  };

  scale.tickFormat = function (count, specifier) {
    return (0, _tickFormat.default)(domain(), count, specifier);
  };

  scale.nice = function (count) {
    var d = domain(),
        i = d.length - 1,
        n = count == null ? 10 : count,
        start = d[0],
        stop = d[i],
        step = (0, _d3Array.tickStep)(start, stop, n);

    if (step) {
      step = (0, _d3Array.tickStep)(Math.floor(start / step) * step, Math.ceil(stop / step) * step, n);
      d[0] = Math.floor(start / step) * step;
      d[i] = Math.ceil(stop / step) * step;
      domain(d);
    }

    return scale;
  };

  return scale;
}

function linear() {
  var scale = (0, _continuous.default)(_continuous.deinterpolateLinear, _d3Interpolate.interpolateNumber);

  scale.copy = function () {
    return (0, _continuous.copy)(scale, linear());
  };

  return linearish(scale);
}
},{"d3-array":"../node_modules/d3-svg-legend/node_modules/d3-array/index.js","d3-interpolate":"../node_modules/d3-interpolate/src/index.js","./continuous":"../node_modules/d3-svg-legend/node_modules/d3-scale/src/continuous.js","./tickFormat":"../node_modules/d3-svg-legend/node_modules/d3-scale/src/tickFormat.js"}],"../node_modules/d3-svg-legend/node_modules/d3-scale/src/identity.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = identity;

var _array = require("./array");

var _linear = require("./linear");

var _number = _interopRequireDefault(require("./number"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function identity() {
  var domain = [0, 1];

  function scale(x) {
    return +x;
  }

  scale.invert = scale;

  scale.domain = scale.range = function (_) {
    return arguments.length ? (domain = _array.map.call(_, _number.default), scale) : domain.slice();
  };

  scale.copy = function () {
    return identity().domain(domain);
  };

  return (0, _linear.linearish)(scale);
}
},{"./array":"../node_modules/d3-svg-legend/node_modules/d3-scale/src/array.js","./linear":"../node_modules/d3-svg-legend/node_modules/d3-scale/src/linear.js","./number":"../node_modules/d3-svg-legend/node_modules/d3-scale/src/number.js"}],"../node_modules/d3-svg-legend/node_modules/d3-scale/src/nice.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(domain, interval) {
  domain = domain.slice();
  var i0 = 0,
      i1 = domain.length - 1,
      x0 = domain[i0],
      x1 = domain[i1],
      t;

  if (x1 < x0) {
    t = i0, i0 = i1, i1 = t;
    t = x0, x0 = x1, x1 = t;
  }

  domain[i0] = interval.floor(x0);
  domain[i1] = interval.ceil(x1);
  return domain;
}
},{}],"../node_modules/d3-svg-legend/node_modules/d3-scale/src/log.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = log;

var _d3Array = require("d3-array");

var _d3Format = require("d3-format");

var _constant = _interopRequireDefault(require("./constant"));

var _nice = _interopRequireDefault(require("./nice"));

var _continuous = _interopRequireWildcard(require("./continuous"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function deinterpolate(a, b) {
  return (b = Math.log(b / a)) ? function (x) {
    return Math.log(x / a) / b;
  } : (0, _constant.default)(b);
}

function reinterpolate(a, b) {
  return a < 0 ? function (t) {
    return -Math.pow(-b, t) * Math.pow(-a, 1 - t);
  } : function (t) {
    return Math.pow(b, t) * Math.pow(a, 1 - t);
  };
}

function pow10(x) {
  return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
}

function powp(base) {
  return base === 10 ? pow10 : base === Math.E ? Math.exp : function (x) {
    return Math.pow(base, x);
  };
}

function logp(base) {
  return base === Math.E ? Math.log : base === 10 && Math.log10 || base === 2 && Math.log2 || (base = Math.log(base), function (x) {
    return Math.log(x) / base;
  });
}

function reflect(f) {
  return function (x) {
    return -f(-x);
  };
}

function log() {
  var scale = (0, _continuous.default)(deinterpolate, reinterpolate).domain([1, 10]),
      domain = scale.domain,
      base = 10,
      logs = logp(10),
      pows = powp(10);

  function rescale() {
    logs = logp(base), pows = powp(base);
    if (domain()[0] < 0) logs = reflect(logs), pows = reflect(pows);
    return scale;
  }

  scale.base = function (_) {
    return arguments.length ? (base = +_, rescale()) : base;
  };

  scale.domain = function (_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };

  scale.ticks = function (count) {
    var d = domain(),
        u = d[0],
        v = d[d.length - 1],
        r;
    if (r = v < u) i = u, u = v, v = i;
    var i = logs(u),
        j = logs(v),
        p,
        k,
        t,
        n = count == null ? 10 : +count,
        z = [];

    if (!(base % 1) && j - i < n) {
      i = Math.round(i) - 1, j = Math.round(j) + 1;
      if (u > 0) for (; i < j; ++i) {
        for (k = 1, p = pows(i); k < base; ++k) {
          t = p * k;
          if (t < u) continue;
          if (t > v) break;
          z.push(t);
        }
      } else for (; i < j; ++i) {
        for (k = base - 1, p = pows(i); k >= 1; --k) {
          t = p * k;
          if (t < u) continue;
          if (t > v) break;
          z.push(t);
        }
      }
    } else {
      z = (0, _d3Array.ticks)(i, j, Math.min(j - i, n)).map(pows);
    }

    return r ? z.reverse() : z;
  };

  scale.tickFormat = function (count, specifier) {
    if (specifier == null) specifier = base === 10 ? ".0e" : ",";
    if (typeof specifier !== "function") specifier = (0, _d3Format.format)(specifier);
    if (count === Infinity) return specifier;
    if (count == null) count = 10;
    var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?

    return function (d) {
      var i = d / pows(Math.round(logs(d)));
      if (i * base < base - 0.5) i *= base;
      return i <= k ? specifier(d) : "";
    };
  };

  scale.nice = function () {
    return domain((0, _nice.default)(domain(), {
      floor: function (x) {
        return pows(Math.floor(logs(x)));
      },
      ceil: function (x) {
        return pows(Math.ceil(logs(x)));
      }
    }));
  };

  scale.copy = function () {
    return (0, _continuous.copy)(scale, log().base(base));
  };

  return scale;
}
},{"d3-array":"../node_modules/d3-svg-legend/node_modules/d3-array/index.js","d3-format":"../node_modules/d3-svg-legend/node_modules/d3-format/index.js","./constant":"../node_modules/d3-svg-legend/node_modules/d3-scale/src/constant.js","./nice":"../node_modules/d3-svg-legend/node_modules/d3-scale/src/nice.js","./continuous":"../node_modules/d3-svg-legend/node_modules/d3-scale/src/continuous.js"}],"../node_modules/d3-svg-legend/node_modules/d3-scale/src/pow.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = pow;
exports.sqrt = sqrt;

var _constant = _interopRequireDefault(require("./constant"));

var _linear = require("./linear");

var _continuous = _interopRequireWildcard(require("./continuous"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function raise(x, exponent) {
  return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
}

function pow() {
  var exponent = 1,
      scale = (0, _continuous.default)(deinterpolate, reinterpolate),
      domain = scale.domain;

  function deinterpolate(a, b) {
    return (b = raise(b, exponent) - (a = raise(a, exponent))) ? function (x) {
      return (raise(x, exponent) - a) / b;
    } : (0, _constant.default)(b);
  }

  function reinterpolate(a, b) {
    b = raise(b, exponent) - (a = raise(a, exponent));
    return function (t) {
      return raise(a + b * t, 1 / exponent);
    };
  }

  scale.exponent = function (_) {
    return arguments.length ? (exponent = +_, domain(domain())) : exponent;
  };

  scale.copy = function () {
    return (0, _continuous.copy)(scale, pow().exponent(exponent));
  };

  return (0, _linear.linearish)(scale);
}

function sqrt() {
  return pow().exponent(0.5);
}
},{"./constant":"../node_modules/d3-svg-legend/node_modules/d3-scale/src/constant.js","./linear":"../node_modules/d3-svg-legend/node_modules/d3-scale/src/linear.js","./continuous":"../node_modules/d3-svg-legend/node_modules/d3-scale/src/continuous.js"}],"../node_modules/d3-svg-legend/node_modules/d3-scale/src/quantile.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = quantile;

var _d3Array = require("d3-array");

var _array = require("./array");

function quantile() {
  var domain = [],
      range = [],
      thresholds = [];

  function rescale() {
    var i = 0,
        n = Math.max(1, range.length);
    thresholds = new Array(n - 1);

    while (++i < n) thresholds[i - 1] = (0, _d3Array.quantile)(domain, i / n);

    return scale;
  }

  function scale(x) {
    if (!isNaN(x = +x)) return range[(0, _d3Array.bisect)(thresholds, x)];
  }

  scale.invertExtent = function (y) {
    var i = range.indexOf(y);
    return i < 0 ? [NaN, NaN] : [i > 0 ? thresholds[i - 1] : domain[0], i < thresholds.length ? thresholds[i] : domain[domain.length - 1]];
  };

  scale.domain = function (_) {
    if (!arguments.length) return domain.slice();
    domain = [];

    for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);

    domain.sort(_d3Array.ascending);
    return rescale();
  };

  scale.range = function (_) {
    return arguments.length ? (range = _array.slice.call(_), rescale()) : range.slice();
  };

  scale.quantiles = function () {
    return thresholds.slice();
  };

  scale.copy = function () {
    return quantile().domain(domain).range(range);
  };

  return scale;
}
},{"d3-array":"../node_modules/d3-svg-legend/node_modules/d3-array/index.js","./array":"../node_modules/d3-svg-legend/node_modules/d3-scale/src/array.js"}],"../node_modules/d3-svg-legend/node_modules/d3-scale/src/quantize.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = quantize;

var _d3Array = require("d3-array");

var _array = require("./array");

var _linear = require("./linear");

function quantize() {
  var x0 = 0,
      x1 = 1,
      n = 1,
      domain = [0.5],
      range = [0, 1];

  function scale(x) {
    if (x <= x) return range[(0, _d3Array.bisect)(domain, x, 0, n)];
  }

  function rescale() {
    var i = -1;
    domain = new Array(n);

    while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);

    return scale;
  }

  scale.domain = function (_) {
    return arguments.length ? (x0 = +_[0], x1 = +_[1], rescale()) : [x0, x1];
  };

  scale.range = function (_) {
    return arguments.length ? (n = (range = _array.slice.call(_)).length - 1, rescale()) : range.slice();
  };

  scale.invertExtent = function (y) {
    var i = range.indexOf(y);
    return i < 0 ? [NaN, NaN] : i < 1 ? [x0, domain[0]] : i >= n ? [domain[n - 1], x1] : [domain[i - 1], domain[i]];
  };

  scale.copy = function () {
    return quantize().domain([x0, x1]).range(range);
  };

  return (0, _linear.linearish)(scale);
}
},{"d3-array":"../node_modules/d3-svg-legend/node_modules/d3-array/index.js","./array":"../node_modules/d3-svg-legend/node_modules/d3-scale/src/array.js","./linear":"../node_modules/d3-svg-legend/node_modules/d3-scale/src/linear.js"}],"../node_modules/d3-svg-legend/node_modules/d3-scale/src/threshold.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = threshold;

var _d3Array = require("d3-array");

var _array = require("./array");

function threshold() {
  var domain = [0.5],
      range = [0, 1],
      n = 1;

  function scale(x) {
    if (x <= x) return range[(0, _d3Array.bisect)(domain, x, 0, n)];
  }

  scale.domain = function (_) {
    return arguments.length ? (domain = _array.slice.call(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();
  };

  scale.range = function (_) {
    return arguments.length ? (range = _array.slice.call(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();
  };

  scale.invertExtent = function (y) {
    var i = range.indexOf(y);
    return [domain[i - 1], domain[i]];
  };

  scale.copy = function () {
    return threshold().domain(domain).range(range);
  };

  return scale;
}
},{"d3-array":"../node_modules/d3-svg-legend/node_modules/d3-array/index.js","./array":"../node_modules/d3-svg-legend/node_modules/d3-scale/src/array.js"}],"../node_modules/d3-svg-legend/node_modules/d3-scale/src/time.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calendar = calendar;
exports.default = _default;

var _d3Array = require("d3-array");

var _d3Interpolate = require("d3-interpolate");

var _d3Time = require("d3-time");

var _d3TimeFormat = require("d3-time-format");

var _array = require("./array");

var _continuous = _interopRequireWildcard(require("./continuous"));

var _nice = _interopRequireDefault(require("./nice"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

var durationSecond = 1000,
    durationMinute = durationSecond * 60,
    durationHour = durationMinute * 60,
    durationDay = durationHour * 24,
    durationWeek = durationDay * 7,
    durationMonth = durationDay * 30,
    durationYear = durationDay * 365;

function date(t) {
  return new Date(t);
}

function number(t) {
  return t instanceof Date ? +t : +new Date(+t);
}

function calendar(year, month, week, day, hour, minute, second, millisecond, format) {
  var scale = (0, _continuous.default)(_continuous.deinterpolateLinear, _d3Interpolate.interpolateNumber),
      invert = scale.invert,
      domain = scale.domain;
  var formatMillisecond = format(".%L"),
      formatSecond = format(":%S"),
      formatMinute = format("%I:%M"),
      formatHour = format("%I %p"),
      formatDay = format("%a %d"),
      formatWeek = format("%b %d"),
      formatMonth = format("%B"),
      formatYear = format("%Y");
  var tickIntervals = [[second, 1, durationSecond], [second, 5, 5 * durationSecond], [second, 15, 15 * durationSecond], [second, 30, 30 * durationSecond], [minute, 1, durationMinute], [minute, 5, 5 * durationMinute], [minute, 15, 15 * durationMinute], [minute, 30, 30 * durationMinute], [hour, 1, durationHour], [hour, 3, 3 * durationHour], [hour, 6, 6 * durationHour], [hour, 12, 12 * durationHour], [day, 1, durationDay], [day, 2, 2 * durationDay], [week, 1, durationWeek], [month, 1, durationMonth], [month, 3, 3 * durationMonth], [year, 1, durationYear]];

  function tickFormat(date) {
    return (second(date) < date ? formatMillisecond : minute(date) < date ? formatSecond : hour(date) < date ? formatMinute : day(date) < date ? formatHour : month(date) < date ? week(date) < date ? formatDay : formatWeek : year(date) < date ? formatMonth : formatYear)(date);
  }

  function tickInterval(interval, start, stop, step) {
    if (interval == null) interval = 10; // If a desired tick count is specified, pick a reasonable tick interval
    // based on the extent of the domain and a rough estimate of tick size.
    // Otherwise, assume interval is already a time interval and use it.

    if (typeof interval === "number") {
      var target = Math.abs(stop - start) / interval,
          i = (0, _d3Array.bisector)(function (i) {
        return i[2];
      }).right(tickIntervals, target);

      if (i === tickIntervals.length) {
        step = (0, _d3Array.tickStep)(start / durationYear, stop / durationYear, interval);
        interval = year;
      } else if (i) {
        i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
        step = i[1];
        interval = i[0];
      } else {
        step = (0, _d3Array.tickStep)(start, stop, interval);
        interval = millisecond;
      }
    }

    return step == null ? interval : interval.every(step);
  }

  scale.invert = function (y) {
    return new Date(invert(y));
  };

  scale.domain = function (_) {
    return arguments.length ? domain(_array.map.call(_, number)) : domain().map(date);
  };

  scale.ticks = function (interval, step) {
    var d = domain(),
        t0 = d[0],
        t1 = d[d.length - 1],
        r = t1 < t0,
        t;
    if (r) t = t0, t0 = t1, t1 = t;
    t = tickInterval(interval, t0, t1, step);
    t = t ? t.range(t0, t1 + 1) : []; // inclusive stop

    return r ? t.reverse() : t;
  };

  scale.tickFormat = function (count, specifier) {
    return specifier == null ? tickFormat : format(specifier);
  };

  scale.nice = function (interval, step) {
    var d = domain();
    return (interval = tickInterval(interval, d[0], d[d.length - 1], step)) ? domain((0, _nice.default)(d, interval)) : scale;
  };

  scale.copy = function () {
    return (0, _continuous.copy)(scale, calendar(year, month, week, day, hour, minute, second, millisecond, format));
  };

  return scale;
}

function _default() {
  return calendar(_d3Time.timeYear, _d3Time.timeMonth, _d3Time.timeWeek, _d3Time.timeDay, _d3Time.timeHour, _d3Time.timeMinute, _d3Time.timeSecond, _d3Time.timeMillisecond, _d3TimeFormat.timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]);
}
},{"d3-array":"../node_modules/d3-svg-legend/node_modules/d3-array/index.js","d3-interpolate":"../node_modules/d3-interpolate/src/index.js","d3-time":"../node_modules/d3-time/src/index.js","d3-time-format":"../node_modules/d3-time-format/src/index.js","./array":"../node_modules/d3-svg-legend/node_modules/d3-scale/src/array.js","./continuous":"../node_modules/d3-svg-legend/node_modules/d3-scale/src/continuous.js","./nice":"../node_modules/d3-svg-legend/node_modules/d3-scale/src/nice.js"}],"../node_modules/d3-svg-legend/node_modules/d3-scale/src/utcTime.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _time = require("./time");

var _d3TimeFormat = require("d3-time-format");

var _d3Time = require("d3-time");

function _default() {
  return (0, _time.calendar)(_d3Time.utcYear, _d3Time.utcMonth, _d3Time.utcWeek, _d3Time.utcDay, _d3Time.utcHour, _d3Time.utcMinute, _d3Time.utcSecond, _d3Time.utcMillisecond, _d3TimeFormat.utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]);
}
},{"./time":"../node_modules/d3-svg-legend/node_modules/d3-scale/src/time.js","d3-time-format":"../node_modules/d3-time-format/src/index.js","d3-time":"../node_modules/d3-time/src/index.js"}],"../node_modules/d3-svg-legend/node_modules/d3-scale/src/colors.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(s) {
  return s.match(/.{6}/g).map(function (x) {
    return "#" + x;
  });
}
},{}],"../node_modules/d3-svg-legend/node_modules/d3-scale/src/category10.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _colors = _interopRequireDefault(require("./colors"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _colors.default)("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");

exports.default = _default;
},{"./colors":"../node_modules/d3-svg-legend/node_modules/d3-scale/src/colors.js"}],"../node_modules/d3-svg-legend/node_modules/d3-scale/src/category20b.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _colors = _interopRequireDefault(require("./colors"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _colors.default)("393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6");

exports.default = _default;
},{"./colors":"../node_modules/d3-svg-legend/node_modules/d3-scale/src/colors.js"}],"../node_modules/d3-svg-legend/node_modules/d3-scale/src/category20c.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _colors = _interopRequireDefault(require("./colors"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _colors.default)("3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9");

exports.default = _default;
},{"./colors":"../node_modules/d3-svg-legend/node_modules/d3-scale/src/colors.js"}],"../node_modules/d3-svg-legend/node_modules/d3-scale/src/category20.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _colors = _interopRequireDefault(require("./colors"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _colors.default)("1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5");

exports.default = _default;
},{"./colors":"../node_modules/d3-svg-legend/node_modules/d3-scale/src/colors.js"}],"../node_modules/d3-svg-legend/node_modules/d3-scale/src/cubehelix.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _d3Color = require("d3-color");

var _d3Interpolate = require("d3-interpolate");

var _default = (0, _d3Interpolate.interpolateCubehelixLong)((0, _d3Color.cubehelix)(300, 0.5, 0.0), (0, _d3Color.cubehelix)(-240, 0.5, 1.0));

exports.default = _default;
},{"d3-color":"../node_modules/d3-color/src/index.js","d3-interpolate":"../node_modules/d3-interpolate/src/index.js"}],"../node_modules/d3-svg-legend/node_modules/d3-scale/src/rainbow.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.cool = exports.warm = void 0;

var _d3Color = require("d3-color");

var _d3Interpolate = require("d3-interpolate");

var warm = (0, _d3Interpolate.interpolateCubehelixLong)((0, _d3Color.cubehelix)(-100, 0.75, 0.35), (0, _d3Color.cubehelix)(80, 1.50, 0.8));
exports.warm = warm;
var cool = (0, _d3Interpolate.interpolateCubehelixLong)((0, _d3Color.cubehelix)(260, 0.75, 0.35), (0, _d3Color.cubehelix)(80, 1.50, 0.8));
exports.cool = cool;
var rainbow = (0, _d3Color.cubehelix)();

function _default(t) {
  if (t < 0 || t > 1) t -= Math.floor(t);
  var ts = Math.abs(t - 0.5);
  rainbow.h = 360 * t - 100;
  rainbow.s = 1.5 - 1.5 * ts;
  rainbow.l = 0.8 - 0.9 * ts;
  return rainbow + "";
}
},{"d3-color":"../node_modules/d3-color/src/index.js","d3-interpolate":"../node_modules/d3-interpolate/src/index.js"}],"../node_modules/d3-svg-legend/node_modules/d3-scale/src/viridis.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.plasma = exports.inferno = exports.magma = exports.default = void 0;

var _colors = _interopRequireDefault(require("./colors"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ramp(range) {
  var n = range.length;
  return function (t) {
    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
  };
}

var _default = ramp((0, _colors.default)("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));

exports.default = _default;
var magma = ramp((0, _colors.default)("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));
exports.magma = magma;
var inferno = ramp((0, _colors.default)("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));
exports.inferno = inferno;
var plasma = ramp((0, _colors.default)("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));
exports.plasma = plasma;
},{"./colors":"../node_modules/d3-svg-legend/node_modules/d3-scale/src/colors.js"}],"../node_modules/d3-svg-legend/node_modules/d3-scale/src/sequential.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = sequential;

var _linear = require("./linear");

function sequential(interpolator) {
  var x0 = 0,
      x1 = 1,
      clamp = false;

  function scale(x) {
    var t = (x - x0) / (x1 - x0);
    return interpolator(clamp ? Math.max(0, Math.min(1, t)) : t);
  }

  scale.domain = function (_) {
    return arguments.length ? (x0 = +_[0], x1 = +_[1], scale) : [x0, x1];
  };

  scale.clamp = function (_) {
    return arguments.length ? (clamp = !!_, scale) : clamp;
  };

  scale.interpolator = function (_) {
    return arguments.length ? (interpolator = _, scale) : interpolator;
  };

  scale.copy = function () {
    return sequential(interpolator).domain([x0, x1]).clamp(clamp);
  };

  return (0, _linear.linearish)(scale);
}
},{"./linear":"../node_modules/d3-svg-legend/node_modules/d3-scale/src/linear.js"}],"../node_modules/d3-svg-legend/node_modules/d3-scale/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "scaleBand", {
  enumerable: true,
  get: function () {
    return _band.default;
  }
});
Object.defineProperty(exports, "scalePoint", {
  enumerable: true,
  get: function () {
    return _band.point;
  }
});
Object.defineProperty(exports, "scaleIdentity", {
  enumerable: true,
  get: function () {
    return _identity.default;
  }
});
Object.defineProperty(exports, "scaleLinear", {
  enumerable: true,
  get: function () {
    return _linear.default;
  }
});
Object.defineProperty(exports, "scaleLog", {
  enumerable: true,
  get: function () {
    return _log.default;
  }
});
Object.defineProperty(exports, "scaleOrdinal", {
  enumerable: true,
  get: function () {
    return _ordinal.default;
  }
});
Object.defineProperty(exports, "scaleImplicit", {
  enumerable: true,
  get: function () {
    return _ordinal.implicit;
  }
});
Object.defineProperty(exports, "scalePow", {
  enumerable: true,
  get: function () {
    return _pow.default;
  }
});
Object.defineProperty(exports, "scaleSqrt", {
  enumerable: true,
  get: function () {
    return _pow.sqrt;
  }
});
Object.defineProperty(exports, "scaleQuantile", {
  enumerable: true,
  get: function () {
    return _quantile.default;
  }
});
Object.defineProperty(exports, "scaleQuantize", {
  enumerable: true,
  get: function () {
    return _quantize.default;
  }
});
Object.defineProperty(exports, "scaleThreshold", {
  enumerable: true,
  get: function () {
    return _threshold.default;
  }
});
Object.defineProperty(exports, "scaleTime", {
  enumerable: true,
  get: function () {
    return _time.default;
  }
});
Object.defineProperty(exports, "scaleUtc", {
  enumerable: true,
  get: function () {
    return _utcTime.default;
  }
});
Object.defineProperty(exports, "schemeCategory10", {
  enumerable: true,
  get: function () {
    return _category.default;
  }
});
Object.defineProperty(exports, "schemeCategory20b", {
  enumerable: true,
  get: function () {
    return _category20b.default;
  }
});
Object.defineProperty(exports, "schemeCategory20c", {
  enumerable: true,
  get: function () {
    return _category20c.default;
  }
});
Object.defineProperty(exports, "schemeCategory20", {
  enumerable: true,
  get: function () {
    return _category2.default;
  }
});
Object.defineProperty(exports, "interpolateCubehelixDefault", {
  enumerable: true,
  get: function () {
    return _cubehelix.default;
  }
});
Object.defineProperty(exports, "interpolateRainbow", {
  enumerable: true,
  get: function () {
    return _rainbow.default;
  }
});
Object.defineProperty(exports, "interpolateWarm", {
  enumerable: true,
  get: function () {
    return _rainbow.warm;
  }
});
Object.defineProperty(exports, "interpolateCool", {
  enumerable: true,
  get: function () {
    return _rainbow.cool;
  }
});
Object.defineProperty(exports, "interpolateViridis", {
  enumerable: true,
  get: function () {
    return _viridis.default;
  }
});
Object.defineProperty(exports, "interpolateMagma", {
  enumerable: true,
  get: function () {
    return _viridis.magma;
  }
});
Object.defineProperty(exports, "interpolateInferno", {
  enumerable: true,
  get: function () {
    return _viridis.inferno;
  }
});
Object.defineProperty(exports, "interpolatePlasma", {
  enumerable: true,
  get: function () {
    return _viridis.plasma;
  }
});
Object.defineProperty(exports, "scaleSequential", {
  enumerable: true,
  get: function () {
    return _sequential.default;
  }
});

var _band = _interopRequireWildcard(require("./src/band"));

var _identity = _interopRequireDefault(require("./src/identity"));

var _linear = _interopRequireDefault(require("./src/linear"));

var _log = _interopRequireDefault(require("./src/log"));

var _ordinal = _interopRequireWildcard(require("./src/ordinal"));

var _pow = _interopRequireWildcard(require("./src/pow"));

var _quantile = _interopRequireDefault(require("./src/quantile"));

var _quantize = _interopRequireDefault(require("./src/quantize"));

var _threshold = _interopRequireDefault(require("./src/threshold"));

var _time = _interopRequireDefault(require("./src/time"));

var _utcTime = _interopRequireDefault(require("./src/utcTime"));

var _category = _interopRequireDefault(require("./src/category10"));

var _category20b = _interopRequireDefault(require("./src/category20b"));

var _category20c = _interopRequireDefault(require("./src/category20c"));

var _category2 = _interopRequireDefault(require("./src/category20"));

var _cubehelix = _interopRequireDefault(require("./src/cubehelix"));

var _rainbow = _interopRequireWildcard(require("./src/rainbow"));

var _viridis = _interopRequireWildcard(require("./src/viridis"));

var _sequential = _interopRequireDefault(require("./src/sequential"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }
},{"./src/band":"../node_modules/d3-svg-legend/node_modules/d3-scale/src/band.js","./src/identity":"../node_modules/d3-svg-legend/node_modules/d3-scale/src/identity.js","./src/linear":"../node_modules/d3-svg-legend/node_modules/d3-scale/src/linear.js","./src/log":"../node_modules/d3-svg-legend/node_modules/d3-scale/src/log.js","./src/ordinal":"../node_modules/d3-svg-legend/node_modules/d3-scale/src/ordinal.js","./src/pow":"../node_modules/d3-svg-legend/node_modules/d3-scale/src/pow.js","./src/quantile":"../node_modules/d3-svg-legend/node_modules/d3-scale/src/quantile.js","./src/quantize":"../node_modules/d3-svg-legend/node_modules/d3-scale/src/quantize.js","./src/threshold":"../node_modules/d3-svg-legend/node_modules/d3-scale/src/threshold.js","./src/time":"../node_modules/d3-svg-legend/node_modules/d3-scale/src/time.js","./src/utcTime":"../node_modules/d3-svg-legend/node_modules/d3-scale/src/utcTime.js","./src/category10":"../node_modules/d3-svg-legend/node_modules/d3-scale/src/category10.js","./src/category20b":"../node_modules/d3-svg-legend/node_modules/d3-scale/src/category20b.js","./src/category20c":"../node_modules/d3-svg-legend/node_modules/d3-scale/src/category20c.js","./src/category20":"../node_modules/d3-svg-legend/node_modules/d3-scale/src/category20.js","./src/cubehelix":"../node_modules/d3-svg-legend/node_modules/d3-scale/src/cubehelix.js","./src/rainbow":"../node_modules/d3-svg-legend/node_modules/d3-scale/src/rainbow.js","./src/viridis":"../node_modules/d3-svg-legend/node_modules/d3-scale/src/viridis.js","./src/sequential":"../node_modules/d3-svg-legend/node_modules/d3-scale/src/sequential.js"}],"../node_modules/d3-svg-legend/indexRollupNext.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.legendColor = color;
exports.legendSize = size;
exports.legendSymbol = symbol;
exports.default = exports.legendHelpers = void 0;

var _d3Selection = require("d3-selection");

var _d3Format = require("d3-format");

var _d3Dispatch = require("d3-dispatch");

var _d3Scale = require("d3-scale");

var _d3Array = require("d3-array");

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

var d3_identity = function d3_identity(d) {
  return d;
};

var d3_reverse = function d3_reverse(arr) {
  var mirror = [];

  for (var i = 0, l = arr.length; i < l; i++) {
    mirror[i] = arr[l - i - 1];
  }

  return mirror;
}; //Text wrapping code adapted from Mike Bostock


var d3_textWrapping = function d3_textWrapping(text, width) {
  text.each(function () {
    var text = (0, _d3Selection.select)(this),
        words = text.text().split(/\s+/).reverse(),
        word,
        line = [],
        lineNumber = 0,
        lineHeight = 1.2,
        //ems
    y = text.attr("y"),
        dy = parseFloat(text.attr("dy")) || 0,
        tspan = text.text(null).append("tspan").attr("x", 0).attr("dy", dy + "em");

    while (word = words.pop()) {
      line.push(word);
      tspan.text(line.join(" "));

      if (tspan.node().getComputedTextLength() > width && line.length > 1) {
        line.pop();
        tspan.text(line.join(" "));
        line = [word];
        tspan = text.append("tspan").attr("x", 0).attr("dy", lineHeight + dy + "em").text(word);
      }
    }
  });
};

var d3_mergeLabels = function d3_mergeLabels() {
  var gen = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var labels = arguments[1];
  var domain = arguments[2];
  var range = arguments[3];
  var labelDelimiter = arguments[4];

  if ((typeof labels === "undefined" ? "undefined" : _typeof(labels)) === "object") {
    if (labels.length === 0) return gen;
    var i = labels.length;

    for (; i < gen.length; i++) {
      labels.push(gen[i]);
    }

    return labels;
  } else if (typeof labels === "function") {
    var customLabels = [];
    var genLength = gen.length;

    for (var _i = 0; _i < genLength; _i++) {
      customLabels.push(labels({
        i: _i,
        genLength: genLength,
        generatedLabels: gen,
        domain: domain,
        range: range,
        labelDelimiter: labelDelimiter
      }));
    }

    return customLabels;
  }

  return gen;
};

var d3_linearLegend = function d3_linearLegend(scale, cells, labelFormat) {
  var data = [];

  if (cells.length > 1) {
    data = cells;
  } else {
    var domain = scale.domain(),
        increment = (domain[domain.length - 1] - domain[0]) / (cells - 1);
    var i = 0;

    for (; i < cells; i++) {
      data.push(domain[0] + i * increment);
    }
  }

  var labels = data.map(labelFormat);
  return {
    data: data,
    labels: labels,
    feature: function feature(d) {
      return scale(d);
    }
  };
};

var d3_quantLegend = function d3_quantLegend(scale, labelFormat, labelDelimiter) {
  var labels = scale.range().map(function (d) {
    var invert = scale.invertExtent(d);
    return labelFormat(invert[0]) + " " + labelDelimiter + " " + labelFormat(invert[1]);
  });
  return {
    data: scale.range(),
    labels: labels,
    feature: d3_identity
  };
};

var d3_ordinalLegend = function d3_ordinalLegend(scale) {
  return {
    data: scale.domain(),
    labels: scale.domain(),
    feature: function feature(d) {
      return scale(d);
    }
  };
};

var d3_cellOver = function d3_cellOver(cellDispatcher, d, obj) {
  cellDispatcher.call("cellover", obj, d);
};

var d3_cellOut = function d3_cellOut(cellDispatcher, d, obj) {
  cellDispatcher.call("cellout", obj, d);
};

var d3_cellClick = function d3_cellClick(cellDispatcher, d, obj) {
  cellDispatcher.call("cellclick", obj, d);
};

var helper = {
  d3_drawShapes: function d3_drawShapes(shape, shapes, shapeHeight, shapeWidth, shapeRadius, path) {
    if (shape === "rect") {
      shapes.attr("height", shapeHeight).attr("width", shapeWidth);
    } else if (shape === "circle") {
      shapes.attr("r", shapeRadius);
    } else if (shape === "line") {
      shapes.attr("x1", 0).attr("x2", shapeWidth).attr("y1", 0).attr("y2", 0);
    } else if (shape === "path") {
      shapes.attr("d", path);
    }
  },
  d3_addText: function d3_addText(svg, enter, labels, classPrefix, labelWidth) {
    enter.append("text").attr("class", classPrefix + "label");
    var text = svg.selectAll("g." + classPrefix + "cell text." + classPrefix + "label").data(labels).text(d3_identity);

    if (labelWidth) {
      svg.selectAll("g." + classPrefix + "cell text." + classPrefix + "label").call(d3_textWrapping, labelWidth);
    }

    return text;
  },
  d3_calcType: function d3_calcType(scale, ascending, cells, labels, labelFormat, labelDelimiter) {
    var type = scale.invertExtent ? d3_quantLegend(scale, labelFormat, labelDelimiter) : scale.ticks ? d3_linearLegend(scale, cells, labelFormat) : d3_ordinalLegend(scale); //for d3.scaleSequential that doesn't have a range function

    var range = scale.range && scale.range() || scale.domain();
    type.labels = d3_mergeLabels(type.labels, labels, scale.domain(), range, labelDelimiter);

    if (ascending) {
      type.labels = d3_reverse(type.labels);
      type.data = d3_reverse(type.data);
    }

    return type;
  },
  d3_filterCells: function d3_filterCells(type, cellFilter) {
    var filterCells = type.data.map(function (d, i) {
      return {
        data: d,
        label: type.labels[i]
      };
    }).filter(cellFilter);
    var dataValues = filterCells.map(function (d) {
      return d.data;
    });
    var labelValues = filterCells.map(function (d) {
      return d.label;
    });
    type.data = type.data.filter(function (d) {
      return dataValues.indexOf(d) !== -1;
    });
    type.labels = type.labels.filter(function (d) {
      return labelValues.indexOf(d) !== -1;
    });
    return type;
  },
  d3_placement: function d3_placement(orient, cell, cellTrans, text, textTrans, labelAlign) {
    cell.attr("transform", cellTrans);
    text.attr("transform", textTrans);

    if (orient === "horizontal") {
      text.style("text-anchor", labelAlign);
    }
  },
  d3_addEvents: function d3_addEvents(cells, dispatcher) {
    cells.on("mouseover.legend", function (d) {
      d3_cellOver(dispatcher, d, this);
    }).on("mouseout.legend", function (d) {
      d3_cellOut(dispatcher, d, this);
    }).on("click.legend", function (d) {
      d3_cellClick(dispatcher, d, this);
    });
  },
  d3_title: function d3_title(svg, title, classPrefix, titleWidth) {
    if (title !== "") {
      var titleText = svg.selectAll("text." + classPrefix + "legendTitle");
      titleText.data([title]).enter().append("text").attr("class", classPrefix + "legendTitle");
      svg.selectAll("text." + classPrefix + "legendTitle").text(title);

      if (titleWidth) {
        svg.selectAll("text." + classPrefix + "legendTitle").call(d3_textWrapping, titleWidth);
      }

      var cellsSvg = svg.select("." + classPrefix + "legendCells");
      var yOffset = svg.select("." + classPrefix + "legendTitle").nodes().map(function (d) {
        return d.getBBox().height;
      })[0],
          xOffset = -cellsSvg.nodes().map(function (d) {
        return d.getBBox().x;
      })[0];
      cellsSvg.attr("transform", "translate(" + xOffset + "," + yOffset + ")");
    }
  },
  d3_defaultLocale: {
    format: _d3Format.format,
    formatPrefix: _d3Format.formatPrefix
  },
  d3_defaultFormatSpecifier: ".01f",
  d3_defaultDelimiter: "to"
};

function color() {
  var scale = (0, _d3Scale.scaleLinear)(),
      shape = "rect",
      shapeWidth = 15,
      shapeHeight = 15,
      shapeRadius = 10,
      shapePadding = 2,
      cells = [5],
      cellFilter = void 0,
      labels = [],
      classPrefix = "",
      useClass = false,
      title = "",
      locale = helper.d3_defaultLocale,
      specifier = helper.d3_defaultFormatSpecifier,
      labelOffset = 10,
      labelAlign = "middle",
      labelDelimiter = helper.d3_defaultDelimiter,
      labelWrap = void 0,
      orient = "vertical",
      ascending = false,
      path = void 0,
      titleWidth = void 0,
      legendDispatcher = (0, _d3Dispatch.dispatch)("cellover", "cellout", "cellclick");

  function legend(svg) {
    var type = helper.d3_calcType(scale, ascending, cells, labels, locale.format(specifier), labelDelimiter),
        legendG = svg.selectAll("g").data([scale]);
    legendG.enter().append("g").attr("class", classPrefix + "legendCells");

    if (cellFilter) {
      helper.d3_filterCells(type, cellFilter);
    }

    var cell = svg.select("." + classPrefix + "legendCells").selectAll("." + classPrefix + "cell").data(type.data);
    var cellEnter = cell.enter().append("g").attr("class", classPrefix + "cell");
    cellEnter.append(shape).attr("class", classPrefix + "swatch");
    var shapes = svg.selectAll("g." + classPrefix + "cell " + shape + "." + classPrefix + "swatch").data(type.data); //add event handlers

    helper.d3_addEvents(cellEnter, legendDispatcher);
    cell.exit().transition().style("opacity", 0).remove();
    shapes.exit().transition().style("opacity", 0).remove();
    shapes = shapes.merge(shapes);
    helper.d3_drawShapes(shape, shapes, shapeHeight, shapeWidth, shapeRadius, path);
    var text = helper.d3_addText(svg, cellEnter, type.labels, classPrefix, labelWrap); // we need to merge the selection, otherwise changes in the legend (e.g. change of orientation) are applied only to the new cells and not the existing ones.

    cell = cellEnter.merge(cell); // sets placement

    var textSize = text.nodes().map(function (d) {
      return d.getBBox();
    }),
        shapeSize = shapes.nodes().map(function (d) {
      return d.getBBox();
    }); //sets scale
    //everything is fill except for line which is stroke,

    if (!useClass) {
      if (shape == "line") {
        shapes.style("stroke", type.feature);
      } else {
        shapes.style("fill", type.feature);
      }
    } else {
      shapes.attr("class", function (d) {
        return classPrefix + "swatch " + type.feature(d);
      });
    }

    var cellTrans = void 0,
        textTrans = void 0,
        textAlign = labelAlign == "start" ? 0 : labelAlign == "middle" ? 0.5 : 1; //positions cells and text

    if (orient === "vertical") {
      (function () {
        var cellSize = textSize.map(function (d, i) {
          return Math.max(d.height, shapeSize[i].height);
        });

        cellTrans = function cellTrans(d, i) {
          var height = (0, _d3Array.sum)(cellSize.slice(0, i));
          return "translate(0, " + (height + i * shapePadding) + ")";
        };

        textTrans = function textTrans(d, i) {
          return "translate( " + (shapeSize[i].width + shapeSize[i].x + labelOffset) + ", " + (shapeSize[i].y + shapeSize[i].height / 2 + 5) + ")";
        };
      })();
    } else if (orient === "horizontal") {
      cellTrans = function cellTrans(d, i) {
        return "translate(" + i * (shapeSize[i].width + shapePadding) + ",0)";
      };

      textTrans = function textTrans(d, i) {
        return "translate(" + (shapeSize[i].width * textAlign + shapeSize[i].x) + ",\n          " + (shapeSize[i].height + shapeSize[i].y + labelOffset + 8) + ")";
      };
    }

    helper.d3_placement(orient, cell, cellTrans, text, textTrans, labelAlign);
    helper.d3_title(svg, title, classPrefix, titleWidth);
    cell.transition().style("opacity", 1);
  }

  legend.scale = function (_) {
    if (!arguments.length) return scale;
    scale = _;
    return legend;
  };

  legend.cells = function (_) {
    if (!arguments.length) return cells;

    if (_.length > 1 || _ >= 2) {
      cells = _;
    }

    return legend;
  };

  legend.cellFilter = function (_) {
    if (!arguments.length) return cellFilter;
    cellFilter = _;
    return legend;
  };

  legend.shape = function (_, d) {
    if (!arguments.length) return shape;

    if (_ == "rect" || _ == "circle" || _ == "line" || _ == "path" && typeof d === "string") {
      shape = _;
      path = d;
    }

    return legend;
  };

  legend.shapeWidth = function (_) {
    if (!arguments.length) return shapeWidth;
    shapeWidth = +_;
    return legend;
  };

  legend.shapeHeight = function (_) {
    if (!arguments.length) return shapeHeight;
    shapeHeight = +_;
    return legend;
  };

  legend.shapeRadius = function (_) {
    if (!arguments.length) return shapeRadius;
    shapeRadius = +_;
    return legend;
  };

  legend.shapePadding = function (_) {
    if (!arguments.length) return shapePadding;
    shapePadding = +_;
    return legend;
  };

  legend.labels = function (_) {
    if (!arguments.length) return labels;
    labels = _;
    return legend;
  };

  legend.labelAlign = function (_) {
    if (!arguments.length) return labelAlign;

    if (_ == "start" || _ == "end" || _ == "middle") {
      labelAlign = _;
    }

    return legend;
  };

  legend.locale = function (_) {
    if (!arguments.length) return locale;
    locale = (0, _d3Format.formatLocale)(_);
    return legend;
  };

  legend.labelFormat = function (_) {
    if (!arguments.length) return legend.locale().format(specifier);
    specifier = (0, _d3Format.formatSpecifier)(_);
    return legend;
  };

  legend.labelOffset = function (_) {
    if (!arguments.length) return labelOffset;
    labelOffset = +_;
    return legend;
  };

  legend.labelDelimiter = function (_) {
    if (!arguments.length) return labelDelimiter;
    labelDelimiter = _;
    return legend;
  };

  legend.labelWrap = function (_) {
    if (!arguments.length) return labelWrap;
    labelWrap = _;
    return legend;
  };

  legend.useClass = function (_) {
    if (!arguments.length) return useClass;

    if (_ === true || _ === false) {
      useClass = _;
    }

    return legend;
  };

  legend.orient = function (_) {
    if (!arguments.length) return orient;
    _ = _.toLowerCase();

    if (_ == "horizontal" || _ == "vertical") {
      orient = _;
    }

    return legend;
  };

  legend.ascending = function (_) {
    if (!arguments.length) return ascending;
    ascending = !!_;
    return legend;
  };

  legend.classPrefix = function (_) {
    if (!arguments.length) return classPrefix;
    classPrefix = _;
    return legend;
  };

  legend.title = function (_) {
    if (!arguments.length) return title;
    title = _;
    return legend;
  };

  legend.titleWidth = function (_) {
    if (!arguments.length) return titleWidth;
    titleWidth = _;
    return legend;
  };

  legend.textWrap = function (_) {
    if (!arguments.length) return textWrap;
    textWrap = _;
    return legend;
  };

  legend.on = function () {
    var value = legendDispatcher.on.apply(legendDispatcher, arguments);
    return value === legendDispatcher ? legend : value;
  };

  return legend;
}

function size() {
  var scale = (0, _d3Scale.scaleLinear)(),
      shape = "rect",
      shapeWidth = 15,
      shapePadding = 2,
      cells = [5],
      cellFilter = void 0,
      labels = [],
      classPrefix = "",
      title = "",
      locale = helper.d3_defaultLocale,
      specifier = helper.d3_defaultFormatSpecifier,
      labelOffset = 10,
      labelAlign = "middle",
      labelDelimiter = helper.d3_defaultDelimiter,
      labelWrap = void 0,
      orient = "vertical",
      ascending = false,
      path = void 0,
      titleWidth = void 0,
      legendDispatcher = (0, _d3Dispatch.dispatch)("cellover", "cellout", "cellclick");

  function legend(svg) {
    var type = helper.d3_calcType(scale, ascending, cells, labels, locale.format(specifier), labelDelimiter),
        legendG = svg.selectAll("g").data([scale]);

    if (cellFilter) {
      helper.d3_filterCells(type, cellFilter);
    }

    legendG.enter().append("g").attr("class", classPrefix + "legendCells");
    var cell = svg.select("." + classPrefix + "legendCells").selectAll("." + classPrefix + "cell").data(type.data);
    var cellEnter = cell.enter().append("g").attr("class", classPrefix + "cell");
    cellEnter.append(shape).attr("class", classPrefix + "swatch");
    var shapes = svg.selectAll("g." + classPrefix + "cell " + shape + "." + classPrefix + "swatch"); //add event handlers

    helper.d3_addEvents(cellEnter, legendDispatcher);
    cell.exit().transition().style("opacity", 0).remove();
    shapes.exit().transition().style("opacity", 0).remove();
    shapes = shapes.merge(shapes); //creates shape

    if (shape === "line") {
      helper.d3_drawShapes(shape, shapes, 0, shapeWidth);
      shapes.attr("stroke-width", type.feature);
    } else {
      helper.d3_drawShapes(shape, shapes, type.feature, type.feature, type.feature, path);
    }

    var text = helper.d3_addText(svg, cellEnter, type.labels, classPrefix, labelWrap); // we need to merge the selection, otherwise changes in the legend (e.g. change of orientation) are applied only to the new cells and not the existing ones.

    cell = cellEnter.merge(cell); //sets placement

    var textSize = text.nodes().map(function (d) {
      return d.getBBox();
    }),
        shapeSize = shapes.nodes().map(function (d, i) {
      var bbox = d.getBBox();
      var stroke = scale(type.data[i]);

      if (shape === "line" && orient === "horizontal") {
        bbox.height = bbox.height + stroke;
      } else if (shape === "line" && orient === "vertical") {
        bbox.width = bbox.width;
      }

      return bbox;
    });
    var maxH = (0, _d3Array.max)(shapeSize, function (d) {
      return d.height + d.y;
    }),
        maxW = (0, _d3Array.max)(shapeSize, function (d) {
      return d.width + d.x;
    });
    var cellTrans = void 0,
        textTrans = void 0,
        textAlign = labelAlign == "start" ? 0 : labelAlign == "middle" ? 0.5 : 1; //positions cells and text

    if (orient === "vertical") {
      (function () {
        var cellSize = textSize.map(function (d, i) {
          return Math.max(d.height, shapeSize[i].height);
        });
        var y = shape == "circle" || shape == "line" ? shapeSize[0].height / 2 : 0;

        cellTrans = function cellTrans(d, i) {
          var height = (0, _d3Array.sum)(cellSize.slice(0, i));
          return "translate(0, " + (y + height + i * shapePadding) + ")";
        };

        textTrans = function textTrans(d, i) {
          return "translate( " + (maxW + labelOffset) + ",\n          " + (shapeSize[i].y + shapeSize[i].height / 2 + 5) + ")";
        };
      })();
    } else if (orient === "horizontal") {
      (function () {
        cellTrans = function cellTrans(d, i) {
          var width = (0, _d3Array.sum)(shapeSize.slice(0, i), function (d) {
            return d.width;
          });
          var y = shape == "circle" || shape == "line" ? maxH / 2 : 0;
          return "translate(" + (width + i * shapePadding) + ", " + y + ")";
        };

        var offset = shape == "line" ? maxH / 2 : maxH;

        textTrans = function textTrans(d, i) {
          return "translate( " + (shapeSize[i].width * textAlign + shapeSize[i].x) + ",\n              " + (offset + labelOffset) + ")";
        };
      })();
    }

    helper.d3_placement(orient, cell, cellTrans, text, textTrans, labelAlign);
    helper.d3_title(svg, title, classPrefix, titleWidth);
    cell.transition().style("opacity", 1);
  }

  legend.scale = function (_) {
    if (!arguments.length) return scale;
    scale = _;
    return legend;
  };

  legend.cells = function (_) {
    if (!arguments.length) return cells;

    if (_.length > 1 || _ >= 2) {
      cells = _;
    }

    return legend;
  };

  legend.cellFilter = function (_) {
    if (!arguments.length) return cellFilter;
    cellFilter = _;
    return legend;
  };

  legend.shape = function (_, d) {
    if (!arguments.length) return shape;

    if (_ == "rect" || _ == "circle" || _ == "line") {
      shape = _;
      path = d;
    }

    return legend;
  };

  legend.shapeWidth = function (_) {
    if (!arguments.length) return shapeWidth;
    shapeWidth = +_;
    return legend;
  };

  legend.shapePadding = function (_) {
    if (!arguments.length) return shapePadding;
    shapePadding = +_;
    return legend;
  };

  legend.labels = function (_) {
    if (!arguments.length) return labels;
    labels = _;
    return legend;
  };

  legend.labelAlign = function (_) {
    if (!arguments.length) return labelAlign;

    if (_ == "start" || _ == "end" || _ == "middle") {
      labelAlign = _;
    }

    return legend;
  };

  legend.locale = function (_) {
    if (!arguments.length) return locale;
    locale = (0, _d3Format.formatLocale)(_);
    return legend;
  };

  legend.labelFormat = function (_) {
    if (!arguments.length) return legend.locale().format(specifier);
    specifier = (0, _d3Format.formatSpecifier)(_);
    return legend;
  };

  legend.labelOffset = function (_) {
    if (!arguments.length) return labelOffset;
    labelOffset = +_;
    return legend;
  };

  legend.labelDelimiter = function (_) {
    if (!arguments.length) return labelDelimiter;
    labelDelimiter = _;
    return legend;
  };

  legend.labelWrap = function (_) {
    if (!arguments.length) return labelWrap;
    labelWrap = _;
    return legend;
  };

  legend.orient = function (_) {
    if (!arguments.length) return orient;
    _ = _.toLowerCase();

    if (_ == "horizontal" || _ == "vertical") {
      orient = _;
    }

    return legend;
  };

  legend.ascending = function (_) {
    if (!arguments.length) return ascending;
    ascending = !!_;
    return legend;
  };

  legend.classPrefix = function (_) {
    if (!arguments.length) return classPrefix;
    classPrefix = _;
    return legend;
  };

  legend.title = function (_) {
    if (!arguments.length) return title;
    title = _;
    return legend;
  };

  legend.titleWidth = function (_) {
    if (!arguments.length) return titleWidth;
    titleWidth = _;
    return legend;
  };

  legend.on = function () {
    var value = legendDispatcher.on.apply(legendDispatcher, arguments);
    return value === legendDispatcher ? legend : value;
  };

  return legend;
}

function symbol() {
  var scale = (0, _d3Scale.scaleLinear)(),
      shape = "path",
      shapeWidth = 15,
      shapeHeight = 15,
      shapeRadius = 10,
      shapePadding = 5,
      cells = [5],
      cellFilter = void 0,
      labels = [],
      classPrefix = "",
      title = "",
      locale = helper.d3_defaultLocale,
      specifier = helper.d3_defaultFormatSpecifier,
      labelAlign = "middle",
      labelOffset = 10,
      labelDelimiter = helper.d3_defaultDelimiter,
      labelWrap = void 0,
      orient = "vertical",
      ascending = false,
      titleWidth = void 0,
      legendDispatcher = (0, _d3Dispatch.dispatch)("cellover", "cellout", "cellclick");

  function legend(svg) {
    var type = helper.d3_calcType(scale, ascending, cells, labels, locale.format(specifier), labelDelimiter),
        legendG = svg.selectAll("g").data([scale]);

    if (cellFilter) {
      helper.d3_filterCells(type, cellFilter);
    }

    legendG.enter().append("g").attr("class", classPrefix + "legendCells");
    var cell = svg.select("." + classPrefix + "legendCells").selectAll("." + classPrefix + "cell").data(type.data);
    var cellEnter = cell.enter().append("g").attr("class", classPrefix + "cell");
    cellEnter.append(shape).attr("class", classPrefix + "swatch");
    var shapes = svg.selectAll("g." + classPrefix + "cell " + shape + "." + classPrefix + "swatch"); //add event handlers

    helper.d3_addEvents(cellEnter, legendDispatcher); //remove old shapes

    cell.exit().transition().style("opacity", 0).remove();
    shapes.exit().transition().style("opacity", 0).remove();
    shapes = shapes.merge(shapes);
    helper.d3_drawShapes(shape, shapes, shapeHeight, shapeWidth, shapeRadius, type.feature);
    var text = helper.d3_addText(svg, cellEnter, type.labels, classPrefix, labelWrap); // we need to merge the selection, otherwise changes in the legend (e.g. change of orientation) are applied only to the new cells and not the existing ones.

    cell = cellEnter.merge(cell); // sets placement

    var textSize = text.nodes().map(function (d) {
      return d.getBBox();
    }),
        shapeSize = shapes.nodes().map(function (d) {
      return d.getBBox();
    });
    var maxH = (0, _d3Array.max)(shapeSize, function (d) {
      return d.height;
    }),
        maxW = (0, _d3Array.max)(shapeSize, function (d) {
      return d.width;
    });
    var cellTrans = void 0,
        textTrans = void 0,
        textAlign = labelAlign == "start" ? 0 : labelAlign == "middle" ? 0.5 : 1; //positions cells and text

    if (orient === "vertical") {
      (function () {
        var cellSize = textSize.map(function (d, i) {
          return Math.max(maxH, d.height);
        });

        cellTrans = function cellTrans(d, i) {
          var height = (0, _d3Array.sum)(cellSize.slice(0, i));
          return "translate(0, " + (height + i * shapePadding) + " )";
        };

        textTrans = function textTrans(d, i) {
          return "translate( " + (maxW + labelOffset) + ",\n              " + (shapeSize[i].y + shapeSize[i].height / 2 + 5) + ")";
        };
      })();
    } else if (orient === "horizontal") {
      cellTrans = function cellTrans(d, i) {
        return "translate( " + i * (maxW + shapePadding) + ",0)";
      };

      textTrans = function textTrans(d, i) {
        return "translate( " + (shapeSize[i].width * textAlign + shapeSize[i].x) + ",\n              " + (maxH + labelOffset) + ")";
      };
    }

    helper.d3_placement(orient, cell, cellTrans, text, textTrans, labelAlign);
    helper.d3_title(svg, title, classPrefix, titleWidth);
    cell.transition().style("opacity", 1);
  }

  legend.scale = function (_) {
    if (!arguments.length) return scale;
    scale = _;
    return legend;
  };

  legend.cells = function (_) {
    if (!arguments.length) return cells;

    if (_.length > 1 || _ >= 2) {
      cells = _;
    }

    return legend;
  };

  legend.cellFilter = function (_) {
    if (!arguments.length) return cellFilter;
    cellFilter = _;
    return legend;
  };

  legend.shapePadding = function (_) {
    if (!arguments.length) return shapePadding;
    shapePadding = +_;
    return legend;
  };

  legend.labels = function (_) {
    if (!arguments.length) return labels;
    labels = _;
    return legend;
  };

  legend.labelAlign = function (_) {
    if (!arguments.length) return labelAlign;

    if (_ == "start" || _ == "end" || _ == "middle") {
      labelAlign = _;
    }

    return legend;
  };

  legend.locale = function (_) {
    if (!arguments.length) return locale;
    locale = (0, _d3Format.formatLocale)(_);
    return legend;
  };

  legend.labelFormat = function (_) {
    if (!arguments.length) return legend.locale().format(specifier);
    specifier = (0, _d3Format.formatSpecifier)(_);
    return legend;
  };

  legend.labelOffset = function (_) {
    if (!arguments.length) return labelOffset;
    labelOffset = +_;
    return legend;
  };

  legend.labelDelimiter = function (_) {
    if (!arguments.length) return labelDelimiter;
    labelDelimiter = _;
    return legend;
  };

  legend.labelWrap = function (_) {
    if (!arguments.length) return labelWrap;
    labelWrap = _;
    return legend;
  };

  legend.orient = function (_) {
    if (!arguments.length) return orient;
    _ = _.toLowerCase();

    if (_ == "horizontal" || _ == "vertical") {
      orient = _;
    }

    return legend;
  };

  legend.ascending = function (_) {
    if (!arguments.length) return ascending;
    ascending = !!_;
    return legend;
  };

  legend.classPrefix = function (_) {
    if (!arguments.length) return classPrefix;
    classPrefix = _;
    return legend;
  };

  legend.title = function (_) {
    if (!arguments.length) return title;
    title = _;
    return legend;
  };

  legend.titleWidth = function (_) {
    if (!arguments.length) return titleWidth;
    titleWidth = _;
    return legend;
  };

  legend.on = function () {
    var value = legendDispatcher.on.apply(legendDispatcher, arguments);
    return value === legendDispatcher ? legend : value;
  };

  return legend;
}

var thresholdLabels = function thresholdLabels(_ref) {
  var i = _ref.i,
      genLength = _ref.genLength,
      generatedLabels = _ref.generatedLabels,
      labelDelimiter = _ref.labelDelimiter;

  if (i === 0) {
    var values = generatedLabels[i].split(" " + labelDelimiter + " ");
    return "Less than " + values[1];
  } else if (i === genLength - 1) {
    var _values = generatedLabels[i].split(" " + labelDelimiter + " ");

    return _values[0] + " or more";
  }

  return generatedLabels[i];
};

var legendHelpers = {
  thresholdLabels: thresholdLabels
};
exports.legendHelpers = legendHelpers;
var index = {
  legendColor: color,
  legendSize: size,
  legendSymbol: symbol,
  legendHelpers: legendHelpers
};
var _default = index;
exports.default = _default;
},{"d3-selection":"../node_modules/d3-svg-legend/node_modules/d3-selection/index.js","d3-format":"../node_modules/d3-svg-legend/node_modules/d3-format/index.js","d3-dispatch":"../node_modules/d3-svg-legend/node_modules/d3-dispatch/index.js","d3-scale":"../node_modules/d3-svg-legend/node_modules/d3-scale/index.js","d3-array":"../node_modules/d3-svg-legend/node_modules/d3-array/index.js"}],"data/animated_map_dtp1.csv":[function(require,module,exports) {
module.exports = "/animated_map_dtp1.29f76341.csv";
},{}],"data/animated_map_dtp3.csv":[function(require,module,exports) {
module.exports = "/animated_map_dtp3.c8278364.csv";
},{}],"components/punchColorScale.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.punchColorScale = void 0;

var _d = require("d3");

var punchColorScale = (0, _d.scaleThreshold)().domain([0.6, 0.7, 0.8, 0.9, 0.95, 1]).range(["#d73027", "#f46d43", "#fdae61", "#fee08b", "#66bd63", "#1a9850"]);
exports.punchColorScale = punchColorScale;
},{"d3":"../node_modules/d3/index.js"}],"../node_modules/d3-geo-projection/src/math.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sinci = sinci;
exports.asin = asin;
exports.acos = acos;
exports.sqrt = sqrt;
exports.tanh = tanh;
exports.sinh = sinh;
exports.cosh = cosh;
exports.arsinh = arsinh;
exports.arcosh = arcosh;
exports.radians = exports.degrees = exports.tau = exports.sqrtPi = exports.sqrt2 = exports.sqrt1_2 = exports.quarterPi = exports.halfPi = exports.pi = exports.epsilon2 = exports.epsilon = exports.tan = exports.sin = exports.sign = exports.round = exports.pow = exports.min = exports.max = exports.log = exports.floor = exports.exp = exports.cos = exports.ceil = exports.atan2 = exports.atan = exports.abs = void 0;
var abs = Math.abs;
exports.abs = abs;
var atan = Math.atan;
exports.atan = atan;
var atan2 = Math.atan2;
exports.atan2 = atan2;
var ceil = Math.ceil;
exports.ceil = ceil;
var cos = Math.cos;
exports.cos = cos;
var exp = Math.exp;
exports.exp = exp;
var floor = Math.floor;
exports.floor = floor;
var log = Math.log;
exports.log = log;
var max = Math.max;
exports.max = max;
var min = Math.min;
exports.min = min;
var pow = Math.pow;
exports.pow = pow;
var round = Math.round;
exports.round = round;

var sign = Math.sign || function (x) {
  return x > 0 ? 1 : x < 0 ? -1 : 0;
};

exports.sign = sign;
var sin = Math.sin;
exports.sin = sin;
var tan = Math.tan;
exports.tan = tan;
var epsilon = 1e-6;
exports.epsilon = epsilon;
var epsilon2 = 1e-12;
exports.epsilon2 = epsilon2;
var pi = Math.PI;
exports.pi = pi;
var halfPi = pi / 2;
exports.halfPi = halfPi;
var quarterPi = pi / 4;
exports.quarterPi = quarterPi;
var sqrt1_2 = Math.SQRT1_2;
exports.sqrt1_2 = sqrt1_2;
var sqrt2 = sqrt(2);
exports.sqrt2 = sqrt2;
var sqrtPi = sqrt(pi);
exports.sqrtPi = sqrtPi;
var tau = pi * 2;
exports.tau = tau;
var degrees = 180 / pi;
exports.degrees = degrees;
var radians = pi / 180;
exports.radians = radians;

function sinci(x) {
  return x ? x / Math.sin(x) : 1;
}

function asin(x) {
  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);
}

function acos(x) {
  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
}

function sqrt(x) {
  return x > 0 ? Math.sqrt(x) : 0;
}

function tanh(x) {
  x = exp(2 * x);
  return (x - 1) / (x + 1);
}

function sinh(x) {
  return (exp(x) - exp(-x)) / 2;
}

function cosh(x) {
  return (exp(x) + exp(-x)) / 2;
}

function arsinh(x) {
  return log(x + sqrt(x * x + 1));
}

function arcosh(x) {
  return log(x + sqrt(x * x - 1));
}
},{}],"../node_modules/d3-geo-projection/src/airy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.airyRaw = airyRaw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

function airyRaw(beta) {
  var tanBeta_2 = (0, _math.tan)(beta / 2),
      b = 2 * (0, _math.log)((0, _math.cos)(beta / 2)) / (tanBeta_2 * tanBeta_2);

  function forward(x, y) {
    var cosx = (0, _math.cos)(x),
        cosy = (0, _math.cos)(y),
        siny = (0, _math.sin)(y),
        cosz = cosy * cosx,
        k = -((1 - cosz ? (0, _math.log)((1 + cosz) / 2) / (1 - cosz) : -0.5) + b / (1 + cosz));
    return [k * cosy * (0, _math.sin)(x), k * siny];
  }

  forward.invert = function (x, y) {
    var r = (0, _math.sqrt)(x * x + y * y),
        z = -beta / 2,
        i = 50,
        delta;
    if (!r) return [0, 0];

    do {
      var z_2 = z / 2,
          cosz_2 = (0, _math.cos)(z_2),
          sinz_2 = (0, _math.sin)(z_2),
          tanz_2 = (0, _math.tan)(z_2),
          lnsecz_2 = (0, _math.log)(1 / cosz_2);
      z -= delta = (2 / tanz_2 * lnsecz_2 - b * tanz_2 - r) / (-lnsecz_2 / (sinz_2 * sinz_2) + 1 - b / (2 * cosz_2 * cosz_2));
    } while ((0, _math.abs)(delta) > _math.epsilon && --i > 0);

    var sinz = (0, _math.sin)(z);
    return [(0, _math.atan2)(x * sinz, r * (0, _math.cos)(z)), (0, _math.asin)(y * sinz / r)];
  };

  return forward;
}

function _default() {
  var beta = _math.halfPi,
      m = (0, _d3Geo.geoProjectionMutator)(airyRaw),
      p = m(beta);

  p.radius = function (_) {
    return arguments.length ? m(beta = _ * _math.radians) : beta * _math.degrees;
  };

  return p.scale(179.976).clipAngle(147);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/aitoff.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.aitoffRaw = aitoffRaw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

function aitoffRaw(x, y) {
  var cosy = (0, _math.cos)(y),
      sincia = (0, _math.sinci)((0, _math.acos)(cosy * (0, _math.cos)(x /= 2)));
  return [2 * cosy * (0, _math.sin)(x) * sincia, (0, _math.sin)(y) * sincia];
} // Abort if [x, y] is not within an ellipse centered at [0, 0] with
// semi-major axis pi and semi-minor axis pi/2.


aitoffRaw.invert = function (x, y) {
  if (x * x + 4 * y * y > _math.pi * _math.pi + _math.epsilon) return;
  var x1 = x,
      y1 = y,
      i = 25;

  do {
    var sinx = (0, _math.sin)(x1),
        sinx_2 = (0, _math.sin)(x1 / 2),
        cosx_2 = (0, _math.cos)(x1 / 2),
        siny = (0, _math.sin)(y1),
        cosy = (0, _math.cos)(y1),
        sin_2y = (0, _math.sin)(2 * y1),
        sin2y = siny * siny,
        cos2y = cosy * cosy,
        sin2x_2 = sinx_2 * sinx_2,
        c = 1 - cos2y * cosx_2 * cosx_2,
        e = c ? (0, _math.acos)(cosy * cosx_2) * (0, _math.sqrt)(f = 1 / c) : f = 0,
        f,
        fx = 2 * e * cosy * sinx_2 - x,
        fy = e * siny - y,
        dxdx = f * (cos2y * sin2x_2 + e * cosy * cosx_2 * sin2y),
        dxdy = f * (0.5 * sinx * sin_2y - e * 2 * siny * sinx_2),
        dydx = f * 0.25 * (sin_2y * sinx_2 - e * siny * cos2y * sinx),
        dydy = f * (sin2y * cosx_2 + e * sin2x_2 * cosy),
        z = dxdy * dydx - dydy * dxdx;
    if (!z) break;
    var dx = (fy * dxdy - fx * dydy) / z,
        dy = (fx * dydx - fy * dxdx) / z;
    x1 -= dx, y1 -= dy;
  } while (((0, _math.abs)(dx) > _math.epsilon || (0, _math.abs)(dy) > _math.epsilon) && --i > 0);

  return [x1, y1];
};

function _default() {
  return (0, _d3Geo.geoProjection)(aitoffRaw).scale(152.63);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/armadillo.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.armadilloRaw = armadilloRaw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

function armadilloRaw(phi0) {
  var sinPhi0 = (0, _math.sin)(phi0),
      cosPhi0 = (0, _math.cos)(phi0),
      sPhi0 = phi0 >= 0 ? 1 : -1,
      tanPhi0 = (0, _math.tan)(sPhi0 * phi0),
      k = (1 + sinPhi0 - cosPhi0) / 2;

  function forward(lambda, phi) {
    var cosPhi = (0, _math.cos)(phi),
        cosLambda = (0, _math.cos)(lambda /= 2);
    return [(1 + cosPhi) * (0, _math.sin)(lambda), (sPhi0 * phi > -(0, _math.atan2)(cosLambda, tanPhi0) - 1e-3 ? 0 : -sPhi0 * 10) + k + (0, _math.sin)(phi) * cosPhi0 - (1 + cosPhi) * sinPhi0 * cosLambda // TODO D3 core should allow null or [NaN, NaN] to be returned.
    ];
  }

  forward.invert = function (x, y) {
    var lambda = 0,
        phi = 0,
        i = 50;

    do {
      var cosLambda = (0, _math.cos)(lambda),
          sinLambda = (0, _math.sin)(lambda),
          cosPhi = (0, _math.cos)(phi),
          sinPhi = (0, _math.sin)(phi),
          A = 1 + cosPhi,
          fx = A * sinLambda - x,
          fy = k + sinPhi * cosPhi0 - A * sinPhi0 * cosLambda - y,
          dxdLambda = A * cosLambda / 2,
          dxdPhi = -sinLambda * sinPhi,
          dydLambda = sinPhi0 * A * sinLambda / 2,
          dydPhi = cosPhi0 * cosPhi + sinPhi0 * cosLambda * sinPhi,
          denominator = dxdPhi * dydLambda - dydPhi * dxdLambda,
          dLambda = (fy * dxdPhi - fx * dydPhi) / denominator / 2,
          dPhi = (fx * dydLambda - fy * dxdLambda) / denominator;
      lambda -= dLambda, phi -= dPhi;
    } while (((0, _math.abs)(dLambda) > _math.epsilon || (0, _math.abs)(dPhi) > _math.epsilon) && --i > 0);

    return sPhi0 * phi > -(0, _math.atan2)((0, _math.cos)(lambda), tanPhi0) - 1e-3 ? [lambda * 2, phi] : null;
  };

  return forward;
}

function _default() {
  var phi0 = 20 * _math.radians,
      sPhi0 = phi0 >= 0 ? 1 : -1,
      tanPhi0 = (0, _math.tan)(sPhi0 * phi0),
      m = (0, _d3Geo.geoProjectionMutator)(armadilloRaw),
      p = m(phi0),
      stream_ = p.stream;

  p.parallel = function (_) {
    if (!arguments.length) return phi0 * _math.degrees;
    tanPhi0 = (0, _math.tan)((sPhi0 = (phi0 = _ * _math.radians) >= 0 ? 1 : -1) * phi0);
    return m(phi0);
  };

  p.stream = function (stream) {
    var rotate = p.rotate(),
        rotateStream = stream_(stream),
        sphereStream = (p.rotate([0, 0]), stream_(stream)),
        precision = p.precision();
    p.rotate(rotate);

    rotateStream.sphere = function () {
      sphereStream.polygonStart(), sphereStream.lineStart();

      for (var lambda = sPhi0 * -180; sPhi0 * lambda < 180; lambda += sPhi0 * 90) sphereStream.point(lambda, sPhi0 * 90);

      if (phi0) while (sPhi0 * (lambda -= 3 * sPhi0 * precision) >= -180) {
        sphereStream.point(lambda, sPhi0 * -(0, _math.atan2)((0, _math.cos)(lambda * _math.radians / 2), tanPhi0) * _math.degrees);
      }
      sphereStream.lineEnd(), sphereStream.polygonEnd();
    };

    return rotateStream;
  };

  return p.scale(218.695).center([0, 28.0974]);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/august.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.augustRaw = augustRaw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

function augustRaw(lambda, phi) {
  var tanPhi = (0, _math.tan)(phi / 2),
      k = (0, _math.sqrt)(1 - tanPhi * tanPhi),
      c = 1 + k * (0, _math.cos)(lambda /= 2),
      x = (0, _math.sin)(lambda) * k / c,
      y = tanPhi / c,
      x2 = x * x,
      y2 = y * y;
  return [4 / 3 * x * (3 + x2 - 3 * y2), 4 / 3 * y * (3 + 3 * x2 - y2)];
}

augustRaw.invert = function (x, y) {
  x *= 3 / 8, y *= 3 / 8;
  if (!x && (0, _math.abs)(y) > 1) return null;
  var x2 = x * x,
      y2 = y * y,
      s = 1 + x2 + y2,
      sin3Eta = (0, _math.sqrt)((s - (0, _math.sqrt)(s * s - 4 * y * y)) / 2),
      eta = (0, _math.asin)(sin3Eta) / 3,
      xi = sin3Eta ? (0, _math.arcosh)((0, _math.abs)(y / sin3Eta)) / 3 : (0, _math.arsinh)((0, _math.abs)(x)) / 3,
      cosEta = (0, _math.cos)(eta),
      coshXi = (0, _math.cosh)(xi),
      d = coshXi * coshXi - cosEta * cosEta;
  return [(0, _math.sign)(x) * 2 * (0, _math.atan2)((0, _math.sinh)(xi) * cosEta, 0.25 - d), (0, _math.sign)(y) * 2 * (0, _math.atan2)(coshXi * (0, _math.sin)(eta), 0.25 + d)];
};

function _default() {
  return (0, _d3Geo.geoProjection)(augustRaw).scale(66.1603);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/baker.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bakerRaw = bakerRaw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

var sqrt8 = (0, _math.sqrt)(8),
    phi0 = (0, _math.log)(1 + _math.sqrt2);

function bakerRaw(lambda, phi) {
  var phi0 = (0, _math.abs)(phi);
  return phi0 < _math.quarterPi ? [lambda, (0, _math.log)((0, _math.tan)(_math.quarterPi + phi / 2))] : [lambda * (0, _math.cos)(phi0) * (2 * _math.sqrt2 - 1 / (0, _math.sin)(phi0)), (0, _math.sign)(phi) * (2 * _math.sqrt2 * (phi0 - _math.quarterPi) - (0, _math.log)((0, _math.tan)(phi0 / 2)))];
}

bakerRaw.invert = function (x, y) {
  if ((y0 = (0, _math.abs)(y)) < phi0) return [x, 2 * (0, _math.atan)((0, _math.exp)(y)) - _math.halfPi];
  var phi = _math.quarterPi,
      i = 25,
      delta,
      y0;

  do {
    var cosPhi_2 = (0, _math.cos)(phi / 2),
        tanPhi_2 = (0, _math.tan)(phi / 2);
    phi -= delta = (sqrt8 * (phi - _math.quarterPi) - (0, _math.log)(tanPhi_2) - y0) / (sqrt8 - cosPhi_2 * cosPhi_2 / (2 * tanPhi_2));
  } while ((0, _math.abs)(delta) > _math.epsilon2 && --i > 0);

  return [x / ((0, _math.cos)(phi) * (sqrt8 - 1 / (0, _math.sin)(phi))), (0, _math.sign)(y) * phi];
};

function _default() {
  return (0, _d3Geo.geoProjection)(bakerRaw).scale(112.314);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/berghaus.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.berghausRaw = berghausRaw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

function berghausRaw(lobes) {
  var k = 2 * _math.pi / lobes;

  function forward(lambda, phi) {
    var p = (0, _d3Geo.geoAzimuthalEquidistantRaw)(lambda, phi);

    if ((0, _math.abs)(lambda) > _math.halfPi) {
      // back hemisphere
      var theta = (0, _math.atan2)(p[1], p[0]),
          r = (0, _math.sqrt)(p[0] * p[0] + p[1] * p[1]),
          theta0 = k * (0, _math.round)((theta - _math.halfPi) / k) + _math.halfPi,
          alpha = (0, _math.atan2)((0, _math.sin)(theta -= theta0), 2 - (0, _math.cos)(theta)); // angle relative to lobe end


      theta = theta0 + (0, _math.asin)(_math.pi / r * (0, _math.sin)(alpha)) - alpha;
      p[0] = r * (0, _math.cos)(theta);
      p[1] = r * (0, _math.sin)(theta);
    }

    return p;
  }

  forward.invert = function (x, y) {
    var r = (0, _math.sqrt)(x * x + y * y);

    if (r > _math.halfPi) {
      var theta = (0, _math.atan2)(y, x),
          theta0 = k * (0, _math.round)((theta - _math.halfPi) / k) + _math.halfPi,
          s = theta > theta0 ? -1 : 1,
          A = r * (0, _math.cos)(theta0 - theta),
          cotAlpha = 1 / (0, _math.tan)(s * (0, _math.acos)((A - _math.pi) / (0, _math.sqrt)(_math.pi * (_math.pi - 2 * A) + r * r)));

      theta = theta0 + 2 * (0, _math.atan)((cotAlpha + s * (0, _math.sqrt)(cotAlpha * cotAlpha - 3)) / 3);
      x = r * (0, _math.cos)(theta), y = r * (0, _math.sin)(theta);
    }

    return _d3Geo.geoAzimuthalEquidistantRaw.invert(x, y);
  };

  return forward;
}

function _default() {
  var lobes = 5,
      m = (0, _d3Geo.geoProjectionMutator)(berghausRaw),
      p = m(lobes),
      projectionStream = p.stream,
      epsilon = 1e-2,
      cr = -(0, _math.cos)(epsilon * _math.radians),
      sr = (0, _math.sin)(epsilon * _math.radians);

  p.lobes = function (_) {
    return arguments.length ? m(lobes = +_) : lobes;
  };

  p.stream = function (stream) {
    var rotate = p.rotate(),
        rotateStream = projectionStream(stream),
        sphereStream = (p.rotate([0, 0]), projectionStream(stream));
    p.rotate(rotate);

    rotateStream.sphere = function () {
      sphereStream.polygonStart(), sphereStream.lineStart();

      for (var i = 0, delta = 360 / lobes, delta0 = 2 * _math.pi / lobes, phi = 90 - 180 / lobes, phi0 = _math.halfPi; i < lobes; ++i, phi -= delta, phi0 -= delta0) {
        sphereStream.point((0, _math.atan2)(sr * (0, _math.cos)(phi0), cr) * _math.degrees, (0, _math.asin)(sr * (0, _math.sin)(phi0)) * _math.degrees);

        if (phi < -90) {
          sphereStream.point(-90, -180 - phi - epsilon);
          sphereStream.point(-90, -180 - phi + epsilon);
        } else {
          sphereStream.point(90, phi + epsilon);
          sphereStream.point(90, phi - epsilon);
        }
      }

      sphereStream.lineEnd(), sphereStream.polygonEnd();
    };

    return rotateStream;
  };

  return p.scale(87.8076).center([0, 17.1875]).clipAngle(180 - 1e-3);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/hammer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hammerRaw = hammerRaw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

function hammerRaw(A, B) {
  if (arguments.length < 2) B = A;
  if (B === 1) return _d3Geo.geoAzimuthalEqualAreaRaw;
  if (B === Infinity) return hammerQuarticAuthalicRaw;

  function forward(lambda, phi) {
    var coordinates = (0, _d3Geo.geoAzimuthalEqualAreaRaw)(lambda / B, phi);
    coordinates[0] *= A;
    return coordinates;
  }

  forward.invert = function (x, y) {
    var coordinates = _d3Geo.geoAzimuthalEqualAreaRaw.invert(x / A, y);

    coordinates[0] *= B;
    return coordinates;
  };

  return forward;
}

function hammerQuarticAuthalicRaw(lambda, phi) {
  return [lambda * (0, _math.cos)(phi) / (0, _math.cos)(phi /= 2), 2 * (0, _math.sin)(phi)];
}

hammerQuarticAuthalicRaw.invert = function (x, y) {
  var phi = 2 * (0, _math.asin)(y / 2);
  return [x * (0, _math.cos)(phi / 2) / (0, _math.cos)(phi), phi];
};

function _default() {
  var B = 2,
      m = (0, _d3Geo.geoProjectionMutator)(hammerRaw),
      p = m(B);

  p.coefficient = function (_) {
    if (!arguments.length) return B;
    return m(B = +_);
  };

  return p.scale(169.529);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/bertin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bertin1953Raw = bertin1953Raw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _hammer = require("./hammer");

var _math = require("./math");

// Bertin 1953 as a modified Briesemeister
// https://bl.ocks.org/Fil/5b9ee9636dfb6ffa53443c9006beb642
function bertin1953Raw() {
  var hammer = (0, _hammer.hammerRaw)(1.68, 2),
      fu = 1.4,
      k = 12;
  return function (lambda, phi) {
    if (lambda + phi < -fu) {
      var u = (lambda - phi + 1.6) * (lambda + phi + fu) / 8;
      lambda += u;
      phi -= 0.8 * u * (0, _math.sin)(phi + _math.pi / 2);
    }

    var r = hammer(lambda, phi);
    var d = (1 - (0, _math.cos)(lambda * phi)) / k;

    if (r[1] < 0) {
      r[0] *= 1 + d;
    }

    if (r[1] > 0) {
      r[1] *= 1 + d / 1.5 * r[0] * r[0];
    }

    return r;
  };
}

function _default() {
  var p = (0, _d3Geo.geoProjection)(bertin1953Raw());
  p.rotate([-16.5, -42]);
  delete p.rotate;
  return p.scale(176.57).center([7.93, 0.09]);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./hammer":"../node_modules/d3-geo-projection/src/hammer.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/mollweide.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mollweideBromleyTheta = mollweideBromleyTheta;
exports.mollweideBromleyRaw = mollweideBromleyRaw;
exports.default = _default;
exports.mollweideRaw = void 0;

var _d3Geo = require("d3-geo");

var _math = require("./math");

function mollweideBromleyTheta(cp, phi) {
  var cpsinPhi = cp * (0, _math.sin)(phi),
      i = 30,
      delta;

  do phi -= delta = (phi + (0, _math.sin)(phi) - cpsinPhi) / (1 + (0, _math.cos)(phi)); while ((0, _math.abs)(delta) > _math.epsilon && --i > 0);

  return phi / 2;
}

function mollweideBromleyRaw(cx, cy, cp) {
  function forward(lambda, phi) {
    return [cx * lambda * (0, _math.cos)(phi = mollweideBromleyTheta(cp, phi)), cy * (0, _math.sin)(phi)];
  }

  forward.invert = function (x, y) {
    return y = (0, _math.asin)(y / cy), [x / (cx * (0, _math.cos)(y)), (0, _math.asin)((2 * y + (0, _math.sin)(2 * y)) / cp)];
  };

  return forward;
}

var mollweideRaw = mollweideBromleyRaw(_math.sqrt2 / _math.halfPi, _math.sqrt2, _math.pi);
exports.mollweideRaw = mollweideRaw;

function _default() {
  return (0, _d3Geo.geoProjection)(mollweideRaw).scale(169.529);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/boggs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.boggsRaw = boggsRaw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _mollweide = require("./mollweide");

var _math = require("./math");

var k = 2.00276,
    w = 1.11072;

function boggsRaw(lambda, phi) {
  var theta = (0, _mollweide.mollweideBromleyTheta)(_math.pi, phi);
  return [k * lambda / (1 / (0, _math.cos)(phi) + w / (0, _math.cos)(theta)), (phi + _math.sqrt2 * (0, _math.sin)(theta)) / k];
}

boggsRaw.invert = function (x, y) {
  var ky = k * y,
      theta = y < 0 ? -_math.quarterPi : _math.quarterPi,
      i = 25,
      delta,
      phi;

  do {
    phi = ky - _math.sqrt2 * (0, _math.sin)(theta);
    theta -= delta = ((0, _math.sin)(2 * theta) + 2 * theta - _math.pi * (0, _math.sin)(phi)) / (2 * (0, _math.cos)(2 * theta) + 2 + _math.pi * (0, _math.cos)(phi) * _math.sqrt2 * (0, _math.cos)(theta));
  } while ((0, _math.abs)(delta) > _math.epsilon && --i > 0);

  phi = ky - _math.sqrt2 * (0, _math.sin)(theta);
  return [x * (1 / (0, _math.cos)(phi) + w / (0, _math.cos)(theta)) / k, phi];
};

function _default() {
  return (0, _d3Geo.geoProjection)(boggsRaw).scale(160.857);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./mollweide":"../node_modules/d3-geo-projection/src/mollweide.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/parallel1.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

function _default(projectAt) {
  var phi0 = 0,
      m = (0, _d3Geo.geoProjectionMutator)(projectAt),
      p = m(phi0);

  p.parallel = function (_) {
    return arguments.length ? m(phi0 = _ * _math.radians) : phi0 * _math.degrees;
  };

  return p;
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/sinusoidal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sinusoidalRaw = sinusoidalRaw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

function sinusoidalRaw(lambda, phi) {
  return [lambda * (0, _math.cos)(phi), phi];
}

sinusoidalRaw.invert = function (x, y) {
  return [x / (0, _math.cos)(y), y];
};

function _default() {
  return (0, _d3Geo.geoProjection)(sinusoidalRaw).scale(152.63);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/bonne.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bonneRaw = bonneRaw;
exports.default = _default;

var _parallel = _interopRequireDefault(require("./parallel1"));

var _math = require("./math");

var _sinusoidal = require("./sinusoidal");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function bonneRaw(phi0) {
  if (!phi0) return _sinusoidal.sinusoidalRaw;
  var cotPhi0 = 1 / (0, _math.tan)(phi0);

  function forward(lambda, phi) {
    var rho = cotPhi0 + phi0 - phi,
        e = rho ? lambda * (0, _math.cos)(phi) / rho : rho;
    return [rho * (0, _math.sin)(e), cotPhi0 - rho * (0, _math.cos)(e)];
  }

  forward.invert = function (x, y) {
    var rho = (0, _math.sqrt)(x * x + (y = cotPhi0 - y) * y),
        phi = cotPhi0 + phi0 - rho;
    return [rho / (0, _math.cos)(phi) * (0, _math.atan2)(x, y), phi];
  };

  return forward;
}

function _default() {
  return (0, _parallel.default)(bonneRaw).scale(123.082).center([0, 26.1441]).parallel(45);
}
},{"./parallel1":"../node_modules/d3-geo-projection/src/parallel1.js","./math":"../node_modules/d3-geo-projection/src/math.js","./sinusoidal":"../node_modules/d3-geo-projection/src/sinusoidal.js"}],"../node_modules/d3-geo-projection/src/bottomley.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bottomleyRaw = bottomleyRaw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

function bottomleyRaw(sinPsi) {
  function forward(lambda, phi) {
    var rho = _math.halfPi - phi,
        eta = rho ? lambda * sinPsi * (0, _math.sin)(rho) / rho : rho;
    return [rho * (0, _math.sin)(eta) / sinPsi, _math.halfPi - rho * (0, _math.cos)(eta)];
  }

  forward.invert = function (x, y) {
    var x1 = x * sinPsi,
        y1 = _math.halfPi - y,
        rho = (0, _math.sqrt)(x1 * x1 + y1 * y1),
        eta = (0, _math.atan2)(x1, y1);
    return [(rho ? rho / (0, _math.sin)(rho) : 1) * eta / sinPsi, _math.halfPi - rho];
  };

  return forward;
}

function _default() {
  var sinPsi = 0.5,
      m = (0, _d3Geo.geoProjectionMutator)(bottomleyRaw),
      p = m(sinPsi);

  p.fraction = function (_) {
    return arguments.length ? m(sinPsi = +_) : sinPsi;
  };

  return p.scale(158.837);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/bromley.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.bromleyRaw = void 0;

var _d3Geo = require("d3-geo");

var _math = require("./math");

var _mollweide = require("./mollweide");

var bromleyRaw = (0, _mollweide.mollweideBromleyRaw)(1, 4 / _math.pi, _math.pi);
exports.bromleyRaw = bromleyRaw;

function _default() {
  return (0, _d3Geo.geoProjection)(bromleyRaw).scale(152.63);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js","./mollweide":"../node_modules/d3-geo-projection/src/mollweide.js"}],"../node_modules/d3-geo-projection/src/chamberlin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.chamberlinRaw = chamberlinRaw;
exports.chamberlinAfrica = chamberlinAfrica;
exports.default = chamberlin;

var _d3Geo = require("d3-geo");

var _math = require("./math");

// Azimuthal distance.
function distance(dPhi, c1, s1, c2, s2, dLambda) {
  var cosdLambda = (0, _math.cos)(dLambda),
      r;

  if ((0, _math.abs)(dPhi) > 1 || (0, _math.abs)(dLambda) > 1) {
    r = (0, _math.acos)(s1 * s2 + c1 * c2 * cosdLambda);
  } else {
    var sindPhi = (0, _math.sin)(dPhi / 2),
        sindLambda = (0, _math.sin)(dLambda / 2);
    r = 2 * (0, _math.asin)((0, _math.sqrt)(sindPhi * sindPhi + c1 * c2 * sindLambda * sindLambda));
  }

  return (0, _math.abs)(r) > _math.epsilon ? [r, (0, _math.atan2)(c2 * (0, _math.sin)(dLambda), c1 * s2 - s1 * c2 * cosdLambda)] : [0, 0];
} // Angle opposite a, and contained between sides of lengths b and c.


function angle(b, c, a) {
  return (0, _math.acos)((b * b + c * c - a * a) / (2 * b * c));
} // Normalize longitude.


function longitude(lambda) {
  return lambda - 2 * _math.pi * (0, _math.floor)((lambda + _math.pi) / (2 * _math.pi));
}

function chamberlinRaw(p0, p1, p2) {
  var points = [[p0[0], p0[1], (0, _math.sin)(p0[1]), (0, _math.cos)(p0[1])], [p1[0], p1[1], (0, _math.sin)(p1[1]), (0, _math.cos)(p1[1])], [p2[0], p2[1], (0, _math.sin)(p2[1]), (0, _math.cos)(p2[1])]];

  for (var a = points[2], b, i = 0; i < 3; ++i, a = b) {
    b = points[i];
    a.v = distance(b[1] - a[1], a[3], a[2], b[3], b[2], b[0] - a[0]);
    a.point = [0, 0];
  }

  var beta0 = angle(points[0].v[0], points[2].v[0], points[1].v[0]),
      beta1 = angle(points[0].v[0], points[1].v[0], points[2].v[0]),
      beta2 = _math.pi - beta0;
  points[2].point[1] = 0;
  points[0].point[0] = -(points[1].point[0] = points[0].v[0] / 2);
  var mean = [points[2].point[0] = points[0].point[0] + points[2].v[0] * (0, _math.cos)(beta0), 2 * (points[0].point[1] = points[1].point[1] = points[2].v[0] * (0, _math.sin)(beta0))];

  function forward(lambda, phi) {
    var sinPhi = (0, _math.sin)(phi),
        cosPhi = (0, _math.cos)(phi),
        v = new Array(3),
        i; // Compute distance and azimuth from control points.

    for (i = 0; i < 3; ++i) {
      var p = points[i];
      v[i] = distance(phi - p[1], p[3], p[2], cosPhi, sinPhi, lambda - p[0]);
      if (!v[i][0]) return p.point;
      v[i][1] = longitude(v[i][1] - p.v[1]);
    } // Arithmetic mean of interception points.


    var point = mean.slice();

    for (i = 0; i < 3; ++i) {
      var j = i == 2 ? 0 : i + 1;
      var a = angle(points[i].v[0], v[i][0], v[j][0]);
      if (v[i][1] < 0) a = -a;

      if (!i) {
        point[0] += v[i][0] * (0, _math.cos)(a);
        point[1] -= v[i][0] * (0, _math.sin)(a);
      } else if (i == 1) {
        a = beta1 - a;
        point[0] -= v[i][0] * (0, _math.cos)(a);
        point[1] -= v[i][0] * (0, _math.sin)(a);
      } else {
        a = beta2 - a;
        point[0] += v[i][0] * (0, _math.cos)(a);
        point[1] += v[i][0] * (0, _math.sin)(a);
      }
    }

    point[0] /= 3, point[1] /= 3;
    return point;
  }

  return forward;
}

function pointRadians(p) {
  return p[0] *= _math.radians, p[1] *= _math.radians, p;
}

function chamberlinAfrica() {
  return chamberlin([0, 22], [45, 22], [22.5, -22]).scale(380).center([22.5, 2]);
}

function chamberlin(p0, p1, p2) {
  // TODO order matters!
  var c = (0, _d3Geo.geoCentroid)({
    type: "MultiPoint",
    coordinates: [p0, p1, p2]
  }),
      R = [-c[0], -c[1]],
      r = (0, _d3Geo.geoRotation)(R),
      p = (0, _d3Geo.geoProjection)(chamberlinRaw(pointRadians(r(p0)), pointRadians(r(p1)), pointRadians(r(p2)))).rotate(R),
      center = p.center;
  delete p.rotate;

  p.center = function (_) {
    return arguments.length ? center(r(_)) : r.invert(center());
  };

  return p.clipAngle(90);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/collignon.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.collignonRaw = collignonRaw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

function collignonRaw(lambda, phi) {
  var alpha = (0, _math.sqrt)(1 - (0, _math.sin)(phi));
  return [2 / _math.sqrtPi * lambda * alpha, _math.sqrtPi * (1 - alpha)];
}

collignonRaw.invert = function (x, y) {
  var lambda = (lambda = y / _math.sqrtPi - 1) * lambda;
  return [lambda > 0 ? x * (0, _math.sqrt)(_math.pi / lambda) / 2 : 0, (0, _math.asin)(1 - lambda)];
};

function _default() {
  return (0, _d3Geo.geoProjection)(collignonRaw).scale(95.6464).center([0, 30]);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/craig.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.craigRaw = craigRaw;
exports.default = _default;

var _math = require("./math");

var _parallel = _interopRequireDefault(require("./parallel1"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function craigRaw(phi0) {
  var tanPhi0 = (0, _math.tan)(phi0);

  function forward(lambda, phi) {
    return [lambda, (lambda ? lambda / (0, _math.sin)(lambda) : 1) * ((0, _math.sin)(phi) * (0, _math.cos)(lambda) - tanPhi0 * (0, _math.cos)(phi))];
  }

  forward.invert = tanPhi0 ? function (x, y) {
    if (x) y *= (0, _math.sin)(x) / x;
    var cosLambda = (0, _math.cos)(x);
    return [x, 2 * (0, _math.atan2)((0, _math.sqrt)(cosLambda * cosLambda + tanPhi0 * tanPhi0 - y * y) - cosLambda, tanPhi0 - y)];
  } : function (x, y) {
    return [x, (0, _math.asin)(x ? y * (0, _math.tan)(x) / x : y)];
  };
  return forward;
}

function _default() {
  return (0, _parallel.default)(craigRaw).scale(249.828).clipAngle(90);
}
},{"./math":"../node_modules/d3-geo-projection/src/math.js","./parallel1":"../node_modules/d3-geo-projection/src/parallel1.js"}],"../node_modules/d3-geo-projection/src/craster.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.crasterRaw = crasterRaw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

var sqrt3 = (0, _math.sqrt)(3);

function crasterRaw(lambda, phi) {
  return [sqrt3 * lambda * (2 * (0, _math.cos)(2 * phi / 3) - 1) / _math.sqrtPi, sqrt3 * _math.sqrtPi * (0, _math.sin)(phi / 3)];
}

crasterRaw.invert = function (x, y) {
  var phi = 3 * (0, _math.asin)(y / (sqrt3 * _math.sqrtPi));
  return [_math.sqrtPi * x / (sqrt3 * (2 * (0, _math.cos)(2 * phi / 3) - 1)), phi];
};

function _default() {
  return (0, _d3Geo.geoProjection)(crasterRaw).scale(156.19);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/cylindricalEqualArea.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cylindricalEqualAreaRaw = cylindricalEqualAreaRaw;
exports.default = _default;

var _math = require("./math");

var _parallel = _interopRequireDefault(require("./parallel1"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function cylindricalEqualAreaRaw(phi0) {
  var cosPhi0 = (0, _math.cos)(phi0);

  function forward(lambda, phi) {
    return [lambda * cosPhi0, (0, _math.sin)(phi) / cosPhi0];
  }

  forward.invert = function (x, y) {
    return [x / cosPhi0, (0, _math.asin)(y * cosPhi0)];
  };

  return forward;
}

function _default() {
  return (0, _parallel.default)(cylindricalEqualAreaRaw).parallel(38.58) // acos(sqrt(width / height / pi)) * radians
  .scale(195.044); // width / (sqrt(width / height / pi) * 2 * pi)
}
},{"./math":"../node_modules/d3-geo-projection/src/math.js","./parallel1":"../node_modules/d3-geo-projection/src/parallel1.js"}],"../node_modules/d3-geo-projection/src/cylindricalStereographic.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cylindricalStereographicRaw = cylindricalStereographicRaw;
exports.default = _default;

var _math = require("./math");

var _parallel = _interopRequireDefault(require("./parallel1"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function cylindricalStereographicRaw(phi0) {
  var cosPhi0 = (0, _math.cos)(phi0);

  function forward(lambda, phi) {
    return [lambda * cosPhi0, (1 + cosPhi0) * (0, _math.tan)(phi / 2)];
  }

  forward.invert = function (x, y) {
    return [x / cosPhi0, (0, _math.atan)(y / (1 + cosPhi0)) * 2];
  };

  return forward;
}

function _default() {
  return (0, _parallel.default)(cylindricalStereographicRaw).scale(124.75);
}
},{"./math":"../node_modules/d3-geo-projection/src/math.js","./parallel1":"../node_modules/d3-geo-projection/src/parallel1.js"}],"../node_modules/d3-geo-projection/src/eckert1.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.eckert1Raw = eckert1Raw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

function eckert1Raw(lambda, phi) {
  var alpha = (0, _math.sqrt)(8 / (3 * _math.pi));
  return [alpha * lambda * (1 - (0, _math.abs)(phi) / _math.pi), alpha * phi];
}

eckert1Raw.invert = function (x, y) {
  var alpha = (0, _math.sqrt)(8 / (3 * _math.pi)),
      phi = y / alpha;
  return [x / (alpha * (1 - (0, _math.abs)(phi) / _math.pi)), phi];
};

function _default() {
  return (0, _d3Geo.geoProjection)(eckert1Raw).scale(165.664);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/eckert2.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.eckert2Raw = eckert2Raw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

function eckert2Raw(lambda, phi) {
  var alpha = (0, _math.sqrt)(4 - 3 * (0, _math.sin)((0, _math.abs)(phi)));
  return [2 / (0, _math.sqrt)(6 * _math.pi) * lambda * alpha, (0, _math.sign)(phi) * (0, _math.sqrt)(2 * _math.pi / 3) * (2 - alpha)];
}

eckert2Raw.invert = function (x, y) {
  var alpha = 2 - (0, _math.abs)(y) / (0, _math.sqrt)(2 * _math.pi / 3);
  return [x * (0, _math.sqrt)(6 * _math.pi) / (2 * alpha), (0, _math.sign)(y) * (0, _math.asin)((4 - alpha * alpha) / 3)];
};

function _default() {
  return (0, _d3Geo.geoProjection)(eckert2Raw).scale(165.664);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/eckert3.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.eckert3Raw = eckert3Raw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

function eckert3Raw(lambda, phi) {
  var k = (0, _math.sqrt)(_math.pi * (4 + _math.pi));
  return [2 / k * lambda * (1 + (0, _math.sqrt)(1 - 4 * phi * phi / (_math.pi * _math.pi))), 4 / k * phi];
}

eckert3Raw.invert = function (x, y) {
  var k = (0, _math.sqrt)(_math.pi * (4 + _math.pi)) / 2;
  return [x * k / (1 + (0, _math.sqrt)(1 - y * y * (4 + _math.pi) / (4 * _math.pi))), y * k / 2];
};

function _default() {
  return (0, _d3Geo.geoProjection)(eckert3Raw).scale(180.739);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/eckert4.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.eckert4Raw = eckert4Raw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

function eckert4Raw(lambda, phi) {
  var k = (2 + _math.halfPi) * (0, _math.sin)(phi);
  phi /= 2;

  for (var i = 0, delta = Infinity; i < 10 && (0, _math.abs)(delta) > _math.epsilon; i++) {
    var cosPhi = (0, _math.cos)(phi);
    phi -= delta = (phi + (0, _math.sin)(phi) * (cosPhi + 2) - k) / (2 * cosPhi * (1 + cosPhi));
  }

  return [2 / (0, _math.sqrt)(_math.pi * (4 + _math.pi)) * lambda * (1 + (0, _math.cos)(phi)), 2 * (0, _math.sqrt)(_math.pi / (4 + _math.pi)) * (0, _math.sin)(phi)];
}

eckert4Raw.invert = function (x, y) {
  var A = y * (0, _math.sqrt)((4 + _math.pi) / _math.pi) / 2,
      k = (0, _math.asin)(A),
      c = (0, _math.cos)(k);
  return [x / (2 / (0, _math.sqrt)(_math.pi * (4 + _math.pi)) * (1 + c)), (0, _math.asin)((k + A * (c + 2)) / (2 + _math.halfPi))];
};

function _default() {
  return (0, _d3Geo.geoProjection)(eckert4Raw).scale(180.739);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/eckert5.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.eckert5Raw = eckert5Raw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

function eckert5Raw(lambda, phi) {
  return [lambda * (1 + (0, _math.cos)(phi)) / (0, _math.sqrt)(2 + _math.pi), 2 * phi / (0, _math.sqrt)(2 + _math.pi)];
}

eckert5Raw.invert = function (x, y) {
  var k = (0, _math.sqrt)(2 + _math.pi),
      phi = y * k / 2;
  return [k * x / (1 + (0, _math.cos)(phi)), phi];
};

function _default() {
  return (0, _d3Geo.geoProjection)(eckert5Raw).scale(173.044);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/eckert6.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.eckert6Raw = eckert6Raw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

function eckert6Raw(lambda, phi) {
  var k = (1 + _math.halfPi) * (0, _math.sin)(phi);

  for (var i = 0, delta = Infinity; i < 10 && (0, _math.abs)(delta) > _math.epsilon; i++) {
    phi -= delta = (phi + (0, _math.sin)(phi) - k) / (1 + (0, _math.cos)(phi));
  }

  k = (0, _math.sqrt)(2 + _math.pi);
  return [lambda * (1 + (0, _math.cos)(phi)) / k, 2 * phi / k];
}

eckert6Raw.invert = function (x, y) {
  var j = 1 + _math.halfPi,
      k = (0, _math.sqrt)(j / 2);
  return [x * 2 * k / (1 + (0, _math.cos)(y *= k)), (0, _math.asin)((y + (0, _math.sin)(y)) / j)];
};

function _default() {
  return (0, _d3Geo.geoProjection)(eckert6Raw).scale(173.044);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/eisenlohr.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.eisenlohrRaw = eisenlohrRaw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _august = require("./august");

var _math = require("./math");

var eisenlohrK = 3 + 2 * _math.sqrt2;

function eisenlohrRaw(lambda, phi) {
  var s0 = (0, _math.sin)(lambda /= 2),
      c0 = (0, _math.cos)(lambda),
      k = (0, _math.sqrt)((0, _math.cos)(phi)),
      c1 = (0, _math.cos)(phi /= 2),
      t = (0, _math.sin)(phi) / (c1 + _math.sqrt2 * c0 * k),
      c = (0, _math.sqrt)(2 / (1 + t * t)),
      v = (0, _math.sqrt)((_math.sqrt2 * c1 + (c0 + s0) * k) / (_math.sqrt2 * c1 + (c0 - s0) * k));
  return [eisenlohrK * (c * (v - 1 / v) - 2 * (0, _math.log)(v)), eisenlohrK * (c * t * (v + 1 / v) - 2 * (0, _math.atan)(t))];
}

eisenlohrRaw.invert = function (x, y) {
  if (!(p = _august.augustRaw.invert(x / 1.2, y * 1.065))) return null;
  var lambda = p[0],
      phi = p[1],
      i = 20,
      p;
  x /= eisenlohrK, y /= eisenlohrK;

  do {
    var _0 = lambda / 2,
        _1 = phi / 2,
        s0 = (0, _math.sin)(_0),
        c0 = (0, _math.cos)(_0),
        s1 = (0, _math.sin)(_1),
        c1 = (0, _math.cos)(_1),
        cos1 = (0, _math.cos)(phi),
        k = (0, _math.sqrt)(cos1),
        t = s1 / (c1 + _math.sqrt2 * c0 * k),
        t2 = t * t,
        c = (0, _math.sqrt)(2 / (1 + t2)),
        v0 = _math.sqrt2 * c1 + (c0 + s0) * k,
        v1 = _math.sqrt2 * c1 + (c0 - s0) * k,
        v2 = v0 / v1,
        v = (0, _math.sqrt)(v2),
        vm1v = v - 1 / v,
        vp1v = v + 1 / v,
        fx = c * vm1v - 2 * (0, _math.log)(v) - x,
        fy = c * t * vp1v - 2 * (0, _math.atan)(t) - y,
        deltatDeltaLambda = s1 && _math.sqrt1_2 * k * s0 * t2 / s1,
        deltatDeltaPhi = (_math.sqrt2 * c0 * c1 + k) / (2 * (c1 + _math.sqrt2 * c0 * k) * (c1 + _math.sqrt2 * c0 * k) * k),
        deltacDeltat = -0.5 * t * c * c * c,
        deltacDeltaLambda = deltacDeltat * deltatDeltaLambda,
        deltacDeltaPhi = deltacDeltat * deltatDeltaPhi,
        A = (A = 2 * c1 + _math.sqrt2 * k * (c0 - s0)) * A * v,
        deltavDeltaLambda = (_math.sqrt2 * c0 * c1 * k + cos1) / A,
        deltavDeltaPhi = -(_math.sqrt2 * s0 * s1) / (k * A),
        deltaxDeltaLambda = vm1v * deltacDeltaLambda - 2 * deltavDeltaLambda / v + c * (deltavDeltaLambda + deltavDeltaLambda / v2),
        deltaxDeltaPhi = vm1v * deltacDeltaPhi - 2 * deltavDeltaPhi / v + c * (deltavDeltaPhi + deltavDeltaPhi / v2),
        deltayDeltaLambda = t * vp1v * deltacDeltaLambda - 2 * deltatDeltaLambda / (1 + t2) + c * vp1v * deltatDeltaLambda + c * t * (deltavDeltaLambda - deltavDeltaLambda / v2),
        deltayDeltaPhi = t * vp1v * deltacDeltaPhi - 2 * deltatDeltaPhi / (1 + t2) + c * vp1v * deltatDeltaPhi + c * t * (deltavDeltaPhi - deltavDeltaPhi / v2),
        denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda;

    if (!denominator) break;
    var deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator,
        deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;
    lambda -= deltaLambda;
    phi = (0, _math.max)(-_math.halfPi, (0, _math.min)(_math.halfPi, phi - deltaPhi));
  } while (((0, _math.abs)(deltaLambda) > _math.epsilon || (0, _math.abs)(deltaPhi) > _math.epsilon) && --i > 0);

  return (0, _math.abs)((0, _math.abs)(phi) - _math.halfPi) < _math.epsilon ? [0, phi] : i && [lambda, phi];
};

function _default() {
  return (0, _d3Geo.geoProjection)(eisenlohrRaw).scale(62.5271);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./august":"../node_modules/d3-geo-projection/src/august.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/fahey.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.faheyRaw = faheyRaw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

var faheyK = (0, _math.cos)(35 * _math.radians);

function faheyRaw(lambda, phi) {
  var t = (0, _math.tan)(phi / 2);
  return [lambda * faheyK * (0, _math.sqrt)(1 - t * t), (1 + faheyK) * t];
}

faheyRaw.invert = function (x, y) {
  var t = y / (1 + faheyK);
  return [x && x / (faheyK * (0, _math.sqrt)(1 - t * t)), 2 * (0, _math.atan)(t)];
};

function _default() {
  return (0, _d3Geo.geoProjection)(faheyRaw).scale(137.152);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/foucaut.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.foucautRaw = foucautRaw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

function foucautRaw(lambda, phi) {
  var k = phi / 2,
      cosk = (0, _math.cos)(k);
  return [2 * lambda / _math.sqrtPi * (0, _math.cos)(phi) * cosk * cosk, _math.sqrtPi * (0, _math.tan)(k)];
}

foucautRaw.invert = function (x, y) {
  var k = (0, _math.atan)(y / _math.sqrtPi),
      cosk = (0, _math.cos)(k),
      phi = 2 * k;
  return [x * _math.sqrtPi / 2 / ((0, _math.cos)(phi) * cosk * cosk), phi];
};

function _default() {
  return (0, _d3Geo.geoProjection)(foucautRaw).scale(135.264);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/newton.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.solve = solve;

var _math = require("./math");

// Newton-Raphson
// Solve f(x) = y, start from x
function solve(f, y, x) {
  var steps = 100,
      delta,
      f0,
      f1;
  x = x === undefined ? 0 : +x;
  y = +y;

  do {
    f0 = f(x);
    f1 = f(x + _math.epsilon);
    if (f0 === f1) f1 = f0 + _math.epsilon;
    x -= delta = -1 * _math.epsilon * (f0 - y) / (f0 - f1);
  } while (steps-- > 0 && (0, _math.abs)(delta) > _math.epsilon);

  return steps < 0 ? NaN : x;
}
},{"./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/foucautSinusoidal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.foucautSinusoidalRaw = foucautSinusoidalRaw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

var _newton = require("./newton");

function foucautSinusoidalRaw(alpha) {
  var beta = 1 - alpha,
      equatorial = raw(_math.pi, 0)[0] - raw(-_math.pi, 0)[0],
      polar = raw(0, _math.halfPi)[1] - raw(0, -_math.halfPi)[1],
      ratio = (0, _math.sqrt)(2 * polar / equatorial);

  function raw(lambda, phi) {
    var cosphi = (0, _math.cos)(phi),
        sinphi = (0, _math.sin)(phi);
    return [cosphi / (beta + alpha * cosphi) * lambda, beta * phi + alpha * sinphi];
  }

  function forward(lambda, phi) {
    var p = raw(lambda, phi);
    return [p[0] * ratio, p[1] / ratio];
  }

  function forwardMeridian(phi) {
    return forward(0, phi)[1];
  }

  forward.invert = function (x, y) {
    var phi = (0, _newton.solve)(forwardMeridian, y),
        lambda = x / ratio * (alpha + beta / (0, _math.cos)(phi));
    return [lambda, phi];
  };

  return forward;
}

function _default() {
  var alpha = 0.5,
      m = (0, _d3Geo.geoProjectionMutator)(foucautSinusoidalRaw),
      p = m(alpha);

  p.alpha = function (_) {
    return arguments.length ? m(alpha = +_) : alpha;
  };

  return p.scale(168.725);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js","./newton":"../node_modules/d3-geo-projection/src/newton.js"}],"../node_modules/d3-geo-projection/src/gilbert.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

function gilbertForward(point) {
  return [point[0] / 2, (0, _math.asin)((0, _math.tan)(point[1] / 2 * _math.radians)) * _math.degrees];
}

function gilbertInvert(point) {
  return [point[0] * 2, 2 * (0, _math.atan)((0, _math.sin)(point[1] * _math.radians)) * _math.degrees];
}

function _default(projectionType) {
  if (projectionType == null) projectionType = _d3Geo.geoOrthographic;
  var projection = projectionType(),
      equirectangular = (0, _d3Geo.geoEquirectangular)().scale(_math.degrees).precision(0).clipAngle(null).translate([0, 0]); // antimeridian cutting

  function gilbert(point) {
    return projection(gilbertForward(point));
  }

  if (projection.invert) gilbert.invert = function (point) {
    return gilbertInvert(projection.invert(point));
  };

  gilbert.stream = function (stream) {
    var s1 = projection.stream(stream),
        s0 = equirectangular.stream({
      point: function (lambda, phi) {
        s1.point(lambda / 2, (0, _math.asin)((0, _math.tan)(-phi / 2 * _math.radians)) * _math.degrees);
      },
      lineStart: function () {
        s1.lineStart();
      },
      lineEnd: function () {
        s1.lineEnd();
      },
      polygonStart: function () {
        s1.polygonStart();
      },
      polygonEnd: function () {
        s1.polygonEnd();
      }
    });
    s0.sphere = s1.sphere;
    return s0;
  };

  function property(name) {
    gilbert[name] = function () {
      return arguments.length ? (projection[name].apply(projection, arguments), gilbert) : projection[name]();
    };
  }

  gilbert.rotate = function (_) {
    return arguments.length ? (equirectangular.rotate(_), gilbert) : equirectangular.rotate();
  };

  gilbert.center = function (_) {
    return arguments.length ? (projection.center(gilbertForward(_)), gilbert) : gilbertInvert(projection.center());
  };

  property("angle");
  property("clipAngle");
  property("clipExtent");
  property("fitExtent");
  property("fitHeight");
  property("fitSize");
  property("fitWidth");
  property("scale");
  property("translate");
  property("precision");
  return gilbert.scale(249.5);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/gingery.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gingeryRaw = gingeryRaw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

function gingeryRaw(rho, n) {
  var k = 2 * _math.pi / n,
      rho2 = rho * rho;

  function forward(lambda, phi) {
    var p = (0, _d3Geo.geoAzimuthalEquidistantRaw)(lambda, phi),
        x = p[0],
        y = p[1],
        r2 = x * x + y * y;

    if (r2 > rho2) {
      var r = (0, _math.sqrt)(r2),
          theta = (0, _math.atan2)(y, x),
          theta0 = k * (0, _math.round)(theta / k),
          alpha = theta - theta0,
          rhoCosAlpha = rho * (0, _math.cos)(alpha),
          k_ = (rho * (0, _math.sin)(alpha) - alpha * (0, _math.sin)(rhoCosAlpha)) / (_math.halfPi - rhoCosAlpha),
          s_ = gingeryLength(alpha, k_),
          e = (_math.pi - rho) / gingeryIntegrate(s_, rhoCosAlpha, _math.pi);
      x = r;
      var i = 50,
          delta;

      do {
        x -= delta = (rho + gingeryIntegrate(s_, rhoCosAlpha, x) * e - r) / (s_(x) * e);
      } while ((0, _math.abs)(delta) > _math.epsilon && --i > 0);

      y = alpha * (0, _math.sin)(x);
      if (x < _math.halfPi) y -= k_ * (x - _math.halfPi);
      var s = (0, _math.sin)(theta0),
          c = (0, _math.cos)(theta0);
      p[0] = x * c - y * s;
      p[1] = x * s + y * c;
    }

    return p;
  }

  forward.invert = function (x, y) {
    var r2 = x * x + y * y;

    if (r2 > rho2) {
      var r = (0, _math.sqrt)(r2),
          theta = (0, _math.atan2)(y, x),
          theta0 = k * (0, _math.round)(theta / k),
          dTheta = theta - theta0;
      x = r * (0, _math.cos)(dTheta);
      y = r * (0, _math.sin)(dTheta);
      var x_halfPi = x - _math.halfPi,
          sinx = (0, _math.sin)(x),
          alpha = y / sinx,
          delta = x < _math.halfPi ? Infinity : 0,
          i = 10;

      while (true) {
        var rhosinAlpha = rho * (0, _math.sin)(alpha),
            rhoCosAlpha = rho * (0, _math.cos)(alpha),
            sinRhoCosAlpha = (0, _math.sin)(rhoCosAlpha),
            halfPi_RhoCosAlpha = _math.halfPi - rhoCosAlpha,
            k_ = (rhosinAlpha - alpha * sinRhoCosAlpha) / halfPi_RhoCosAlpha,
            s_ = gingeryLength(alpha, k_);
        if ((0, _math.abs)(delta) < _math.epsilon2 || ! --i) break;
        alpha -= delta = (alpha * sinx - k_ * x_halfPi - y) / (sinx - x_halfPi * 2 * (halfPi_RhoCosAlpha * (rhoCosAlpha + alpha * rhosinAlpha * (0, _math.cos)(rhoCosAlpha) - sinRhoCosAlpha) - rhosinAlpha * (rhosinAlpha - alpha * sinRhoCosAlpha)) / (halfPi_RhoCosAlpha * halfPi_RhoCosAlpha));
      }

      r = rho + gingeryIntegrate(s_, rhoCosAlpha, x) * (_math.pi - rho) / gingeryIntegrate(s_, rhoCosAlpha, _math.pi);
      theta = theta0 + alpha;
      x = r * (0, _math.cos)(theta);
      y = r * (0, _math.sin)(theta);
    }

    return _d3Geo.geoAzimuthalEquidistantRaw.invert(x, y);
  };

  return forward;
}

function gingeryLength(alpha, k) {
  return function (x) {
    var y_ = alpha * (0, _math.cos)(x);
    if (x < _math.halfPi) y_ -= k;
    return (0, _math.sqrt)(1 + y_ * y_);
  };
} // Numerical integration: trapezoidal rule.


function gingeryIntegrate(f, a, b) {
  var n = 50,
      h = (b - a) / n,
      s = f(a) + f(b);

  for (var i = 1, x = a; i < n; ++i) s += 2 * f(x += h);

  return s * 0.5 * h;
}

function _default() {
  var n = 6,
      rho = 30 * _math.radians,
      cRho = (0, _math.cos)(rho),
      sRho = (0, _math.sin)(rho),
      m = (0, _d3Geo.geoProjectionMutator)(gingeryRaw),
      p = m(rho, n),
      stream_ = p.stream,
      epsilon = 1e-2,
      cr = -(0, _math.cos)(epsilon * _math.radians),
      sr = (0, _math.sin)(epsilon * _math.radians);

  p.radius = function (_) {
    if (!arguments.length) return rho * _math.degrees;
    cRho = (0, _math.cos)(rho = _ * _math.radians);
    sRho = (0, _math.sin)(rho);
    return m(rho, n);
  };

  p.lobes = function (_) {
    if (!arguments.length) return n;
    return m(rho, n = +_);
  };

  p.stream = function (stream) {
    var rotate = p.rotate(),
        rotateStream = stream_(stream),
        sphereStream = (p.rotate([0, 0]), stream_(stream));
    p.rotate(rotate);

    rotateStream.sphere = function () {
      sphereStream.polygonStart(), sphereStream.lineStart();

      for (var i = 0, delta = 2 * _math.pi / n, phi = 0; i < n; ++i, phi -= delta) {
        sphereStream.point((0, _math.atan2)(sr * (0, _math.cos)(phi), cr) * _math.degrees, (0, _math.asin)(sr * (0, _math.sin)(phi)) * _math.degrees);
        sphereStream.point((0, _math.atan2)(sRho * (0, _math.cos)(phi - delta / 2), cRho) * _math.degrees, (0, _math.asin)(sRho * (0, _math.sin)(phi - delta / 2)) * _math.degrees);
      }

      sphereStream.lineEnd(), sphereStream.polygonEnd();
    };

    return rotateStream;
  };

  return p.rotate([90, -40]).scale(91.7095).clipAngle(180 - 1e-3);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/ginzburgPolyconic.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _math = require("./math");

function _default(a, b, c, d, e, f, g, h) {
  if (arguments.length < 8) h = 0;

  function forward(lambda, phi) {
    if (!phi) return [a * lambda / _math.pi, 0];

    var phi2 = phi * phi,
        xB = a + phi2 * (b + phi2 * (c + phi2 * d)),
        yB = phi * (e - 1 + phi2 * (f - h + phi2 * g)),
        m = (xB * xB + yB * yB) / (2 * yB),
        alpha = lambda * (0, _math.asin)(xB / m) / _math.pi;

    return [m * (0, _math.sin)(alpha), phi * (1 + phi2 * h) + m * (1 - (0, _math.cos)(alpha))];
  }

  forward.invert = function (x, y) {
    var lambda = _math.pi * x / a,
        phi = y,
        deltaLambda,
        deltaPhi,
        i = 50;

    do {
      var phi2 = phi * phi,
          xB = a + phi2 * (b + phi2 * (c + phi2 * d)),
          yB = phi * (e - 1 + phi2 * (f - h + phi2 * g)),
          p = xB * xB + yB * yB,
          q = 2 * yB,
          m = p / q,
          m2 = m * m,
          dAlphadLambda = (0, _math.asin)(xB / m) / _math.pi,
          alpha = lambda * dAlphadLambda,
          xB2 = xB * xB,
          dxBdPhi = (2 * b + phi2 * (4 * c + phi2 * 6 * d)) * phi,
          dyBdPhi = e + phi2 * (3 * f + phi2 * 5 * g),
          dpdPhi = 2 * (xB * dxBdPhi + yB * (dyBdPhi - 1)),
          dqdPhi = 2 * (dyBdPhi - 1),
          dmdPhi = (dpdPhi * q - p * dqdPhi) / (q * q),
          cosAlpha = (0, _math.cos)(alpha),
          sinAlpha = (0, _math.sin)(alpha),
          mcosAlpha = m * cosAlpha,
          msinAlpha = m * sinAlpha,
          dAlphadPhi = lambda / _math.pi * (1 / (0, _math.sqrt)(1 - xB2 / m2)) * (dxBdPhi * m - xB * dmdPhi) / m2,
          fx = msinAlpha - x,
          fy = phi * (1 + phi2 * h) + m - mcosAlpha - y,
          deltaxDeltaPhi = dmdPhi * sinAlpha + mcosAlpha * dAlphadPhi,
          deltaxDeltaLambda = mcosAlpha * dAlphadLambda,
          deltayDeltaPhi = 1 + dmdPhi - (dmdPhi * cosAlpha - msinAlpha * dAlphadPhi),
          deltayDeltaLambda = msinAlpha * dAlphadLambda,
          denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda;

      if (!denominator) break;
      lambda -= deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator;
      phi -= deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;
    } while (((0, _math.abs)(deltaLambda) > _math.epsilon || (0, _math.abs)(deltaPhi) > _math.epsilon) && --i > 0);

    return [lambda, phi];
  };

  return forward;
}
},{"./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/ginzburg4.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.ginzburg4Raw = void 0;

var _d3Geo = require("d3-geo");

var _ginzburgPolyconic = _interopRequireDefault(require("./ginzburgPolyconic"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ginzburg4Raw = (0, _ginzburgPolyconic.default)(2.8284, -1.6988, 0.75432, -0.18071, 1.76003, -0.38914, 0.042555);
exports.ginzburg4Raw = ginzburg4Raw;

function _default() {
  return (0, _d3Geo.geoProjection)(ginzburg4Raw).scale(149.995);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./ginzburgPolyconic":"../node_modules/d3-geo-projection/src/ginzburgPolyconic.js"}],"../node_modules/d3-geo-projection/src/ginzburg5.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.ginzburg5Raw = void 0;

var _d3Geo = require("d3-geo");

var _ginzburgPolyconic = _interopRequireDefault(require("./ginzburgPolyconic"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ginzburg5Raw = (0, _ginzburgPolyconic.default)(2.583819, -0.835827, 0.170354, -0.038094, 1.543313, -0.411435, 0.082742);
exports.ginzburg5Raw = ginzburg5Raw;

function _default() {
  return (0, _d3Geo.geoProjection)(ginzburg5Raw).scale(153.93);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./ginzburgPolyconic":"../node_modules/d3-geo-projection/src/ginzburgPolyconic.js"}],"../node_modules/d3-geo-projection/src/ginzburg6.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.ginzburg6Raw = void 0;

var _d3Geo = require("d3-geo");

var _ginzburgPolyconic = _interopRequireDefault(require("./ginzburgPolyconic"));

var _math = require("./math");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ginzburg6Raw = (0, _ginzburgPolyconic.default)(5 / 6 * _math.pi, -0.62636, -0.0344, 0, 1.3493, -0.05524, 0, 0.045);
exports.ginzburg6Raw = ginzburg6Raw;

function _default() {
  return (0, _d3Geo.geoProjection)(ginzburg6Raw).scale(130.945);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./ginzburgPolyconic":"../node_modules/d3-geo-projection/src/ginzburgPolyconic.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/ginzburg8.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ginzburg8Raw = ginzburg8Raw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

function ginzburg8Raw(lambda, phi) {
  var lambda2 = lambda * lambda,
      phi2 = phi * phi;
  return [lambda * (1 - 0.162388 * phi2) * (0.87 - 0.000952426 * lambda2 * lambda2), phi * (1 + phi2 / 12)];
}

ginzburg8Raw.invert = function (x, y) {
  var lambda = x,
      phi = y,
      i = 50,
      delta;

  do {
    var phi2 = phi * phi;
    phi -= delta = (phi * (1 + phi2 / 12) - y) / (1 + phi2 / 4);
  } while ((0, _math.abs)(delta) > _math.epsilon && --i > 0);

  i = 50;
  x /= 1 - 0.162388 * phi2;

  do {
    var lambda4 = (lambda4 = lambda * lambda) * lambda4;
    lambda -= delta = (lambda * (0.87 - 0.000952426 * lambda4) - x) / (0.87 - 0.00476213 * lambda4);
  } while ((0, _math.abs)(delta) > _math.epsilon && --i > 0);

  return [lambda, phi];
};

function _default() {
  return (0, _d3Geo.geoProjection)(ginzburg8Raw).scale(131.747);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/ginzburg9.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.ginzburg9Raw = void 0;

var _d3Geo = require("d3-geo");

var _ginzburgPolyconic = _interopRequireDefault(require("./ginzburgPolyconic"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ginzburg9Raw = (0, _ginzburgPolyconic.default)(2.6516, -0.76534, 0.19123, -0.047094, 1.36289, -0.13965, 0.031762);
exports.ginzburg9Raw = ginzburg9Raw;

function _default() {
  return (0, _d3Geo.geoProjection)(ginzburg9Raw).scale(131.087);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./ginzburgPolyconic":"../node_modules/d3-geo-projection/src/ginzburgPolyconic.js"}],"../node_modules/d3-geo-projection/src/square.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _math = require("./math");

function _default(project) {
  var dx = project(_math.halfPi, 0)[0] - project(-_math.halfPi, 0)[0];

  function projectSquare(lambda, phi) {
    var s = lambda > 0 ? -0.5 : 0.5,
        point = project(lambda + s * _math.pi, phi);
    point[0] -= s * dx;
    return point;
  }

  if (project.invert) projectSquare.invert = function (x, y) {
    var s = x > 0 ? -0.5 : 0.5,
        location = project.invert(x + s * dx, y),
        lambda = location[0] - s * _math.pi;
    if (lambda < -_math.pi) lambda += 2 * _math.pi;else if (lambda > _math.pi) lambda -= 2 * _math.pi;
    location[0] = lambda;
    return location;
  };
  return projectSquare;
}
},{"./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/gringorten.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gringortenRaw = gringortenRaw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

var _square = _interopRequireDefault(require("./square"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function gringortenRaw(lambda, phi) {
  var sLambda = (0, _math.sign)(lambda),
      sPhi = (0, _math.sign)(phi),
      cosPhi = (0, _math.cos)(phi),
      x = (0, _math.cos)(lambda) * cosPhi,
      y = (0, _math.sin)(lambda) * cosPhi,
      z = (0, _math.sin)(sPhi * phi);
  lambda = (0, _math.abs)((0, _math.atan2)(y, z));
  phi = (0, _math.asin)(x);
  if ((0, _math.abs)(lambda - _math.halfPi) > _math.epsilon) lambda %= _math.halfPi;
  var point = gringortenHexadecant(lambda > _math.pi / 4 ? _math.halfPi - lambda : lambda, phi);
  if (lambda > _math.pi / 4) z = point[0], point[0] = -point[1], point[1] = -z;
  return point[0] *= sLambda, point[1] *= -sPhi, point;
}

gringortenRaw.invert = function (x, y) {
  if ((0, _math.abs)(x) > 1) x = (0, _math.sign)(x) * 2 - x;
  if ((0, _math.abs)(y) > 1) y = (0, _math.sign)(y) * 2 - y;
  var sx = (0, _math.sign)(x),
      sy = (0, _math.sign)(y),
      x0 = -sx * x,
      y0 = -sy * y,
      t = y0 / x0 < 1,
      p = gringortenHexadecantInvert(t ? y0 : x0, t ? x0 : y0),
      lambda = p[0],
      phi = p[1],
      cosPhi = (0, _math.cos)(phi);
  if (t) lambda = -_math.halfPi - lambda;
  return [sx * ((0, _math.atan2)((0, _math.sin)(lambda) * cosPhi, -(0, _math.sin)(phi)) + _math.pi), sy * (0, _math.asin)((0, _math.cos)(lambda) * cosPhi)];
};

function gringortenHexadecant(lambda, phi) {
  if (phi === _math.halfPi) return [0, 0];
  var sinPhi = (0, _math.sin)(phi),
      r = sinPhi * sinPhi,
      r2 = r * r,
      j = 1 + r2,
      k = 1 + 3 * r2,
      q = 1 - r2,
      z = (0, _math.asin)(1 / (0, _math.sqrt)(j)),
      v = q + r * j * z,
      p2 = (1 - sinPhi) / v,
      p = (0, _math.sqrt)(p2),
      a2 = p2 * j,
      a = (0, _math.sqrt)(a2),
      h = p * q,
      x,
      i;
  if (lambda === 0) return [0, -(h + r * a)];
  var cosPhi = (0, _math.cos)(phi),
      secPhi = 1 / cosPhi,
      drdPhi = 2 * sinPhi * cosPhi,
      dvdPhi = (-3 * r + z * k) * drdPhi,
      dp2dPhi = (-v * cosPhi - (1 - sinPhi) * dvdPhi) / (v * v),
      dpdPhi = 0.5 * dp2dPhi / p,
      dhdPhi = q * dpdPhi - 2 * r * p * drdPhi,
      dra2dPhi = r * j * dp2dPhi + p2 * k * drdPhi,
      mu = -secPhi * drdPhi,
      nu = -secPhi * dra2dPhi,
      zeta = -2 * secPhi * dhdPhi,
      lambda1 = 4 * lambda / _math.pi,
      delta; // Slower but accurate bisection method.

  if (lambda > 0.222 * _math.pi || phi < _math.pi / 4 && lambda > 0.175 * _math.pi) {
    x = (h + r * (0, _math.sqrt)(a2 * (1 + r2) - h * h)) / (1 + r2);
    if (lambda > _math.pi / 4) return [x, x];
    var x1 = x,
        x0 = 0.5 * x;
    x = 0.5 * (x0 + x1), i = 50;

    do {
      var g = (0, _math.sqrt)(a2 - x * x),
          f = x * (zeta + mu * g) + nu * (0, _math.asin)(x / a) - lambda1;
      if (!f) break;
      if (f < 0) x0 = x;else x1 = x;
      x = 0.5 * (x0 + x1);
    } while ((0, _math.abs)(x1 - x0) > _math.epsilon && --i > 0);
  } // Newton-Raphson.
  else {
      x = _math.epsilon, i = 25;

      do {
        var x2 = x * x,
            g2 = (0, _math.sqrt)(a2 - x2),
            zetaMug = zeta + mu * g2,
            f2 = x * zetaMug + nu * (0, _math.asin)(x / a) - lambda1,
            df = zetaMug + (nu - mu * x2) / g2;
        x -= delta = g2 ? f2 / df : 0;
      } while ((0, _math.abs)(delta) > _math.epsilon && --i > 0);
    }

  return [x, -h - r * (0, _math.sqrt)(a2 - x * x)];
}

function gringortenHexadecantInvert(x, y) {
  var x0 = 0,
      x1 = 1,
      r = 0.5,
      i = 50;

  while (true) {
    var r2 = r * r,
        sinPhi = (0, _math.sqrt)(r),
        z = (0, _math.asin)(1 / (0, _math.sqrt)(1 + r2)),
        v = 1 - r2 + r * (1 + r2) * z,
        p2 = (1 - sinPhi) / v,
        p = (0, _math.sqrt)(p2),
        a2 = p2 * (1 + r2),
        h = p * (1 - r2),
        g2 = a2 - x * x,
        g = (0, _math.sqrt)(g2),
        y0 = y + h + r * g;
    if ((0, _math.abs)(x1 - x0) < _math.epsilon2 || --i === 0 || y0 === 0) break;
    if (y0 > 0) x0 = r;else x1 = r;
    r = 0.5 * (x0 + x1);
  }

  if (!i) return null;
  var phi = (0, _math.asin)(sinPhi),
      cosPhi = (0, _math.cos)(phi),
      secPhi = 1 / cosPhi,
      drdPhi = 2 * sinPhi * cosPhi,
      dvdPhi = (-3 * r + z * (1 + 3 * r2)) * drdPhi,
      dp2dPhi = (-v * cosPhi - (1 - sinPhi) * dvdPhi) / (v * v),
      dpdPhi = 0.5 * dp2dPhi / p,
      dhdPhi = (1 - r2) * dpdPhi - 2 * r * p * drdPhi,
      zeta = -2 * secPhi * dhdPhi,
      mu = -secPhi * drdPhi,
      nu = -secPhi * (r * (1 + r2) * dp2dPhi + p2 * (1 + 3 * r2) * drdPhi);
  return [_math.pi / 4 * (x * (zeta + mu * g) + nu * (0, _math.asin)(x / (0, _math.sqrt)(a2))), phi];
}

function _default() {
  return (0, _d3Geo.geoProjection)((0, _square.default)(gringortenRaw)).scale(239.75);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js","./square":"../node_modules/d3-geo-projection/src/square.js"}],"../node_modules/d3-geo-projection/src/elliptic.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ellipticJi = ellipticJi;
exports.ellipticJ = ellipticJ;
exports.ellipticFi = ellipticFi;
exports.ellipticF = ellipticF;

var _math = require("./math");

// Returns [sn, cn, dn](u + iv|m).
function ellipticJi(u, v, m) {
  var a, b, c;

  if (!u) {
    b = ellipticJ(v, 1 - m);
    return [[0, b[0] / b[1]], [1 / b[1], 0], [b[2] / b[1], 0]];
  }

  a = ellipticJ(u, m);
  if (!v) return [[a[0], 0], [a[1], 0], [a[2], 0]];
  b = ellipticJ(v, 1 - m);
  c = b[1] * b[1] + m * a[0] * a[0] * b[0] * b[0];
  return [[a[0] * b[2] / c, a[1] * a[2] * b[0] * b[1] / c], [a[1] * b[1] / c, -a[0] * a[2] * b[0] * b[2] / c], [a[2] * b[1] * b[2] / c, -m * a[0] * a[1] * b[0] / c]];
} // Returns [sn, cn, dn, ph](u|m).


function ellipticJ(u, m) {
  var ai, b, phi, t, twon;

  if (m < _math.epsilon) {
    t = (0, _math.sin)(u);
    b = (0, _math.cos)(u);
    ai = m * (u - t * b) / 4;
    return [t - ai * b, b + ai * t, 1 - m * t * t / 2, u - ai];
  }

  if (m >= 1 - _math.epsilon) {
    ai = (1 - m) / 4;
    b = (0, _math.cosh)(u);
    t = (0, _math.tanh)(u);
    phi = 1 / b;
    twon = b * (0, _math.sinh)(u);
    return [t + ai * (twon - u) / (b * b), phi - ai * t * phi * (twon - u), phi + ai * t * phi * (twon + u), 2 * (0, _math.atan)((0, _math.exp)(u)) - _math.halfPi + ai * (twon - u) / b];
  }

  var a = [1, 0, 0, 0, 0, 0, 0, 0, 0],
      c = [(0, _math.sqrt)(m), 0, 0, 0, 0, 0, 0, 0, 0],
      i = 0;
  b = (0, _math.sqrt)(1 - m);
  twon = 1;

  while ((0, _math.abs)(c[i] / a[i]) > _math.epsilon && i < 8) {
    ai = a[i++];
    c[i] = (ai - b) / 2;
    a[i] = (ai + b) / 2;
    b = (0, _math.sqrt)(ai * b);
    twon *= 2;
  }

  phi = twon * a[i] * u;

  do {
    t = c[i] * (0, _math.sin)(b = phi) / a[i];
    phi = ((0, _math.asin)(t) + phi) / 2;
  } while (--i);

  return [(0, _math.sin)(phi), t = (0, _math.cos)(phi), t / (0, _math.cos)(phi - b), phi];
} // Calculate F(phi+iPsi|m).
// See Abramowitz and Stegun, 17.4.11.


function ellipticFi(phi, psi, m) {
  var r = (0, _math.abs)(phi),
      i = (0, _math.abs)(psi),
      sinhPsi = (0, _math.sinh)(i);

  if (r) {
    var cscPhi = 1 / (0, _math.sin)(r),
        cotPhi2 = 1 / ((0, _math.tan)(r) * (0, _math.tan)(r)),
        b = -(cotPhi2 + m * (sinhPsi * sinhPsi * cscPhi * cscPhi) - 1 + m),
        c = (m - 1) * cotPhi2,
        cotLambda2 = (-b + (0, _math.sqrt)(b * b - 4 * c)) / 2;
    return [ellipticF((0, _math.atan)(1 / (0, _math.sqrt)(cotLambda2)), m) * (0, _math.sign)(phi), ellipticF((0, _math.atan)((0, _math.sqrt)((cotLambda2 / cotPhi2 - 1) / m)), 1 - m) * (0, _math.sign)(psi)];
  }

  return [0, ellipticF((0, _math.atan)(sinhPsi), 1 - m) * (0, _math.sign)(psi)];
} // Calculate F(phi|m) where m = k² = sin²α.
// See Abramowitz and Stegun, 17.6.7.


function ellipticF(phi, m) {
  if (!m) return phi;
  if (m === 1) return (0, _math.log)((0, _math.tan)(phi / 2 + _math.quarterPi));
  var a = 1,
      b = (0, _math.sqrt)(1 - m),
      c = (0, _math.sqrt)(m);

  for (var i = 0; (0, _math.abs)(c) > _math.epsilon; i++) {
    if (phi % _math.pi) {
      var dPhi = (0, _math.atan)(b * (0, _math.tan)(phi) / a);
      if (dPhi < 0) dPhi += _math.pi;
      phi += dPhi + ~~(phi / _math.pi) * _math.pi;
    } else phi += phi;

    c = (a + b) / 2;
    b = (0, _math.sqrt)(a * b);
    c = ((a = c) - b) / 2;
  }

  return phi / ((0, _math.pow)(2, i) * a);
}
},{"./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/guyou.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.guyouRaw = guyouRaw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _elliptic = require("./elliptic");

var _math = require("./math");

var _square = _interopRequireDefault(require("./square"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function guyouRaw(lambda, phi) {
  var k_ = (_math.sqrt2 - 1) / (_math.sqrt2 + 1),
      k = (0, _math.sqrt)(1 - k_ * k_),
      K = (0, _elliptic.ellipticF)(_math.halfPi, k * k),
      f = -1,
      psi = (0, _math.log)((0, _math.tan)(_math.pi / 4 + (0, _math.abs)(phi) / 2)),
      r = (0, _math.exp)(f * psi) / (0, _math.sqrt)(k_),
      at = guyouComplexAtan(r * (0, _math.cos)(f * lambda), r * (0, _math.sin)(f * lambda)),
      t = (0, _elliptic.ellipticFi)(at[0], at[1], k * k);
  return [-t[1], (phi >= 0 ? 1 : -1) * (0.5 * K - t[0])];
}

function guyouComplexAtan(x, y) {
  var x2 = x * x,
      y_1 = y + 1,
      t = 1 - x2 - y * y;
  return [0.5 * ((x >= 0 ? _math.halfPi : -_math.halfPi) - (0, _math.atan2)(t, 2 * x)), -0.25 * (0, _math.log)(t * t + 4 * x2) + 0.5 * (0, _math.log)(y_1 * y_1 + x2)];
}

function guyouComplexDivide(a, b) {
  var denominator = b[0] * b[0] + b[1] * b[1];
  return [(a[0] * b[0] + a[1] * b[1]) / denominator, (a[1] * b[0] - a[0] * b[1]) / denominator];
}

guyouRaw.invert = function (x, y) {
  var k_ = (_math.sqrt2 - 1) / (_math.sqrt2 + 1),
      k = (0, _math.sqrt)(1 - k_ * k_),
      K = (0, _elliptic.ellipticF)(_math.halfPi, k * k),
      f = -1,
      j = (0, _elliptic.ellipticJi)(0.5 * K - y, -x, k * k),
      tn = guyouComplexDivide(j[0], j[1]),
      lambda = (0, _math.atan2)(tn[1], tn[0]) / f;
  return [lambda, 2 * (0, _math.atan)((0, _math.exp)(0.5 / f * (0, _math.log)(k_ * tn[0] * tn[0] + k_ * tn[1] * tn[1]))) - _math.halfPi];
};

function _default() {
  return (0, _d3Geo.geoProjection)((0, _square.default)(guyouRaw)).scale(151.496);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./elliptic":"../node_modules/d3-geo-projection/src/elliptic.js","./math":"../node_modules/d3-geo-projection/src/math.js","./square":"../node_modules/d3-geo-projection/src/square.js"}],"../node_modules/d3-geo-projection/src/hammerRetroazimuthal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hammerRetroazimuthalRaw = hammerRetroazimuthalRaw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

function hammerRetroazimuthalRaw(phi0) {
  var sinPhi0 = (0, _math.sin)(phi0),
      cosPhi0 = (0, _math.cos)(phi0),
      rotate = hammerRetroazimuthalRotation(phi0);
  rotate.invert = hammerRetroazimuthalRotation(-phi0);

  function forward(lambda, phi) {
    var p = rotate(lambda, phi);
    lambda = p[0], phi = p[1];
    var sinPhi = (0, _math.sin)(phi),
        cosPhi = (0, _math.cos)(phi),
        cosLambda = (0, _math.cos)(lambda),
        z = (0, _math.acos)(sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosLambda),
        sinz = (0, _math.sin)(z),
        K = (0, _math.abs)(sinz) > _math.epsilon ? z / sinz : 1;
    return [K * cosPhi0 * (0, _math.sin)(lambda), ((0, _math.abs)(lambda) > _math.halfPi ? K : -K) * ( // rotate for back hemisphere
    sinPhi0 * cosPhi - cosPhi0 * sinPhi * cosLambda)];
  }

  forward.invert = function (x, y) {
    var rho = (0, _math.sqrt)(x * x + y * y),
        sinz = -(0, _math.sin)(rho),
        cosz = (0, _math.cos)(rho),
        a = rho * cosz,
        b = -y * sinz,
        c = rho * sinPhi0,
        d = (0, _math.sqrt)(a * a + b * b - c * c),
        phi = (0, _math.atan2)(a * c + b * d, b * c - a * d),
        lambda = (rho > _math.halfPi ? -1 : 1) * (0, _math.atan2)(x * sinz, rho * (0, _math.cos)(phi) * cosz + y * (0, _math.sin)(phi) * sinz);
    return rotate.invert(lambda, phi);
  };

  return forward;
} // Latitudinal rotation by phi0.
// Temporary hack until D3 supports arbitrary small-circle clipping origins.


function hammerRetroazimuthalRotation(phi0) {
  var sinPhi0 = (0, _math.sin)(phi0),
      cosPhi0 = (0, _math.cos)(phi0);
  return function (lambda, phi) {
    var cosPhi = (0, _math.cos)(phi),
        x = (0, _math.cos)(lambda) * cosPhi,
        y = (0, _math.sin)(lambda) * cosPhi,
        z = (0, _math.sin)(phi);
    return [(0, _math.atan2)(y, x * cosPhi0 - z * sinPhi0), (0, _math.asin)(z * cosPhi0 + x * sinPhi0)];
  };
}

function _default() {
  var phi0 = 0,
      m = (0, _d3Geo.geoProjectionMutator)(hammerRetroazimuthalRaw),
      p = m(phi0),
      rotate_ = p.rotate,
      stream_ = p.stream,
      circle = (0, _d3Geo.geoCircle)();

  p.parallel = function (_) {
    if (!arguments.length) return phi0 * _math.degrees;
    var r = p.rotate();
    return m(phi0 = _ * _math.radians).rotate(r);
  }; // Temporary hack; see hammerRetroazimuthalRotation.


  p.rotate = function (_) {
    if (!arguments.length) return _ = rotate_.call(p), _[1] += phi0 * _math.degrees, _;
    rotate_.call(p, [_[0], _[1] - phi0 * _math.degrees]);
    circle.center([-_[0], -_[1]]);
    return p;
  };

  p.stream = function (stream) {
    stream = stream_(stream);

    stream.sphere = function () {
      stream.polygonStart();
      var epsilon = 1e-2,
          ring = circle.radius(90 - epsilon)().coordinates[0],
          n = ring.length - 1,
          i = -1,
          p;
      stream.lineStart();

      while (++i < n) stream.point((p = ring[i])[0], p[1]);

      stream.lineEnd();
      ring = circle.radius(90 + epsilon)().coordinates[0];
      n = ring.length - 1;
      stream.lineStart();

      while (--i >= 0) stream.point((p = ring[i])[0], p[1]);

      stream.lineEnd();
      stream.polygonEnd();
    };

    return stream;
  };

  return p.scale(79.4187).parallel(45).clipAngle(180 - 1e-3);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/healpix.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.healpixRaw = healpixRaw;
exports.default = _default;

var _d3Array = require("d3-array");

var _d3Geo = require("d3-geo");

var _collignon = require("./collignon");

var _cylindricalEqualArea = require("./cylindricalEqualArea");

var _math = require("./math");

var healpixParallel = 41 + 48 / 36 + 37 / 3600,
    // for K=3; TODO automate
healpixLambert = (0, _cylindricalEqualArea.cylindricalEqualAreaRaw)(0);

function healpixRaw(H) {
  var phi0 = healpixParallel * _math.radians,
      dx = (0, _collignon.collignonRaw)(_math.pi, phi0)[0] - (0, _collignon.collignonRaw)(-_math.pi, phi0)[0],
      y0 = healpixLambert(0, phi0)[1],
      y1 = (0, _collignon.collignonRaw)(0, phi0)[1],
      dy1 = _math.sqrtPi - y1,
      k = _math.tau / H,
      w = 4 / _math.tau,
      h = y0 + dy1 * dy1 * 4 / _math.tau;

  function forward(lambda, phi) {
    var point,
        phi2 = (0, _math.abs)(phi);

    if (phi2 > phi0) {
      var i = (0, _math.min)(H - 1, (0, _math.max)(0, (0, _math.floor)((lambda + _math.pi) / k)));
      lambda += _math.pi * (H - 1) / H - i * k;
      point = (0, _collignon.collignonRaw)(lambda, phi2);
      point[0] = point[0] * _math.tau / dx - _math.tau * (H - 1) / (2 * H) + i * _math.tau / H;
      point[1] = y0 + (point[1] - y1) * 4 * dy1 / _math.tau;
      if (phi < 0) point[1] = -point[1];
    } else {
      point = healpixLambert(lambda, phi);
    }

    point[0] *= w, point[1] /= h;
    return point;
  }

  forward.invert = function (x, y) {
    x /= w, y *= h;
    var y2 = (0, _math.abs)(y);

    if (y2 > y0) {
      var i = (0, _math.min)(H - 1, (0, _math.max)(0, (0, _math.floor)((x + _math.pi) / k)));
      x = (x + _math.pi * (H - 1) / H - i * k) * dx / _math.tau;

      var point = _collignon.collignonRaw.invert(x, 0.25 * (y2 - y0) * _math.tau / dy1 + y1);

      point[0] -= _math.pi * (H - 1) / H - i * k;
      if (y < 0) point[1] = -point[1];
      return point;
    }

    return healpixLambert.invert(x, y);
  };

  return forward;
}

function sphereTop(x, i) {
  return [x, i & 1 ? 90 - _math.epsilon : healpixParallel];
}

function sphereBottom(x, i) {
  return [x, i & 1 ? -90 + _math.epsilon : -healpixParallel];
}

function sphereNudge(d) {
  return [d[0] * (1 - _math.epsilon), d[1]];
}

function sphere(step) {
  var c = [].concat((0, _d3Array.range)(-180, 180 + step / 2, step).map(sphereTop), (0, _d3Array.range)(180, -180 - step / 2, -step).map(sphereBottom));
  return {
    type: "Polygon",
    coordinates: [step === 180 ? c.map(sphereNudge) : c]
  };
}

function _default() {
  var H = 4,
      m = (0, _d3Geo.geoProjectionMutator)(healpixRaw),
      p = m(H),
      stream_ = p.stream;

  p.lobes = function (_) {
    return arguments.length ? m(H = +_) : H;
  };

  p.stream = function (stream) {
    var rotate = p.rotate(),
        rotateStream = stream_(stream),
        sphereStream = (p.rotate([0, 0]), stream_(stream));
    p.rotate(rotate);

    rotateStream.sphere = function () {
      (0, _d3Geo.geoStream)(sphere(180 / H), sphereStream);
    };

    return rotateStream;
  };

  return p.scale(239.75);
}
},{"d3-array":"../node_modules/d3-array/src/index.js","d3-geo":"../node_modules/d3-geo/src/index.js","./collignon":"../node_modules/d3-geo-projection/src/collignon.js","./cylindricalEqualArea":"../node_modules/d3-geo-projection/src/cylindricalEqualArea.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/hill.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hillRaw = hillRaw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

function hillRaw(K) {
  var L = 1 + K,
      sinBt = (0, _math.sin)(1 / L),
      Bt = (0, _math.asin)(sinBt),
      A = 2 * (0, _math.sqrt)(_math.pi / (B = _math.pi + 4 * Bt * L)),
      B,
      rho0 = 0.5 * A * (L + (0, _math.sqrt)(K * (2 + K))),
      K2 = K * K,
      L2 = L * L;

  function forward(lambda, phi) {
    var t = 1 - (0, _math.sin)(phi),
        rho,
        omega;

    if (t && t < 2) {
      var theta = _math.halfPi - phi,
          i = 25,
          delta;

      do {
        var sinTheta = (0, _math.sin)(theta),
            cosTheta = (0, _math.cos)(theta),
            Bt_Bt1 = Bt + (0, _math.atan2)(sinTheta, L - cosTheta),
            C = 1 + L2 - 2 * L * cosTheta;
        theta -= delta = (theta - K2 * Bt - L * sinTheta + C * Bt_Bt1 - 0.5 * t * B) / (2 * L * sinTheta * Bt_Bt1);
      } while ((0, _math.abs)(delta) > _math.epsilon2 && --i > 0);

      rho = A * (0, _math.sqrt)(C);
      omega = lambda * Bt_Bt1 / _math.pi;
    } else {
      rho = A * (K + t);
      omega = lambda * Bt / _math.pi;
    }

    return [rho * (0, _math.sin)(omega), rho0 - rho * (0, _math.cos)(omega)];
  }

  forward.invert = function (x, y) {
    var rho2 = x * x + (y -= rho0) * y,
        cosTheta = (1 + L2 - rho2 / (A * A)) / (2 * L),
        theta = (0, _math.acos)(cosTheta),
        sinTheta = (0, _math.sin)(theta),
        Bt_Bt1 = Bt + (0, _math.atan2)(sinTheta, L - cosTheta);
    return [(0, _math.asin)(x / (0, _math.sqrt)(rho2)) * _math.pi / Bt_Bt1, (0, _math.asin)(1 - 2 * (theta - K2 * Bt - L * sinTheta + (1 + L2 - 2 * L * cosTheta) * Bt_Bt1) / B)];
  };

  return forward;
}

function _default() {
  var K = 1,
      m = (0, _d3Geo.geoProjectionMutator)(hillRaw),
      p = m(K);

  p.ratio = function (_) {
    return arguments.length ? m(K = +_) : K;
  };

  return p.scale(167.774).center([0, 18.67]);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/sinuMollweide.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sinuMollweideRaw = sinuMollweideRaw;
exports.default = _default;
exports.sinuMollweideY = exports.sinuMollweidePhi = void 0;

var _d3Geo = require("d3-geo");

var _mollweide = require("./mollweide");

var _sinusoidal = require("./sinusoidal");

var sinuMollweidePhi = 0.7109889596207567;
exports.sinuMollweidePhi = sinuMollweidePhi;
var sinuMollweideY = 0.0528035274542;
exports.sinuMollweideY = sinuMollweideY;

function sinuMollweideRaw(lambda, phi) {
  return phi > -sinuMollweidePhi ? (lambda = (0, _mollweide.mollweideRaw)(lambda, phi), lambda[1] += sinuMollweideY, lambda) : (0, _sinusoidal.sinusoidalRaw)(lambda, phi);
}

sinuMollweideRaw.invert = function (x, y) {
  return y > -sinuMollweidePhi ? _mollweide.mollweideRaw.invert(x, y - sinuMollweideY) : _sinusoidal.sinusoidalRaw.invert(x, y);
};

function _default() {
  return (0, _d3Geo.geoProjection)(sinuMollweideRaw).rotate([-20, -55]).scale(164.263).center([0, -5.4036]);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./mollweide":"../node_modules/d3-geo-projection/src/mollweide.js","./sinusoidal":"../node_modules/d3-geo-projection/src/sinusoidal.js"}],"../node_modules/d3-geo-projection/src/homolosine.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.homolosineRaw = homolosineRaw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

var _mollweide = require("./mollweide");

var _sinusoidal = require("./sinusoidal");

var _sinuMollweide = require("./sinuMollweide");

function homolosineRaw(lambda, phi) {
  return (0, _math.abs)(phi) > _sinuMollweide.sinuMollweidePhi ? (lambda = (0, _mollweide.mollweideRaw)(lambda, phi), lambda[1] -= phi > 0 ? _sinuMollweide.sinuMollweideY : -_sinuMollweide.sinuMollweideY, lambda) : (0, _sinusoidal.sinusoidalRaw)(lambda, phi);
}

homolosineRaw.invert = function (x, y) {
  return (0, _math.abs)(y) > _sinuMollweide.sinuMollweidePhi ? _mollweide.mollweideRaw.invert(x, y + (y > 0 ? _sinuMollweide.sinuMollweideY : -_sinuMollweide.sinuMollweideY)) : _sinusoidal.sinusoidalRaw.invert(x, y);
};

function _default() {
  return (0, _d3Geo.geoProjection)(homolosineRaw).scale(152.63);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js","./mollweide":"../node_modules/d3-geo-projection/src/mollweide.js","./sinusoidal":"../node_modules/d3-geo-projection/src/sinusoidal.js","./sinuMollweide":"../node_modules/d3-geo-projection/src/sinuMollweide.js"}],"../node_modules/d3-geo-projection/src/hufnagel.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hufnagelRaw = hufnagelRaw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math.js");

var _newton = require("./newton.js");

function hufnagelRaw(a, b, psiMax, ratio) {
  var k = (0, _math.sqrt)(4 * _math.pi / (2 * psiMax + (1 + a - b / 2) * (0, _math.sin)(2 * psiMax) + (a + b) / 2 * (0, _math.sin)(4 * psiMax) + b / 2 * (0, _math.sin)(6 * psiMax))),
      c = (0, _math.sqrt)(ratio * (0, _math.sin)(psiMax) * (0, _math.sqrt)((1 + a * (0, _math.cos)(2 * psiMax) + b * (0, _math.cos)(4 * psiMax)) / (1 + a + b))),
      M = psiMax * mapping(1);

  function radius(psi) {
    return (0, _math.sqrt)(1 + a * (0, _math.cos)(2 * psi) + b * (0, _math.cos)(4 * psi));
  }

  function mapping(t) {
    var psi = t * psiMax;
    return (2 * psi + (1 + a - b / 2) * (0, _math.sin)(2 * psi) + (a + b) / 2 * (0, _math.sin)(4 * psi) + b / 2 * (0, _math.sin)(6 * psi)) / psiMax;
  }

  function inversemapping(psi) {
    return radius(psi) * (0, _math.sin)(psi);
  }

  var forward = function (lambda, phi) {
    var psi = psiMax * (0, _newton.solve)(mapping, M * (0, _math.sin)(phi) / psiMax, phi / _math.pi);
    if (isNaN(psi)) psi = psiMax * (0, _math.sign)(phi);
    var kr = k * radius(psi);
    return [kr * c * lambda / _math.pi * (0, _math.cos)(psi), kr / c * (0, _math.sin)(psi)];
  };

  forward.invert = function (x, y) {
    var psi = (0, _newton.solve)(inversemapping, y * c / k);
    return [x * _math.pi / ((0, _math.cos)(psi) * k * c * radius(psi)), (0, _math.asin)(psiMax * mapping(psi / psiMax) / M)];
  };

  if (psiMax === 0) {
    k = (0, _math.sqrt)(ratio / _math.pi);

    forward = function (lambda, phi) {
      return [lambda * k, (0, _math.sin)(phi) / k];
    };

    forward.invert = function (x, y) {
      return [x / k, (0, _math.asin)(y * k)];
    };
  }

  return forward;
}

function _default() {
  var a = 1,
      b = 0,
      psiMax = 45 * _math.radians,
      ratio = 2,
      mutate = (0, _d3Geo.geoProjectionMutator)(hufnagelRaw),
      projection = mutate(a, b, psiMax, ratio);

  projection.a = function (_) {
    return arguments.length ? mutate(a = +_, b, psiMax, ratio) : a;
  };

  projection.b = function (_) {
    return arguments.length ? mutate(a, b = +_, psiMax, ratio) : b;
  };

  projection.psiMax = function (_) {
    return arguments.length ? mutate(a, b, psiMax = +_ * _math.radians, ratio) : psiMax * _math.degrees;
  };

  projection.ratio = function (_) {
    return arguments.length ? mutate(a, b, psiMax, ratio = +_) : ratio;
  };

  return projection.scale(180.739);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math.js":"../node_modules/d3-geo-projection/src/math.js","./newton.js":"../node_modules/d3-geo-projection/src/newton.js"}],"../node_modules/d3-geo-projection/src/integrate.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.integrate = integrate;

// https://github.com/scijs/integrate-adaptive-simpson
// This algorithm adapted from pseudocode in:
// http://www.math.utk.edu/~ccollins/refs/Handouts/rich.pdf
function adsimp(f, a, b, fa, fm, fb, V0, tol, maxdepth, depth, state) {
  if (state.nanEncountered) {
    return NaN;
  }

  var h, f1, f2, sl, sr, s2, m, V1, V2, err;
  h = b - a;
  f1 = f(a + h * 0.25);
  f2 = f(b - h * 0.25); // Simple check for NaN:

  if (isNaN(f1)) {
    state.nanEncountered = true;
    return;
  } // Simple check for NaN:


  if (isNaN(f2)) {
    state.nanEncountered = true;
    return;
  }

  sl = h * (fa + 4 * f1 + fm) / 12;
  sr = h * (fm + 4 * f2 + fb) / 12;
  s2 = sl + sr;
  err = (s2 - V0) / 15;

  if (depth > maxdepth) {
    state.maxDepthCount++;
    return s2 + err;
  } else if (Math.abs(err) < tol) {
    return s2 + err;
  } else {
    m = a + h * 0.5;
    V1 = adsimp(f, a, m, fa, f1, fm, sl, tol * 0.5, maxdepth, depth + 1, state);

    if (isNaN(V1)) {
      state.nanEncountered = true;
      return NaN;
    }

    V2 = adsimp(f, m, b, fm, f2, fb, sr, tol * 0.5, maxdepth, depth + 1, state);

    if (isNaN(V2)) {
      state.nanEncountered = true;
      return NaN;
    }

    return V1 + V2;
  }
}

function integrate(f, a, b, tol, maxdepth) {
  var state = {
    maxDepthCount: 0,
    nanEncountered: false
  };

  if (tol === undefined) {
    tol = 1e-8;
  }

  if (maxdepth === undefined) {
    maxdepth = 20;
  }

  var fa = f(a);
  var fm = f(0.5 * (a + b));
  var fb = f(b);
  var V0 = (fa + 4 * fm + fb) * (b - a) / 6;
  var result = adsimp(f, a, b, fa, fm, fb, V0, tol, maxdepth, 1, state);
  /*
    if (state.maxDepthCount > 0 && console && console.warn) {
      console.warn('integrate-adaptive-simpson: Warning: maximum recursion depth (' + maxdepth + ') reached ' + state.maxDepthCount + ' times');
    }
  
    if (state.nanEncountered && console && console.warn) {
      console.warn('integrate-adaptive-simpson: Warning: NaN encountered. Halting early.');
    }
  */

  return result;
}
},{}],"../node_modules/d3-geo-projection/src/hyperelliptical.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hyperellipticalRaw = hyperellipticalRaw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

var _integrate = require("./integrate");

function hyperellipticalRaw(alpha, k, gamma) {
  function elliptic(f) {
    return alpha + (1 - alpha) * (0, _math.pow)(1 - (0, _math.pow)(f, k), 1 / k);
  }

  function z(f) {
    return (0, _integrate.integrate)(elliptic, 0, f, 1e-4);
  }

  var G = 1 / z(1),
      n = 1000,
      m = (1 + 1e-8) * G,
      approx = [];

  for (var i = 0; i <= n; i++) approx.push(z(i / n) * m);

  function Y(sinphi) {
    var rmin = 0,
        rmax = n,
        r = n >> 1;

    do {
      if (approx[r] > sinphi) rmax = r;else rmin = r;
      r = rmin + rmax >> 1;
    } while (r > rmin);

    var u = approx[r + 1] - approx[r];
    if (u) u = (sinphi - approx[r + 1]) / u;
    return (r + 1 + u) / n;
  }

  var ratio = 2 * Y(1) / _math.pi * G / gamma;

  var forward = function (lambda, phi) {
    var y = Y((0, _math.abs)((0, _math.sin)(phi))),
        x = elliptic(y) * lambda;
    y /= ratio;
    return [x, phi >= 0 ? y : -y];
  };

  forward.invert = function (x, y) {
    var phi;
    y *= ratio;
    if ((0, _math.abs)(y) < 1) phi = (0, _math.sign)(y) * (0, _math.asin)(z((0, _math.abs)(y)) * G);
    return [x / elliptic((0, _math.abs)(y)), phi];
  };

  return forward;
}

function _default() {
  var alpha = 0,
      k = 2.5,
      gamma = 1.183136,
      // affine = sqrt(2 * gamma / pi) = 0.8679
  m = (0, _d3Geo.geoProjectionMutator)(hyperellipticalRaw),
      p = m(alpha, k, gamma);

  p.alpha = function (_) {
    return arguments.length ? m(alpha = +_, k, gamma) : alpha;
  };

  p.k = function (_) {
    return arguments.length ? m(alpha, k = +_, gamma) : k;
  };

  p.gamma = function (_) {
    return arguments.length ? m(alpha, k, gamma = +_) : gamma;
  };

  return p.scale(152.63);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js","./integrate":"../node_modules/d3-geo-projection/src/integrate.js"}],"../node_modules/d3-geo-projection/src/interrupted/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Array = require("d3-array");

var _d3Geo = require("d3-geo");

var _math = require("../math");

function pointEqual(a, b) {
  return (0, _math.abs)(a[0] - b[0]) < _math.epsilon && (0, _math.abs)(a[1] - b[1]) < _math.epsilon;
}

function interpolateLine(coordinates, m) {
  var i = -1,
      n = coordinates.length,
      p0 = coordinates[0],
      p1,
      dx,
      dy,
      resampled = [];

  while (++i < n) {
    p1 = coordinates[i];
    dx = (p1[0] - p0[0]) / m;
    dy = (p1[1] - p0[1]) / m;

    for (var j = 0; j < m; ++j) resampled.push([p0[0] + j * dx, p0[1] + j * dy]);

    p0 = p1;
  }

  resampled.push(p1);
  return resampled;
}

function interpolateSphere(lobes) {
  var coordinates = [],
      lobe,
      lambda0,
      phi0,
      phi1,
      lambda2,
      phi2,
      i,
      n = lobes[0].length; // Northern Hemisphere

  for (i = 0; i < n; ++i) {
    lobe = lobes[0][i];
    lambda0 = lobe[0][0], phi0 = lobe[0][1], phi1 = lobe[1][1];
    lambda2 = lobe[2][0], phi2 = lobe[2][1];
    coordinates.push(interpolateLine([[lambda0 + _math.epsilon, phi0 + _math.epsilon], [lambda0 + _math.epsilon, phi1 - _math.epsilon], [lambda2 - _math.epsilon, phi1 - _math.epsilon], [lambda2 - _math.epsilon, phi2 + _math.epsilon]], 30));
  } // Southern Hemisphere


  for (i = lobes[1].length - 1; i >= 0; --i) {
    lobe = lobes[1][i];
    lambda0 = lobe[0][0], phi0 = lobe[0][1], phi1 = lobe[1][1];
    lambda2 = lobe[2][0], phi2 = lobe[2][1];
    coordinates.push(interpolateLine([[lambda2 - _math.epsilon, phi2 - _math.epsilon], [lambda2 - _math.epsilon, phi1 + _math.epsilon], [lambda0 + _math.epsilon, phi1 + _math.epsilon], [lambda0 + _math.epsilon, phi0 - _math.epsilon]], 30));
  }

  return {
    type: "Polygon",
    coordinates: [(0, _d3Array.merge)(coordinates)]
  };
}

function _default(project, lobes) {
  var sphere, bounds;

  function forward(lambda, phi) {
    var sign = phi < 0 ? -1 : +1,
        lobe = lobes[+(phi < 0)];

    for (var i = 0, n = lobe.length - 1; i < n && lambda > lobe[i][2][0]; ++i);

    var p = project(lambda - lobe[i][1][0], phi);
    p[0] += project(lobe[i][1][0], sign * phi > sign * lobe[i][0][1] ? lobe[i][0][1] : phi)[0];
    return p;
  } // Assumes mutually exclusive bounding boxes for lobes.


  if (project.invert) forward.invert = function (x, y) {
    var bound = bounds[+(y < 0)],
        lobe = lobes[+(y < 0)];

    for (var i = 0, n = bound.length; i < n; ++i) {
      var b = bound[i];

      if (b[0][0] <= x && x < b[1][0] && b[0][1] <= y && y < b[1][1]) {
        var p = project.invert(x - project(lobe[i][1][0], 0)[0], y);
        p[0] += lobe[i][1][0];
        return pointEqual(forward(p[0], p[1]), [x, y]) ? p : null;
      }
    }
  };
  var p = (0, _d3Geo.geoProjection)(forward),
      stream_ = p.stream;

  p.stream = function (stream) {
    var rotate = p.rotate(),
        rotateStream = stream_(stream),
        sphereStream = (p.rotate([0, 0]), stream_(stream));
    p.rotate(rotate);

    rotateStream.sphere = function () {
      (0, _d3Geo.geoStream)(sphere, sphereStream);
    };

    return rotateStream;
  };

  p.lobes = function (_) {
    if (!arguments.length) return lobes.map(function (lobe) {
      return lobe.map(function (l) {
        return [[l[0][0] * _math.degrees, l[0][1] * _math.degrees], [l[1][0] * _math.degrees, l[1][1] * _math.degrees], [l[2][0] * _math.degrees, l[2][1] * _math.degrees]];
      });
    });
    sphere = interpolateSphere(_);
    lobes = _.map(function (lobe) {
      return lobe.map(function (l) {
        return [[l[0][0] * _math.radians, l[0][1] * _math.radians], [l[1][0] * _math.radians, l[1][1] * _math.radians], [l[2][0] * _math.radians, l[2][1] * _math.radians]];
      });
    });
    bounds = lobes.map(function (lobe) {
      return lobe.map(function (l) {
        var x0 = project(l[0][0], l[0][1])[0],
            x1 = project(l[2][0], l[2][1])[0],
            y0 = project(l[1][0], l[0][1])[1],
            y1 = project(l[1][0], l[1][1])[1],
            t;
        if (y0 > y1) t = y0, y0 = y1, y1 = t;
        return [[x0, y0], [x1, y1]];
      });
    });
    return p;
  };

  if (lobes != null) p.lobes(lobes);
  return p;
}
},{"d3-array":"../node_modules/d3-array/src/index.js","d3-geo":"../node_modules/d3-geo/src/index.js","../math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/interrupted/boggs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _boggs = require("../boggs");

var _index = _interopRequireDefault(require("./index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var lobes = [[// northern hemisphere
[[-180, 0], [-100, 90], [-40, 0]], [[-40, 0], [30, 90], [180, 0]]], [// southern hemisphere
[[-180, 0], [-160, -90], [-100, 0]], [[-100, 0], [-60, -90], [-20, 0]], [[-20, 0], [20, -90], [80, 0]], [[80, 0], [140, -90], [180, 0]]]];

function _default() {
  return (0, _index.default)(_boggs.boggsRaw, lobes).scale(160.857);
}
},{"../boggs":"../node_modules/d3-geo-projection/src/boggs.js","./index":"../node_modules/d3-geo-projection/src/interrupted/index.js"}],"../node_modules/d3-geo-projection/src/interrupted/homolosine.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _homolosine = require("../homolosine");

var _index = _interopRequireDefault(require("./index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var lobes = [[// northern hemisphere
[[-180, 0], [-100, 90], [-40, 0]], [[-40, 0], [30, 90], [180, 0]]], [// southern hemisphere
[[-180, 0], [-160, -90], [-100, 0]], [[-100, 0], [-60, -90], [-20, 0]], [[-20, 0], [20, -90], [80, 0]], [[80, 0], [140, -90], [180, 0]]]];

function _default() {
  return (0, _index.default)(_homolosine.homolosineRaw, lobes).scale(152.63);
}
},{"../homolosine":"../node_modules/d3-geo-projection/src/homolosine.js","./index":"../node_modules/d3-geo-projection/src/interrupted/index.js"}],"../node_modules/d3-geo-projection/src/interrupted/mollweide.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _mollweide = require("../mollweide");

var _index = _interopRequireDefault(require("./index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var lobes = [[// northern hemisphere
[[-180, 0], [-100, 90], [-40, 0]], [[-40, 0], [30, 90], [180, 0]]], [// southern hemisphere
[[-180, 0], [-160, -90], [-100, 0]], [[-100, 0], [-60, -90], [-20, 0]], [[-20, 0], [20, -90], [80, 0]], [[80, 0], [140, -90], [180, 0]]]];

function _default() {
  return (0, _index.default)(_mollweide.mollweideRaw, lobes).scale(169.529);
}
},{"../mollweide":"../node_modules/d3-geo-projection/src/mollweide.js","./index":"../node_modules/d3-geo-projection/src/interrupted/index.js"}],"../node_modules/d3-geo-projection/src/interrupted/mollweideHemispheres.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _mollweide = require("../mollweide");

var _index = _interopRequireDefault(require("./index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var lobes = [[// northern hemisphere
[[-180, 0], [-90, 90], [0, 0]], [[0, 0], [90, 90], [180, 0]]], [// southern hemisphere
[[-180, 0], [-90, -90], [0, 0]], [[0, 0], [90, -90], [180, 0]]]];

function _default() {
  return (0, _index.default)(_mollweide.mollweideRaw, lobes).scale(169.529).rotate([20, 0]);
}
},{"../mollweide":"../node_modules/d3-geo-projection/src/mollweide.js","./index":"../node_modules/d3-geo-projection/src/interrupted/index.js"}],"../node_modules/d3-geo-projection/src/interrupted/sinuMollweide.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _sinuMollweide = require("../sinuMollweide");

var _index = _interopRequireDefault(require("./index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var lobes = [[// northern hemisphere
[[-180, 35], [-30, 90], [0, 35]], [[0, 35], [30, 90], [180, 35]]], [// southern hemisphere
[[-180, -10], [-102, -90], [-65, -10]], [[-65, -10], [5, -90], [77, -10]], [[77, -10], [103, -90], [180, -10]]]];

function _default() {
  return (0, _index.default)(_sinuMollweide.sinuMollweideRaw, lobes).rotate([-20, -55]).scale(164.263).center([0, -5.4036]);
}
},{"../sinuMollweide":"../node_modules/d3-geo-projection/src/sinuMollweide.js","./index":"../node_modules/d3-geo-projection/src/interrupted/index.js"}],"../node_modules/d3-geo-projection/src/interrupted/sinusoidal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _sinusoidal = require("../sinusoidal");

var _index = _interopRequireDefault(require("./index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var lobes = [[// northern hemisphere
[[-180, 0], [-110, 90], [-40, 0]], [[-40, 0], [0, 90], [40, 0]], [[40, 0], [110, 90], [180, 0]]], [// southern hemisphere
[[-180, 0], [-110, -90], [-40, 0]], [[-40, 0], [0, -90], [40, 0]], [[40, 0], [110, -90], [180, 0]]]];

function _default() {
  return (0, _index.default)(_sinusoidal.sinusoidalRaw, lobes).scale(152.63).rotate([-20, 0]);
}
},{"../sinusoidal":"../node_modules/d3-geo-projection/src/sinusoidal.js","./index":"../node_modules/d3-geo-projection/src/interrupted/index.js"}],"../node_modules/d3-geo-projection/src/kavrayskiy7.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.kavrayskiy7Raw = kavrayskiy7Raw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

function kavrayskiy7Raw(lambda, phi) {
  return [3 / _math.tau * lambda * (0, _math.sqrt)(_math.pi * _math.pi / 3 - phi * phi), phi];
}

kavrayskiy7Raw.invert = function (x, y) {
  return [_math.tau / 3 * x / (0, _math.sqrt)(_math.pi * _math.pi / 3 - y * y), y];
};

function _default() {
  return (0, _d3Geo.geoProjection)(kavrayskiy7Raw).scale(158.837);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/lagrange.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.lagrangeRaw = lagrangeRaw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

function lagrangeRaw(n) {
  function forward(lambda, phi) {
    if ((0, _math.abs)((0, _math.abs)(phi) - _math.halfPi) < _math.epsilon) return [0, phi < 0 ? -2 : 2];
    var sinPhi = (0, _math.sin)(phi),
        v = (0, _math.pow)((1 + sinPhi) / (1 - sinPhi), n / 2),
        c = 0.5 * (v + 1 / v) + (0, _math.cos)(lambda *= n);
    return [2 * (0, _math.sin)(lambda) / c, (v - 1 / v) / c];
  }

  forward.invert = function (x, y) {
    var y0 = (0, _math.abs)(y);
    if ((0, _math.abs)(y0 - 2) < _math.epsilon) return x ? null : [0, (0, _math.sign)(y) * _math.halfPi];
    if (y0 > 2) return null;
    x /= 2, y /= 2;
    var x2 = x * x,
        y2 = y * y,
        t = 2 * y / (1 + x2 + y2); // tanh(nPhi)

    t = (0, _math.pow)((1 + t) / (1 - t), 1 / n);
    return [(0, _math.atan2)(2 * x, 1 - x2 - y2) / n, (0, _math.asin)((t - 1) / (t + 1))];
  };

  return forward;
}

function _default() {
  var n = 0.5,
      m = (0, _d3Geo.geoProjectionMutator)(lagrangeRaw),
      p = m(n);

  p.spacing = function (_) {
    return arguments.length ? m(n = +_) : n;
  };

  return p.scale(124.75);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/larrivee.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.larriveeRaw = larriveeRaw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

var pi_sqrt2 = _math.pi / _math.sqrt2;

function larriveeRaw(lambda, phi) {
  return [lambda * (1 + (0, _math.sqrt)((0, _math.cos)(phi))) / 2, phi / ((0, _math.cos)(phi / 2) * (0, _math.cos)(lambda / 6))];
}

larriveeRaw.invert = function (x, y) {
  var x0 = (0, _math.abs)(x),
      y0 = (0, _math.abs)(y),
      lambda = _math.epsilon,
      phi = _math.halfPi;
  if (y0 < pi_sqrt2) phi *= y0 / pi_sqrt2;else lambda += 6 * (0, _math.acos)(pi_sqrt2 / y0);

  for (var i = 0; i < 25; i++) {
    var sinPhi = (0, _math.sin)(phi),
        sqrtcosPhi = (0, _math.sqrt)((0, _math.cos)(phi)),
        sinPhi_2 = (0, _math.sin)(phi / 2),
        cosPhi_2 = (0, _math.cos)(phi / 2),
        sinLambda_6 = (0, _math.sin)(lambda / 6),
        cosLambda_6 = (0, _math.cos)(lambda / 6),
        f0 = 0.5 * lambda * (1 + sqrtcosPhi) - x0,
        f1 = phi / (cosPhi_2 * cosLambda_6) - y0,
        df0dPhi = sqrtcosPhi ? -0.25 * lambda * sinPhi / sqrtcosPhi : 0,
        df0dLambda = 0.5 * (1 + sqrtcosPhi),
        df1dPhi = (1 + 0.5 * phi * sinPhi_2 / cosPhi_2) / (cosPhi_2 * cosLambda_6),
        df1dLambda = phi / cosPhi_2 * (sinLambda_6 / 6) / (cosLambda_6 * cosLambda_6),
        denom = df0dPhi * df1dLambda - df1dPhi * df0dLambda,
        dPhi = (f0 * df1dLambda - f1 * df0dLambda) / denom,
        dLambda = (f1 * df0dPhi - f0 * df1dPhi) / denom;
    phi -= dPhi;
    lambda -= dLambda;
    if ((0, _math.abs)(dPhi) < _math.epsilon && (0, _math.abs)(dLambda) < _math.epsilon) break;
  }

  return [x < 0 ? -lambda : lambda, y < 0 ? -phi : phi];
};

function _default() {
  return (0, _d3Geo.geoProjection)(larriveeRaw).scale(97.2672);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/laskowski.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.laskowskiRaw = laskowskiRaw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

function laskowskiRaw(lambda, phi) {
  var lambda2 = lambda * lambda,
      phi2 = phi * phi;
  return [lambda * (0.975534 + phi2 * (-0.119161 + lambda2 * -0.0143059 + phi2 * -0.0547009)), phi * (1.00384 + lambda2 * (0.0802894 + phi2 * -0.02855 + lambda2 * 0.000199025) + phi2 * (0.0998909 + phi2 * -0.0491032))];
}

laskowskiRaw.invert = function (x, y) {
  var lambda = (0, _math.sign)(x) * _math.pi,
      phi = y / 2,
      i = 50;

  do {
    var lambda2 = lambda * lambda,
        phi2 = phi * phi,
        lambdaPhi = lambda * phi,
        fx = lambda * (0.975534 + phi2 * (-0.119161 + lambda2 * -0.0143059 + phi2 * -0.0547009)) - x,
        fy = phi * (1.00384 + lambda2 * (0.0802894 + phi2 * -0.02855 + lambda2 * 0.000199025) + phi2 * (0.0998909 + phi2 * -0.0491032)) - y,
        deltaxDeltaLambda = 0.975534 - phi2 * (0.119161 + 3 * lambda2 * 0.0143059 + phi2 * 0.0547009),
        deltaxDeltaPhi = -lambdaPhi * (2 * 0.119161 + 4 * 0.0547009 * phi2 + 2 * 0.0143059 * lambda2),
        deltayDeltaLambda = lambdaPhi * (2 * 0.0802894 + 4 * 0.000199025 * lambda2 + 2 * -0.02855 * phi2),
        deltayDeltaPhi = 1.00384 + lambda2 * (0.0802894 + 0.000199025 * lambda2) + phi2 * (3 * (0.0998909 - 0.02855 * lambda2) - 5 * 0.0491032 * phi2),
        denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda,
        deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator,
        deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;
    lambda -= deltaLambda, phi -= deltaPhi;
  } while (((0, _math.abs)(deltaLambda) > _math.epsilon || (0, _math.abs)(deltaPhi) > _math.epsilon) && --i > 0);

  return i && [lambda, phi];
};

function _default() {
  return (0, _d3Geo.geoProjection)(laskowskiRaw).scale(139.98);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/littrow.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.littrowRaw = littrowRaw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

function littrowRaw(lambda, phi) {
  return [(0, _math.sin)(lambda) / (0, _math.cos)(phi), (0, _math.tan)(phi) * (0, _math.cos)(lambda)];
}

littrowRaw.invert = function (x, y) {
  var x2 = x * x,
      y2 = y * y,
      y2_1 = y2 + 1,
      x2_y2_1 = x2 + y2_1,
      cosPhi = x ? _math.sqrt1_2 * (0, _math.sqrt)((x2_y2_1 - (0, _math.sqrt)(x2_y2_1 * x2_y2_1 - 4 * x2)) / x2) : 1 / (0, _math.sqrt)(y2_1);
  return [(0, _math.asin)(x * cosPhi), (0, _math.sign)(y) * (0, _math.acos)(cosPhi)];
};

function _default() {
  return (0, _d3Geo.geoProjection)(littrowRaw).scale(144.049).clipAngle(90 - 1e-3);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/loximuthal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loximuthalRaw = loximuthalRaw;
exports.default = _default;

var _parallel = _interopRequireDefault(require("./parallel1"));

var _math = require("./math");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function loximuthalRaw(phi0) {
  var cosPhi0 = (0, _math.cos)(phi0),
      tanPhi0 = (0, _math.tan)(_math.quarterPi + phi0 / 2);

  function forward(lambda, phi) {
    var y = phi - phi0,
        x = (0, _math.abs)(y) < _math.epsilon ? lambda * cosPhi0 : (0, _math.abs)(x = _math.quarterPi + phi / 2) < _math.epsilon || (0, _math.abs)((0, _math.abs)(x) - _math.halfPi) < _math.epsilon ? 0 : lambda * y / (0, _math.log)((0, _math.tan)(x) / tanPhi0);
    return [x, y];
  }

  forward.invert = function (x, y) {
    var lambda,
        phi = y + phi0;
    return [(0, _math.abs)(y) < _math.epsilon ? x / cosPhi0 : (0, _math.abs)(lambda = _math.quarterPi + phi / 2) < _math.epsilon || (0, _math.abs)((0, _math.abs)(lambda) - _math.halfPi) < _math.epsilon ? 0 : x * (0, _math.log)((0, _math.tan)(lambda) / tanPhi0) / y, phi];
  };

  return forward;
}

function _default() {
  return (0, _parallel.default)(loximuthalRaw).parallel(40).scale(158.837);
}
},{"./parallel1":"../node_modules/d3-geo-projection/src/parallel1.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/miller.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.millerRaw = millerRaw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

function millerRaw(lambda, phi) {
  return [lambda, 1.25 * (0, _math.log)((0, _math.tan)(_math.quarterPi + 0.4 * phi))];
}

millerRaw.invert = function (x, y) {
  return [x, 2.5 * (0, _math.atan)((0, _math.exp)(0.8 * y)) - 0.625 * _math.pi];
};

function _default() {
  return (0, _d3Geo.geoProjection)(millerRaw).scale(108.318);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/modifiedStereographic.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.modifiedStereographicRaw = modifiedStereographicRaw;
exports.modifiedStereographicAlaska = modifiedStereographicAlaska;
exports.modifiedStereographicGs48 = modifiedStereographicGs48;
exports.modifiedStereographicGs50 = modifiedStereographicGs50;
exports.modifiedStereographicMiller = modifiedStereographicMiller;
exports.modifiedStereographicLee = modifiedStereographicLee;
exports.default = modifiedStereographic;

var _d3Geo = require("d3-geo");

var _math = require("./math");

function modifiedStereographicRaw(C) {
  var m = C.length - 1;

  function forward(lambda, phi) {
    var cosPhi = (0, _math.cos)(phi),
        k = 2 / (1 + cosPhi * (0, _math.cos)(lambda)),
        zr = k * cosPhi * (0, _math.sin)(lambda),
        zi = k * (0, _math.sin)(phi),
        i = m,
        w = C[i],
        ar = w[0],
        ai = w[1],
        t;

    while (--i >= 0) {
      w = C[i];
      ar = w[0] + zr * (t = ar) - zi * ai;
      ai = w[1] + zr * ai + zi * t;
    }

    ar = zr * (t = ar) - zi * ai;
    ai = zr * ai + zi * t;
    return [ar, ai];
  }

  forward.invert = function (x, y) {
    var i = 20,
        zr = x,
        zi = y;

    do {
      var j = m,
          w = C[j],
          ar = w[0],
          ai = w[1],
          br = 0,
          bi = 0,
          t;

      while (--j >= 0) {
        w = C[j];
        br = ar + zr * (t = br) - zi * bi;
        bi = ai + zr * bi + zi * t;
        ar = w[0] + zr * (t = ar) - zi * ai;
        ai = w[1] + zr * ai + zi * t;
      }

      br = ar + zr * (t = br) - zi * bi;
      bi = ai + zr * bi + zi * t;
      ar = zr * (t = ar) - zi * ai - x;
      ai = zr * ai + zi * t - y;
      var denominator = br * br + bi * bi,
          deltar,
          deltai;
      zr -= deltar = (ar * br + ai * bi) / denominator;
      zi -= deltai = (ai * br - ar * bi) / denominator;
    } while ((0, _math.abs)(deltar) + (0, _math.abs)(deltai) > _math.epsilon * _math.epsilon && --i > 0);

    if (i) {
      var rho = (0, _math.sqrt)(zr * zr + zi * zi),
          c = 2 * (0, _math.atan)(rho * 0.5),
          sinc = (0, _math.sin)(c);
      return [(0, _math.atan2)(zr * sinc, rho * (0, _math.cos)(c)), rho ? (0, _math.asin)(zi * sinc / rho) : 0];
    }
  };

  return forward;
}

var alaska = [[0.9972523, 0], [0.0052513, -0.0041175], [0.0074606, 0.0048125], [-0.0153783, -0.1968253], [0.0636871, -0.1408027], [0.3660976, -0.2937382]],
    gs48 = [[0.98879, 0], [0, 0], [-0.050909, 0], [0, 0], [0.075528, 0]],
    gs50 = [[0.9842990, 0], [0.0211642, 0.0037608], [-0.1036018, -0.0575102], [-0.0329095, -0.0320119], [0.0499471, 0.1223335], [0.0260460, 0.0899805], [0.0007388, -0.1435792], [0.0075848, -0.1334108], [-0.0216473, 0.0776645], [-0.0225161, 0.0853673]],
    miller = [[0.9245, 0], [0, 0], [0.01943, 0]],
    lee = [[0.721316, 0], [0, 0], [-0.00881625, -0.00617325]];

function modifiedStereographicAlaska() {
  return modifiedStereographic(alaska, [152, -64]).scale(1500).center([-160.908, 62.4864]).clipAngle(25);
}

function modifiedStereographicGs48() {
  return modifiedStereographic(gs48, [95, -38]).scale(1000).clipAngle(55).center([-96.5563, 38.8675]);
}

function modifiedStereographicGs50() {
  return modifiedStereographic(gs50, [120, -45]).scale(359.513).clipAngle(55).center([-117.474, 53.0628]);
}

function modifiedStereographicMiller() {
  return modifiedStereographic(miller, [-20, -18]).scale(209.091).center([20, 16.7214]).clipAngle(82);
}

function modifiedStereographicLee() {
  return modifiedStereographic(lee, [165, 10]).scale(250).clipAngle(130).center([-165, -10]);
}

function modifiedStereographic(coefficients, rotate) {
  var p = (0, _d3Geo.geoProjection)(modifiedStereographicRaw(coefficients)).rotate(rotate).clipAngle(90),
      r = (0, _d3Geo.geoRotation)(rotate),
      center = p.center;
  delete p.rotate;

  p.center = function (_) {
    return arguments.length ? center(r(_)) : r.invert(center());
  };

  return p;
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/mtFlatPolarParabolic.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mtFlatPolarParabolicRaw = mtFlatPolarParabolicRaw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

var sqrt6 = (0, _math.sqrt)(6),
    sqrt7 = (0, _math.sqrt)(7);

function mtFlatPolarParabolicRaw(lambda, phi) {
  var theta = (0, _math.asin)(7 * (0, _math.sin)(phi) / (3 * sqrt6));
  return [sqrt6 * lambda * (2 * (0, _math.cos)(2 * theta / 3) - 1) / sqrt7, 9 * (0, _math.sin)(theta / 3) / sqrt7];
}

mtFlatPolarParabolicRaw.invert = function (x, y) {
  var theta = 3 * (0, _math.asin)(y * sqrt7 / 9);
  return [x * sqrt7 / (sqrt6 * (2 * (0, _math.cos)(2 * theta / 3) - 1)), (0, _math.asin)((0, _math.sin)(theta) * 3 * sqrt6 / 7)];
};

function _default() {
  return (0, _d3Geo.geoProjection)(mtFlatPolarParabolicRaw).scale(164.859);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/mtFlatPolarQuartic.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mtFlatPolarQuarticRaw = mtFlatPolarQuarticRaw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

function mtFlatPolarQuarticRaw(lambda, phi) {
  var k = (1 + _math.sqrt1_2) * (0, _math.sin)(phi),
      theta = phi;

  for (var i = 0, delta; i < 25; i++) {
    theta -= delta = ((0, _math.sin)(theta / 2) + (0, _math.sin)(theta) - k) / (0.5 * (0, _math.cos)(theta / 2) + (0, _math.cos)(theta));
    if ((0, _math.abs)(delta) < _math.epsilon) break;
  }

  return [lambda * (1 + 2 * (0, _math.cos)(theta) / (0, _math.cos)(theta / 2)) / (3 * _math.sqrt2), 2 * (0, _math.sqrt)(3) * (0, _math.sin)(theta / 2) / (0, _math.sqrt)(2 + _math.sqrt2)];
}

mtFlatPolarQuarticRaw.invert = function (x, y) {
  var sinTheta_2 = y * (0, _math.sqrt)(2 + _math.sqrt2) / (2 * (0, _math.sqrt)(3)),
      theta = 2 * (0, _math.asin)(sinTheta_2);
  return [3 * _math.sqrt2 * x / (1 + 2 * (0, _math.cos)(theta) / (0, _math.cos)(theta / 2)), (0, _math.asin)((sinTheta_2 + (0, _math.sin)(theta)) / (1 + _math.sqrt1_2))];
};

function _default() {
  return (0, _d3Geo.geoProjection)(mtFlatPolarQuarticRaw).scale(188.209);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/mtFlatPolarSinusoidal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mtFlatPolarSinusoidalRaw = mtFlatPolarSinusoidalRaw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

function mtFlatPolarSinusoidalRaw(lambda, phi) {
  var A = (0, _math.sqrt)(6 / (4 + _math.pi)),
      k = (1 + _math.pi / 4) * (0, _math.sin)(phi),
      theta = phi / 2;

  for (var i = 0, delta; i < 25; i++) {
    theta -= delta = (theta / 2 + (0, _math.sin)(theta) - k) / (0.5 + (0, _math.cos)(theta));
    if ((0, _math.abs)(delta) < _math.epsilon) break;
  }

  return [A * (0.5 + (0, _math.cos)(theta)) * lambda / 1.5, A * theta];
}

mtFlatPolarSinusoidalRaw.invert = function (x, y) {
  var A = (0, _math.sqrt)(6 / (4 + _math.pi)),
      theta = y / A;
  if ((0, _math.abs)((0, _math.abs)(theta) - _math.halfPi) < _math.epsilon) theta = theta < 0 ? -_math.halfPi : _math.halfPi;
  return [1.5 * x / (A * (0.5 + (0, _math.cos)(theta))), (0, _math.asin)((theta / 2 + (0, _math.sin)(theta)) / (1 + _math.pi / 4))];
};

function _default() {
  return (0, _d3Geo.geoProjection)(mtFlatPolarSinusoidalRaw).scale(166.518);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/naturalEarth2.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.naturalEarth2Raw = naturalEarth2Raw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

function naturalEarth2Raw(lambda, phi) {
  var phi2 = phi * phi,
      phi4 = phi2 * phi2,
      phi6 = phi2 * phi4;
  return [lambda * (0.84719 - 0.13063 * phi2 + phi6 * phi6 * (-0.04515 + 0.05494 * phi2 - 0.02326 * phi4 + 0.00331 * phi6)), phi * (1.01183 + phi4 * phi4 * (-0.02625 + 0.01926 * phi2 - 0.00396 * phi4))];
}

naturalEarth2Raw.invert = function (x, y) {
  var phi = y,
      i = 25,
      delta,
      phi2,
      phi4,
      phi6;

  do {
    phi2 = phi * phi;
    phi4 = phi2 * phi2;
    phi -= delta = (phi * (1.01183 + phi4 * phi4 * (-0.02625 + 0.01926 * phi2 - 0.00396 * phi4)) - y) / (1.01183 + phi4 * phi4 * (9 * -0.02625 + 11 * 0.01926 * phi2 + 13 * -0.00396 * phi4));
  } while ((0, _math.abs)(delta) > _math.epsilon2 && --i > 0);

  phi2 = phi * phi;
  phi4 = phi2 * phi2;
  phi6 = phi2 * phi4;
  return [x / (0.84719 - 0.13063 * phi2 + phi6 * phi6 * (-0.04515 + 0.05494 * phi2 - 0.02326 * phi4 + 0.00331 * phi6)), phi];
};

function _default() {
  return (0, _d3Geo.geoProjection)(naturalEarth2Raw).scale(175.295);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/nellHammer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nellHammerRaw = nellHammerRaw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

function nellHammerRaw(lambda, phi) {
  return [lambda * (1 + (0, _math.cos)(phi)) / 2, 2 * (phi - (0, _math.tan)(phi / 2))];
}

nellHammerRaw.invert = function (x, y) {
  var p = y / 2;

  for (var i = 0, delta = Infinity; i < 10 && (0, _math.abs)(delta) > _math.epsilon; ++i) {
    var c = (0, _math.cos)(y / 2);
    y -= delta = (y - (0, _math.tan)(y / 2) - p) / (1 - 0.5 / (c * c));
  }

  return [2 * x / (1 + (0, _math.cos)(y)), y];
};

function _default() {
  return (0, _d3Geo.geoProjection)(nellHammerRaw).scale(152.63);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/interrupted/quarticAuthalic.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _hammer = require("../hammer");

var _index = _interopRequireDefault(require("./index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var lobes = [[// northern hemisphere
[[-180, 0], [-90, 90], [0, 0]], [[0, 0], [90, 90], [180, 0]]], [// southern hemisphere
[[-180, 0], [-90, -90], [0, 0]], [[0, 0], [90, -90], [180, 0]]]];

function _default() {
  return (0, _index.default)((0, _hammer.hammerRaw)(Infinity), lobes).rotate([20, 0]).scale(152.63);
}
},{"../hammer":"../node_modules/d3-geo-projection/src/hammer.js","./index":"../node_modules/d3-geo-projection/src/interrupted/index.js"}],"../node_modules/d3-geo-projection/src/nicolosi.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nicolosiRaw = nicolosiRaw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

var _newton = require("./newton.js");

// Based on Torben Jansen's implementation
// https://beta.observablehq.com/@toja/nicolosi-globular-projection
// https://beta.observablehq.com/@toja/nicolosi-globular-inverse
function nicolosiRaw(lambda, phi) {
  var sinPhi = (0, _math.sin)(phi),
      q = (0, _math.cos)(phi),
      s = (0, _math.sign)(lambda);
  if (lambda === 0 || (0, _math.abs)(phi) === _math.halfPi) return [0, phi];else if (phi === 0) return [lambda, 0];else if ((0, _math.abs)(lambda) === _math.halfPi) return [lambda * q, _math.halfPi * sinPhi];
  var b = _math.pi / (2 * lambda) - 2 * lambda / _math.pi,
      c = 2 * phi / _math.pi,
      d = (1 - c * c) / (sinPhi - c);
  var b2 = b * b,
      d2 = d * d,
      b2d2 = 1 + b2 / d2,
      d2b2 = 1 + d2 / b2;
  var M = (b * sinPhi / d - b / 2) / b2d2,
      N = (d2 * sinPhi / b2 + d / 2) / d2b2,
      m = M * M + q * q / b2d2,
      n = N * N - (d2 * sinPhi * sinPhi / b2 + d * sinPhi - 1) / d2b2;
  return [_math.halfPi * (M + (0, _math.sqrt)(m) * s), _math.halfPi * (N + (0, _math.sqrt)(n < 0 ? 0 : n) * (0, _math.sign)(-phi * b) * s)];
}

nicolosiRaw.invert = function (x, y) {
  x /= _math.halfPi;
  y /= _math.halfPi;
  var x2 = x * x,
      y2 = y * y,
      x2y2 = x2 + y2,
      pi2 = _math.pi * _math.pi;
  return [x ? (x2y2 - 1 + (0, _math.sqrt)((1 - x2y2) * (1 - x2y2) + 4 * x2)) / (2 * x) * _math.halfPi : 0, (0, _newton.solve)(function (phi) {
    return x2y2 * (_math.pi * (0, _math.sin)(phi) - 2 * phi) * _math.pi + 4 * phi * phi * (y - (0, _math.sin)(phi)) + 2 * _math.pi * phi - pi2 * y;
  }, 0)];
};

function _default() {
  return (0, _d3Geo.geoProjection)(nicolosiRaw).scale(127.267);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js","./newton.js":"../node_modules/d3-geo-projection/src/newton.js"}],"../node_modules/d3-geo-projection/src/patterson.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pattersonRaw = pattersonRaw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

// Based on Java implementation by Bojan Savric.
// https://github.com/OSUCartography/JMapProjLib/blob/master/src/com/jhlabs/map/proj/PattersonProjection.java
var pattersonK1 = 1.0148,
    pattersonK2 = 0.23185,
    pattersonK3 = -0.14499,
    pattersonK4 = 0.02406,
    pattersonC1 = pattersonK1,
    pattersonC2 = 5 * pattersonK2,
    pattersonC3 = 7 * pattersonK3,
    pattersonC4 = 9 * pattersonK4,
    pattersonYmax = 1.790857183;

function pattersonRaw(lambda, phi) {
  var phi2 = phi * phi;
  return [lambda, phi * (pattersonK1 + phi2 * phi2 * (pattersonK2 + phi2 * (pattersonK3 + pattersonK4 * phi2)))];
}

pattersonRaw.invert = function (x, y) {
  if (y > pattersonYmax) y = pattersonYmax;else if (y < -pattersonYmax) y = -pattersonYmax;
  var yc = y,
      delta;

  do {
    // Newton-Raphson
    var y2 = yc * yc;
    yc -= delta = (yc * (pattersonK1 + y2 * y2 * (pattersonK2 + y2 * (pattersonK3 + pattersonK4 * y2))) - y) / (pattersonC1 + y2 * y2 * (pattersonC2 + y2 * (pattersonC3 + pattersonC4 * y2)));
  } while ((0, _math.abs)(delta) > _math.epsilon);

  return [x, yc];
};

function _default() {
  return (0, _d3Geo.geoProjection)(pattersonRaw).scale(139.319);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/polyconic.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.polyconicRaw = polyconicRaw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

function polyconicRaw(lambda, phi) {
  if ((0, _math.abs)(phi) < _math.epsilon) return [lambda, 0];
  var tanPhi = (0, _math.tan)(phi),
      k = lambda * (0, _math.sin)(phi);
  return [(0, _math.sin)(k) / tanPhi, phi + (1 - (0, _math.cos)(k)) / tanPhi];
}

polyconicRaw.invert = function (x, y) {
  if ((0, _math.abs)(y) < _math.epsilon) return [x, 0];
  var k = x * x + y * y,
      phi = y * 0.5,
      i = 10,
      delta;

  do {
    var tanPhi = (0, _math.tan)(phi),
        secPhi = 1 / (0, _math.cos)(phi),
        j = k - 2 * y * phi + phi * phi;
    phi -= delta = (tanPhi * j + 2 * (phi - y)) / (2 + j * secPhi * secPhi + 2 * (phi - y) * tanPhi);
  } while ((0, _math.abs)(delta) > _math.epsilon && --i > 0);

  tanPhi = (0, _math.tan)(phi);
  return [((0, _math.abs)(y) < (0, _math.abs)(phi + 1 / tanPhi) ? (0, _math.asin)(x * tanPhi) : (0, _math.sign)(x) * ((0, _math.acos)((0, _math.abs)(x * tanPhi)) + _math.halfPi)) / (0, _math.sin)(phi), phi];
};

function _default() {
  return (0, _d3Geo.geoProjection)(polyconicRaw).scale(103.74);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/polyhedral/matrix.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.inverse = inverse;
exports.multiply = multiply;

var _math = require("../math");

// Note: 6-element arrays are used to denote the 3x3 affine transform matrix:
// [a, b, c,
//  d, e, f,
//  0, 0, 1] - this redundant row is left out.
// Transform matrix for [a0, a1] -> [b0, b1].
function _default(a, b) {
  var u = subtract(a[1], a[0]),
      v = subtract(b[1], b[0]),
      phi = angle(u, v),
      s = length(u) / length(v);
  return multiply([1, 0, a[0][0], 0, 1, a[0][1]], multiply([s, 0, 0, 0, s, 0], multiply([(0, _math.cos)(phi), (0, _math.sin)(phi), 0, -(0, _math.sin)(phi), (0, _math.cos)(phi), 0], [1, 0, -b[0][0], 0, 1, -b[0][1]])));
} // Inverts a transform matrix.


function inverse(m) {
  var k = 1 / (m[0] * m[4] - m[1] * m[3]);
  return [k * m[4], -k * m[1], k * (m[1] * m[5] - m[2] * m[4]), -k * m[3], k * m[0], k * (m[2] * m[3] - m[0] * m[5])];
} // Multiplies two 3x2 matrices.


function multiply(a, b) {
  return [a[0] * b[0] + a[1] * b[3], a[0] * b[1] + a[1] * b[4], a[0] * b[2] + a[1] * b[5] + a[2], a[3] * b[0] + a[4] * b[3], a[3] * b[1] + a[4] * b[4], a[3] * b[2] + a[4] * b[5] + a[5]];
} // Subtracts 2D vectors.


function subtract(a, b) {
  return [a[0] - b[0], a[1] - b[1]];
} // Magnitude of a 2D vector.


function length(v) {
  return (0, _math.sqrt)(v[0] * v[0] + v[1] * v[1]);
} // Angle between two 2D vectors.


function angle(a, b) {
  return (0, _math.atan2)(a[0] * b[1] - a[1] * b[0], a[0] * b[0] + a[1] * b[1]);
}
},{"../math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/polyhedral/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("../math");

var _matrix = _interopRequireWildcard(require("./matrix"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

// Creates a polyhedral projection.
//  * root: a spanning tree of polygon faces.  Nodes are automatically
//    augmented with a transform matrix.
//  * face: a function that returns the appropriate node for a given {lambda, phi}
//    point (radians).
//  * r: rotation angle for root face [deprecated by .angle()].
function _default(root, face, r) {
  recurse(root, {
    transform: null
  });

  function recurse(node, parent) {
    node.edges = faceEdges(node.face); // Find shared edge.

    if (parent.face) {
      var shared = node.shared = sharedEdge(node.face, parent.face),
          m = (0, _matrix.default)(shared.map(parent.project), shared.map(node.project));
      node.transform = parent.transform ? (0, _matrix.multiply)(parent.transform, m) : m; // Replace shared edge in parent edges array.

      var edges = parent.edges;

      for (var i = 0, n = edges.length; i < n; ++i) {
        if (pointEqual(shared[0], edges[i][1]) && pointEqual(shared[1], edges[i][0])) edges[i] = node;
        if (pointEqual(shared[0], edges[i][0]) && pointEqual(shared[1], edges[i][1])) edges[i] = node;
      }

      edges = node.edges;

      for (i = 0, n = edges.length; i < n; ++i) {
        if (pointEqual(shared[0], edges[i][0]) && pointEqual(shared[1], edges[i][1])) edges[i] = parent;
        if (pointEqual(shared[0], edges[i][1]) && pointEqual(shared[1], edges[i][0])) edges[i] = parent;
      }
    } else {
      node.transform = parent.transform;
    }

    if (node.children) {
      node.children.forEach(function (child) {
        recurse(child, node);
      });
    }

    return node;
  }

  function forward(lambda, phi) {
    var node = face(lambda, phi),
        point = node.project([lambda * _math.degrees, phi * _math.degrees]),
        t;

    if (t = node.transform) {
      return [t[0] * point[0] + t[1] * point[1] + t[2], -(t[3] * point[0] + t[4] * point[1] + t[5])];
    }

    point[1] = -point[1];
    return point;
  } // Naive inverse!  A faster solution would use bounding boxes, or even a
  // polygonal quadtree.


  if (hasInverse(root)) forward.invert = function (x, y) {
    var coordinates = faceInvert(root, [x, -y]);
    return coordinates && (coordinates[0] *= _math.radians, coordinates[1] *= _math.radians, coordinates);
  };

  function faceInvert(node, coordinates) {
    var invert = node.project.invert,
        t = node.transform,
        point = coordinates;

    if (t) {
      t = (0, _matrix.inverse)(t);
      point = [t[0] * point[0] + t[1] * point[1] + t[2], t[3] * point[0] + t[4] * point[1] + t[5]];
    }

    if (invert && node === faceDegrees(p = invert(point))) return p;
    var p,
        children = node.children;

    for (var i = 0, n = children && children.length; i < n; ++i) {
      if (p = faceInvert(children[i], coordinates)) return p;
    }
  }

  function faceDegrees(coordinates) {
    return face(coordinates[0] * _math.radians, coordinates[1] * _math.radians);
  }

  var proj = (0, _d3Geo.geoProjection)(forward),
      stream_ = proj.stream;

  proj.stream = function (stream) {
    var rotate = proj.rotate(),
        rotateStream = stream_(stream),
        sphereStream = (proj.rotate([0, 0]), stream_(stream));
    proj.rotate(rotate);

    rotateStream.sphere = function () {
      sphereStream.polygonStart();
      sphereStream.lineStart();
      outline(sphereStream, root);
      sphereStream.lineEnd();
      sphereStream.polygonEnd();
    };

    return rotateStream;
  };

  return proj.angle(r == null ? -30 : r * _math.degrees);
}

function outline(stream, node, parent) {
  var point,
      edges = node.edges,
      n = edges.length,
      edge,
      multiPoint = {
    type: "MultiPoint",
    coordinates: node.face
  },
      notPoles = node.face.filter(function (d) {
    return (0, _math.abs)(d[1]) !== 90;
  }),
      b = (0, _d3Geo.geoBounds)({
    type: "MultiPoint",
    coordinates: notPoles
  }),
      inside = false,
      j = -1,
      dx = b[1][0] - b[0][0]; // TODO

  var c = dx === 180 || dx === 360 ? [(b[0][0] + b[1][0]) / 2, (b[0][1] + b[1][1]) / 2] : (0, _d3Geo.geoCentroid)(multiPoint); // First find the shared edge…

  if (parent) while (++j < n) {
    if (edges[j] === parent) break;
  }
  ++j;

  for (var i = 0; i < n; ++i) {
    edge = edges[(i + j) % n];

    if (Array.isArray(edge)) {
      if (!inside) {
        stream.point((point = (0, _d3Geo.geoInterpolate)(edge[0], c)(_math.epsilon))[0], point[1]);
        inside = true;
      }

      stream.point((point = (0, _d3Geo.geoInterpolate)(edge[1], c)(_math.epsilon))[0], point[1]);
    } else {
      inside = false;
      if (edge !== parent) outline(stream, edge, node);
    }
  }
} // Tests equality of two spherical points.


function pointEqual(a, b) {
  return a && b && a[0] === b[0] && a[1] === b[1];
} // Finds a shared edge given two clockwise polygons.


function sharedEdge(a, b) {
  var x,
      y,
      n = a.length,
      found = null;

  for (var i = 0; i < n; ++i) {
    x = a[i];

    for (var j = b.length; --j >= 0;) {
      y = b[j];

      if (x[0] === y[0] && x[1] === y[1]) {
        if (found) return [found, x];
        found = x;
      }
    }
  }
} // Converts an array of n face vertices to an array of n + 1 edges.


function faceEdges(face) {
  var n = face.length,
      edges = [];

  for (var a = face[n - 1], i = 0; i < n; ++i) edges.push([a, a = face[i]]);

  return edges;
}

function hasInverse(node) {
  return node.project.invert || node.children && node.children.some(hasInverse);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","../math":"../node_modules/d3-geo-projection/src/math.js","./matrix":"../node_modules/d3-geo-projection/src/polyhedral/matrix.js"}],"../node_modules/d3-geo-projection/src/polyhedral/octahedron.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// TODO generate on-the-fly to avoid external modification.
var octahedron = [[0, 90], [-90, 0], [0, 0], [90, 0], [180, 0], [0, -90]];

var _default = [[0, 2, 1], [0, 3, 2], [5, 1, 2], [5, 2, 3], [0, 1, 4], [0, 4, 3], [5, 4, 1], [5, 3, 4]].map(function (face) {
  return face.map(function (i) {
    return octahedron[i];
  });
});

exports.default = _default;
},{}],"../node_modules/d3-geo-projection/src/polyhedral/butterfly.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("../math");

var _index = _interopRequireDefault(require("./index"));

var _octahedron = _interopRequireDefault(require("./octahedron"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(faceProjection) {
  faceProjection = faceProjection || function (face) {
    var c = (0, _d3Geo.geoCentroid)({
      type: "MultiPoint",
      coordinates: face
    });
    return (0, _d3Geo.geoGnomonic)().scale(1).translate([0, 0]).rotate([-c[0], -c[1]]);
  };

  var faces = _octahedron.default.map(function (face) {
    return {
      face: face,
      project: faceProjection(face)
    };
  });

  [-1, 0, 0, 1, 0, 1, 4, 5].forEach(function (d, i) {
    var node = faces[d];
    node && (node.children || (node.children = [])).push(faces[i]);
  });
  return (0, _index.default)(faces[0], function (lambda, phi) {
    return faces[lambda < -_math.pi / 2 ? phi < 0 ? 6 : 4 : lambda < 0 ? phi < 0 ? 2 : 0 : lambda < _math.pi / 2 ? phi < 0 ? 3 : 1 : phi < 0 ? 7 : 5];
  }).angle(-30).scale(101.858).center([0, 45]);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","../math":"../node_modules/d3-geo-projection/src/math.js","./index":"../node_modules/d3-geo-projection/src/polyhedral/index.js","./octahedron":"../node_modules/d3-geo-projection/src/polyhedral/octahedron.js"}],"../node_modules/d3-geo-projection/src/polyhedral/collignon.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Geo = require("d3-geo");

var _collignon = require("../collignon");

var _math = require("../math");

var _index = _interopRequireDefault(require("./index"));

var _octahedron = _interopRequireDefault(require("./octahedron"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var kx = 2 / (0, _math.sqrt)(3);

function collignonK(a, b) {
  var p = (0, _collignon.collignonRaw)(a, b);
  return [p[0] * kx, p[1]];
}

collignonK.invert = function (x, y) {
  return _collignon.collignonRaw.invert(x / kx, y);
};

function _default(faceProjection) {
  faceProjection = faceProjection || function (face) {
    var c = (0, _d3Geo.geoCentroid)({
      type: "MultiPoint",
      coordinates: face
    });
    return (0, _d3Geo.geoProjection)(collignonK).translate([0, 0]).scale(1).rotate(c[1] > 0 ? [-c[0], 0] : [180 - c[0], 180]);
  };

  var faces = _octahedron.default.map(function (face) {
    return {
      face: face,
      project: faceProjection(face)
    };
  });

  [-1, 0, 0, 1, 0, 1, 4, 5].forEach(function (d, i) {
    var node = faces[d];
    node && (node.children || (node.children = [])).push(faces[i]);
  });
  return (0, _index.default)(faces[0], function (lambda, phi) {
    return faces[lambda < -_math.pi / 2 ? phi < 0 ? 6 : 4 : lambda < 0 ? phi < 0 ? 2 : 0 : lambda < _math.pi / 2 ? phi < 0 ? 3 : 1 : phi < 0 ? 7 : 5];
  }).angle(-30).scale(121.906).center([0, 48.5904]);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","../collignon":"../node_modules/d3-geo-projection/src/collignon.js","../math":"../node_modules/d3-geo-projection/src/math.js","./index":"../node_modules/d3-geo-projection/src/polyhedral/index.js","./octahedron":"../node_modules/d3-geo-projection/src/polyhedral/octahedron.js"}],"../node_modules/d3-geo-projection/src/polyhedral/waterman.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("../math");

var _index = _interopRequireDefault(require("./index"));

var _octahedron = _interopRequireDefault(require("./octahedron"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(faceProjection) {
  faceProjection = faceProjection || function (face) {
    var c = face.length === 6 ? (0, _d3Geo.geoCentroid)({
      type: "MultiPoint",
      coordinates: face
    }) : face[0];
    return (0, _d3Geo.geoGnomonic)().scale(1).translate([0, 0]).rotate([-c[0], -c[1]]);
  };

  var w5 = _octahedron.default.map(function (face) {
    var xyz = face.map(cartesian),
        n = xyz.length,
        a = xyz[n - 1],
        b,
        hexagon = [];

    for (var i = 0; i < n; ++i) {
      b = xyz[i];
      hexagon.push(spherical([a[0] * 0.9486832980505138 + b[0] * 0.31622776601683794, a[1] * 0.9486832980505138 + b[1] * 0.31622776601683794, a[2] * 0.9486832980505138 + b[2] * 0.31622776601683794]), spherical([b[0] * 0.9486832980505138 + a[0] * 0.31622776601683794, b[1] * 0.9486832980505138 + a[1] * 0.31622776601683794, b[2] * 0.9486832980505138 + a[2] * 0.31622776601683794]));
      a = b;
    }

    return hexagon;
  });

  var cornerNormals = [];
  var parents = [-1, 0, 0, 1, 0, 1, 4, 5];
  w5.forEach(function (hexagon, j) {
    var face = _octahedron.default[j],
        n = face.length,
        normals = cornerNormals[j] = [];

    for (var i = 0; i < n; ++i) {
      w5.push([face[i], hexagon[(i * 2 + 2) % (2 * n)], hexagon[(i * 2 + 1) % (2 * n)]]);
      parents.push(j);
      normals.push(cross(cartesian(hexagon[(i * 2 + 2) % (2 * n)]), cartesian(hexagon[(i * 2 + 1) % (2 * n)])));
    }
  });
  var faces = w5.map(function (face) {
    return {
      project: faceProjection(face),
      face: face
    };
  });
  parents.forEach(function (d, i) {
    var parent = faces[d];
    parent && (parent.children || (parent.children = [])).push(faces[i]);
  });

  function face(lambda, phi) {
    var cosphi = (0, _math.cos)(phi),
        p = [cosphi * (0, _math.cos)(lambda), cosphi * (0, _math.sin)(lambda), (0, _math.sin)(phi)];
    var hexagon = lambda < -_math.pi / 2 ? phi < 0 ? 6 : 4 : lambda < 0 ? phi < 0 ? 2 : 0 : lambda < _math.pi / 2 ? phi < 0 ? 3 : 1 : phi < 0 ? 7 : 5;
    var n = cornerNormals[hexagon];
    return faces[dot(n[0], p) < 0 ? 8 + 3 * hexagon : dot(n[1], p) < 0 ? 8 + 3 * hexagon + 1 : dot(n[2], p) < 0 ? 8 + 3 * hexagon + 2 : hexagon];
  }

  return (0, _index.default)(faces[0], face).angle(-30).scale(110.625).center([0, 45]);
}

function dot(a, b) {
  for (var i = 0, n = a.length, s = 0; i < n; ++i) s += a[i] * b[i];

  return s;
}

function cross(a, b) {
  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
} // Converts 3D Cartesian to spherical coordinates (degrees).


function spherical(cartesian) {
  return [(0, _math.atan2)(cartesian[1], cartesian[0]) * _math.degrees, (0, _math.asin)((0, _math.max)(-1, (0, _math.min)(1, cartesian[2]))) * _math.degrees];
} // Converts spherical coordinates (degrees) to 3D Cartesian.


function cartesian(coordinates) {
  var lambda = coordinates[0] * _math.radians,
      phi = coordinates[1] * _math.radians,
      cosphi = (0, _math.cos)(phi);
  return [cosphi * (0, _math.cos)(lambda), cosphi * (0, _math.sin)(lambda), (0, _math.sin)(phi)];
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","../math":"../node_modules/d3-geo-projection/src/math.js","./index":"../node_modules/d3-geo-projection/src/polyhedral/index.js","./octahedron":"../node_modules/d3-geo-projection/src/polyhedral/octahedron.js"}],"../node_modules/d3-geo-projection/src/noop.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {}
},{}],"../node_modules/d3-geo-projection/src/project/clockwise.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(ring) {
  if ((n = ring.length) < 4) return false;
  var i = 0,
      n,
      area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];

  while (++i < n) area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];

  return area <= 0;
}
},{}],"../node_modules/d3-geo-projection/src/project/contains.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(ring, point) {
  var x = point[0],
      y = point[1],
      contains = false;

  for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {
    var pi = ring[i],
        xi = pi[0],
        yi = pi[1],
        pj = ring[j],
        xj = pj[0],
        yj = pj[1];
    if (yi > y ^ yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi) contains = !contains;
  }

  return contains;
}
},{}],"../node_modules/d3-geo-projection/src/project/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Geo = require("d3-geo");

var _noop = _interopRequireDefault(require("../noop"));

var _clockwise = _interopRequireDefault(require("./clockwise"));

var _contains = _interopRequireDefault(require("./contains"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(object, projection) {
  var stream = projection.stream,
      project;
  if (!stream) throw new Error("invalid projection");

  switch (object && object.type) {
    case "Feature":
      project = projectFeature;
      break;

    case "FeatureCollection":
      project = projectFeatureCollection;
      break;

    default:
      project = projectGeometry;
      break;
  }

  return project(object, stream);
}

function projectFeatureCollection(o, stream) {
  return {
    type: "FeatureCollection",
    features: o.features.map(function (f) {
      return projectFeature(f, stream);
    })
  };
}

function projectFeature(o, stream) {
  return {
    type: "Feature",
    id: o.id,
    properties: o.properties,
    geometry: projectGeometry(o.geometry, stream)
  };
}

function projectGeometryCollection(o, stream) {
  return {
    type: "GeometryCollection",
    geometries: o.geometries.map(function (o) {
      return projectGeometry(o, stream);
    })
  };
}

function projectGeometry(o, stream) {
  if (!o) return null;
  if (o.type === "GeometryCollection") return projectGeometryCollection(o, stream);
  var sink;

  switch (o.type) {
    case "Point":
      sink = sinkPoint;
      break;

    case "MultiPoint":
      sink = sinkPoint;
      break;

    case "LineString":
      sink = sinkLine;
      break;

    case "MultiLineString":
      sink = sinkLine;
      break;

    case "Polygon":
      sink = sinkPolygon;
      break;

    case "MultiPolygon":
      sink = sinkPolygon;
      break;

    case "Sphere":
      sink = sinkPolygon;
      break;

    default:
      return null;
  }

  (0, _d3Geo.geoStream)(o, stream(sink));
  return sink.result();
}

var points = [],
    lines = [];
var sinkPoint = {
  point: function (x, y) {
    points.push([x, y]);
  },
  result: function () {
    var result = !points.length ? null : points.length < 2 ? {
      type: "Point",
      coordinates: points[0]
    } : {
      type: "MultiPoint",
      coordinates: points
    };
    points = [];
    return result;
  }
};
var sinkLine = {
  lineStart: _noop.default,
  point: function (x, y) {
    points.push([x, y]);
  },
  lineEnd: function () {
    if (points.length) lines.push(points), points = [];
  },
  result: function () {
    var result = !lines.length ? null : lines.length < 2 ? {
      type: "LineString",
      coordinates: lines[0]
    } : {
      type: "MultiLineString",
      coordinates: lines
    };
    lines = [];
    return result;
  }
};
var sinkPolygon = {
  polygonStart: _noop.default,
  lineStart: _noop.default,
  point: function (x, y) {
    points.push([x, y]);
  },
  lineEnd: function () {
    var n = points.length;

    if (n) {
      do points.push(points[0].slice()); while (++n < 4);

      lines.push(points), points = [];
    }
  },
  polygonEnd: _noop.default,
  result: function () {
    if (!lines.length) return null;
    var polygons = [],
        holes = []; // https://github.com/d3/d3/issues/1558

    lines.forEach(function (ring) {
      if ((0, _clockwise.default)(ring)) polygons.push([ring]);else holes.push(ring);
    });
    holes.forEach(function (hole) {
      var point = hole[0];
      polygons.some(function (polygon) {
        if ((0, _contains.default)(polygon[0], point)) {
          polygon.push(hole);
          return true;
        }
      }) || polygons.push([hole]);
    });
    lines = [];
    return !polygons.length ? null : polygons.length > 1 ? {
      type: "MultiPolygon",
      coordinates: polygons
    } : {
      type: "Polygon",
      coordinates: polygons[0]
    };
  }
};
},{"d3-geo":"../node_modules/d3-geo/src/index.js","../noop":"../node_modules/d3-geo-projection/src/noop.js","./clockwise":"../node_modules/d3-geo-projection/src/project/clockwise.js","./contains":"../node_modules/d3-geo-projection/src/project/contains.js"}],"../node_modules/d3-geo-projection/src/quincuncial/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("../math");

function _default(project) {
  var dx = project(_math.halfPi, 0)[0] - project(-_math.halfPi, 0)[0];

  function projectQuincuncial(lambda, phi) {
    var t = (0, _math.abs)(lambda) < _math.halfPi,
        p = project(t ? lambda : lambda > 0 ? lambda - _math.pi : lambda + _math.pi, phi),
        x = (p[0] - p[1]) * _math.sqrt1_2,
        y = (p[0] + p[1]) * _math.sqrt1_2;

    if (t) return [x, y];
    var d = dx * _math.sqrt1_2,
        s = x > 0 ^ y > 0 ? -1 : 1;
    return [s * x - (0, _math.sign)(y) * d, s * y - (0, _math.sign)(x) * d];
  }

  if (project.invert) projectQuincuncial.invert = function (x0, y0) {
    var x = (x0 + y0) * _math.sqrt1_2,
        y = (y0 - x0) * _math.sqrt1_2,
        t = (0, _math.abs)(x) < 0.5 * dx && (0, _math.abs)(y) < 0.5 * dx;

    if (!t) {
      var d = dx * _math.sqrt1_2,
          s = x > 0 ^ y > 0 ? -1 : 1,
          x1 = -s * x0 + (y > 0 ? 1 : -1) * d,
          y1 = -s * y0 + (x > 0 ? 1 : -1) * d;
      x = (-x1 - y1) * _math.sqrt1_2;
      y = (x1 - y1) * _math.sqrt1_2;
    }

    var p = project.invert(x, y);
    if (!t) p[0] += x > 0 ? _math.pi : -_math.pi;
    return p;
  };
  return (0, _d3Geo.geoProjection)(projectQuincuncial).rotate([-90, -90, 45]).clipAngle(180 - 1e-3);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","../math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/quincuncial/gringorten.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _gringorten = require("../gringorten");

var _index = _interopRequireDefault(require("./index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  return (0, _index.default)(_gringorten.gringortenRaw).scale(176.423);
}
},{"../gringorten":"../node_modules/d3-geo-projection/src/gringorten.js","./index":"../node_modules/d3-geo-projection/src/quincuncial/index.js"}],"../node_modules/d3-geo-projection/src/quincuncial/peirce.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _guyou = require("../guyou");

var _index = _interopRequireDefault(require("./index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  return (0, _index.default)(_guyou.guyouRaw).scale(111.48);
}
},{"../guyou":"../node_modules/d3-geo-projection/src/guyou.js","./index":"../node_modules/d3-geo-projection/src/quincuncial/index.js"}],"../node_modules/d3-geo-projection/src/quantize.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(input, digits) {
  if (!(0 <= (digits = +digits) && digits <= 20)) throw new Error("invalid digits");

  function quantizePoint(input) {
    var n = input.length,
        i = 2,
        output = new Array(n);
    output[0] = +input[0].toFixed(digits);
    output[1] = +input[1].toFixed(digits);

    while (i < n) output[i] = input[i], ++i;

    return output;
  }

  function quantizePoints(input) {
    return input.map(quantizePoint);
  }

  function quantizePointsNoDuplicates(input) {
    var point0 = quantizePoint(input[0]);
    var output = [point0];

    for (var i = 1; i < input.length; i++) {
      var point = quantizePoint(input[i]);

      if (point.length > 2 || point[0] != point0[0] || point[1] != point0[1]) {
        output.push(point);
        point0 = point;
      }
    }

    if (output.length === 1 && input.length > 1) {
      output.push(quantizePoint(input[input.length - 1]));
    }

    return output;
  }

  function quantizePolygon(input) {
    return input.map(quantizePointsNoDuplicates);
  }

  function quantizeGeometry(input) {
    if (input == null) return input;
    var output;

    switch (input.type) {
      case "GeometryCollection":
        output = {
          type: "GeometryCollection",
          geometries: input.geometries.map(quantizeGeometry)
        };
        break;

      case "Point":
        output = {
          type: "Point",
          coordinates: quantizePoint(input.coordinates)
        };
        break;

      case "MultiPoint":
        output = {
          type: input.type,
          coordinates: quantizePoints(input.coordinates)
        };
        break;

      case "LineString":
        output = {
          type: input.type,
          coordinates: quantizePointsNoDuplicates(input.coordinates)
        };
        break;

      case "MultiLineString":
      case "Polygon":
        output = {
          type: input.type,
          coordinates: quantizePolygon(input.coordinates)
        };
        break;

      case "MultiPolygon":
        output = {
          type: "MultiPolygon",
          coordinates: input.coordinates.map(quantizePolygon)
        };
        break;

      default:
        return input;
    }

    if (input.bbox != null) output.bbox = input.bbox;
    return output;
  }

  function quantizeFeature(input) {
    var output = {
      type: "Feature",
      properties: input.properties,
      geometry: quantizeGeometry(input.geometry)
    };
    if (input.id != null) output.id = input.id;
    if (input.bbox != null) output.bbox = input.bbox;
    return output;
  }

  if (input != null) switch (input.type) {
    case "Feature":
      return quantizeFeature(input);

    case "FeatureCollection":
      {
        var output = {
          type: "FeatureCollection",
          features: input.features.map(quantizeFeature)
        };
        if (input.bbox != null) output.bbox = input.bbox;
        return output;
      }

    default:
      return quantizeGeometry(input);
  }
  return input;
}
},{}],"../node_modules/d3-geo-projection/src/rectangularPolyconic.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rectangularPolyconicRaw = rectangularPolyconicRaw;
exports.default = _default;

var _math = require("./math");

var _parallel = _interopRequireDefault(require("./parallel1"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function rectangularPolyconicRaw(phi0) {
  var sinPhi0 = (0, _math.sin)(phi0);

  function forward(lambda, phi) {
    var A = sinPhi0 ? (0, _math.tan)(lambda * sinPhi0 / 2) / sinPhi0 : lambda / 2;
    if (!phi) return [2 * A, -phi0];
    var E = 2 * (0, _math.atan)(A * (0, _math.sin)(phi)),
        cotPhi = 1 / (0, _math.tan)(phi);
    return [(0, _math.sin)(E) * cotPhi, phi + (1 - (0, _math.cos)(E)) * cotPhi - phi0];
  } // TODO return null for points outside outline.


  forward.invert = function (x, y) {
    if ((0, _math.abs)(y += phi0) < _math.epsilon) return [sinPhi0 ? 2 * (0, _math.atan)(sinPhi0 * x / 2) / sinPhi0 : x, 0];
    var k = x * x + y * y,
        phi = 0,
        i = 10,
        delta;

    do {
      var tanPhi = (0, _math.tan)(phi),
          secPhi = 1 / (0, _math.cos)(phi),
          j = k - 2 * y * phi + phi * phi;
      phi -= delta = (tanPhi * j + 2 * (phi - y)) / (2 + j * secPhi * secPhi + 2 * (phi - y) * tanPhi);
    } while ((0, _math.abs)(delta) > _math.epsilon && --i > 0);

    var E = x * (tanPhi = (0, _math.tan)(phi)),
        A = (0, _math.tan)((0, _math.abs)(y) < (0, _math.abs)(phi + 1 / tanPhi) ? (0, _math.asin)(E) * 0.5 : (0, _math.acos)(E) * 0.5 + _math.pi / 4) / (0, _math.sin)(phi);
    return [sinPhi0 ? 2 * (0, _math.atan)(sinPhi0 * A) / sinPhi0 : 2 * A, phi];
  };

  return forward;
}

function _default() {
  return (0, _parallel.default)(rectangularPolyconicRaw).scale(131.215);
}
},{"./math":"../node_modules/d3-geo-projection/src/math.js","./parallel1":"../node_modules/d3-geo-projection/src/parallel1.js"}],"../node_modules/d3-geo-projection/src/robinson.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.robinsonRaw = robinsonRaw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

var K = [[0.9986, -0.062], [1.0000, 0.0000], [0.9986, 0.0620], [0.9954, 0.1240], [0.9900, 0.1860], [0.9822, 0.2480], [0.9730, 0.3100], [0.9600, 0.3720], [0.9427, 0.4340], [0.9216, 0.4958], [0.8962, 0.5571], [0.8679, 0.6176], [0.8350, 0.6769], [0.7986, 0.7346], [0.7597, 0.7903], [0.7186, 0.8435], [0.6732, 0.8936], [0.6213, 0.9394], [0.5722, 0.9761], [0.5322, 1.0000]];
K.forEach(function (d) {
  d[1] *= 1.0144;
});

function robinsonRaw(lambda, phi) {
  var i = (0, _math.min)(18, (0, _math.abs)(phi) * 36 / _math.pi),
      i0 = (0, _math.floor)(i),
      di = i - i0,
      ax = (k = K[i0])[0],
      ay = k[1],
      bx = (k = K[++i0])[0],
      by = k[1],
      cx = (k = K[(0, _math.min)(19, ++i0)])[0],
      cy = k[1],
      k;
  return [lambda * (bx + di * (cx - ax) / 2 + di * di * (cx - 2 * bx + ax) / 2), (phi > 0 ? _math.halfPi : -_math.halfPi) * (by + di * (cy - ay) / 2 + di * di * (cy - 2 * by + ay) / 2)];
}

robinsonRaw.invert = function (x, y) {
  var yy = y / _math.halfPi,
      phi = yy * 90,
      i = (0, _math.min)(18, (0, _math.abs)(phi / 5)),
      i0 = (0, _math.max)(0, (0, _math.floor)(i));

  do {
    var ay = K[i0][1],
        by = K[i0 + 1][1],
        cy = K[(0, _math.min)(19, i0 + 2)][1],
        u = cy - ay,
        v = cy - 2 * by + ay,
        t = 2 * ((0, _math.abs)(yy) - by) / u,
        c = v / u,
        di = t * (1 - c * t * (1 - 2 * c * t));

    if (di >= 0 || i0 === 1) {
      phi = (y >= 0 ? 5 : -5) * (di + i);
      var j = 50,
          delta;

      do {
        i = (0, _math.min)(18, (0, _math.abs)(phi) / 5);
        i0 = (0, _math.floor)(i);
        di = i - i0;
        ay = K[i0][1];
        by = K[i0 + 1][1];
        cy = K[(0, _math.min)(19, i0 + 2)][1];
        phi -= (delta = (y >= 0 ? _math.halfPi : -_math.halfPi) * (by + di * (cy - ay) / 2 + di * di * (cy - 2 * by + ay) / 2) - y) * _math.degrees;
      } while ((0, _math.abs)(delta) > _math.epsilon2 && --j > 0);

      break;
    }
  } while (--i0 >= 0);

  var ax = K[i0][0],
      bx = K[i0 + 1][0],
      cx = K[(0, _math.min)(19, i0 + 2)][0];
  return [x / (bx + di * (cx - ax) / 2 + di * di * (cx - 2 * bx + ax) / 2), phi * _math.radians];
};

function _default() {
  return (0, _d3Geo.geoProjection)(robinsonRaw).scale(152.63);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/satellite.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.satelliteRaw = satelliteRaw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

function satelliteVerticalRaw(P) {
  function forward(lambda, phi) {
    var cosPhi = (0, _math.cos)(phi),
        k = (P - 1) / (P - cosPhi * (0, _math.cos)(lambda));
    return [k * cosPhi * (0, _math.sin)(lambda), k * (0, _math.sin)(phi)];
  }

  forward.invert = function (x, y) {
    var rho2 = x * x + y * y,
        rho = (0, _math.sqrt)(rho2),
        sinc = (P - (0, _math.sqrt)(1 - rho2 * (P + 1) / (P - 1))) / ((P - 1) / rho + rho / (P - 1));
    return [(0, _math.atan2)(x * sinc, rho * (0, _math.sqrt)(1 - sinc * sinc)), rho ? (0, _math.asin)(y * sinc / rho) : 0];
  };

  return forward;
}

function satelliteRaw(P, omega) {
  var vertical = satelliteVerticalRaw(P);
  if (!omega) return vertical;
  var cosOmega = (0, _math.cos)(omega),
      sinOmega = (0, _math.sin)(omega);

  function forward(lambda, phi) {
    var coordinates = vertical(lambda, phi),
        y = coordinates[1],
        A = y * sinOmega / (P - 1) + cosOmega;
    return [coordinates[0] * cosOmega / A, y / A];
  }

  forward.invert = function (x, y) {
    var k = (P - 1) / (P - 1 - y * sinOmega);
    return vertical.invert(k * x, k * y * cosOmega);
  };

  return forward;
}

function _default() {
  var distance = 2,
      omega = 0,
      m = (0, _d3Geo.geoProjectionMutator)(satelliteRaw),
      p = m(distance, omega); // As a multiple of radius.

  p.distance = function (_) {
    if (!arguments.length) return distance;
    return m(distance = +_, omega);
  };

  p.tilt = function (_) {
    if (!arguments.length) return omega * _math.degrees;
    return m(distance, omega = _ * _math.radians);
  };

  return p.scale(432.147).clipAngle((0, _math.acos)(1 / distance) * _math.degrees - 1e-6);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/stitch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
var epsilon = 1e-4,
    epsilonInverse = 1e4,
    x0 = -180,
    x0e = x0 + epsilon,
    x1 = 180,
    x1e = x1 - epsilon,
    y0 = -90,
    y0e = y0 + epsilon,
    y1 = 90,
    y1e = y1 - epsilon;

function nonempty(coordinates) {
  return coordinates.length > 0;
}

function quantize(x) {
  return Math.floor(x * epsilonInverse) / epsilonInverse;
}

function normalizePoint(y) {
  return y === y0 || y === y1 ? [0, y] : [x0, quantize(y)]; // pole or antimeridian?
}

function clampPoint(p) {
  var x = p[0],
      y = p[1],
      clamped = false;
  if (x <= x0e) x = x0, clamped = true;else if (x >= x1e) x = x1, clamped = true;
  if (y <= y0e) y = y0, clamped = true;else if (y >= y1e) y = y1, clamped = true;
  return clamped ? [x, y] : p;
}

function clampPoints(points) {
  return points.map(clampPoint);
} // For each ring, detect where it crosses the antimeridian or pole.


function extractFragments(rings, polygon, fragments) {
  for (var j = 0, m = rings.length; j < m; ++j) {
    var ring = rings[j].slice(); // By default, assume that this ring doesn’t need any stitching.

    fragments.push({
      index: -1,
      polygon: polygon,
      ring: ring
    });

    for (var i = 0, n = ring.length; i < n; ++i) {
      var point = ring[i],
          x = point[0],
          y = point[1]; // If this is an antimeridian or polar point…

      if (x <= x0e || x >= x1e || y <= y0e || y >= y1e) {
        ring[i] = clampPoint(point); // Advance through any antimeridian or polar points…

        for (var k = i + 1; k < n; ++k) {
          var pointk = ring[k],
              xk = pointk[0],
              yk = pointk[1];
          if (xk > x0e && xk < x1e && yk > y0e && yk < y1e) break;
        } // If this was just a single antimeridian or polar point,
        // we don’t need to cut this ring into a fragment;
        // we can just leave it as-is.


        if (k === i + 1) continue; // Otherwise, if this is not the first point in the ring,
        // cut the current fragment so that it ends at the current point.
        // The current point is also normalized for later joining.

        if (i) {
          var fragmentBefore = {
            index: -1,
            polygon: polygon,
            ring: ring.slice(0, i + 1)
          };
          fragmentBefore.ring[fragmentBefore.ring.length - 1] = normalizePoint(y);
          fragments[fragments.length - 1] = fragmentBefore;
        } // If the ring started with an antimeridian fragment,
        // we can ignore that fragment entirely.
        else fragments.pop(); // If the remainder of the ring is an antimeridian fragment,
        // move on to the next ring.


        if (k >= n) break; // Otherwise, add the remaining ring fragment and continue.

        fragments.push({
          index: -1,
          polygon: polygon,
          ring: ring = ring.slice(k - 1)
        });
        ring[0] = normalizePoint(ring[0][1]);
        i = -1;
        n = ring.length;
      }
    }
  }
} // Now stitch the fragments back together into rings.


function stitchFragments(fragments) {
  var i,
      n = fragments.length; // To connect the fragments start-to-end, create a simple index by end.

  var fragmentByStart = {},
      fragmentByEnd = {},
      fragment,
      start,
      startFragment,
      end,
      endFragment; // For each fragment…

  for (i = 0; i < n; ++i) {
    fragment = fragments[i];
    start = fragment.ring[0];
    end = fragment.ring[fragment.ring.length - 1]; // If this fragment is closed, add it as a standalone ring.

    if (start[0] === end[0] && start[1] === end[1]) {
      fragment.polygon.push(fragment.ring);
      fragments[i] = null;
      continue;
    }

    fragment.index = i;
    fragmentByStart[start] = fragmentByEnd[end] = fragment;
  } // For each open fragment…


  for (i = 0; i < n; ++i) {
    fragment = fragments[i];

    if (fragment) {
      start = fragment.ring[0];
      end = fragment.ring[fragment.ring.length - 1];
      startFragment = fragmentByEnd[start];
      endFragment = fragmentByStart[end];
      delete fragmentByStart[start];
      delete fragmentByEnd[end]; // If this fragment is closed, add it as a standalone ring.

      if (start[0] === end[0] && start[1] === end[1]) {
        fragment.polygon.push(fragment.ring);
        continue;
      }

      if (startFragment) {
        delete fragmentByEnd[start];
        delete fragmentByStart[startFragment.ring[0]];
        startFragment.ring.pop(); // drop the shared coordinate

        fragments[startFragment.index] = null;
        fragment = {
          index: -1,
          polygon: startFragment.polygon,
          ring: startFragment.ring.concat(fragment.ring)
        };

        if (startFragment === endFragment) {
          // Connect both ends to this single fragment to create a ring.
          fragment.polygon.push(fragment.ring);
        } else {
          fragment.index = n++;
          fragments.push(fragmentByStart[fragment.ring[0]] = fragmentByEnd[fragment.ring[fragment.ring.length - 1]] = fragment);
        }
      } else if (endFragment) {
        delete fragmentByStart[end];
        delete fragmentByEnd[endFragment.ring[endFragment.ring.length - 1]];
        fragment.ring.pop(); // drop the shared coordinate

        fragment = {
          index: n++,
          polygon: endFragment.polygon,
          ring: fragment.ring.concat(endFragment.ring)
        };
        fragments[endFragment.index] = null;
        fragments.push(fragmentByStart[fragment.ring[0]] = fragmentByEnd[fragment.ring[fragment.ring.length - 1]] = fragment);
      } else {
        fragment.ring.push(fragment.ring[0]); // close ring

        fragment.polygon.push(fragment.ring);
      }
    }
  }
}

function stitchFeature(input) {
  var output = {
    type: "Feature",
    geometry: stitchGeometry(input.geometry)
  };
  if (input.id != null) output.id = input.id;
  if (input.bbox != null) output.bbox = input.bbox;
  if (input.properties != null) output.properties = input.properties;
  return output;
}

function stitchGeometry(input) {
  if (input == null) return input;
  var output, fragments, i, n;

  switch (input.type) {
    case "GeometryCollection":
      output = {
        type: "GeometryCollection",
        geometries: input.geometries.map(stitchGeometry)
      };
      break;

    case "Point":
      output = {
        type: "Point",
        coordinates: clampPoint(input.coordinates)
      };
      break;

    case "MultiPoint":
    case "LineString":
      output = {
        type: input.type,
        coordinates: clampPoints(input.coordinates)
      };
      break;

    case "MultiLineString":
      output = {
        type: "MultiLineString",
        coordinates: input.coordinates.map(clampPoints)
      };
      break;

    case "Polygon":
      {
        var polygon = [];
        extractFragments(input.coordinates, polygon, fragments = []);
        stitchFragments(fragments);
        output = {
          type: "Polygon",
          coordinates: polygon
        };
        break;
      }

    case "MultiPolygon":
      {
        fragments = [], i = -1, n = input.coordinates.length;
        var polygons = new Array(n);

        while (++i < n) extractFragments(input.coordinates[i], polygons[i] = [], fragments);

        stitchFragments(fragments);
        output = {
          type: "MultiPolygon",
          coordinates: polygons.filter(nonempty)
        };
        break;
      }

    default:
      return input;
  }

  if (input.bbox != null) output.bbox = input.bbox;
  return output;
}

function _default(input) {
  if (input == null) return input;

  switch (input.type) {
    case "Feature":
      return stitchFeature(input);

    case "FeatureCollection":
      {
        var output = {
          type: "FeatureCollection",
          features: input.features.map(stitchFeature)
        };
        if (input.bbox != null) output.bbox = input.bbox;
        return output;
      }

    default:
      return stitchGeometry(input);
  }
}
},{}],"../node_modules/d3-geo-projection/src/times.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.timesRaw = timesRaw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

function timesRaw(lambda, phi) {
  var t = (0, _math.tan)(phi / 2),
      s = (0, _math.sin)(_math.quarterPi * t);
  return [lambda * (0.74482 - 0.34588 * s * s), 1.70711 * t];
}

timesRaw.invert = function (x, y) {
  var t = y / 1.70711,
      s = (0, _math.sin)(_math.quarterPi * t);
  return [x / (0.74482 - 0.34588 * s * s), 2 * (0, _math.atan)(t)];
};

function _default() {
  return (0, _d3Geo.geoProjection)(timesRaw).scale(146.153);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/twoPoint.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

// Compute the origin as the midpoint of the two reference points.
// Rotate one of the reference points by the origin.
// Apply the spherical law of sines to compute gamma rotation.
function _default(raw, p0, p1) {
  var i = (0, _d3Geo.geoInterpolate)(p0, p1),
      o = i(0.5),
      a = (0, _d3Geo.geoRotation)([-o[0], -o[1]])(p0),
      b = i.distance / 2,
      y = -(0, _math.asin)((0, _math.sin)(a[1] * _math.radians) / (0, _math.sin)(b)),
      R = [-o[0], -o[1], -(a[0] > 0 ? _math.pi - y : y) * _math.degrees],
      p = (0, _d3Geo.geoProjection)(raw(b)).rotate(R),
      r = (0, _d3Geo.geoRotation)(R),
      center = p.center;
  delete p.rotate;

  p.center = function (_) {
    return arguments.length ? center(r(_)) : r.invert(center());
  };

  return p.clipAngle(90);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/twoPointAzimuthal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.twoPointAzimuthalRaw = twoPointAzimuthalRaw;
exports.twoPointAzimuthalUsa = twoPointAzimuthalUsa;
exports.default = twoPointAzimuthal;

var _d3Geo = require("d3-geo");

var _math = require("./math");

var _twoPoint = _interopRequireDefault(require("./twoPoint"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function twoPointAzimuthalRaw(d) {
  var cosd = (0, _math.cos)(d);

  function forward(lambda, phi) {
    var coordinates = (0, _d3Geo.geoGnomonicRaw)(lambda, phi);
    coordinates[0] *= cosd;
    return coordinates;
  }

  forward.invert = function (x, y) {
    return _d3Geo.geoGnomonicRaw.invert(x / cosd, y);
  };

  return forward;
}

function twoPointAzimuthalUsa() {
  return twoPointAzimuthal([-158, 21.5], [-77, 39]).clipAngle(60).scale(400);
}

function twoPointAzimuthal(p0, p1) {
  return (0, _twoPoint.default)(twoPointAzimuthalRaw, p0, p1);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js","./twoPoint":"../node_modules/d3-geo-projection/src/twoPoint.js"}],"../node_modules/d3-geo-projection/src/twoPointEquidistant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.twoPointEquidistantRaw = twoPointEquidistantRaw;
exports.twoPointEquidistantUsa = twoPointEquidistantUsa;
exports.default = twoPointEquidistant;

var _d3Geo = require("d3-geo");

var _math = require("./math");

var _twoPoint = _interopRequireDefault(require("./twoPoint"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// TODO clip to ellipse
function twoPointEquidistantRaw(z0) {
  if (!(z0 *= 2)) return _d3Geo.geoAzimuthalEquidistantRaw;
  var lambdaa = -z0 / 2,
      lambdab = -lambdaa,
      z02 = z0 * z0,
      tanLambda0 = (0, _math.tan)(lambdab),
      S = 0.5 / (0, _math.sin)(lambdab);

  function forward(lambda, phi) {
    var za = (0, _math.acos)((0, _math.cos)(phi) * (0, _math.cos)(lambda - lambdaa)),
        zb = (0, _math.acos)((0, _math.cos)(phi) * (0, _math.cos)(lambda - lambdab)),
        ys = phi < 0 ? -1 : 1;
    za *= za, zb *= zb;
    return [(za - zb) / (2 * z0), ys * (0, _math.sqrt)(4 * z02 * zb - (z02 - za + zb) * (z02 - za + zb)) / (2 * z0)];
  }

  forward.invert = function (x, y) {
    var y2 = y * y,
        cosza = (0, _math.cos)((0, _math.sqrt)(y2 + (t = x + lambdaa) * t)),
        coszb = (0, _math.cos)((0, _math.sqrt)(y2 + (t = x + lambdab) * t)),
        t,
        d;
    return [(0, _math.atan2)(d = cosza - coszb, t = (cosza + coszb) * tanLambda0), (y < 0 ? -1 : 1) * (0, _math.acos)((0, _math.sqrt)(t * t + d * d) * S)];
  };

  return forward;
}

function twoPointEquidistantUsa() {
  return twoPointEquidistant([-158, 21.5], [-77, 39]).clipAngle(130).scale(122.571);
}

function twoPointEquidistant(p0, p1) {
  return (0, _twoPoint.default)(twoPointEquidistantRaw, p0, p1);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js","./twoPoint":"../node_modules/d3-geo-projection/src/twoPoint.js"}],"../node_modules/d3-geo-projection/src/vanDerGrinten.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.vanDerGrintenRaw = vanDerGrintenRaw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

function vanDerGrintenRaw(lambda, phi) {
  if ((0, _math.abs)(phi) < _math.epsilon) return [lambda, 0];
  var sinTheta = (0, _math.abs)(phi / _math.halfPi),
      theta = (0, _math.asin)(sinTheta);
  if ((0, _math.abs)(lambda) < _math.epsilon || (0, _math.abs)((0, _math.abs)(phi) - _math.halfPi) < _math.epsilon) return [0, (0, _math.sign)(phi) * _math.pi * (0, _math.tan)(theta / 2)];
  var cosTheta = (0, _math.cos)(theta),
      A = (0, _math.abs)(_math.pi / lambda - lambda / _math.pi) / 2,
      A2 = A * A,
      G = cosTheta / (sinTheta + cosTheta - 1),
      P = G * (2 / sinTheta - 1),
      P2 = P * P,
      P2_A2 = P2 + A2,
      G_P2 = G - P2,
      Q = A2 + G;
  return [(0, _math.sign)(lambda) * _math.pi * (A * G_P2 + (0, _math.sqrt)(A2 * G_P2 * G_P2 - P2_A2 * (G * G - P2))) / P2_A2, (0, _math.sign)(phi) * _math.pi * (P * Q - A * (0, _math.sqrt)((A2 + 1) * P2_A2 - Q * Q)) / P2_A2];
}

vanDerGrintenRaw.invert = function (x, y) {
  if ((0, _math.abs)(y) < _math.epsilon) return [x, 0];
  if ((0, _math.abs)(x) < _math.epsilon) return [0, _math.halfPi * (0, _math.sin)(2 * (0, _math.atan)(y / _math.pi))];
  var x2 = (x /= _math.pi) * x,
      y2 = (y /= _math.pi) * y,
      x2_y2 = x2 + y2,
      z = x2_y2 * x2_y2,
      c1 = -(0, _math.abs)(y) * (1 + x2_y2),
      c2 = c1 - 2 * y2 + x2,
      c3 = -2 * c1 + 1 + 2 * y2 + z,
      d = y2 / c3 + (2 * c2 * c2 * c2 / (c3 * c3 * c3) - 9 * c1 * c2 / (c3 * c3)) / 27,
      a1 = (c1 - c2 * c2 / (3 * c3)) / c3,
      m1 = 2 * (0, _math.sqrt)(-a1 / 3),
      theta1 = (0, _math.acos)(3 * d / (a1 * m1)) / 3;
  return [_math.pi * (x2_y2 - 1 + (0, _math.sqrt)(1 + 2 * (x2 - y2) + z)) / (2 * x), (0, _math.sign)(y) * _math.pi * (-m1 * (0, _math.cos)(theta1 + _math.pi / 3) - c2 / (3 * c3))];
};

function _default() {
  return (0, _d3Geo.geoProjection)(vanDerGrintenRaw).scale(79.4183);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/vanDerGrinten2.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.vanDerGrinten2Raw = vanDerGrinten2Raw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

function vanDerGrinten2Raw(lambda, phi) {
  if ((0, _math.abs)(phi) < _math.epsilon) return [lambda, 0];
  var sinTheta = (0, _math.abs)(phi / _math.halfPi),
      theta = (0, _math.asin)(sinTheta);
  if ((0, _math.abs)(lambda) < _math.epsilon || (0, _math.abs)((0, _math.abs)(phi) - _math.halfPi) < _math.epsilon) return [0, (0, _math.sign)(phi) * _math.pi * (0, _math.tan)(theta / 2)];
  var cosTheta = (0, _math.cos)(theta),
      A = (0, _math.abs)(_math.pi / lambda - lambda / _math.pi) / 2,
      A2 = A * A,
      x1 = cosTheta * ((0, _math.sqrt)(1 + A2) - A * cosTheta) / (1 + A2 * sinTheta * sinTheta);
  return [(0, _math.sign)(lambda) * _math.pi * x1, (0, _math.sign)(phi) * _math.pi * (0, _math.sqrt)(1 - x1 * (2 * A + x1))];
}

vanDerGrinten2Raw.invert = function (x, y) {
  if (!x) return [0, _math.halfPi * (0, _math.sin)(2 * (0, _math.atan)(y / _math.pi))];
  var x1 = (0, _math.abs)(x / _math.pi),
      A = (1 - x1 * x1 - (y /= _math.pi) * y) / (2 * x1),
      A2 = A * A,
      B = (0, _math.sqrt)(A2 + 1);
  return [(0, _math.sign)(x) * _math.pi * (B - A), (0, _math.sign)(y) * _math.halfPi * (0, _math.sin)(2 * (0, _math.atan2)((0, _math.sqrt)((1 - 2 * A * x1) * (A + B) - x1), (0, _math.sqrt)(B + A + x1)))];
};

function _default() {
  return (0, _d3Geo.geoProjection)(vanDerGrinten2Raw).scale(79.4183);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/vanDerGrinten3.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.vanDerGrinten3Raw = vanDerGrinten3Raw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

function vanDerGrinten3Raw(lambda, phi) {
  if ((0, _math.abs)(phi) < _math.epsilon) return [lambda, 0];
  var sinTheta = phi / _math.halfPi,
      theta = (0, _math.asin)(sinTheta);
  if ((0, _math.abs)(lambda) < _math.epsilon || (0, _math.abs)((0, _math.abs)(phi) - _math.halfPi) < _math.epsilon) return [0, _math.pi * (0, _math.tan)(theta / 2)];
  var A = (_math.pi / lambda - lambda / _math.pi) / 2,
      y1 = sinTheta / (1 + (0, _math.cos)(theta));
  return [_math.pi * ((0, _math.sign)(lambda) * (0, _math.sqrt)(A * A + 1 - y1 * y1) - A), _math.pi * y1];
}

vanDerGrinten3Raw.invert = function (x, y) {
  if (!y) return [x, 0];
  var y1 = y / _math.pi,
      A = (_math.pi * _math.pi * (1 - y1 * y1) - x * x) / (2 * _math.pi * x);
  return [x ? _math.pi * ((0, _math.sign)(x) * (0, _math.sqrt)(A * A + 1) - A) : 0, _math.halfPi * (0, _math.sin)(2 * (0, _math.atan)(y1))];
};

function _default() {
  return (0, _d3Geo.geoProjection)(vanDerGrinten3Raw).scale(79.4183);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/vanDerGrinten4.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.vanDerGrinten4Raw = vanDerGrinten4Raw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

function vanDerGrinten4Raw(lambda, phi) {
  if (!phi) return [lambda, 0];
  var phi0 = (0, _math.abs)(phi);
  if (!lambda || phi0 === _math.halfPi) return [0, phi];
  var B = phi0 / _math.halfPi,
      B2 = B * B,
      C = (8 * B - B2 * (B2 + 2) - 5) / (2 * B2 * (B - 1)),
      C2 = C * C,
      BC = B * C,
      B_C2 = B2 + C2 + 2 * BC,
      B_3C = B + 3 * C,
      lambda0 = lambda / _math.halfPi,
      lambda1 = lambda0 + 1 / lambda0,
      D = (0, _math.sign)((0, _math.abs)(lambda) - _math.halfPi) * (0, _math.sqrt)(lambda1 * lambda1 - 4),
      D2 = D * D,
      F = B_C2 * (B2 + C2 * D2 - 1) + (1 - B2) * (B2 * (B_3C * B_3C + 4 * C2) + 12 * BC * C2 + 4 * C2 * C2),
      x1 = (D * (B_C2 + C2 - 1) + 2 * (0, _math.sqrt)(F)) / (4 * B_C2 + D2);
  return [(0, _math.sign)(lambda) * _math.halfPi * x1, (0, _math.sign)(phi) * _math.halfPi * (0, _math.sqrt)(1 + D * (0, _math.abs)(x1) - x1 * x1)];
}

vanDerGrinten4Raw.invert = function (x, y) {
  var delta;
  if (!x || !y) return [x, y];
  y /= _math.pi;

  var x1 = (0, _math.sign)(x) * x / _math.halfPi,
      D = (x1 * x1 - 1 + 4 * y * y) / (0, _math.abs)(x1),
      D2 = D * D,
      B = 2 * y,
      i = 50;

  do {
    var B2 = B * B,
        C = (8 * B - B2 * (B2 + 2) - 5) / (2 * B2 * (B - 1)),
        C_ = (3 * B - B2 * B - 10) / (2 * B2 * B),
        C2 = C * C,
        BC = B * C,
        B_C = B + C,
        B_C2 = B_C * B_C,
        B_3C = B + 3 * C,
        F = B_C2 * (B2 + C2 * D2 - 1) + (1 - B2) * (B2 * (B_3C * B_3C + 4 * C2) + C2 * (12 * BC + 4 * C2)),
        F_ = -2 * B_C * (4 * BC * C2 + (1 - 4 * B2 + 3 * B2 * B2) * (1 + C_) + C2 * (-6 + 14 * B2 - D2 + (-8 + 8 * B2 - 2 * D2) * C_) + BC * (-8 + 12 * B2 + (-10 + 10 * B2 - D2) * C_)),
        sqrtF = (0, _math.sqrt)(F),
        f = D * (B_C2 + C2 - 1) + 2 * sqrtF - x1 * (4 * B_C2 + D2),
        f_ = D * (2 * C * C_ + 2 * B_C * (1 + C_)) + F_ / sqrtF - 8 * B_C * (D * (-1 + C2 + B_C2) + 2 * sqrtF) * (1 + C_) / (D2 + 4 * B_C2);
    B -= delta = f / f_;
  } while (delta > _math.epsilon && --i > 0);

  return [(0, _math.sign)(x) * ((0, _math.sqrt)(D * D + 4) + D) * _math.pi / 4, _math.halfPi * B];
};

function _default() {
  return (0, _d3Geo.geoProjection)(vanDerGrinten4Raw).scale(127.16);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/wagner.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wagnerRaw = wagnerRaw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

function wagnerFormula(cx, cy, m1, m2, n) {
  function forward(lambda, phi) {
    var s = m1 * (0, _math.sin)(m2 * phi),
        c0 = (0, _math.sqrt)(1 - s * s),
        c1 = (0, _math.sqrt)(2 / (1 + c0 * (0, _math.cos)(lambda *= n)));
    return [cx * c0 * c1 * (0, _math.sin)(lambda), cy * s * c1];
  }

  forward.invert = function (x, y) {
    var t1 = x / cx,
        t2 = y / cy,
        p = (0, _math.sqrt)(t1 * t1 + t2 * t2),
        c = 2 * (0, _math.asin)(p / 2);
    return [(0, _math.atan2)(x * (0, _math.tan)(c), cx * p) / n, p && (0, _math.asin)(y * (0, _math.sin)(c) / (cy * m1 * p)) / m2];
  };

  return forward;
}

function wagnerRaw(poleline, parallels, inflation, ratio) {
  // 60 is always used as reference parallel
  var phi1 = _math.pi / 3; // sanitizing the input values
  // poleline and parallels may approximate but never equal 0

  poleline = (0, _math.max)(poleline, _math.epsilon);
  parallels = (0, _math.max)(parallels, _math.epsilon); // poleline must be <= 90; parallels may approximate but never equal 180

  poleline = (0, _math.min)(poleline, _math.halfPi);
  parallels = (0, _math.min)(parallels, _math.pi - _math.epsilon); // 0 <= inflation <= 99.999

  inflation = (0, _math.max)(inflation, 0);
  inflation = (0, _math.min)(inflation, 100 - _math.epsilon); // ratio > 0.
  // sensible values, i.e. something that renders a map which still can be
  // recognized as world map, are e.g. 20 <= ratio <= 1000.

  ratio = (0, _math.max)(ratio, _math.epsilon); // convert values from boehm notation
  // areal inflation e.g. from 0 to 1 or 20 to 1.2:

  var vinflation = inflation / 100 + 1; // axial ratio e.g. from 200 to 2:

  var vratio = ratio / 100; // the other ones are a bit more complicated...

  var m2 = (0, _math.acos)(vinflation * (0, _math.cos)(phi1)) / phi1,
      m1 = (0, _math.sin)(poleline) / (0, _math.sin)(m2 * _math.halfPi),
      n = parallels / _math.pi,
      k = (0, _math.sqrt)(vratio * (0, _math.sin)(poleline / 2) / (0, _math.sin)(parallels / 2)),
      cx = k / (0, _math.sqrt)(n * m1 * m2),
      cy = 1 / (k * (0, _math.sqrt)(n * m1 * m2));
  return wagnerFormula(cx, cy, m1, m2, n);
}

function _default() {
  // default values generate wagner8
  var poleline = 65 * _math.radians,
      parallels = 60 * _math.radians,
      inflation = 20,
      ratio = 200,
      mutate = (0, _d3Geo.geoProjectionMutator)(wagnerRaw),
      projection = mutate(poleline, parallels, inflation, ratio);

  projection.poleline = function (_) {
    return arguments.length ? mutate(poleline = +_ * _math.radians, parallels, inflation, ratio) : poleline * _math.degrees;
  };

  projection.parallels = function (_) {
    return arguments.length ? mutate(poleline, parallels = +_ * _math.radians, inflation, ratio) : parallels * _math.degrees;
  };

  projection.inflation = function (_) {
    return arguments.length ? mutate(poleline, parallels, inflation = +_, ratio) : inflation;
  };

  projection.ratio = function (_) {
    return arguments.length ? mutate(poleline, parallels, inflation, ratio = +_) : ratio;
  };

  return projection.scale(163.775);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/wagner4.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.wagner4Raw = void 0;

var _d3Geo = require("d3-geo");

var _math = require("./math");

var _mollweide = require("./mollweide");

var A = 4 * _math.pi + 3 * (0, _math.sqrt)(3),
    B = 2 * (0, _math.sqrt)(2 * _math.pi * (0, _math.sqrt)(3) / A);
var wagner4Raw = (0, _mollweide.mollweideBromleyRaw)(B * (0, _math.sqrt)(3) / _math.pi, B, A / 6);
exports.wagner4Raw = wagner4Raw;

function _default() {
  return (0, _d3Geo.geoProjection)(wagner4Raw).scale(176.84);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js","./mollweide":"../node_modules/d3-geo-projection/src/mollweide.js"}],"../node_modules/d3-geo-projection/src/wagner6.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wagner6Raw = wagner6Raw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

function wagner6Raw(lambda, phi) {
  return [lambda * (0, _math.sqrt)(1 - 3 * phi * phi / (_math.pi * _math.pi)), phi];
}

wagner6Raw.invert = function (x, y) {
  return [x / (0, _math.sqrt)(1 - 3 * y * y / (_math.pi * _math.pi)), y];
};

function _default() {
  return (0, _d3Geo.geoProjection)(wagner6Raw).scale(152.63);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/wagner7.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wagner7Raw = wagner7Raw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

function wagner7Raw(lambda, phi) {
  var s = 0.90631 * (0, _math.sin)(phi),
      c0 = (0, _math.sqrt)(1 - s * s),
      c1 = (0, _math.sqrt)(2 / (1 + c0 * (0, _math.cos)(lambda /= 3)));
  return [2.66723 * c0 * c1 * (0, _math.sin)(lambda), 1.24104 * s * c1];
}

wagner7Raw.invert = function (x, y) {
  var t1 = x / 2.66723,
      t2 = y / 1.24104,
      p = (0, _math.sqrt)(t1 * t1 + t2 * t2),
      c = 2 * (0, _math.asin)(p / 2);
  return [3 * (0, _math.atan2)(x * (0, _math.tan)(c), 2.66723 * p), p && (0, _math.asin)(y * (0, _math.sin)(c) / (1.24104 * 0.90631 * p))];
};

function _default() {
  return (0, _d3Geo.geoProjection)(wagner7Raw).scale(172.632);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/wiechel.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wiechelRaw = wiechelRaw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _math = require("./math");

function wiechelRaw(lambda, phi) {
  var cosPhi = (0, _math.cos)(phi),
      sinPhi = (0, _math.cos)(lambda) * cosPhi,
      sin1_Phi = 1 - sinPhi,
      cosLambda = (0, _math.cos)(lambda = (0, _math.atan2)((0, _math.sin)(lambda) * cosPhi, -(0, _math.sin)(phi))),
      sinLambda = (0, _math.sin)(lambda);
  cosPhi = (0, _math.sqrt)(1 - sinPhi * sinPhi);
  return [sinLambda * cosPhi - cosLambda * sin1_Phi, -cosLambda * cosPhi - sinLambda * sin1_Phi];
}

wiechelRaw.invert = function (x, y) {
  var w = (x * x + y * y) / -2,
      k = (0, _math.sqrt)(-w * (2 + w)),
      b = y * w + x * k,
      a = x * w - y * k,
      D = (0, _math.sqrt)(a * a + b * b);
  return [(0, _math.atan2)(k * b, D * (1 + w)), D ? -(0, _math.asin)(k * a / D) : 0];
};

function _default() {
  return (0, _d3Geo.geoProjection)(wiechelRaw).rotate([0, -90, 45]).scale(124.75).clipAngle(180 - 1e-3);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/winkel3.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.winkel3Raw = winkel3Raw;
exports.default = _default;

var _d3Geo = require("d3-geo");

var _aitoff = require("./aitoff");

var _math = require("./math");

function winkel3Raw(lambda, phi) {
  var coordinates = (0, _aitoff.aitoffRaw)(lambda, phi);
  return [(coordinates[0] + lambda / _math.halfPi) / 2, (coordinates[1] + phi) / 2];
}

winkel3Raw.invert = function (x, y) {
  var lambda = x,
      phi = y,
      i = 25;

  do {
    var cosphi = (0, _math.cos)(phi),
        sinphi = (0, _math.sin)(phi),
        sin_2phi = (0, _math.sin)(2 * phi),
        sin2phi = sinphi * sinphi,
        cos2phi = cosphi * cosphi,
        sinlambda = (0, _math.sin)(lambda),
        coslambda_2 = (0, _math.cos)(lambda / 2),
        sinlambda_2 = (0, _math.sin)(lambda / 2),
        sin2lambda_2 = sinlambda_2 * sinlambda_2,
        C = 1 - cos2phi * coslambda_2 * coslambda_2,
        E = C ? (0, _math.acos)(cosphi * coslambda_2) * (0, _math.sqrt)(F = 1 / C) : F = 0,
        F,
        fx = 0.5 * (2 * E * cosphi * sinlambda_2 + lambda / _math.halfPi) - x,
        fy = 0.5 * (E * sinphi + phi) - y,
        dxdlambda = 0.5 * F * (cos2phi * sin2lambda_2 + E * cosphi * coslambda_2 * sin2phi) + 0.5 / _math.halfPi,
        dxdphi = F * (sinlambda * sin_2phi / 4 - E * sinphi * sinlambda_2),
        dydlambda = 0.125 * F * (sin_2phi * sinlambda_2 - E * sinphi * cos2phi * sinlambda),
        dydphi = 0.5 * F * (sin2phi * coslambda_2 + E * sin2lambda_2 * cosphi) + 0.5,
        denominator = dxdphi * dydlambda - dydphi * dxdlambda,
        dlambda = (fy * dxdphi - fx * dydphi) / denominator,
        dphi = (fx * dydlambda - fy * dxdlambda) / denominator;
    lambda -= dlambda, phi -= dphi;
  } while (((0, _math.abs)(dlambda) > _math.epsilon || (0, _math.abs)(dphi) > _math.epsilon) && --i > 0);

  return [lambda, phi];
};

function _default() {
  return (0, _d3Geo.geoProjection)(winkel3Raw).scale(158.837);
}
},{"d3-geo":"../node_modules/d3-geo/src/index.js","./aitoff":"../node_modules/d3-geo-projection/src/aitoff.js","./math":"../node_modules/d3-geo-projection/src/math.js"}],"../node_modules/d3-geo-projection/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "geoAiry", {
  enumerable: true,
  get: function () {
    return _airy.default;
  }
});
Object.defineProperty(exports, "geoAiryRaw", {
  enumerable: true,
  get: function () {
    return _airy.airyRaw;
  }
});
Object.defineProperty(exports, "geoAitoff", {
  enumerable: true,
  get: function () {
    return _aitoff.default;
  }
});
Object.defineProperty(exports, "geoAitoffRaw", {
  enumerable: true,
  get: function () {
    return _aitoff.aitoffRaw;
  }
});
Object.defineProperty(exports, "geoArmadillo", {
  enumerable: true,
  get: function () {
    return _armadillo.default;
  }
});
Object.defineProperty(exports, "geoArmadilloRaw", {
  enumerable: true,
  get: function () {
    return _armadillo.armadilloRaw;
  }
});
Object.defineProperty(exports, "geoAugust", {
  enumerable: true,
  get: function () {
    return _august.default;
  }
});
Object.defineProperty(exports, "geoAugustRaw", {
  enumerable: true,
  get: function () {
    return _august.augustRaw;
  }
});
Object.defineProperty(exports, "geoBaker", {
  enumerable: true,
  get: function () {
    return _baker.default;
  }
});
Object.defineProperty(exports, "geoBakerRaw", {
  enumerable: true,
  get: function () {
    return _baker.bakerRaw;
  }
});
Object.defineProperty(exports, "geoBerghaus", {
  enumerable: true,
  get: function () {
    return _berghaus.default;
  }
});
Object.defineProperty(exports, "geoBerghausRaw", {
  enumerable: true,
  get: function () {
    return _berghaus.berghausRaw;
  }
});
Object.defineProperty(exports, "geoBertin1953", {
  enumerable: true,
  get: function () {
    return _bertin.default;
  }
});
Object.defineProperty(exports, "geoBertin1953Raw", {
  enumerable: true,
  get: function () {
    return _bertin.bertin1953Raw;
  }
});
Object.defineProperty(exports, "geoBoggs", {
  enumerable: true,
  get: function () {
    return _boggs.default;
  }
});
Object.defineProperty(exports, "geoBoggsRaw", {
  enumerable: true,
  get: function () {
    return _boggs.boggsRaw;
  }
});
Object.defineProperty(exports, "geoBonne", {
  enumerable: true,
  get: function () {
    return _bonne.default;
  }
});
Object.defineProperty(exports, "geoBonneRaw", {
  enumerable: true,
  get: function () {
    return _bonne.bonneRaw;
  }
});
Object.defineProperty(exports, "geoBottomley", {
  enumerable: true,
  get: function () {
    return _bottomley.default;
  }
});
Object.defineProperty(exports, "geoBottomleyRaw", {
  enumerable: true,
  get: function () {
    return _bottomley.bottomleyRaw;
  }
});
Object.defineProperty(exports, "geoBromley", {
  enumerable: true,
  get: function () {
    return _bromley.default;
  }
});
Object.defineProperty(exports, "geoBromleyRaw", {
  enumerable: true,
  get: function () {
    return _bromley.bromleyRaw;
  }
});
Object.defineProperty(exports, "geoChamberlin", {
  enumerable: true,
  get: function () {
    return _chamberlin.default;
  }
});
Object.defineProperty(exports, "geoChamberlinRaw", {
  enumerable: true,
  get: function () {
    return _chamberlin.chamberlinRaw;
  }
});
Object.defineProperty(exports, "geoChamberlinAfrica", {
  enumerable: true,
  get: function () {
    return _chamberlin.chamberlinAfrica;
  }
});
Object.defineProperty(exports, "geoCollignon", {
  enumerable: true,
  get: function () {
    return _collignon.default;
  }
});
Object.defineProperty(exports, "geoCollignonRaw", {
  enumerable: true,
  get: function () {
    return _collignon.collignonRaw;
  }
});
Object.defineProperty(exports, "geoCraig", {
  enumerable: true,
  get: function () {
    return _craig.default;
  }
});
Object.defineProperty(exports, "geoCraigRaw", {
  enumerable: true,
  get: function () {
    return _craig.craigRaw;
  }
});
Object.defineProperty(exports, "geoCraster", {
  enumerable: true,
  get: function () {
    return _craster.default;
  }
});
Object.defineProperty(exports, "geoCrasterRaw", {
  enumerable: true,
  get: function () {
    return _craster.crasterRaw;
  }
});
Object.defineProperty(exports, "geoCylindricalEqualArea", {
  enumerable: true,
  get: function () {
    return _cylindricalEqualArea.default;
  }
});
Object.defineProperty(exports, "geoCylindricalEqualAreaRaw", {
  enumerable: true,
  get: function () {
    return _cylindricalEqualArea.cylindricalEqualAreaRaw;
  }
});
Object.defineProperty(exports, "geoCylindricalStereographic", {
  enumerable: true,
  get: function () {
    return _cylindricalStereographic.default;
  }
});
Object.defineProperty(exports, "geoCylindricalStereographicRaw", {
  enumerable: true,
  get: function () {
    return _cylindricalStereographic.cylindricalStereographicRaw;
  }
});
Object.defineProperty(exports, "geoEckert1", {
  enumerable: true,
  get: function () {
    return _eckert.default;
  }
});
Object.defineProperty(exports, "geoEckert1Raw", {
  enumerable: true,
  get: function () {
    return _eckert.eckert1Raw;
  }
});
Object.defineProperty(exports, "geoEckert2", {
  enumerable: true,
  get: function () {
    return _eckert2.default;
  }
});
Object.defineProperty(exports, "geoEckert2Raw", {
  enumerable: true,
  get: function () {
    return _eckert2.eckert2Raw;
  }
});
Object.defineProperty(exports, "geoEckert3", {
  enumerable: true,
  get: function () {
    return _eckert3.default;
  }
});
Object.defineProperty(exports, "geoEckert3Raw", {
  enumerable: true,
  get: function () {
    return _eckert3.eckert3Raw;
  }
});
Object.defineProperty(exports, "geoEckert4", {
  enumerable: true,
  get: function () {
    return _eckert4.default;
  }
});
Object.defineProperty(exports, "geoEckert4Raw", {
  enumerable: true,
  get: function () {
    return _eckert4.eckert4Raw;
  }
});
Object.defineProperty(exports, "geoEckert5", {
  enumerable: true,
  get: function () {
    return _eckert5.default;
  }
});
Object.defineProperty(exports, "geoEckert5Raw", {
  enumerable: true,
  get: function () {
    return _eckert5.eckert5Raw;
  }
});
Object.defineProperty(exports, "geoEckert6", {
  enumerable: true,
  get: function () {
    return _eckert6.default;
  }
});
Object.defineProperty(exports, "geoEckert6Raw", {
  enumerable: true,
  get: function () {
    return _eckert6.eckert6Raw;
  }
});
Object.defineProperty(exports, "geoEisenlohr", {
  enumerable: true,
  get: function () {
    return _eisenlohr.default;
  }
});
Object.defineProperty(exports, "geoEisenlohrRaw", {
  enumerable: true,
  get: function () {
    return _eisenlohr.eisenlohrRaw;
  }
});
Object.defineProperty(exports, "geoFahey", {
  enumerable: true,
  get: function () {
    return _fahey.default;
  }
});
Object.defineProperty(exports, "geoFaheyRaw", {
  enumerable: true,
  get: function () {
    return _fahey.faheyRaw;
  }
});
Object.defineProperty(exports, "geoFoucaut", {
  enumerable: true,
  get: function () {
    return _foucaut.default;
  }
});
Object.defineProperty(exports, "geoFoucautRaw", {
  enumerable: true,
  get: function () {
    return _foucaut.foucautRaw;
  }
});
Object.defineProperty(exports, "geoFoucautSinusoidal", {
  enumerable: true,
  get: function () {
    return _foucautSinusoidal.default;
  }
});
Object.defineProperty(exports, "geoFoucautSinusoidalRaw", {
  enumerable: true,
  get: function () {
    return _foucautSinusoidal.foucautSinusoidalRaw;
  }
});
Object.defineProperty(exports, "geoGilbert", {
  enumerable: true,
  get: function () {
    return _gilbert.default;
  }
});
Object.defineProperty(exports, "geoGingery", {
  enumerable: true,
  get: function () {
    return _gingery.default;
  }
});
Object.defineProperty(exports, "geoGingeryRaw", {
  enumerable: true,
  get: function () {
    return _gingery.gingeryRaw;
  }
});
Object.defineProperty(exports, "geoGinzburg4", {
  enumerable: true,
  get: function () {
    return _ginzburg.default;
  }
});
Object.defineProperty(exports, "geoGinzburg4Raw", {
  enumerable: true,
  get: function () {
    return _ginzburg.ginzburg4Raw;
  }
});
Object.defineProperty(exports, "geoGinzburg5", {
  enumerable: true,
  get: function () {
    return _ginzburg2.default;
  }
});
Object.defineProperty(exports, "geoGinzburg5Raw", {
  enumerable: true,
  get: function () {
    return _ginzburg2.ginzburg5Raw;
  }
});
Object.defineProperty(exports, "geoGinzburg6", {
  enumerable: true,
  get: function () {
    return _ginzburg3.default;
  }
});
Object.defineProperty(exports, "geoGinzburg6Raw", {
  enumerable: true,
  get: function () {
    return _ginzburg3.ginzburg6Raw;
  }
});
Object.defineProperty(exports, "geoGinzburg8", {
  enumerable: true,
  get: function () {
    return _ginzburg4.default;
  }
});
Object.defineProperty(exports, "geoGinzburg8Raw", {
  enumerable: true,
  get: function () {
    return _ginzburg4.ginzburg8Raw;
  }
});
Object.defineProperty(exports, "geoGinzburg9", {
  enumerable: true,
  get: function () {
    return _ginzburg5.default;
  }
});
Object.defineProperty(exports, "geoGinzburg9Raw", {
  enumerable: true,
  get: function () {
    return _ginzburg5.ginzburg9Raw;
  }
});
Object.defineProperty(exports, "geoGringorten", {
  enumerable: true,
  get: function () {
    return _gringorten.default;
  }
});
Object.defineProperty(exports, "geoGringortenRaw", {
  enumerable: true,
  get: function () {
    return _gringorten.gringortenRaw;
  }
});
Object.defineProperty(exports, "geoGuyou", {
  enumerable: true,
  get: function () {
    return _guyou.default;
  }
});
Object.defineProperty(exports, "geoGuyouRaw", {
  enumerable: true,
  get: function () {
    return _guyou.guyouRaw;
  }
});
Object.defineProperty(exports, "geoHammer", {
  enumerable: true,
  get: function () {
    return _hammer.default;
  }
});
Object.defineProperty(exports, "geoHammerRaw", {
  enumerable: true,
  get: function () {
    return _hammer.hammerRaw;
  }
});
Object.defineProperty(exports, "geoHammerRetroazimuthal", {
  enumerable: true,
  get: function () {
    return _hammerRetroazimuthal.default;
  }
});
Object.defineProperty(exports, "geoHammerRetroazimuthalRaw", {
  enumerable: true,
  get: function () {
    return _hammerRetroazimuthal.hammerRetroazimuthalRaw;
  }
});
Object.defineProperty(exports, "geoHealpix", {
  enumerable: true,
  get: function () {
    return _healpix.default;
  }
});
Object.defineProperty(exports, "geoHealpixRaw", {
  enumerable: true,
  get: function () {
    return _healpix.healpixRaw;
  }
});
Object.defineProperty(exports, "geoHill", {
  enumerable: true,
  get: function () {
    return _hill.default;
  }
});
Object.defineProperty(exports, "geoHillRaw", {
  enumerable: true,
  get: function () {
    return _hill.hillRaw;
  }
});
Object.defineProperty(exports, "geoHomolosine", {
  enumerable: true,
  get: function () {
    return _homolosine.default;
  }
});
Object.defineProperty(exports, "geoHomolosineRaw", {
  enumerable: true,
  get: function () {
    return _homolosine.homolosineRaw;
  }
});
Object.defineProperty(exports, "geoHufnagel", {
  enumerable: true,
  get: function () {
    return _hufnagel.default;
  }
});
Object.defineProperty(exports, "geoHufnagelRaw", {
  enumerable: true,
  get: function () {
    return _hufnagel.hufnagelRaw;
  }
});
Object.defineProperty(exports, "geoHyperelliptical", {
  enumerable: true,
  get: function () {
    return _hyperelliptical.default;
  }
});
Object.defineProperty(exports, "geoHyperellipticalRaw", {
  enumerable: true,
  get: function () {
    return _hyperelliptical.hyperellipticalRaw;
  }
});
Object.defineProperty(exports, "geoInterrupt", {
  enumerable: true,
  get: function () {
    return _index.default;
  }
});
Object.defineProperty(exports, "geoInterruptedBoggs", {
  enumerable: true,
  get: function () {
    return _boggs2.default;
  }
});
Object.defineProperty(exports, "geoInterruptedHomolosine", {
  enumerable: true,
  get: function () {
    return _homolosine2.default;
  }
});
Object.defineProperty(exports, "geoInterruptedMollweide", {
  enumerable: true,
  get: function () {
    return _mollweide.default;
  }
});
Object.defineProperty(exports, "geoInterruptedMollweideHemispheres", {
  enumerable: true,
  get: function () {
    return _mollweideHemispheres.default;
  }
});
Object.defineProperty(exports, "geoInterruptedSinuMollweide", {
  enumerable: true,
  get: function () {
    return _sinuMollweide.default;
  }
});
Object.defineProperty(exports, "geoInterruptedSinusoidal", {
  enumerable: true,
  get: function () {
    return _sinusoidal.default;
  }
});
Object.defineProperty(exports, "geoKavrayskiy7", {
  enumerable: true,
  get: function () {
    return _kavrayskiy.default;
  }
});
Object.defineProperty(exports, "geoKavrayskiy7Raw", {
  enumerable: true,
  get: function () {
    return _kavrayskiy.kavrayskiy7Raw;
  }
});
Object.defineProperty(exports, "geoLagrange", {
  enumerable: true,
  get: function () {
    return _lagrange.default;
  }
});
Object.defineProperty(exports, "geoLagrangeRaw", {
  enumerable: true,
  get: function () {
    return _lagrange.lagrangeRaw;
  }
});
Object.defineProperty(exports, "geoLarrivee", {
  enumerable: true,
  get: function () {
    return _larrivee.default;
  }
});
Object.defineProperty(exports, "geoLarriveeRaw", {
  enumerable: true,
  get: function () {
    return _larrivee.larriveeRaw;
  }
});
Object.defineProperty(exports, "geoLaskowski", {
  enumerable: true,
  get: function () {
    return _laskowski.default;
  }
});
Object.defineProperty(exports, "geoLaskowskiRaw", {
  enumerable: true,
  get: function () {
    return _laskowski.laskowskiRaw;
  }
});
Object.defineProperty(exports, "geoLittrow", {
  enumerable: true,
  get: function () {
    return _littrow.default;
  }
});
Object.defineProperty(exports, "geoLittrowRaw", {
  enumerable: true,
  get: function () {
    return _littrow.littrowRaw;
  }
});
Object.defineProperty(exports, "geoLoximuthal", {
  enumerable: true,
  get: function () {
    return _loximuthal.default;
  }
});
Object.defineProperty(exports, "geoLoximuthalRaw", {
  enumerable: true,
  get: function () {
    return _loximuthal.loximuthalRaw;
  }
});
Object.defineProperty(exports, "geoMiller", {
  enumerable: true,
  get: function () {
    return _miller.default;
  }
});
Object.defineProperty(exports, "geoMillerRaw", {
  enumerable: true,
  get: function () {
    return _miller.millerRaw;
  }
});
Object.defineProperty(exports, "geoModifiedStereographic", {
  enumerable: true,
  get: function () {
    return _modifiedStereographic.default;
  }
});
Object.defineProperty(exports, "geoModifiedStereographicRaw", {
  enumerable: true,
  get: function () {
    return _modifiedStereographic.modifiedStereographicRaw;
  }
});
Object.defineProperty(exports, "geoModifiedStereographicAlaska", {
  enumerable: true,
  get: function () {
    return _modifiedStereographic.modifiedStereographicAlaska;
  }
});
Object.defineProperty(exports, "geoModifiedStereographicGs48", {
  enumerable: true,
  get: function () {
    return _modifiedStereographic.modifiedStereographicGs48;
  }
});
Object.defineProperty(exports, "geoModifiedStereographicGs50", {
  enumerable: true,
  get: function () {
    return _modifiedStereographic.modifiedStereographicGs50;
  }
});
Object.defineProperty(exports, "geoModifiedStereographicMiller", {
  enumerable: true,
  get: function () {
    return _modifiedStereographic.modifiedStereographicMiller;
  }
});
Object.defineProperty(exports, "geoModifiedStereographicLee", {
  enumerable: true,
  get: function () {
    return _modifiedStereographic.modifiedStereographicLee;
  }
});
Object.defineProperty(exports, "geoMollweide", {
  enumerable: true,
  get: function () {
    return _mollweide2.default;
  }
});
Object.defineProperty(exports, "geoMollweideRaw", {
  enumerable: true,
  get: function () {
    return _mollweide2.mollweideRaw;
  }
});
Object.defineProperty(exports, "geoMtFlatPolarParabolic", {
  enumerable: true,
  get: function () {
    return _mtFlatPolarParabolic.default;
  }
});
Object.defineProperty(exports, "geoMtFlatPolarParabolicRaw", {
  enumerable: true,
  get: function () {
    return _mtFlatPolarParabolic.mtFlatPolarParabolicRaw;
  }
});
Object.defineProperty(exports, "geoMtFlatPolarQuartic", {
  enumerable: true,
  get: function () {
    return _mtFlatPolarQuartic.default;
  }
});
Object.defineProperty(exports, "geoMtFlatPolarQuarticRaw", {
  enumerable: true,
  get: function () {
    return _mtFlatPolarQuartic.mtFlatPolarQuarticRaw;
  }
});
Object.defineProperty(exports, "geoMtFlatPolarSinusoidal", {
  enumerable: true,
  get: function () {
    return _mtFlatPolarSinusoidal.default;
  }
});
Object.defineProperty(exports, "geoMtFlatPolarSinusoidalRaw", {
  enumerable: true,
  get: function () {
    return _mtFlatPolarSinusoidal.mtFlatPolarSinusoidalRaw;
  }
});
Object.defineProperty(exports, "geoNaturalEarth", {
  enumerable: true,
  get: function () {
    return _d3Geo.geoNaturalEarth1;
  }
});
Object.defineProperty(exports, "geoNaturalEarthRaw", {
  enumerable: true,
  get: function () {
    return _d3Geo.geoNaturalEarth1Raw;
  }
});
Object.defineProperty(exports, "geoNaturalEarth2", {
  enumerable: true,
  get: function () {
    return _naturalEarth.default;
  }
});
Object.defineProperty(exports, "geoNaturalEarth2Raw", {
  enumerable: true,
  get: function () {
    return _naturalEarth.naturalEarth2Raw;
  }
});
Object.defineProperty(exports, "geoNellHammer", {
  enumerable: true,
  get: function () {
    return _nellHammer.default;
  }
});
Object.defineProperty(exports, "geoNellHammerRaw", {
  enumerable: true,
  get: function () {
    return _nellHammer.nellHammerRaw;
  }
});
Object.defineProperty(exports, "geoInterruptedQuarticAuthalic", {
  enumerable: true,
  get: function () {
    return _quarticAuthalic.default;
  }
});
Object.defineProperty(exports, "geoNicolosi", {
  enumerable: true,
  get: function () {
    return _nicolosi.default;
  }
});
Object.defineProperty(exports, "geoNicolosiRaw", {
  enumerable: true,
  get: function () {
    return _nicolosi.nicolosiRaw;
  }
});
Object.defineProperty(exports, "geoPatterson", {
  enumerable: true,
  get: function () {
    return _patterson.default;
  }
});
Object.defineProperty(exports, "geoPattersonRaw", {
  enumerable: true,
  get: function () {
    return _patterson.pattersonRaw;
  }
});
Object.defineProperty(exports, "geoPolyconic", {
  enumerable: true,
  get: function () {
    return _polyconic.default;
  }
});
Object.defineProperty(exports, "geoPolyconicRaw", {
  enumerable: true,
  get: function () {
    return _polyconic.polyconicRaw;
  }
});
Object.defineProperty(exports, "geoPolyhedral", {
  enumerable: true,
  get: function () {
    return _index2.default;
  }
});
Object.defineProperty(exports, "geoPolyhedralButterfly", {
  enumerable: true,
  get: function () {
    return _butterfly.default;
  }
});
Object.defineProperty(exports, "geoPolyhedralCollignon", {
  enumerable: true,
  get: function () {
    return _collignon2.default;
  }
});
Object.defineProperty(exports, "geoPolyhedralWaterman", {
  enumerable: true,
  get: function () {
    return _waterman.default;
  }
});
Object.defineProperty(exports, "geoProject", {
  enumerable: true,
  get: function () {
    return _index3.default;
  }
});
Object.defineProperty(exports, "geoGringortenQuincuncial", {
  enumerable: true,
  get: function () {
    return _gringorten2.default;
  }
});
Object.defineProperty(exports, "geoPeirceQuincuncial", {
  enumerable: true,
  get: function () {
    return _peirce.default;
  }
});
Object.defineProperty(exports, "geoPierceQuincuncial", {
  enumerable: true,
  get: function () {
    return _peirce.default;
  }
});
Object.defineProperty(exports, "geoQuantize", {
  enumerable: true,
  get: function () {
    return _quantize.default;
  }
});
Object.defineProperty(exports, "geoQuincuncial", {
  enumerable: true,
  get: function () {
    return _index4.default;
  }
});
Object.defineProperty(exports, "geoRectangularPolyconic", {
  enumerable: true,
  get: function () {
    return _rectangularPolyconic.default;
  }
});
Object.defineProperty(exports, "geoRectangularPolyconicRaw", {
  enumerable: true,
  get: function () {
    return _rectangularPolyconic.rectangularPolyconicRaw;
  }
});
Object.defineProperty(exports, "geoRobinson", {
  enumerable: true,
  get: function () {
    return _robinson.default;
  }
});
Object.defineProperty(exports, "geoRobinsonRaw", {
  enumerable: true,
  get: function () {
    return _robinson.robinsonRaw;
  }
});
Object.defineProperty(exports, "geoSatellite", {
  enumerable: true,
  get: function () {
    return _satellite.default;
  }
});
Object.defineProperty(exports, "geoSatelliteRaw", {
  enumerable: true,
  get: function () {
    return _satellite.satelliteRaw;
  }
});
Object.defineProperty(exports, "geoSinuMollweide", {
  enumerable: true,
  get: function () {
    return _sinuMollweide2.default;
  }
});
Object.defineProperty(exports, "geoSinuMollweideRaw", {
  enumerable: true,
  get: function () {
    return _sinuMollweide2.sinuMollweideRaw;
  }
});
Object.defineProperty(exports, "geoSinusoidal", {
  enumerable: true,
  get: function () {
    return _sinusoidal2.default;
  }
});
Object.defineProperty(exports, "geoSinusoidalRaw", {
  enumerable: true,
  get: function () {
    return _sinusoidal2.sinusoidalRaw;
  }
});
Object.defineProperty(exports, "geoStitch", {
  enumerable: true,
  get: function () {
    return _stitch.default;
  }
});
Object.defineProperty(exports, "geoTimes", {
  enumerable: true,
  get: function () {
    return _times.default;
  }
});
Object.defineProperty(exports, "geoTimesRaw", {
  enumerable: true,
  get: function () {
    return _times.timesRaw;
  }
});
Object.defineProperty(exports, "geoTwoPointAzimuthal", {
  enumerable: true,
  get: function () {
    return _twoPointAzimuthal.default;
  }
});
Object.defineProperty(exports, "geoTwoPointAzimuthalRaw", {
  enumerable: true,
  get: function () {
    return _twoPointAzimuthal.twoPointAzimuthalRaw;
  }
});
Object.defineProperty(exports, "geoTwoPointAzimuthalUsa", {
  enumerable: true,
  get: function () {
    return _twoPointAzimuthal.twoPointAzimuthalUsa;
  }
});
Object.defineProperty(exports, "geoTwoPointEquidistant", {
  enumerable: true,
  get: function () {
    return _twoPointEquidistant.default;
  }
});
Object.defineProperty(exports, "geoTwoPointEquidistantRaw", {
  enumerable: true,
  get: function () {
    return _twoPointEquidistant.twoPointEquidistantRaw;
  }
});
Object.defineProperty(exports, "geoTwoPointEquidistantUsa", {
  enumerable: true,
  get: function () {
    return _twoPointEquidistant.twoPointEquidistantUsa;
  }
});
Object.defineProperty(exports, "geoVanDerGrinten", {
  enumerable: true,
  get: function () {
    return _vanDerGrinten.default;
  }
});
Object.defineProperty(exports, "geoVanDerGrintenRaw", {
  enumerable: true,
  get: function () {
    return _vanDerGrinten.vanDerGrintenRaw;
  }
});
Object.defineProperty(exports, "geoVanDerGrinten2", {
  enumerable: true,
  get: function () {
    return _vanDerGrinten2.default;
  }
});
Object.defineProperty(exports, "geoVanDerGrinten2Raw", {
  enumerable: true,
  get: function () {
    return _vanDerGrinten2.vanDerGrinten2Raw;
  }
});
Object.defineProperty(exports, "geoVanDerGrinten3", {
  enumerable: true,
  get: function () {
    return _vanDerGrinten3.default;
  }
});
Object.defineProperty(exports, "geoVanDerGrinten3Raw", {
  enumerable: true,
  get: function () {
    return _vanDerGrinten3.vanDerGrinten3Raw;
  }
});
Object.defineProperty(exports, "geoVanDerGrinten4", {
  enumerable: true,
  get: function () {
    return _vanDerGrinten4.default;
  }
});
Object.defineProperty(exports, "geoVanDerGrinten4Raw", {
  enumerable: true,
  get: function () {
    return _vanDerGrinten4.vanDerGrinten4Raw;
  }
});
Object.defineProperty(exports, "geoWagner", {
  enumerable: true,
  get: function () {
    return _wagner.default;
  }
});
Object.defineProperty(exports, "geoWagnerRaw", {
  enumerable: true,
  get: function () {
    return _wagner.wagnerRaw;
  }
});
Object.defineProperty(exports, "geoWagner4", {
  enumerable: true,
  get: function () {
    return _wagner2.default;
  }
});
Object.defineProperty(exports, "geoWagner4Raw", {
  enumerable: true,
  get: function () {
    return _wagner2.wagner4Raw;
  }
});
Object.defineProperty(exports, "geoWagner6", {
  enumerable: true,
  get: function () {
    return _wagner3.default;
  }
});
Object.defineProperty(exports, "geoWagner6Raw", {
  enumerable: true,
  get: function () {
    return _wagner3.wagner6Raw;
  }
});
Object.defineProperty(exports, "geoWagner7", {
  enumerable: true,
  get: function () {
    return _wagner4.default;
  }
});
Object.defineProperty(exports, "geoWagner7Raw", {
  enumerable: true,
  get: function () {
    return _wagner4.wagner7Raw;
  }
});
Object.defineProperty(exports, "geoWiechel", {
  enumerable: true,
  get: function () {
    return _wiechel.default;
  }
});
Object.defineProperty(exports, "geoWiechelRaw", {
  enumerable: true,
  get: function () {
    return _wiechel.wiechelRaw;
  }
});
Object.defineProperty(exports, "geoWinkel3", {
  enumerable: true,
  get: function () {
    return _winkel.default;
  }
});
Object.defineProperty(exports, "geoWinkel3Raw", {
  enumerable: true,
  get: function () {
    return _winkel.winkel3Raw;
  }
});

var _airy = _interopRequireWildcard(require("./airy"));

var _aitoff = _interopRequireWildcard(require("./aitoff"));

var _armadillo = _interopRequireWildcard(require("./armadillo"));

var _august = _interopRequireWildcard(require("./august"));

var _baker = _interopRequireWildcard(require("./baker"));

var _berghaus = _interopRequireWildcard(require("./berghaus"));

var _bertin = _interopRequireWildcard(require("./bertin"));

var _boggs = _interopRequireWildcard(require("./boggs"));

var _bonne = _interopRequireWildcard(require("./bonne"));

var _bottomley = _interopRequireWildcard(require("./bottomley"));

var _bromley = _interopRequireWildcard(require("./bromley"));

var _chamberlin = _interopRequireWildcard(require("./chamberlin"));

var _collignon = _interopRequireWildcard(require("./collignon"));

var _craig = _interopRequireWildcard(require("./craig"));

var _craster = _interopRequireWildcard(require("./craster"));

var _cylindricalEqualArea = _interopRequireWildcard(require("./cylindricalEqualArea"));

var _cylindricalStereographic = _interopRequireWildcard(require("./cylindricalStereographic"));

var _eckert = _interopRequireWildcard(require("./eckert1.js"));

var _eckert2 = _interopRequireWildcard(require("./eckert2.js"));

var _eckert3 = _interopRequireWildcard(require("./eckert3.js"));

var _eckert4 = _interopRequireWildcard(require("./eckert4.js"));

var _eckert5 = _interopRequireWildcard(require("./eckert5.js"));

var _eckert6 = _interopRequireWildcard(require("./eckert6.js"));

var _eisenlohr = _interopRequireWildcard(require("./eisenlohr.js"));

var _fahey = _interopRequireWildcard(require("./fahey.js"));

var _foucaut = _interopRequireWildcard(require("./foucaut.js"));

var _foucautSinusoidal = _interopRequireWildcard(require("./foucautSinusoidal.js"));

var _gilbert = _interopRequireDefault(require("./gilbert.js"));

var _gingery = _interopRequireWildcard(require("./gingery.js"));

var _ginzburg = _interopRequireWildcard(require("./ginzburg4.js"));

var _ginzburg2 = _interopRequireWildcard(require("./ginzburg5.js"));

var _ginzburg3 = _interopRequireWildcard(require("./ginzburg6.js"));

var _ginzburg4 = _interopRequireWildcard(require("./ginzburg8.js"));

var _ginzburg5 = _interopRequireWildcard(require("./ginzburg9.js"));

var _gringorten = _interopRequireWildcard(require("./gringorten.js"));

var _guyou = _interopRequireWildcard(require("./guyou.js"));

var _hammer = _interopRequireWildcard(require("./hammer.js"));

var _hammerRetroazimuthal = _interopRequireWildcard(require("./hammerRetroazimuthal.js"));

var _healpix = _interopRequireWildcard(require("./healpix.js"));

var _hill = _interopRequireWildcard(require("./hill.js"));

var _homolosine = _interopRequireWildcard(require("./homolosine.js"));

var _hufnagel = _interopRequireWildcard(require("./hufnagel.js"));

var _hyperelliptical = _interopRequireWildcard(require("./hyperelliptical"));

var _index = _interopRequireDefault(require("./interrupted/index"));

var _boggs2 = _interopRequireDefault(require("./interrupted/boggs"));

var _homolosine2 = _interopRequireDefault(require("./interrupted/homolosine"));

var _mollweide = _interopRequireDefault(require("./interrupted/mollweide"));

var _mollweideHemispheres = _interopRequireDefault(require("./interrupted/mollweideHemispheres"));

var _sinuMollweide = _interopRequireDefault(require("./interrupted/sinuMollweide"));

var _sinusoidal = _interopRequireDefault(require("./interrupted/sinusoidal"));

var _kavrayskiy = _interopRequireWildcard(require("./kavrayskiy7.js"));

var _lagrange = _interopRequireWildcard(require("./lagrange.js"));

var _larrivee = _interopRequireWildcard(require("./larrivee"));

var _laskowski = _interopRequireWildcard(require("./laskowski"));

var _littrow = _interopRequireWildcard(require("./littrow.js"));

var _loximuthal = _interopRequireWildcard(require("./loximuthal.js"));

var _miller = _interopRequireWildcard(require("./miller"));

var _modifiedStereographic = _interopRequireWildcard(require("./modifiedStereographic"));

var _mollweide2 = _interopRequireWildcard(require("./mollweide"));

var _mtFlatPolarParabolic = _interopRequireWildcard(require("./mtFlatPolarParabolic"));

var _mtFlatPolarQuartic = _interopRequireWildcard(require("./mtFlatPolarQuartic"));

var _mtFlatPolarSinusoidal = _interopRequireWildcard(require("./mtFlatPolarSinusoidal"));

var _d3Geo = require("d3-geo");

var _naturalEarth = _interopRequireWildcard(require("./naturalEarth2"));

var _nellHammer = _interopRequireWildcard(require("./nellHammer"));

var _quarticAuthalic = _interopRequireDefault(require("./interrupted/quarticAuthalic"));

var _nicolosi = _interopRequireWildcard(require("./nicolosi"));

var _patterson = _interopRequireWildcard(require("./patterson"));

var _polyconic = _interopRequireWildcard(require("./polyconic"));

var _index2 = _interopRequireDefault(require("./polyhedral/index.js"));

var _butterfly = _interopRequireDefault(require("./polyhedral/butterfly.js"));

var _collignon2 = _interopRequireDefault(require("./polyhedral/collignon.js"));

var _waterman = _interopRequireDefault(require("./polyhedral/waterman.js"));

var _index3 = _interopRequireDefault(require("./project/index"));

var _gringorten2 = _interopRequireDefault(require("./quincuncial/gringorten.js"));

var _peirce = _interopRequireDefault(require("./quincuncial/peirce.js"));

var _quantize = _interopRequireDefault(require("./quantize"));

var _index4 = _interopRequireDefault(require("./quincuncial/index.js"));

var _rectangularPolyconic = _interopRequireWildcard(require("./rectangularPolyconic"));

var _robinson = _interopRequireWildcard(require("./robinson"));

var _satellite = _interopRequireWildcard(require("./satellite"));

var _sinuMollweide2 = _interopRequireWildcard(require("./sinuMollweide"));

var _sinusoidal2 = _interopRequireWildcard(require("./sinusoidal"));

var _stitch = _interopRequireDefault(require("./stitch"));

var _times = _interopRequireWildcard(require("./times"));

var _twoPointAzimuthal = _interopRequireWildcard(require("./twoPointAzimuthal"));

var _twoPointEquidistant = _interopRequireWildcard(require("./twoPointEquidistant"));

var _vanDerGrinten = _interopRequireWildcard(require("./vanDerGrinten"));

var _vanDerGrinten2 = _interopRequireWildcard(require("./vanDerGrinten2"));

var _vanDerGrinten3 = _interopRequireWildcard(require("./vanDerGrinten3"));

var _vanDerGrinten4 = _interopRequireWildcard(require("./vanDerGrinten4"));

var _wagner = _interopRequireWildcard(require("./wagner.js"));

var _wagner2 = _interopRequireWildcard(require("./wagner4.js"));

var _wagner3 = _interopRequireWildcard(require("./wagner6.js"));

var _wagner4 = _interopRequireWildcard(require("./wagner7.js"));

var _wiechel = _interopRequireWildcard(require("./wiechel.js"));

var _winkel = _interopRequireWildcard(require("./winkel3"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }
},{"./airy":"../node_modules/d3-geo-projection/src/airy.js","./aitoff":"../node_modules/d3-geo-projection/src/aitoff.js","./armadillo":"../node_modules/d3-geo-projection/src/armadillo.js","./august":"../node_modules/d3-geo-projection/src/august.js","./baker":"../node_modules/d3-geo-projection/src/baker.js","./berghaus":"../node_modules/d3-geo-projection/src/berghaus.js","./bertin":"../node_modules/d3-geo-projection/src/bertin.js","./boggs":"../node_modules/d3-geo-projection/src/boggs.js","./bonne":"../node_modules/d3-geo-projection/src/bonne.js","./bottomley":"../node_modules/d3-geo-projection/src/bottomley.js","./bromley":"../node_modules/d3-geo-projection/src/bromley.js","./chamberlin":"../node_modules/d3-geo-projection/src/chamberlin.js","./collignon":"../node_modules/d3-geo-projection/src/collignon.js","./craig":"../node_modules/d3-geo-projection/src/craig.js","./craster":"../node_modules/d3-geo-projection/src/craster.js","./cylindricalEqualArea":"../node_modules/d3-geo-projection/src/cylindricalEqualArea.js","./cylindricalStereographic":"../node_modules/d3-geo-projection/src/cylindricalStereographic.js","./eckert1.js":"../node_modules/d3-geo-projection/src/eckert1.js","./eckert2.js":"../node_modules/d3-geo-projection/src/eckert2.js","./eckert3.js":"../node_modules/d3-geo-projection/src/eckert3.js","./eckert4.js":"../node_modules/d3-geo-projection/src/eckert4.js","./eckert5.js":"../node_modules/d3-geo-projection/src/eckert5.js","./eckert6.js":"../node_modules/d3-geo-projection/src/eckert6.js","./eisenlohr.js":"../node_modules/d3-geo-projection/src/eisenlohr.js","./fahey.js":"../node_modules/d3-geo-projection/src/fahey.js","./foucaut.js":"../node_modules/d3-geo-projection/src/foucaut.js","./foucautSinusoidal.js":"../node_modules/d3-geo-projection/src/foucautSinusoidal.js","./gilbert.js":"../node_modules/d3-geo-projection/src/gilbert.js","./gingery.js":"../node_modules/d3-geo-projection/src/gingery.js","./ginzburg4.js":"../node_modules/d3-geo-projection/src/ginzburg4.js","./ginzburg5.js":"../node_modules/d3-geo-projection/src/ginzburg5.js","./ginzburg6.js":"../node_modules/d3-geo-projection/src/ginzburg6.js","./ginzburg8.js":"../node_modules/d3-geo-projection/src/ginzburg8.js","./ginzburg9.js":"../node_modules/d3-geo-projection/src/ginzburg9.js","./gringorten.js":"../node_modules/d3-geo-projection/src/gringorten.js","./guyou.js":"../node_modules/d3-geo-projection/src/guyou.js","./hammer.js":"../node_modules/d3-geo-projection/src/hammer.js","./hammerRetroazimuthal.js":"../node_modules/d3-geo-projection/src/hammerRetroazimuthal.js","./healpix.js":"../node_modules/d3-geo-projection/src/healpix.js","./hill.js":"../node_modules/d3-geo-projection/src/hill.js","./homolosine.js":"../node_modules/d3-geo-projection/src/homolosine.js","./hufnagel.js":"../node_modules/d3-geo-projection/src/hufnagel.js","./hyperelliptical":"../node_modules/d3-geo-projection/src/hyperelliptical.js","./interrupted/index":"../node_modules/d3-geo-projection/src/interrupted/index.js","./interrupted/boggs":"../node_modules/d3-geo-projection/src/interrupted/boggs.js","./interrupted/homolosine":"../node_modules/d3-geo-projection/src/interrupted/homolosine.js","./interrupted/mollweide":"../node_modules/d3-geo-projection/src/interrupted/mollweide.js","./interrupted/mollweideHemispheres":"../node_modules/d3-geo-projection/src/interrupted/mollweideHemispheres.js","./interrupted/sinuMollweide":"../node_modules/d3-geo-projection/src/interrupted/sinuMollweide.js","./interrupted/sinusoidal":"../node_modules/d3-geo-projection/src/interrupted/sinusoidal.js","./kavrayskiy7.js":"../node_modules/d3-geo-projection/src/kavrayskiy7.js","./lagrange.js":"../node_modules/d3-geo-projection/src/lagrange.js","./larrivee":"../node_modules/d3-geo-projection/src/larrivee.js","./laskowski":"../node_modules/d3-geo-projection/src/laskowski.js","./littrow.js":"../node_modules/d3-geo-projection/src/littrow.js","./loximuthal.js":"../node_modules/d3-geo-projection/src/loximuthal.js","./miller":"../node_modules/d3-geo-projection/src/miller.js","./modifiedStereographic":"../node_modules/d3-geo-projection/src/modifiedStereographic.js","./mollweide":"../node_modules/d3-geo-projection/src/mollweide.js","./mtFlatPolarParabolic":"../node_modules/d3-geo-projection/src/mtFlatPolarParabolic.js","./mtFlatPolarQuartic":"../node_modules/d3-geo-projection/src/mtFlatPolarQuartic.js","./mtFlatPolarSinusoidal":"../node_modules/d3-geo-projection/src/mtFlatPolarSinusoidal.js","d3-geo":"../node_modules/d3-geo/src/index.js","./naturalEarth2":"../node_modules/d3-geo-projection/src/naturalEarth2.js","./nellHammer":"../node_modules/d3-geo-projection/src/nellHammer.js","./interrupted/quarticAuthalic":"../node_modules/d3-geo-projection/src/interrupted/quarticAuthalic.js","./nicolosi":"../node_modules/d3-geo-projection/src/nicolosi.js","./patterson":"../node_modules/d3-geo-projection/src/patterson.js","./polyconic":"../node_modules/d3-geo-projection/src/polyconic.js","./polyhedral/index.js":"../node_modules/d3-geo-projection/src/polyhedral/index.js","./polyhedral/butterfly.js":"../node_modules/d3-geo-projection/src/polyhedral/butterfly.js","./polyhedral/collignon.js":"../node_modules/d3-geo-projection/src/polyhedral/collignon.js","./polyhedral/waterman.js":"../node_modules/d3-geo-projection/src/polyhedral/waterman.js","./project/index":"../node_modules/d3-geo-projection/src/project/index.js","./quincuncial/gringorten.js":"../node_modules/d3-geo-projection/src/quincuncial/gringorten.js","./quincuncial/peirce.js":"../node_modules/d3-geo-projection/src/quincuncial/peirce.js","./quantize":"../node_modules/d3-geo-projection/src/quantize.js","./quincuncial/index.js":"../node_modules/d3-geo-projection/src/quincuncial/index.js","./rectangularPolyconic":"../node_modules/d3-geo-projection/src/rectangularPolyconic.js","./robinson":"../node_modules/d3-geo-projection/src/robinson.js","./satellite":"../node_modules/d3-geo-projection/src/satellite.js","./sinuMollweide":"../node_modules/d3-geo-projection/src/sinuMollweide.js","./sinusoidal":"../node_modules/d3-geo-projection/src/sinusoidal.js","./stitch":"../node_modules/d3-geo-projection/src/stitch.js","./times":"../node_modules/d3-geo-projection/src/times.js","./twoPointAzimuthal":"../node_modules/d3-geo-projection/src/twoPointAzimuthal.js","./twoPointEquidistant":"../node_modules/d3-geo-projection/src/twoPointEquidistant.js","./vanDerGrinten":"../node_modules/d3-geo-projection/src/vanDerGrinten.js","./vanDerGrinten2":"../node_modules/d3-geo-projection/src/vanDerGrinten2.js","./vanDerGrinten3":"../node_modules/d3-geo-projection/src/vanDerGrinten3.js","./vanDerGrinten4":"../node_modules/d3-geo-projection/src/vanDerGrinten4.js","./wagner.js":"../node_modules/d3-geo-projection/src/wagner.js","./wagner4.js":"../node_modules/d3-geo-projection/src/wagner4.js","./wagner6.js":"../node_modules/d3-geo-projection/src/wagner6.js","./wagner7.js":"../node_modules/d3-geo-projection/src/wagner7.js","./wiechel.js":"../node_modules/d3-geo-projection/src/wiechel.js","./winkel3":"../node_modules/d3-geo-projection/src/winkel3.js"}],"components/projection.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeProjection = void 0;

var _d3GeoProjection = require("d3-geo-projection");

var makeProjection = function makeProjection(width, height) {
  return (0, _d3GeoProjection.geoTimes)().scale(700).translate([width / 2, height / 2]).precision(.1);
};

exports.makeProjection = makeProjection;
},{"d3-geo-projection":"../node_modules/d3-geo-projection/src/index.js"}],"03_unvaccinated_children/CountryTotalsDataProvider.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _d = require("d3");

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var CountryTotalsDataProvider =
/*#__PURE__*/
function () {
  function CountryTotalsDataProvider(_ref) {
    var dtp1Data = _ref.dtp1Data,
        dtp3Data = _ref.dtp3Data;

    _classCallCheck(this, CountryTotalsDataProvider);

    // extracts the list of years in the dataset
    var years = new Set();
    dtp1Data.columns.forEach(function (k) {
      if (!isNaN(+k)) {
        years.add(k);
      }
    });
    var numericColumnList = dtp1Data.columns.filter(function (k) {
      return k !== 'country';
    });
    this.yearList = Array.from(years);
    this.vaccineList = ['dtp1', 'dtp3'];
    this.rows = [].concat(_toConsumableArray(dtp1Data.map(function (d) {
      return _objectSpread({}, d, {
        vaccine: 'dtp1'
      });
    })), _toConsumableArray(dtp3Data.map(function (d) {
      return _objectSpread({}, d, {
        vaccine: 'dtp3'
      });
    }))).map(function (d) {
      return _objectSpread({}, d, numericColumnList.reduce(function (acc, k) {
        acc[k] = +d[k];
        return acc;
      }, {}));
    }).filter(function (d) {
      return d.country !== 'Grand Total';
    });
  }

  _createClass(CountryTotalsDataProvider, [{
    key: "getRows",
    value: function getRows() {
      return this.rows;
    }
  }, {
    key: "getYears",
    value: function getYears() {
      return this.yearList;
    }
  }]);

  return CountryTotalsDataProvider;
}();

var _default = CountryTotalsDataProvider;
exports.default = _default;
},{"d3":"../node_modules/d3/index.js"}],"../node_modules/underscore/underscore.js":[function(require,module,exports) {
var global = arguments[3];
var define;
//     Underscore.js 1.9.1
//     http://underscorejs.org
//     (c) 2009-2018 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` (`self`) in the browser, `global`
  // on the server, or `this` in some virtual machines. We use `self`
  // instead of `window` for `WebWorker` support.
  var root = typeof self == 'object' && self.self === self && self ||
            typeof global == 'object' && global.global === global && global ||
            this ||
            {};

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype;
  var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;

  // Create quick reference variables for speed access to core prototypes.
  var push = ArrayProto.push,
      slice = ArrayProto.slice,
      toString = ObjProto.toString,
      hasOwnProperty = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var nativeIsArray = Array.isArray,
      nativeKeys = Object.keys,
      nativeCreate = Object.create;

  // Naked function reference for surrogate-prototype-swapping.
  var Ctor = function(){};

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for their old module API. If we're in
  // the browser, add `_` as a global object.
  // (`nodeType` is checked to ensure that `module`
  // and `exports` are not HTML elements.)
  if (typeof exports != 'undefined' && !exports.nodeType) {
    if (typeof module != 'undefined' && !module.nodeType && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.9.1';

  // Internal function that returns an efficient (for current engines) version
  // of the passed-in callback, to be repeatedly applied in other Underscore
  // functions.
  var optimizeCb = function(func, context, argCount) {
    if (context === void 0) return func;
    switch (argCount == null ? 3 : argCount) {
      case 1: return function(value) {
        return func.call(context, value);
      };
      // The 2-argument case is omitted because we’re not using it.
      case 3: return function(value, index, collection) {
        return func.call(context, value, index, collection);
      };
      case 4: return function(accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
    }
    return function() {
      return func.apply(context, arguments);
    };
  };

  var builtinIteratee;

  // An internal function to generate callbacks that can be applied to each
  // element in a collection, returning the desired result — either `identity`,
  // an arbitrary callback, a property matcher, or a property accessor.
  var cb = function(value, context, argCount) {
    if (_.iteratee !== builtinIteratee) return _.iteratee(value, context);
    if (value == null) return _.identity;
    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
    if (_.isObject(value) && !_.isArray(value)) return _.matcher(value);
    return _.property(value);
  };

  // External wrapper for our callback generator. Users may customize
  // `_.iteratee` if they want additional predicate/iteratee shorthand styles.
  // This abstraction hides the internal-only argCount argument.
  _.iteratee = builtinIteratee = function(value, context) {
    return cb(value, context, Infinity);
  };

  // Some functions take a variable number of arguments, or a few expected
  // arguments at the beginning and then a variable number of values to operate
  // on. This helper accumulates all remaining arguments past the function’s
  // argument length (or an explicit `startIndex`), into an array that becomes
  // the last argument. Similar to ES6’s "rest parameter".
  var restArguments = function(func, startIndex) {
    startIndex = startIndex == null ? func.length - 1 : +startIndex;
    return function() {
      var length = Math.max(arguments.length - startIndex, 0),
          rest = Array(length),
          index = 0;
      for (; index < length; index++) {
        rest[index] = arguments[index + startIndex];
      }
      switch (startIndex) {
        case 0: return func.call(this, rest);
        case 1: return func.call(this, arguments[0], rest);
        case 2: return func.call(this, arguments[0], arguments[1], rest);
      }
      var args = Array(startIndex + 1);
      for (index = 0; index < startIndex; index++) {
        args[index] = arguments[index];
      }
      args[startIndex] = rest;
      return func.apply(this, args);
    };
  };

  // An internal function for creating a new object that inherits from another.
  var baseCreate = function(prototype) {
    if (!_.isObject(prototype)) return {};
    if (nativeCreate) return nativeCreate(prototype);
    Ctor.prototype = prototype;
    var result = new Ctor;
    Ctor.prototype = null;
    return result;
  };

  var shallowProperty = function(key) {
    return function(obj) {
      return obj == null ? void 0 : obj[key];
    };
  };

  var has = function(obj, path) {
    return obj != null && hasOwnProperty.call(obj, path);
  }

  var deepGet = function(obj, path) {
    var length = path.length;
    for (var i = 0; i < length; i++) {
      if (obj == null) return void 0;
      obj = obj[path[i]];
    }
    return length ? obj : void 0;
  };

  // Helper for collection methods to determine whether a collection
  // should be iterated as an array or as an object.
  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
  var getLength = shallowProperty('length');
  var isArrayLike = function(collection) {
    var length = getLength(collection);
    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
  };

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles raw objects in addition to array-likes. Treats all
  // sparse array-likes as if they were dense.
  _.each = _.forEach = function(obj, iteratee, context) {
    iteratee = optimizeCb(iteratee, context);
    var i, length;
    if (isArrayLike(obj)) {
      for (i = 0, length = obj.length; i < length; i++) {
        iteratee(obj[i], i, obj);
      }
    } else {
      var keys = _.keys(obj);
      for (i = 0, length = keys.length; i < length; i++) {
        iteratee(obj[keys[i]], keys[i], obj);
      }
    }
    return obj;
  };

  // Return the results of applying the iteratee to each element.
  _.map = _.collect = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length,
        results = Array(length);
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      results[index] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  // Create a reducing function iterating left or right.
  var createReduce = function(dir) {
    // Wrap code that reassigns argument variables in a separate function than
    // the one that accesses `arguments.length` to avoid a perf hit. (#1991)
    var reducer = function(obj, iteratee, memo, initial) {
      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length,
          index = dir > 0 ? 0 : length - 1;
      if (!initial) {
        memo = obj[keys ? keys[index] : index];
        index += dir;
      }
      for (; index >= 0 && index < length; index += dir) {
        var currentKey = keys ? keys[index] : index;
        memo = iteratee(memo, obj[currentKey], currentKey, obj);
      }
      return memo;
    };

    return function(obj, iteratee, memo, context) {
      var initial = arguments.length >= 3;
      return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);
    };
  };

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`.
  _.reduce = _.foldl = _.inject = createReduce(1);

  // The right-associative version of reduce, also known as `foldr`.
  _.reduceRight = _.foldr = createReduce(-1);

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, predicate, context) {
    var keyFinder = isArrayLike(obj) ? _.findIndex : _.findKey;
    var key = keyFinder(obj, predicate, context);
    if (key !== void 0 && key !== -1) return obj[key];
  };

  // Return all the elements that pass a truth test.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    predicate = cb(predicate, context);
    _.each(obj, function(value, index, list) {
      if (predicate(value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, predicate, context) {
    return _.filter(obj, _.negate(cb(predicate)), context);
  };

  // Determine whether all of the elements match a truth test.
  // Aliased as `all`.
  _.every = _.all = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (!predicate(obj[currentKey], currentKey, obj)) return false;
    }
    return true;
  };

  // Determine if at least one element in the object matches a truth test.
  // Aliased as `any`.
  _.some = _.any = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (predicate(obj[currentKey], currentKey, obj)) return true;
    }
    return false;
  };

  // Determine if the array or object contains a given item (using `===`).
  // Aliased as `includes` and `include`.
  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
    if (!isArrayLike(obj)) obj = _.values(obj);
    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
    return _.indexOf(obj, item, fromIndex) >= 0;
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = restArguments(function(obj, path, args) {
    var contextPath, func;
    if (_.isFunction(path)) {
      func = path;
    } else if (_.isArray(path)) {
      contextPath = path.slice(0, -1);
      path = path[path.length - 1];
    }
    return _.map(obj, function(context) {
      var method = func;
      if (!method) {
        if (contextPath && contextPath.length) {
          context = deepGet(context, contextPath);
        }
        if (context == null) return void 0;
        method = context[path];
      }
      return method == null ? method : method.apply(context, args);
    });
  });

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs) {
    return _.filter(obj, _.matcher(attrs));
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.find(obj, _.matcher(attrs));
  };

  // Return the maximum element (or element-based computation).
  _.max = function(obj, iteratee, context) {
    var result = -Infinity, lastComputed = -Infinity,
        value, computed;
    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value != null && value > result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(v, index, list) {
        computed = iteratee(v, index, list);
        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
          result = v;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iteratee, context) {
    var result = Infinity, lastComputed = Infinity,
        value, computed;
    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value != null && value < result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(v, index, list) {
        computed = iteratee(v, index, list);
        if (computed < lastComputed || computed === Infinity && result === Infinity) {
          result = v;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Shuffle a collection.
  _.shuffle = function(obj) {
    return _.sample(obj, Infinity);
  };

  // Sample **n** random values from a collection using the modern version of the
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (n == null || guard) {
      if (!isArrayLike(obj)) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    var sample = isArrayLike(obj) ? _.clone(obj) : _.values(obj);
    var length = getLength(sample);
    n = Math.max(Math.min(n, length), 0);
    var last = length - 1;
    for (var index = 0; index < n; index++) {
      var rand = _.random(index, last);
      var temp = sample[index];
      sample[index] = sample[rand];
      sample[rand] = temp;
    }
    return sample.slice(0, n);
  };

  // Sort the object's values by a criterion produced by an iteratee.
  _.sortBy = function(obj, iteratee, context) {
    var index = 0;
    iteratee = cb(iteratee, context);
    return _.pluck(_.map(obj, function(value, key, list) {
      return {
        value: value,
        index: index++,
        criteria: iteratee(value, key, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior, partition) {
    return function(obj, iteratee, context) {
      var result = partition ? [[], []] : {};
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index) {
        var key = iteratee(value, index, obj);
        behavior(result, value, key);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, value, key) {
    if (has(result, key)) result[key].push(value); else result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, value, key) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, value, key) {
    if (has(result, key)) result[key]++; else result[key] = 1;
  });

  var reStrSymbol = /[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;
  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (_.isString(obj)) {
      // Keep surrogate pair characters together
      return obj.match(reStrSymbol);
    }
    if (isArrayLike(obj)) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
  };

  // Split a collection into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = group(function(result, value, pass) {
    result[pass ? 0 : 1].push(value);
  }, true);

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null || array.length < 1) return n == null ? void 0 : [];
    if (n == null || guard) return array[0];
    return _.initial(array, array.length - n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array.
  _.last = function(array, n, guard) {
    if (array == null || array.length < 1) return n == null ? void 0 : [];
    if (n == null || guard) return array[array.length - 1];
    return _.rest(array, Math.max(0, array.length - n));
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, Boolean);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, strict, output) {
    output = output || [];
    var idx = output.length;
    for (var i = 0, length = getLength(input); i < length; i++) {
      var value = input[i];
      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
        // Flatten current level of array or arguments object.
        if (shallow) {
          var j = 0, len = value.length;
          while (j < len) output[idx++] = value[j++];
        } else {
          flatten(value, shallow, strict, output);
          idx = output.length;
        }
      } else if (!strict) {
        output[idx++] = value;
      }
    }
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, false);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = restArguments(function(array, otherArrays) {
    return _.difference(array, otherArrays);
  });

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // The faster algorithm will not work with an iteratee if the iteratee
  // is not a one-to-one function, so providing an iteratee will disable
  // the faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
    if (!_.isBoolean(isSorted)) {
      context = iteratee;
      iteratee = isSorted;
      isSorted = false;
    }
    if (iteratee != null) iteratee = cb(iteratee, context);
    var result = [];
    var seen = [];
    for (var i = 0, length = getLength(array); i < length; i++) {
      var value = array[i],
          computed = iteratee ? iteratee(value, i, array) : value;
      if (isSorted && !iteratee) {
        if (!i || seen !== computed) result.push(value);
        seen = computed;
      } else if (iteratee) {
        if (!_.contains(seen, computed)) {
          seen.push(computed);
          result.push(value);
        }
      } else if (!_.contains(result, value)) {
        result.push(value);
      }
    }
    return result;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = restArguments(function(arrays) {
    return _.uniq(flatten(arrays, true, true));
  });

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var result = [];
    var argsLength = arguments.length;
    for (var i = 0, length = getLength(array); i < length; i++) {
      var item = array[i];
      if (_.contains(result, item)) continue;
      var j;
      for (j = 1; j < argsLength; j++) {
        if (!_.contains(arguments[j], item)) break;
      }
      if (j === argsLength) result.push(item);
    }
    return result;
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = restArguments(function(array, rest) {
    rest = flatten(rest, true, true);
    return _.filter(array, function(value){
      return !_.contains(rest, value);
    });
  });

  // Complement of _.zip. Unzip accepts an array of arrays and groups
  // each array's elements on shared indices.
  _.unzip = function(array) {
    var length = array && _.max(array, getLength).length || 0;
    var result = Array(length);

    for (var index = 0; index < length; index++) {
      result[index] = _.pluck(array, index);
    }
    return result;
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = restArguments(_.unzip);

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values. Passing by pairs is the reverse of _.pairs.
  _.object = function(list, values) {
    var result = {};
    for (var i = 0, length = getLength(list); i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // Generator function to create the findIndex and findLastIndex functions.
  var createPredicateIndexFinder = function(dir) {
    return function(array, predicate, context) {
      predicate = cb(predicate, context);
      var length = getLength(array);
      var index = dir > 0 ? 0 : length - 1;
      for (; index >= 0 && index < length; index += dir) {
        if (predicate(array[index], index, array)) return index;
      }
      return -1;
    };
  };

  // Returns the first index on an array-like that passes a predicate test.
  _.findIndex = createPredicateIndexFinder(1);
  _.findLastIndex = createPredicateIndexFinder(-1);

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iteratee, context) {
    iteratee = cb(iteratee, context, 1);
    var value = iteratee(obj);
    var low = 0, high = getLength(array);
    while (low < high) {
      var mid = Math.floor((low + high) / 2);
      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
    }
    return low;
  };

  // Generator function to create the indexOf and lastIndexOf functions.
  var createIndexFinder = function(dir, predicateFind, sortedIndex) {
    return function(array, item, idx) {
      var i = 0, length = getLength(array);
      if (typeof idx == 'number') {
        if (dir > 0) {
          i = idx >= 0 ? idx : Math.max(idx + length, i);
        } else {
          length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
        }
      } else if (sortedIndex && idx && length) {
        idx = sortedIndex(array, item);
        return array[idx] === item ? idx : -1;
      }
      if (item !== item) {
        idx = predicateFind(slice.call(array, i, length), _.isNaN);
        return idx >= 0 ? idx + i : -1;
      }
      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
        if (array[idx] === item) return idx;
      }
      return -1;
    };
  };

  // Return the position of the first occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (stop == null) {
      stop = start || 0;
      start = 0;
    }
    if (!step) {
      step = stop < start ? -1 : 1;
    }

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var range = Array(length);

    for (var idx = 0; idx < length; idx++, start += step) {
      range[idx] = start;
    }

    return range;
  };

  // Chunk a single array into multiple arrays, each containing `count` or fewer
  // items.
  _.chunk = function(array, count) {
    if (count == null || count < 1) return [];
    var result = [];
    var i = 0, length = array.length;
    while (i < length) {
      result.push(slice.call(array, i, i += count));
    }
    return result;
  };

  // Function (ahem) Functions
  // ------------------

  // Determines whether to execute a function as a constructor
  // or a normal function with the provided arguments.
  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
    var self = baseCreate(sourceFunc.prototype);
    var result = sourceFunc.apply(self, args);
    if (_.isObject(result)) return result;
    return self;
  };

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = restArguments(function(func, context, args) {
    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
    var bound = restArguments(function(callArgs) {
      return executeBound(func, bound, context, this, args.concat(callArgs));
    });
    return bound;
  });

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder by default, allowing any combination of arguments to be
  // pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.
  _.partial = restArguments(function(func, boundArgs) {
    var placeholder = _.partial.placeholder;
    var bound = function() {
      var position = 0, length = boundArgs.length;
      var args = Array(length);
      for (var i = 0; i < length; i++) {
        args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return executeBound(func, bound, this, this, args);
    };
    return bound;
  });

  _.partial.placeholder = _;

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = restArguments(function(obj, keys) {
    keys = flatten(keys, false, false);
    var index = keys.length;
    if (index < 1) throw new Error('bindAll must be passed function names');
    while (index--) {
      var key = keys[index];
      obj[key] = _.bind(obj[key], obj);
    }
  });

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memoize = function(key) {
      var cache = memoize.cache;
      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
      if (!has(cache, address)) cache[address] = func.apply(this, arguments);
      return cache[address];
    };
    memoize.cache = {};
    return memoize;
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = restArguments(function(func, wait, args) {
    return setTimeout(function() {
      return func.apply(null, args);
    }, wait);
  });

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = _.partial(_.delay, _, 1);

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var timeout, context, args, result;
    var previous = 0;
    if (!options) options = {};

    var later = function() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };

    var throttled = function() {
      var now = _.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        previous = now;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };

    throttled.cancel = function() {
      clearTimeout(timeout);
      previous = 0;
      timeout = context = args = null;
    };

    return throttled;
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, result;

    var later = function(context, args) {
      timeout = null;
      if (args) result = func.apply(context, args);
    };

    var debounced = restArguments(function(args) {
      if (timeout) clearTimeout(timeout);
      if (immediate) {
        var callNow = !timeout;
        timeout = setTimeout(later, wait);
        if (callNow) result = func.apply(this, args);
      } else {
        timeout = _.delay(later, wait, this, args);
      }

      return result;
    });

    debounced.cancel = function() {
      clearTimeout(timeout);
      timeout = null;
    };

    return debounced;
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return _.partial(wrapper, func);
  };

  // Returns a negated version of the passed-in predicate.
  _.negate = function(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var args = arguments;
    var start = args.length - 1;
    return function() {
      var i = start;
      var result = args[start].apply(this, arguments);
      while (i--) result = args[i].call(this, result);
      return result;
    };
  };

  // Returns a function that will only be executed on and after the Nth call.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Returns a function that will only be executed up to (but not including) the Nth call.
  _.before = function(times, func) {
    var memo;
    return function() {
      if (--times > 0) {
        memo = func.apply(this, arguments);
      }
      if (times <= 1) func = null;
      return memo;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = _.partial(_.before, 2);

  _.restArguments = restArguments;

  // Object Functions
  // ----------------

  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
    'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

  var collectNonEnumProps = function(obj, keys) {
    var nonEnumIdx = nonEnumerableProps.length;
    var constructor = obj.constructor;
    var proto = _.isFunction(constructor) && constructor.prototype || ObjProto;

    // Constructor is a special case.
    var prop = 'constructor';
    if (has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

    while (nonEnumIdx--) {
      prop = nonEnumerableProps[nonEnumIdx];
      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
        keys.push(prop);
      }
    }
  };

  // Retrieve the names of an object's own properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`.
  _.keys = function(obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (has(obj, key)) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve all the property names of an object.
  _.allKeys = function(obj) {
    if (!_.isObject(obj)) return [];
    var keys = [];
    for (var key in obj) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Returns the results of applying the iteratee to each element of the object.
  // In contrast to _.map it returns an object.
  _.mapObject = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys = _.keys(obj),
        length = keys.length,
        results = {};
    for (var index = 0; index < length; index++) {
      var currentKey = keys[index];
      results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  // Convert an object into a list of `[key, value]` pairs.
  // The opposite of _.object.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`.
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // An internal function for creating assigner functions.
  var createAssigner = function(keysFunc, defaults) {
    return function(obj) {
      var length = arguments.length;
      if (defaults) obj = Object(obj);
      if (length < 2 || obj == null) return obj;
      for (var index = 1; index < length; index++) {
        var source = arguments[index],
            keys = keysFunc(source),
            l = keys.length;
        for (var i = 0; i < l; i++) {
          var key = keys[i];
          if (!defaults || obj[key] === void 0) obj[key] = source[key];
        }
      }
      return obj;
    };
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = createAssigner(_.allKeys);

  // Assigns a given object with all the own properties in the passed-in object(s).
  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
  _.extendOwn = _.assign = createAssigner(_.keys);

  // Returns the first key on an object that passes a predicate test.
  _.findKey = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = _.keys(obj), key;
    for (var i = 0, length = keys.length; i < length; i++) {
      key = keys[i];
      if (predicate(obj[key], key, obj)) return key;
    }
  };

  // Internal pick helper function to determine if `obj` has key `key`.
  var keyInObj = function(value, key, obj) {
    return key in obj;
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = restArguments(function(obj, keys) {
    var result = {}, iteratee = keys[0];
    if (obj == null) return result;
    if (_.isFunction(iteratee)) {
      if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);
      keys = _.allKeys(obj);
    } else {
      iteratee = keyInObj;
      keys = flatten(keys, false, false);
      obj = Object(obj);
    }
    for (var i = 0, length = keys.length; i < length; i++) {
      var key = keys[i];
      var value = obj[key];
      if (iteratee(value, key, obj)) result[key] = value;
    }
    return result;
  });

  // Return a copy of the object without the blacklisted properties.
  _.omit = restArguments(function(obj, keys) {
    var iteratee = keys[0], context;
    if (_.isFunction(iteratee)) {
      iteratee = _.negate(iteratee);
      if (keys.length > 1) context = keys[1];
    } else {
      keys = _.map(flatten(keys, false, false), String);
      iteratee = function(value, key) {
        return !_.contains(keys, key);
      };
    }
    return _.pick(obj, iteratee, context);
  });

  // Fill in a given object with default properties.
  _.defaults = createAssigner(_.allKeys, true);

  // Creates an object that inherits from the given prototype object.
  // If additional properties are provided then they will be added to the
  // created object.
  _.create = function(prototype, props) {
    var result = baseCreate(prototype);
    if (props) _.extendOwn(result, props);
    return result;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Returns whether an object has a given set of `key:value` pairs.
  _.isMatch = function(object, attrs) {
    var keys = _.keys(attrs), length = keys.length;
    if (object == null) return !length;
    var obj = Object(object);
    for (var i = 0; i < length; i++) {
      var key = keys[i];
      if (attrs[key] !== obj[key] || !(key in obj)) return false;
    }
    return true;
  };


  // Internal recursive comparison function for `isEqual`.
  var eq, deepEq;
  eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a === 1 / b;
    // `null` or `undefined` only equal to itself (strict comparison).
    if (a == null || b == null) return false;
    // `NaN`s are equivalent, but non-reflexive.
    if (a !== a) return b !== b;
    // Exhaust primitive checks
    var type = typeof a;
    if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;
    return deepEq(a, b, aStack, bStack);
  };

  // Internal recursive comparison function for `isEqual`.
  deepEq = function(a, b, aStack, bStack) {
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className !== toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
      case '[object RegExp]':
      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return '' + a === '' + b;
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive.
        // Object(NaN) is equivalent to NaN.
        if (+a !== +a) return +b !== +b;
        // An `egal` comparison is performed for other numeric values.
        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a === +b;
      case '[object Symbol]':
        return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);
    }

    var areArrays = className === '[object Array]';
    if (!areArrays) {
      if (typeof a != 'object' || typeof b != 'object') return false;

      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
      // from different frames are.
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
                               _.isFunction(bCtor) && bCtor instanceof bCtor)
                          && ('constructor' in a && 'constructor' in b)) {
        return false;
      }
    }
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

    // Initializing stack of traversed objects.
    // It's done here since we only need them for objects and arrays comparison.
    aStack = aStack || [];
    bStack = bStack || [];
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] === a) return bStack[length] === b;
    }

    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);

    // Recursively compare objects and arrays.
    if (areArrays) {
      // Compare array lengths to determine if a deep comparison is necessary.
      length = a.length;
      if (length !== b.length) return false;
      // Deep compare the contents, ignoring non-numeric properties.
      while (length--) {
        if (!eq(a[length], b[length], aStack, bStack)) return false;
      }
    } else {
      // Deep compare objects.
      var keys = _.keys(a), key;
      length = keys.length;
      // Ensure that both objects contain the same number of properties before comparing deep equality.
      if (_.keys(b).length !== length) return false;
      while (length--) {
        // Deep compare each member
        key = keys[length];
        if (!(has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return true;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
    return _.keys(obj).length === 0;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) === '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError, isMap, isWeakMap, isSet, isWeakSet.
  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error', 'Symbol', 'Map', 'WeakMap', 'Set', 'WeakSet'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) === '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE < 9), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return has(obj, 'callee');
    };
  }

  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
  // IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).
  var nodelist = root.document && root.document.childNodes;
  if (typeof /./ != 'function' && typeof Int8Array != 'object' && typeof nodelist != 'function') {
    _.isFunction = function(obj) {
      return typeof obj == 'function' || false;
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return !_.isSymbol(obj) && isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`?
  _.isNaN = function(obj) {
    return _.isNumber(obj) && isNaN(obj);
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, path) {
    if (!_.isArray(path)) {
      return has(obj, path);
    }
    var length = path.length;
    for (var i = 0; i < length; i++) {
      var key = path[i];
      if (obj == null || !hasOwnProperty.call(obj, key)) {
        return false;
      }
      obj = obj[key];
    }
    return !!length;
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iteratees.
  _.identity = function(value) {
    return value;
  };

  // Predicate-generating functions. Often useful outside of Underscore.
  _.constant = function(value) {
    return function() {
      return value;
    };
  };

  _.noop = function(){};

  // Creates a function that, when passed an object, will traverse that object’s
  // properties down the given `path`, specified as an array of keys or indexes.
  _.property = function(path) {
    if (!_.isArray(path)) {
      return shallowProperty(path);
    }
    return function(obj) {
      return deepGet(obj, path);
    };
  };

  // Generates a function for a given object that returns a given property.
  _.propertyOf = function(obj) {
    if (obj == null) {
      return function(){};
    }
    return function(path) {
      return !_.isArray(path) ? obj[path] : deepGet(obj, path);
    };
  };

  // Returns a predicate for checking whether an object has a given set of
  // `key:value` pairs.
  _.matcher = _.matches = function(attrs) {
    attrs = _.extendOwn({}, attrs);
    return function(obj) {
      return _.isMatch(obj, attrs);
    };
  };

  // Run a function **n** times.
  _.times = function(n, iteratee, context) {
    var accum = Array(Math.max(0, n));
    iteratee = optimizeCb(iteratee, context, 1);
    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function() {
    return new Date().getTime();
  };

  // List of HTML entities for escaping.
  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };
  var unescapeMap = _.invert(escapeMap);

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  var createEscaper = function(map) {
    var escaper = function(match) {
      return map[match];
    };
    // Regexes for identifying a key that needs to be escaped.
    var source = '(?:' + _.keys(map).join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function(string) {
      string = string == null ? '' : '' + string;
      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
  };
  _.escape = createEscaper(escapeMap);
  _.unescape = createEscaper(unescapeMap);

  // Traverses the children of `obj` along `path`. If a child is a function, it
  // is invoked with its parent as context. Returns the value of the final
  // child, or `fallback` if any child is undefined.
  _.result = function(obj, path, fallback) {
    if (!_.isArray(path)) path = [path];
    var length = path.length;
    if (!length) {
      return _.isFunction(fallback) ? fallback.call(obj) : fallback;
    }
    for (var i = 0; i < length; i++) {
      var prop = obj == null ? void 0 : obj[path[i]];
      if (prop === void 0) {
        prop = fallback;
        i = length; // Ensure we don't continue iterating.
      }
      obj = _.isFunction(prop) ? prop.call(obj) : prop;
    }
    return obj;
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate: /<%([\s\S]+?)%>/g,
    interpolate: /<%=([\s\S]+?)%>/g,
    escape: /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'": "'",
    '\\': '\\',
    '\r': 'r',
    '\n': 'n',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escapeRegExp = /\\|'|\r|\n|\u2028|\u2029/g;

  var escapeChar = function(match) {
    return '\\' + escapes[match];
  };

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  // NB: `oldSettings` only exists for backwards compatibility.
  _.template = function(text, settings, oldSettings) {
    if (!settings && oldSettings) settings = oldSettings;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escapeRegExp, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }

      // Adobe VMs need the match returned to produce the correct offset.
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + 'return __p;\n';

    var render;
    try {
      render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled source as a convenience for precompilation.
    var argument = settings.variable || 'obj';
    template.source = 'function(' + argument + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function. Start chaining a wrapped Underscore object.
  _.chain = function(obj) {
    var instance = _(obj);
    instance._chain = true;
    return instance;
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var chainResult = function(instance, obj) {
    return instance._chain ? _(obj).chain() : obj;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    _.each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return chainResult(this, func.apply(_, args));
      };
    });
    return _;
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
      return chainResult(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  _.each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return chainResult(this, method.apply(this._wrapped, arguments));
    };
  });

  // Extracts the result from a wrapped and chained object.
  _.prototype.value = function() {
    return this._wrapped;
  };

  // Provide unwrapping proxy for some methods used in engine operations
  // such as arithmetic and JSON stringification.
  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

  _.prototype.toString = function() {
    return String(this._wrapped);
  };

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (typeof define == 'function' && define.amd) {
    define('underscore', [], function() {
      return _;
    });
  }
}());

},{}],"../node_modules/country-data/data/regions.js":[function(require,module,exports) {
'use strict';

var regions = {};

regions.centralAsia = {
  name: 'Central Asia',
  countries: [
    // source is http://en.wikipedia.org/wiki/Central_Asia
    'KZ', // Kazakhstan
    'KG', // Kyrgyzstan
    'TJ', // Tajikistan
    'TM', // Turkmenistan
    'UZ', // Uzbekistan
  ]
}

regions.southernAsia = {
  name: 'Southern Asia',
  countries: [
    // source is http://en.wikipedia.org/wiki/South_Asia
    'AF', // Afghanistan
    'BD', // Bangladesh
    'BT', // Bhutan
    'IO', // British Indian Ocean Territory
    'IN', // India
    'IR', // Iran
    'MV', // Maldives
    'NP', // Nepal
    'PK', // Pakistan
    'LK', // Sri Lanka
  ]
}

regions.southeastAsia = {
  name: 'Southeast Asia',
  countries: [
    // source is http://en.wikipedia.org/wiki/Southeast_Asia
    'BN', // Brunei
    'KH', // Cambodia
    'CX', // Christmas Island
    'CC', // Cocos (Keeling) Islands
    'TL', // East Timor
    'ID', // Indonesia
    'LA', // Laos
    'MY', // Malaysia
    'MM', // Myanmar (Burma)
    'PH', // Philippines
    'SG', // Singapore
    'TH', // Thailand
    'VN', // Vietnam
  ]
}

regions.eastAsia = {
  name: 'East Asia',
  countries: [
    // source is http://en.wikipedia.org/wiki/East_Asia
    'CN', // China
    'HK', // Hong Kong
    'JP', // Japan
    'KP', // North Korea
    'KR', // South Korea
    'MO', // Macao
    'MN', // Mongolia
    'TW', // Taiwan
  ]
}

regions.westernAsia = {
  name: 'Western Asia',
  countries: [
    // source is http://en.wikipedia.org/wiki/Western_Asia
    'AM', // Armenia
    'AZ', // Azerbaijan
    'BH', // Bahrain
    'IQ', // Iraq
    'IL', // Israel
    'JO', // Jordan
    'KW', // Kuwait
    'LB', // Lebanon
    'OM', // Oman
    'PS', // Palestinian territories
    'QA', // Qatar
    'SA', // Saudi Arabia
    'SY', // Syria
    'TR', // Turkey
    'AE', // United Arab Emirates
    'YE', // Yemen
  ]
}

regions.centralAfrica = {
  name: 'Central Aftrica',
  countries: [
    // source is http://en.wikipedia.org/wiki/Central_Africa
    'AO', // Angola
    'CM', // Cameroon
    'CF', // Central African Republic
    'TD', // Chad
    'CG', // Republic of the Congo
    'CD', // Democratic Republic of the Congo
    'GQ', // Equatorial Guinea
    'GA', // Gabon
    'ST', // São Tomé and Príncipe
  ]
};

regions.northAfrica = {
  name: 'North Africa',
  countries: [
    // source is http://en.wikipedia.org/wiki/North_Africa
    'DZ', // Algeria
    'EG', // Egypt
    'LY', // Libya
    'MA', // Morocco
    'SD', // Sudan
    'TN', // Tunisia
    'EH', // Western Sahara
  ]
};

regions.southernAfrica = {
  name: 'Southern Africa',
  countries: [
    // source is http://en.wikipedia.org/wiki/Southern_Africa
    'BW', // Botswana
    'LS', // Lesotho
    'NA', // Namibia
    'ZA', // South Africa
    'SZ', // Swaziland
  ]
};

regions.eastAfrica = {
  name: 'East Africa',
  countries: [
    // source is http://en.wikipedia.org/wiki/East_Africa
    'BI', // Burundi
    'KM', // Comoros
    'DJ', // Djibouti
    'ER', // Eritrea
    'ET', // Ethiopia
    'KE', // Kenya
    'MG', // Madagascar
    'MW', // Malawi
    'MU', // Mauritius
    'YT', // Mayotte (France)
    'MZ', // Mozambique
    'RE', // Réunion (France)
    'RW', // Rwanda
    'SC', // Seychelles
    'SO', // Somalia
    'SS', // South Sudan
    'TZ', // Tanzania
    'UG', // Uganda
    'ZM', // Zambia
    'ZW', // Zimbabwe
  ]
};

regions.westAfrica = {
  name: 'West Africa',
  countries: [
    // source is http://en.wikipedia.org/wiki/West_Africa
    'BJ', // Benin
    'BF', // Burkina Faso
    'CV', // Cabo Verde
    'CI', // Côte d'Ivoire
    'GM', // Gambia
    'GH', // Ghana
    'GN', // Guinea
    'GW', // Guinea-Bissau
    'LR', // Liberia
    'ML', // Mali
    'MR', // Mauritania
    'NE', // Niger
    'NG', // Nigeria
    'SH', // Saint Helena, Ascension and Tristan da Cunha (United Kingdom)
    'SN', // Senegal
    'SL', // Sierra Leone
    'TG', // Togo
  ]
};

regions.centralAmerica = {
  name: 'Central America',
  countries: [
    // source is http://en.wikipedia.org/wiki/Central_America
    'BZ', // Belize
    'CR', // Costa Rica
    'SV', // El Salvador
    'GT', // Guatemala
    'HN', // Honduras
    'NI', // Nicaragua
    'PA', // Panama
  ]
}

regions.northernAmerica = {
  name: 'Northern America',
  countries: [
    // source is http://en.wikipedia.org/wiki/Northern_America
    'BM', // Bermuda
    'CA', // Canada
    'GL', // Greenland
    'MX', // Mexico
    'PM', // Saint Pierre and Miquelon
    'US', // United States
  ]
}

regions.caribbean = {
  name: 'Caribbean',
  countries: [
    // source is http://en.wikipedia.org/wiki/Caribbean
    'AI', // Anguilla
    'AG', // Antigua and Barbuda
    'AW', // Aruba
    'BS', // Bahamas
    'BB', // Barbados
    'BQ', // Bonaire, Sint Eustatius & Saba
    'VG', // British Virgin Islands
    'KY', // Cayman Islands
    'CU', // Cuba
    'CW', // Curaçao
    'DM', // Dominica
    'DO', // Dominican Republic
    'GD', // Grenada
    'GP', // Guadeloupe
    'HT', // Haiti
    'JM', // Jamaica
    'MQ', // Martinique
    'MS', // Montserrat
    'PR', // Puerto Rico
    'BL', // Saint Barthélemy
    'KN', // St. Kitts & Nevis
    'LC', // Saint Lucia
    'MF', // Saint Martin
    'VC', // Saint Vincent and the Grenadines
    'SX', // Sint Maarten
    'TT', // Trinidad and Tobago
    'TC', // Turks & Caicos
    'VI', // United States Virgin Islands
  ]
}

regions.southAmerica = {
  name: 'South America',
  countries: [
    // source is http://en.wikipedia.org/wiki/South_America
    'AR', // Argentina
    'BO', // Bolivia
    'BR', // Brazil
    'CL', // Chile
    'CO', // Colombia
    'EC', // Ecuador
    'FK', // Falkland Islands
    'GF', // French Guiana
    'GY', // Guyana
    'PY', // Paraguay
    'PE', // Peru
    'SR', // Suriname
    'UY', // Uruguay
    'VE', // Venezuela
  ]
}

regions.antartica = {
  name: 'Antartica',
  countries: [
    // source is http://en.wikipedia.org/wiki/Antarctica
    'AQ', // Antarctica
    'BV', // Bouvet Island
    'TF', // French Southern Territories
    'HM', // Heard Island and McDonald Islands
    'GS', // South Georgia and the South Sandwich Islands
  ]
}

regions.northernEurope = {
  name: 'Northern Europe',
  countries: [
    // source is http://en.wikipedia.org/wiki/Northern_Europe
    'AX', // Åland
    'DK', // Denmark
    'EE', // Estonia
    'FO', // Faroe Islands
    'FI', // Finland
    'GG', // Guernsey
    'IS', // Iceland
    'IE', // Republic of Ireland
    'JE', // Jersey (UK)
    'IM', // Isle of Man
    'LV', // Latvia
    'LT', // Lithuania
    'NO', // Norway
    'SJ', // Svalbard and Jan Mayen
    'SE', // Sweden
    'GB', // United Kingdom
  ]
}

regions.southernEurope = {
  name: 'Southern Europe',
  countries: [
    // source is http://en.wikipedia.org/wiki/Southern_Europe
    'AL', // Albania
    'AD', // Andorra
    'BA', // Bosnia and Herzegovina
    'HR', // Croatia
    'CY', // Cyprus
    'GI', // Gibraltar
    'GR', // Greece
    'IT', // Italy
    'MK', // Republic of Macedonia
    'VA', // Vatican City
    'MT', // Malta
    'ME', // Montenegro
    'PT', // Portugal
    'SM', // San Marino
    'RS', // Serbia
    'SI', // Slovenia
    'ES', // Spain
  ]
}

regions.easternEurope = {
  name: 'Eastern Europe',
  countries: [
    // source is http://en.wikipedia.org/wiki/Eastern_Europe
    'BY', // Belarus
    'BG', // Bulgaria
    'CZ', // Czech Republic
    'GE', // Georgia
    'HU', // Hungary
    'MD', // Moldova
    'PL', // Poland
    'RO', // Romania
    'RU', // Russia
    'SK', // Slovakia
    'UA', // Ukraine
  ]
}

regions.westernEurope = {
  name: 'Western Europe',
  countries: [
    // source is http://en.wikipedia.org/wiki/Western_Europe
    'AT', // Austria
    'BE', // Belgium
    'FR', // France
    'DE', // Germany
    'LI', // Liechtenstein
    'LU', // Luxembourg
    'MC', // Monaco
    'NL', // Netherlands
    'CH', // Switzerland
  ],
};
 
regions.australia = {
  name: 'Australia',
  countries: [
    // source is http://en.wikipedia.org/wiki/Oceania
    'AU', // Australia
    'NF', // Norfolk Island
    'NZ', // New Zealand
  ]
};

regions.melanesia = {
  name: 'Melanesia',
  countries: [
    // source is http://en.wikipedia.org/wiki/Oceania
    'FJ', // Fiji
    'NC', //  New Caledonia
    'PG', // Papua New Guinea
    'SB', // Solomon Islands
    'VU', // Vanuatu
  ]
};    

regions.micronesia = {
  name: 'Micronesia',
  countries: [
    // source is http://en.wikipedia.org/wiki/Oceania
    'GU', // Guam
    'KI', // Kiribati
    'MH', // Marshall Islands
    'FM', // Micronesia, Fed. Sts.
    'NR', // Nauru
    'MP', // Northern Mariana Islands
    'PW', // Palau
    'UM', // United States Minor Outlying Islands
  ]
};    

regions.polynesia = {
  name: 'Polynesia',
  countries: [
    // source is http://en.wikipedia.org/wiki/Oceania
    'AS', // American Samoa
    'CK', // Cook Islands
    'PF', // French Polynesia
    'NU', // Niue
    'PN', // Pitcairn Islands
    'WS', // Samoa
    'TK', // Tokelau
    'TO', // Tonga
    'TV', // Tuvalu
    'WF', // Wallis and Futuna
  ]
};

module.exports = regions;

},{}],"../node_modules/country-data/data/continents.js":[function(require,module,exports) {
'use strict';

var _ = require('underscore');
var regions = require('./regions.js');
var continents = {};

continents.asia = {
  name: 'Asia',
  regions: ['centralAsia', 'southernAsia', 'southeastAsia', 'eastAsia', 'westernAsia'],
  countries: _.flatten([
    regions.centralAsia.countries,
    regions.southernAsia.countries,
    regions.southeastAsia.countries,
    regions.eastAsia.countries,
    regions.westernAsia.countries
  ])
  .sort()
};

continents.africa = {
  name: 'Africa',
  regions: ['centralAfrica', 'northAfrica', 'southernAfrica', 'eastAfrica', 'westAfrica'],
  countries: _.flatten([
      regions.centralAfrica.countries,
      regions.northAfrica.countries,
      regions.southernAfrica.countries,
      regions.eastAfrica.countries,
      regions.westAfrica.countries
  ])
  .sort()
};

continents.northAmerica = {
  name: 'North America',
  regions: ['centralAmerica', 'northernAmerica', 'caribbean'],
  countries: _.flatten([
    regions.centralAmerica.countries,
    regions.northernAmerica.countries,
    regions.caribbean.countries
  ])
  .sort()
};

continents.southAmerica = {
  name: 'South America',
  regions: ['southAmerica'],
  countries: _.flatten([
    regions.southAmerica.countries
  ])
  .sort()
}

continents.antartica = {
  name: 'Antartica',
  regions: ['antartica'],
  countries: _.flatten([
    regions.antartica.countries
  ])
  .sort()
}

continents.europe = {
  name: 'Europe',
  regions: ['northernEurope', 'southernEurope', 'easternEurope', 'westernEurope'],
  countries: _.flatten([
    regions.northernEurope.countries,
    regions.southernEurope.countries,
    regions.easternEurope.countries,
    regions.westernEurope.countries
  ])
  .sort()
}

continents.oceania = {
  name: 'Oceania',
  regions: ['australia', 'melanesia', 'micronesia', 'polynesia'],
  countries: _.flatten([
    regions.australia.countries,
    regions.melanesia.countries,
    regions.micronesia.countries,
    regions.polynesia.countries
  ])
  .sort()
};

module.exports = continents;

},{"underscore":"../node_modules/underscore/underscore.js","./regions.js":"../node_modules/country-data/data/regions.js"}],"../node_modules/country-data/data/countries.json":[function(require,module,exports) {
module.exports = [
  {
    "alpha2": "AC",
    "alpha3": "",
    "countryCallingCodes": [
      "+247"
    ],
    "currencies": [
      "USD"
    ],
    "emoji": "",
    "ioc": "SHP",
    "languages": [
      "eng"
    ],
    "name": "Ascension Island",
    "status": "reserved"
  },
  {
    "alpha2": "AD",
    "alpha3": "AND",
    "countryCallingCodes": [
      "+376"
    ],
    "currencies": [
      "EUR"
    ],
    "emoji": "🇦🇩",
    "ioc": "AND",
    "languages": [
      "cat"
    ],
    "name": "Andorra",
    "status": "assigned"
  },
  {
    "alpha2": "AE",
    "alpha3": "ARE",
    "countryCallingCodes": [
      "+971"
    ],
    "currencies": [
      "AED"
    ],
    "emoji": "🇦🇪",
    "ioc": "UAE",
    "languages": [
      "ara"
    ],
    "name": "United Arab Emirates",
    "status": "assigned"
  },
  {
    "alpha2": "AF",
    "alpha3": "AFG",
    "countryCallingCodes": [
      "+93"
    ],
    "currencies": [
      "AFN"
    ],
    "emoji": "🇦🇫",
    "ioc": "AFG",
    "languages": [
      "pus"
    ],
    "name": "Afghanistan",
    "status": "assigned"
  },
  {
    "alpha2": "AG",
    "alpha3": "ATG",
    "countryCallingCodes": [
      "+1 268"
    ],
    "currencies": [
      "XCD"
    ],
    "emoji": "🇦🇬",
    "ioc": "ANT",
    "languages": [
      "eng"
    ],
    "name": "Antigua And Barbuda",
    "status": "assigned"
  },
  {
    "alpha2": "AI",
    "alpha3": "AIA",
    "countryCallingCodes": [
      "+1 264"
    ],
    "currencies": [
      "XCD"
    ],
    "emoji": "🇦🇮",
    "ioc": "",
    "languages": [
      "eng"
    ],
    "name": "Anguilla",
    "status": "assigned"
  },
  {
    "alpha2": "AI",
    "alpha3": "AFI",
    "countryCallingCodes": [],
    "currencies": [],
    "ioc": "",
    "languages": [],
    "name": "French Afar and Issas",
    "status": "deleted"
  },
  {
    "alpha2": "AL",
    "alpha3": "ALB",
    "countryCallingCodes": [
      "+355"
    ],
    "currencies": [
      "ALL"
    ],
    "emoji": "🇦🇱",
    "ioc": "ALB",
    "languages": [
      "sqi"
    ],
    "name": "Albania",
    "status": "assigned"
  },
  {
    "alpha2": "AM",
    "alpha3": "ARM",
    "countryCallingCodes": [
      "+374"
    ],
    "currencies": [
      "AMD"
    ],
    "emoji": "🇦🇲",
    "ioc": "ARM",
    "languages": [
      "hye",
      "rus"
    ],
    "name": "Armenia",
    "status": "assigned"
  },
  {
    "alpha2": "AN",
    "alpha3": "ANT",
    "countryCallingCodes": [],
    "currencies": [],
    "ioc": "",
    "languages": [],
    "name": "Netherlands Antilles",
    "status": "deleted"
  },
  {
    "alpha2": "AO",
    "alpha3": "AGO",
    "countryCallingCodes": [
      "+244"
    ],
    "currencies": [
      "AOA"
    ],
    "emoji": "🇦🇴",
    "ioc": "ANG",
    "languages": [
      "por"
    ],
    "name": "Angola",
    "status": "assigned"
  },
  {
    "alpha2": "AQ",
    "alpha3": "ATA",
    "countryCallingCodes": [
      "+672"
    ],
    "currencies": [],
    "emoji": "🇦🇶",
    "ioc": "",
    "languages": [],
    "name": "Antarctica",
    "status": "assigned"
  },
  {
    "alpha2": "AR",
    "alpha3": "ARG",
    "countryCallingCodes": [
      "+54"
    ],
    "currencies": [
      "ARS"
    ],
    "emoji": "🇦🇷",
    "ioc": "ARG",
    "languages": [
      "spa"
    ],
    "name": "Argentina",
    "status": "assigned"
  },
  {
    "alpha2": "AS",
    "alpha3": "ASM",
    "countryCallingCodes": [
      "+1 684"
    ],
    "currencies": [
      "USD"
    ],
    "emoji": "🇦🇸",
    "ioc": "ASA",
    "languages": [
      "eng",
      "smo"
    ],
    "name": "American Samoa",
    "status": "assigned"
  },
  {
    "alpha2": "AT",
    "alpha3": "AUT",
    "countryCallingCodes": [
      "+43"
    ],
    "currencies": [
      "EUR"
    ],
    "emoji": "🇦🇹",
    "ioc": "AUT",
    "languages": [
      "deu"
    ],
    "name": "Austria",
    "status": "assigned"
  },
  {
    "alpha2": "AU",
    "alpha3": "AUS",
    "countryCallingCodes": [
      "+61"
    ],
    "currencies": [
      "AUD"
    ],
    "emoji": "🇦🇺",
    "ioc": "AUS",
    "languages": [
      "eng"
    ],
    "name": "Australia",
    "status": "assigned"
  },
  {
    "alpha2": "AW",
    "alpha3": "ABW",
    "countryCallingCodes": [
      "+297"
    ],
    "currencies": [
      "AWG"
    ],
    "emoji": "🇦🇼",
    "ioc": "ARU",
    "languages": [
      "nld"
    ],
    "name": "Aruba",
    "status": "assigned"
  },
  {
    "alpha2": "AX",
    "alpha3": "ALA",
    "countryCallingCodes": [
      "+358"
    ],
    "currencies": [
      "EUR"
    ],
    "emoji": "🇦🇽",
    "ioc": "",
    "languages": [
      "swe"
    ],
    "name": "Åland Islands",
    "status": "assigned"
  },
  {
    "alpha2": "AZ",
    "alpha3": "AZE",
    "countryCallingCodes": [
      "+994"
    ],
    "currencies": [
      "AZN"
    ],
    "emoji": "🇦🇿",
    "ioc": "AZE",
    "languages": [
      "aze"
    ],
    "name": "Azerbaijan",
    "status": "assigned"
  },
  {
    "alpha2": "BA",
    "alpha3": "BIH",
    "countryCallingCodes": [
      "+387"
    ],
    "currencies": [
      "BAM"
    ],
    "emoji": "🇧🇦",
    "ioc": "BIH",
    "languages": [
      "bos",
      "cre",
      "srp"
    ],
    "name": "Bosnia & Herzegovina",
    "status": "assigned"
  },
  {
    "alpha2": "BB",
    "alpha3": "BRB",
    "countryCallingCodes": [
      "+1 246"
    ],
    "currencies": [
      "BBD"
    ],
    "emoji": "🇧🇧",
    "ioc": "BAR",
    "languages": [
      "eng"
    ],
    "name": "Barbados",
    "status": "assigned"
  },
  {
    "alpha2": "BD",
    "alpha3": "BGD",
    "countryCallingCodes": [
      "+880"
    ],
    "currencies": [
      "BDT"
    ],
    "emoji": "🇧🇩",
    "ioc": "BAN",
    "languages": [
      "ben"
    ],
    "name": "Bangladesh",
    "status": "assigned"
  },
  {
    "alpha2": "BE",
    "alpha3": "BEL",
    "countryCallingCodes": [
      "+32"
    ],
    "currencies": [
      "EUR"
    ],
    "emoji": "🇧🇪",
    "ioc": "BEL",
    "languages": [
      "nld",
      "fra",
      "deu"
    ],
    "name": "Belgium",
    "status": "assigned"
  },
  {
    "alpha2": "BF",
    "alpha3": "BFA",
    "countryCallingCodes": [
      "+226"
    ],
    "currencies": [
      "XOF"
    ],
    "emoji": "🇧🇫",
    "ioc": "BUR",
    "languages": [
      "fra"
    ],
    "name": "Burkina Faso",
    "status": "assigned"
  },
  {
    "alpha2": "BG",
    "alpha3": "BGR",
    "countryCallingCodes": [
      "+359"
    ],
    "currencies": [
      "BGN"
    ],
    "emoji": "🇧🇬",
    "ioc": "BUL",
    "languages": [
      "bul"
    ],
    "name": "Bulgaria",
    "status": "assigned"
  },
  {
    "alpha2": "BH",
    "alpha3": "BHR",
    "countryCallingCodes": [
      "+973"
    ],
    "currencies": [
      "BHD"
    ],
    "emoji": "🇧🇭",
    "ioc": "BRN",
    "languages": [
      "ara"
    ],
    "name": "Bahrain",
    "status": "assigned"
  },
  {
    "alpha2": "BI",
    "alpha3": "BDI",
    "countryCallingCodes": [
      "+257"
    ],
    "currencies": [
      "BIF"
    ],
    "emoji": "🇧🇮",
    "ioc": "BDI",
    "languages": [
      "fra"
    ],
    "name": "Burundi",
    "status": "assigned"
  },
  {
    "alpha2": "BJ",
    "alpha3": "BEN",
    "countryCallingCodes": [
      "+229"
    ],
    "currencies": [
      "XOF"
    ],
    "emoji": "🇧🇯",
    "ioc": "BEN",
    "languages": [
      "fra"
    ],
    "name": "Benin",
    "status": "assigned"
  },
  {
    "alpha2": "BL",
    "alpha3": "BLM",
    "countryCallingCodes": [
      "+590"
    ],
    "currencies": [
      "EUR"
    ],
    "emoji": "🇧🇱",
    "ioc": "",
    "languages": [
      "fra"
    ],
    "name": "Saint Barthélemy",
    "status": "assigned"
  },
  {
    "alpha2": "BM",
    "alpha3": "BMU",
    "countryCallingCodes": [
      "+1 441"
    ],
    "currencies": [
      "BMD"
    ],
    "emoji": "🇧🇲",
    "ioc": "BER",
    "languages": [
      "eng"
    ],
    "name": "Bermuda",
    "status": "assigned"
  },
  {
    "alpha2": "BN",
    "alpha3": "BRN",
    "countryCallingCodes": [
      "+673"
    ],
    "currencies": [
      "BND"
    ],
    "emoji": "🇧🇳",
    "ioc": "BRU",
    "languages": [
      "msa",
      "eng"
    ],
    "name": "Brunei Darussalam",
    "status": "assigned"
  },
  {
    "alpha2": "BO",
    "alpha3": "BOL",
    "countryCallingCodes": [
      "+591"
    ],
    "currencies": [
      "BOB",
      "BOV"
    ],
    "emoji": "🇧🇴",
    "ioc": "BOL",
    "languages": [
      "spa",
      "aym",
      "que"
    ],
    "name": "Bolivia, Plurinational State Of",
    "status": "assigned"
  },
  {
    "alpha2": "BQ",
    "alpha3": "BES",
    "countryCallingCodes": [
      "+599"
    ],
    "currencies": [
      "USD"
    ],
    "emoji": "🇧🇶",
    "ioc": "",
    "languages": [
      "nld"
    ],
    "name": "Bonaire, Saint Eustatius And Saba",
    "status": "assigned"
  },
  {
    "alpha2": "BQ",
    "alpha3": "ATB",
    "countryCallingCodes": [],
    "currencies": [],
    "ioc": "",
    "languages": [],
    "name": "British Antarctic Territory",
    "status": "deleted"
  },
  {
    "alpha2": "BR",
    "alpha3": "BRA",
    "countryCallingCodes": [
      "+55"
    ],
    "currencies": [
      "BRL"
    ],
    "emoji": "🇧🇷",
    "ioc": "BRA",
    "languages": [
      "por"
    ],
    "name": "Brazil",
    "status": "assigned"
  },
  {
    "alpha2": "BS",
    "alpha3": "BHS",
    "countryCallingCodes": [
      "+1 242"
    ],
    "currencies": [
      "BSD"
    ],
    "emoji": "🇧🇸",
    "ioc": "BAH",
    "languages": [
      "eng"
    ],
    "name": "Bahamas",
    "status": "assigned"
  },
  {
    "alpha2": "BT",
    "alpha3": "BTN",
    "countryCallingCodes": [
      "+975"
    ],
    "currencies": [
      "INR",
      "BTN"
    ],
    "emoji": "🇧🇹",
    "ioc": "BHU",
    "languages": [
      "dzo"
    ],
    "name": "Bhutan",
    "status": "assigned"
  },
  {
    "alpha2": "BU",
    "alpha3": "BUR",
    "countryCallingCodes": [],
    "currencies": [],
    "ioc": "",
    "languages": [],
    "name": "Burma",
    "status": "deleted"
  },
  {
    "alpha2": "BV",
    "alpha3": "BVT",
    "countryCallingCodes": [],
    "currencies": [
      "NOK"
    ],
    "emoji": "🇧🇻",
    "ioc": "",
    "languages": [],
    "name": "Bouvet Island",
    "status": "assigned"
  },
  {
    "alpha2": "BW",
    "alpha3": "BWA",
    "countryCallingCodes": [
      "+267"
    ],
    "currencies": [
      "BWP"
    ],
    "emoji": "🇧🇼",
    "ioc": "BOT",
    "languages": [
      "eng",
      "tsn"
    ],
    "name": "Botswana",
    "status": "assigned"
  },
  {
    "alpha2": "BY",
    "alpha3": "BLR",
    "countryCallingCodes": [
      "+375"
    ],
    "currencies": [
      "BYR"
    ],
    "emoji": "🇧🇾",
    "ioc": "BLR",
    "languages": [
      "bel",
      "rus"
    ],
    "name": "Belarus",
    "status": "assigned"
  },
  {
    "alpha2": "BY",
    "alpha3": "BYS",
    "countryCallingCodes": [],
    "currencies": [],
    "ioc": "",
    "languages": [],
    "name": "Byelorussian SSR",
    "status": "deleted"
  },
  {
    "alpha2": "BZ",
    "alpha3": "BLZ",
    "countryCallingCodes": [
      "+501"
    ],
    "currencies": [
      "BZD"
    ],
    "emoji": "🇧🇿",
    "ioc": "BIZ",
    "languages": [
      "eng"
    ],
    "name": "Belize",
    "status": "assigned"
  },
  {
    "alpha2": "CA",
    "alpha3": "CAN",
    "countryCallingCodes": [
      "+1"
    ],
    "currencies": [
      "CAD"
    ],
    "emoji": "🇨🇦",
    "ioc": "CAN",
    "languages": [
      "eng",
      "fra"
    ],
    "name": "Canada",
    "status": "assigned"
  },
  {
    "alpha2": "CC",
    "alpha3": "CCK",
    "countryCallingCodes": [
      "+61"
    ],
    "currencies": [
      "AUD"
    ],
    "emoji": "🇨🇨",
    "ioc": "",
    "languages": [
      "eng"
    ],
    "name": "Cocos (Keeling) Islands",
    "status": "assigned"
  },
  {
    "alpha2": "CD",
    "alpha3": "COD",
    "countryCallingCodes": [
      "+243"
    ],
    "currencies": [
      "CDF"
    ],
    "emoji": "🇨🇩",
    "ioc": "COD",
    "languages": [
      "fra",
      "lin",
      "kon",
      "swa"
    ],
    "name": "Democratic Republic Of Congo",
    "status": "assigned"
  },
  {
    "alpha2": "CF",
    "alpha3": "CAF",
    "countryCallingCodes": [
      "+236"
    ],
    "currencies": [
      "XAF"
    ],
    "emoji": "🇨🇫",
    "ioc": "CAF",
    "languages": [
      "fra",
      "sag"
    ],
    "name": "Central African Republic",
    "status": "assigned"
  },
  {
    "alpha2": "CG",
    "alpha3": "COG",
    "countryCallingCodes": [
      "+242"
    ],
    "currencies": [
      "XAF"
    ],
    "emoji": "🇨🇬",
    "ioc": "CGO",
    "languages": [
      "fra",
      "lin"
    ],
    "name": "Republic Of Congo",
    "status": "assigned"
  },
  {
    "alpha2": "CH",
    "alpha3": "CHE",
    "countryCallingCodes": [
      "+41"
    ],
    "currencies": [
      "CHF",
      "CHE",
      "CHW"
    ],
    "emoji": "🇨🇭",
    "ioc": "SUI",
    "languages": [
      "deu",
      "fra",
      "ita",
      "roh"
    ],
    "name": "Switzerland",
    "status": "assigned"
  },
  {
    "alpha2": "CI",
    "alpha3": "CIV",
    "countryCallingCodes": [
      "+225"
    ],
    "currencies": [
      "XOF"
    ],
    "emoji": "🇨🇮",
    "ioc": "CIV",
    "languages": [
      "fra"
    ],
    "name": "Côte d'Ivoire",
    "status": "assigned"
  },
  {
    "alpha2": "CK",
    "alpha3": "COK",
    "countryCallingCodes": [
      "+682"
    ],
    "currencies": [
      "NZD"
    ],
    "emoji": "🇨🇰",
    "ioc": "COK",
    "languages": [
      "eng",
      "mri"
    ],
    "name": "Cook Islands",
    "status": "assigned"
  },
  {
    "alpha2": "CL",
    "alpha3": "CHL",
    "countryCallingCodes": [
      "+56"
    ],
    "currencies": [
      "CLP",
      "CLF"
    ],
    "emoji": "🇨🇱",
    "ioc": "CHI",
    "languages": [
      "spa"
    ],
    "name": "Chile",
    "status": "assigned"
  },
  {
    "alpha2": "CM",
    "alpha3": "CMR",
    "countryCallingCodes": [
      "+237"
    ],
    "currencies": [
      "XAF"
    ],
    "emoji": "🇨🇲",
    "ioc": "CMR",
    "languages": [
      "eng",
      "fra"
    ],
    "name": "Cameroon",
    "status": "assigned"
  },
  {
    "alpha2": "CN",
    "alpha3": "CHN",
    "countryCallingCodes": [
      "+86"
    ],
    "currencies": [
      "CNY"
    ],
    "emoji": "🇨🇳",
    "ioc": "CHN",
    "languages": [
      "zho"
    ],
    "name": "China",
    "status": "assigned"
  },
  {
    "alpha2": "CO",
    "alpha3": "COL",
    "countryCallingCodes": [
      "+57"
    ],
    "currencies": [
      "COP",
      "COU"
    ],
    "emoji": "🇨🇴",
    "ioc": "COL",
    "languages": [
      "spa"
    ],
    "name": "Colombia",
    "status": "assigned"
  },
  {
    "alpha2": "CP",
    "alpha3": "",
    "countryCallingCodes": [],
    "currencies": [
      "EUR"
    ],
    "emoji": "",
    "ioc": "",
    "languages": [],
    "name": "Clipperton Island",
    "status": "reserved"
  },
  {
    "alpha2": "CR",
    "alpha3": "CRI",
    "countryCallingCodes": [
      "+506"
    ],
    "currencies": [
      "CRC"
    ],
    "emoji": "🇨🇷",
    "ioc": "CRC",
    "languages": [
      "spa"
    ],
    "name": "Costa Rica",
    "status": "assigned"
  },
  {
    "alpha2": "CS",
    "alpha3": "CSK",
    "countryCallingCodes": [],
    "currencies": [],
    "ioc": "",
    "languages": [],
    "name": "Czechoslovakia",
    "status": "deleted"
  },
  {
    "alpha2": "CS",
    "alpha3": "SCG",
    "countryCallingCodes": [],
    "currencies": [],
    "ioc": "",
    "languages": [],
    "name": "Serbia and Montenegro",
    "status": "deleted"
  },
  {
    "alpha2": "CT",
    "alpha3": "CTE",
    "countryCallingCodes": [],
    "currencies": [],
    "ioc": "",
    "languages": [],
    "name": "Canton and Enderbury Islands",
    "status": "deleted"
  },
  {
    "alpha2": "CU",
    "alpha3": "CUB",
    "countryCallingCodes": [
      "+53"
    ],
    "currencies": [
      "CUP",
      "CUC"
    ],
    "emoji": "🇨🇺",
    "ioc": "CUB",
    "languages": [
      "spa"
    ],
    "name": "Cuba",
    "status": "assigned"
  },
  {
    "alpha2": "CV",
    "alpha3": "CPV",
    "countryCallingCodes": [
      "+238"
    ],
    "currencies": [
      "CVE"
    ],
    "emoji": "🇨🇻",
    "ioc": "CPV",
    "languages": [
      "por"
    ],
    "name": "Cabo Verde",
    "status": "assigned"
  },
  {
    "alpha2": "CW",
    "alpha3": "CUW",
    "countryCallingCodes": [
      "+599"
    ],
    "currencies": [
      "ANG"
    ],
    "emoji": "🇨🇼",
    "ioc": "",
    "languages": [
      "nld"
    ],
    "name": "Curacao",
    "status": "assigned"
  },
  {
    "alpha2": "CX",
    "alpha3": "CXR",
    "countryCallingCodes": [
      "+61"
    ],
    "currencies": [
      "AUD"
    ],
    "emoji": "🇨🇽",
    "ioc": "",
    "languages": [
      "eng"
    ],
    "name": "Christmas Island",
    "status": "assigned"
  },
  {
    "alpha2": "CY",
    "alpha3": "CYP",
    "countryCallingCodes": [
      "+357"
    ],
    "currencies": [
      "EUR"
    ],
    "emoji": "🇨🇾",
    "ioc": "CYP",
    "languages": [
      "ell",
      "tur"
    ],
    "name": "Cyprus",
    "status": "assigned"
  },
  {
    "alpha2": "CZ",
    "alpha3": "CZE",
    "countryCallingCodes": [
      "+420"
    ],
    "currencies": [
      "CZK"
    ],
    "emoji": "🇨🇿",
    "ioc": "CZE",
    "languages": [
      "ces"
    ],
    "name": "Czech Republic",
    "status": "assigned"
  },
  {
    "alpha2": "DD",
    "alpha3": "DDR",
    "countryCallingCodes": [],
    "currencies": [],
    "ioc": "",
    "languages": [],
    "name": "German Democratic Republic",
    "status": "deleted"
  },
  {
    "alpha2": "DE",
    "alpha3": "DEU",
    "countryCallingCodes": [
      "+49"
    ],
    "currencies": [
      "EUR"
    ],
    "emoji": "🇩🇪",
    "ioc": "GER",
    "languages": [
      "deu"
    ],
    "name": "Germany",
    "status": "assigned"
  },
  {
    "alpha2": "DG",
    "alpha3": "",
    "countryCallingCodes": [],
    "currencies": [
      "USD"
    ],
    "emoji": "",
    "ioc": "",
    "languages": [],
    "name": "Diego Garcia",
    "status": "reserved"
  },
  {
    "alpha2": "DJ",
    "alpha3": "DJI",
    "countryCallingCodes": [
      "+253"
    ],
    "currencies": [
      "DJF"
    ],
    "emoji": "🇩🇯",
    "ioc": "DJI",
    "languages": [
      "ara",
      "fra"
    ],
    "name": "Djibouti",
    "status": "assigned"
  },
  {
    "alpha2": "DK",
    "alpha3": "DNK",
    "countryCallingCodes": [
      "+45"
    ],
    "currencies": [
      "DKK"
    ],
    "emoji": "🇩🇰",
    "ioc": "DEN",
    "languages": [
      "dan"
    ],
    "name": "Denmark",
    "status": "assigned"
  },
  {
    "alpha2": "DM",
    "alpha3": "DMA",
    "countryCallingCodes": [
      "+1 767"
    ],
    "currencies": [
      "XCD"
    ],
    "emoji": "🇩🇲",
    "ioc": "DMA",
    "languages": [
      "eng"
    ],
    "name": "Dominica",
    "status": "assigned"
  },
  {
    "alpha2": "DO",
    "alpha3": "DOM",
    "countryCallingCodes": [
      "+1 809",
      "+1 829",
      "+1 849"
    ],
    "currencies": [
      "DOP"
    ],
    "emoji": "🇩🇴",
    "ioc": "DOM",
    "languages": [
      "spa"
    ],
    "name": "Dominican Republic",
    "status": "assigned"
  },
  {
    "alpha2": "DY",
    "alpha3": "DHY",
    "countryCallingCodes": [],
    "currencies": [],
    "ioc": "",
    "languages": [],
    "name": "Dahomey",
    "status": "deleted"
  },
  {
    "alpha2": "DZ",
    "alpha3": "DZA",
    "countryCallingCodes": [
      "+213"
    ],
    "currencies": [
      "DZD"
    ],
    "emoji": "🇩🇿",
    "ioc": "ALG",
    "languages": [
      "ara"
    ],
    "name": "Algeria",
    "status": "assigned"
  },
  {
    "alpha2": "EA",
    "alpha3": "",
    "countryCallingCodes": [],
    "currencies": [
      "EUR"
    ],
    "emoji": "",
    "ioc": "",
    "languages": [],
    "name": "Ceuta, Mulilla",
    "status": "reserved"
  },
  {
    "alpha2": "EC",
    "alpha3": "ECU",
    "countryCallingCodes": [
      "+593"
    ],
    "currencies": [
      "USD"
    ],
    "emoji": "🇪🇨",
    "ioc": "ECU",
    "languages": [
      "spa",
      "que"
    ],
    "name": "Ecuador",
    "status": "assigned"
  },
  {
    "alpha2": "EE",
    "alpha3": "EST",
    "countryCallingCodes": [
      "+372"
    ],
    "currencies": [
      "EUR"
    ],
    "emoji": "🇪🇪",
    "ioc": "EST",
    "languages": [
      "est"
    ],
    "name": "Estonia",
    "status": "assigned"
  },
  {
    "alpha2": "EG",
    "alpha3": "EGY",
    "countryCallingCodes": [
      "+20"
    ],
    "currencies": [
      "EGP"
    ],
    "emoji": "🇪🇬",
    "ioc": "EGY",
    "languages": [
      "ara"
    ],
    "name": "Egypt",
    "status": "assigned"
  },
  {
    "alpha2": "EH",
    "alpha3": "ESH",
    "countryCallingCodes": [
      "+212"
    ],
    "currencies": [
      "MAD"
    ],
    "emoji": "🇪🇭",
    "ioc": "",
    "languages": [],
    "name": "Western Sahara",
    "status": "assigned"
  },
  {
    "alpha2": "ER",
    "alpha3": "ERI",
    "countryCallingCodes": [
      "+291"
    ],
    "currencies": [
      "ERN"
    ],
    "emoji": "🇪🇷",
    "ioc": "ERI",
    "languages": [
      "eng",
      "ara",
      "tir"
    ],
    "name": "Eritrea",
    "status": "assigned"
  },
  {
    "alpha2": "ES",
    "alpha3": "ESP",
    "countryCallingCodes": [
      "+34"
    ],
    "currencies": [
      "EUR"
    ],
    "emoji": "🇪🇸",
    "ioc": "ESP",
    "languages": [
      "spa"
    ],
    "name": "Spain",
    "status": "assigned"
  },
  {
    "alpha2": "ET",
    "alpha3": "ETH",
    "countryCallingCodes": [
      "+251"
    ],
    "currencies": [
      "ETB"
    ],
    "emoji": "🇪🇹",
    "ioc": "ETH",
    "languages": [
      "amh"
    ],
    "name": "Ethiopia",
    "status": "assigned"
  },
  {
    "alpha2": "EU",
    "alpha3": "",
    "countryCallingCodes": [
      "+388"
    ],
    "currencies": [
      "EUR"
    ],
    "emoji": "🇪🇺",
    "ioc": "",
    "languages": [],
    "name": "European Union",
    "status": "reserved"
  },
  {
    "alpha2": "FI",
    "alpha3": "FIN",
    "countryCallingCodes": [
      "+358"
    ],
    "currencies": [
      "EUR"
    ],
    "emoji": "🇫🇮",
    "ioc": "FIN",
    "languages": [
      "fin",
      "swe"
    ],
    "name": "Finland",
    "status": "assigned"
  },
  {
    "alpha2": "FJ",
    "alpha3": "FJI",
    "countryCallingCodes": [
      "+679"
    ],
    "currencies": [
      "FJD"
    ],
    "emoji": "🇫🇯",
    "ioc": "FIJ",
    "languages": [
      "eng",
      "fij"
    ],
    "name": "Fiji",
    "status": "assigned"
  },
  {
    "alpha2": "FK",
    "alpha3": "FLK",
    "countryCallingCodes": [
      "+500"
    ],
    "currencies": [
      "FKP"
    ],
    "emoji": "🇫🇰",
    "ioc": "",
    "languages": [
      "eng"
    ],
    "name": "Falkland Islands",
    "status": "assigned"
  },
  {
    "alpha2": "FM",
    "alpha3": "FSM",
    "countryCallingCodes": [
      "+691"
    ],
    "currencies": [
      "USD"
    ],
    "emoji": "🇫🇲",
    "ioc": "FSM",
    "languages": [
      "eng"
    ],
    "name": "Micronesia, Federated States Of",
    "status": "assigned"
  },
  {
    "alpha2": "FO",
    "alpha3": "FRO",
    "countryCallingCodes": [
      "+298"
    ],
    "currencies": [
      "DKK"
    ],
    "emoji": "🇫🇴",
    "ioc": "FAI",
    "languages": [
      "fao",
      "dan"
    ],
    "name": "Faroe Islands",
    "status": "assigned"
  },
  {
    "alpha2": "FQ",
    "alpha3": "ATF",
    "countryCallingCodes": [],
    "currencies": [],
    "ioc": "",
    "languages": [],
    "name": "French Southern and Antarctic Territories",
    "status": "deleted"
  },
  {
    "alpha2": "FR",
    "alpha3": "FRA",
    "countryCallingCodes": [
      "+33"
    ],
    "currencies": [
      "EUR"
    ],
    "emoji": "🇫🇷",
    "ioc": "FRA",
    "languages": [
      "fra"
    ],
    "name": "France",
    "status": "assigned"
  },
  {
    "alpha2": "FX",
    "alpha3": "",
    "countryCallingCodes": [
      "+241"
    ],
    "currencies": [
      "EUR"
    ],
    "emoji": "",
    "ioc": "",
    "languages": [
      "fra"
    ],
    "name": "France, Metropolitan",
    "status": "reserved"
  },
  {
    "alpha2": "GA",
    "alpha3": "GAB",
    "countryCallingCodes": [
      "+241"
    ],
    "currencies": [
      "XAF"
    ],
    "emoji": "🇬🇦",
    "ioc": "GAB",
    "languages": [
      "fra"
    ],
    "name": "Gabon",
    "status": "assigned"
  },
  {
    "alpha2": "GB",
    "alpha3": "GBR",
    "countryCallingCodes": [
      "+44"
    ],
    "currencies": [
      "GBP"
    ],
    "emoji": "🇬🇧",
    "ioc": "GBR",
    "languages": [
      "eng",
      "cor",
      "gle",
      "gla",
      "cym"
    ],
    "name": "United Kingdom",
    "status": "assigned"
  },
  {
    "alpha2": "GD",
    "alpha3": "GRD",
    "countryCallingCodes": [
      "+473"
    ],
    "currencies": [
      "XCD"
    ],
    "emoji": "🇬🇩",
    "ioc": "GRN",
    "languages": [
      "eng"
    ],
    "name": "Grenada",
    "status": "assigned"
  },
  {
    "alpha2": "GE",
    "alpha3": "GEO",
    "countryCallingCodes": [
      "+995"
    ],
    "currencies": [
      "GEL"
    ],
    "emoji": "🇬🇪",
    "ioc": "GEO",
    "languages": [
      "kat"
    ],
    "name": "Georgia",
    "status": "assigned"
  },
  {
    "alpha2": "GE",
    "alpha3": "GEL",
    "countryCallingCodes": [],
    "currencies": [],
    "ioc": "",
    "languages": [],
    "name": "Gilbert and Ellice Islands",
    "status": "deleted"
  },
  {
    "alpha2": "GF",
    "alpha3": "GUF",
    "countryCallingCodes": [
      "+594"
    ],
    "currencies": [
      "EUR"
    ],
    "emoji": "🇬🇫",
    "ioc": "",
    "languages": [
      "fra"
    ],
    "name": "French Guiana",
    "status": "assigned"
  },
  {
    "alpha2": "GG",
    "alpha3": "GGY",
    "countryCallingCodes": [
      "+44"
    ],
    "currencies": [
      "GBP"
    ],
    "emoji": "🇬🇬",
    "ioc": "GCI",
    "languages": [
      "fra"
    ],
    "name": "Guernsey",
    "status": "assigned"
  },
  {
    "alpha2": "GH",
    "alpha3": "GHA",
    "countryCallingCodes": [
      "+233"
    ],
    "currencies": [
      "GHS"
    ],
    "emoji": "🇬🇭",
    "ioc": "GHA",
    "languages": [
      "eng"
    ],
    "name": "Ghana",
    "status": "assigned"
  },
  {
    "alpha2": "GI",
    "alpha3": "GIB",
    "countryCallingCodes": [
      "+350"
    ],
    "currencies": [
      "GIP"
    ],
    "emoji": "🇬🇮",
    "ioc": "",
    "languages": [
      "eng"
    ],
    "name": "Gibraltar",
    "status": "assigned"
  },
  {
    "alpha2": "GL",
    "alpha3": "GRL",
    "countryCallingCodes": [
      "+299"
    ],
    "currencies": [
      "DKK"
    ],
    "emoji": "🇬🇱",
    "ioc": "",
    "languages": [
      "kal"
    ],
    "name": "Greenland",
    "status": "assigned"
  },
  {
    "alpha2": "GM",
    "alpha3": "GMB",
    "countryCallingCodes": [
      "+220"
    ],
    "currencies": [
      "GMD"
    ],
    "emoji": "🇬🇲",
    "ioc": "GAM",
    "languages": [
      "eng"
    ],
    "name": "Gambia",
    "status": "assigned"
  },
  {
    "alpha2": "GN",
    "alpha3": "GIN",
    "countryCallingCodes": [
      "+224"
    ],
    "currencies": [
      "GNF"
    ],
    "emoji": "🇬🇳",
    "ioc": "GUI",
    "languages": [
      "fra"
    ],
    "name": "Guinea",
    "status": "assigned"
  },
  {
    "alpha2": "GP",
    "alpha3": "GLP",
    "countryCallingCodes": [
      "+590"
    ],
    "currencies": [
      "EUR"
    ],
    "emoji": "🇬🇵",
    "ioc": "",
    "languages": [
      "fra"
    ],
    "name": "Guadeloupe",
    "status": "assigned"
  },
  {
    "alpha2": "GQ",
    "alpha3": "GNQ",
    "countryCallingCodes": [
      "+240"
    ],
    "currencies": [
      "XAF"
    ],
    "emoji": "🇬🇶",
    "ioc": "GEQ",
    "languages": [
      "spa",
      "fra",
      "por"
    ],
    "name": "Equatorial Guinea",
    "status": "assigned"
  },
  {
    "alpha2": "GR",
    "alpha3": "GRC",
    "countryCallingCodes": [
      "+30"
    ],
    "currencies": [
      "EUR"
    ],
    "emoji": "🇬🇷",
    "ioc": "GRE",
    "languages": [
      "ell"
    ],
    "name": "Greece",
    "status": "assigned"
  },
  {
    "alpha2": "GS",
    "alpha3": "SGS",
    "countryCallingCodes": [],
    "currencies": [
      "GBP"
    ],
    "emoji": "🇬🇸",
    "ioc": "",
    "languages": [
      "eng"
    ],
    "name": "South Georgia And The South Sandwich Islands",
    "status": "assigned"
  },
  {
    "alpha2": "GT",
    "alpha3": "GTM",
    "countryCallingCodes": [
      "+502"
    ],
    "currencies": [
      "GTQ"
    ],
    "emoji": "🇬🇹",
    "ioc": "GUA",
    "languages": [
      "spa"
    ],
    "name": "Guatemala",
    "status": "assigned"
  },
  {
    "alpha2": "GU",
    "alpha3": "GUM",
    "countryCallingCodes": [
      "+1 671"
    ],
    "currencies": [
      "USD"
    ],
    "emoji": "🇬🇺",
    "ioc": "GUM",
    "languages": [
      "eng"
    ],
    "name": "Guam",
    "status": "assigned"
  },
  {
    "alpha2": "GW",
    "alpha3": "GNB",
    "countryCallingCodes": [
      "+245"
    ],
    "currencies": [
      "XOF"
    ],
    "emoji": "🇬🇼",
    "ioc": "GBS",
    "languages": [
      "por"
    ],
    "name": "Guinea-bissau",
    "status": "assigned"
  },
  {
    "alpha2": "GY",
    "alpha3": "GUY",
    "countryCallingCodes": [
      "+592"
    ],
    "currencies": [
      "GYD"
    ],
    "emoji": "🇬🇾",
    "ioc": "GUY",
    "languages": [
      "eng"
    ],
    "name": "Guyana",
    "status": "assigned"
  },
  {
    "alpha2": "HK",
    "alpha3": "HKG",
    "countryCallingCodes": [
      "+852"
    ],
    "currencies": [
      "HKD"
    ],
    "emoji": "🇭🇰",
    "ioc": "HKG",
    "languages": [
      "zho",
      "eng"
    ],
    "name": "Hong Kong",
    "status": "assigned"
  },
  {
    "alpha2": "HM",
    "alpha3": "HMD",
    "countryCallingCodes": [],
    "currencies": [
      "AUD"
    ],
    "emoji": "🇭🇲",
    "ioc": "",
    "languages": [],
    "name": "Heard Island And McDonald Islands",
    "status": "assigned"
  },
  {
    "alpha2": "HN",
    "alpha3": "HND",
    "countryCallingCodes": [
      "+504"
    ],
    "currencies": [
      "HNL"
    ],
    "emoji": "🇭🇳",
    "ioc": "HON",
    "languages": [
      "spa"
    ],
    "name": "Honduras",
    "status": "assigned"
  },
  {
    "alpha2": "HR",
    "alpha3": "HRV",
    "countryCallingCodes": [
      "+385"
    ],
    "currencies": [
      "HRK"
    ],
    "emoji": "🇭🇷",
    "ioc": "CRO",
    "languages": [
      "hrv"
    ],
    "name": "Croatia",
    "status": "assigned"
  },
  {
    "alpha2": "HT",
    "alpha3": "HTI",
    "countryCallingCodes": [
      "+509"
    ],
    "currencies": [
      "HTG",
      "USD"
    ],
    "emoji": "🇭🇹",
    "ioc": "HAI",
    "languages": [
      "fra",
      "hat"
    ],
    "name": "Haiti",
    "status": "assigned"
  },
  {
    "alpha2": "HU",
    "alpha3": "HUN",
    "countryCallingCodes": [
      "+36"
    ],
    "currencies": [
      "HUF"
    ],
    "emoji": "🇭🇺",
    "ioc": "HUN",
    "languages": [
      "hun"
    ],
    "name": "Hungary",
    "status": "assigned"
  },
  {
    "alpha2": "HV",
    "alpha3": "HVO",
    "countryCallingCodes": [],
    "currencies": [],
    "ioc": "",
    "languages": [],
    "name": "Upper Volta",
    "status": "deleted"
  },
  {
    "alpha2": "IC",
    "alpha3": "",
    "countryCallingCodes": [],
    "currencies": [
      "EUR"
    ],
    "emoji": "",
    "ioc": "",
    "languages": [],
    "name": "Canary Islands",
    "status": "reserved"
  },
  {
    "alpha2": "ID",
    "alpha3": "IDN",
    "countryCallingCodes": [
      "+62"
    ],
    "currencies": [
      "IDR"
    ],
    "emoji": "🇮🇩",
    "ioc": "INA",
    "languages": [
      "ind"
    ],
    "name": "Indonesia",
    "status": "assigned"
  },
  {
    "alpha2": "IE",
    "alpha3": "IRL",
    "countryCallingCodes": [
      "+353"
    ],
    "currencies": [
      "EUR"
    ],
    "emoji": "🇮🇪",
    "ioc": "IRL",
    "languages": [
      "eng",
      "gle"
    ],
    "name": "Ireland",
    "status": "assigned"
  },
  {
    "alpha2": "IL",
    "alpha3": "ISR",
    "countryCallingCodes": [
      "+972"
    ],
    "currencies": [
      "ILS"
    ],
    "emoji": "🇮🇱",
    "ioc": "ISR",
    "languages": [
      "heb",
      "ara",
      "eng"
    ],
    "name": "Israel",
    "status": "assigned"
  },
  {
    "alpha2": "IM",
    "alpha3": "IMN",
    "countryCallingCodes": [
      "+44"
    ],
    "currencies": [
      "GBP"
    ],
    "emoji": "🇮🇲",
    "ioc": "",
    "languages": [
      "eng",
      "glv"
    ],
    "name": "Isle Of Man",
    "status": "assigned"
  },
  {
    "alpha2": "IN",
    "alpha3": "IND",
    "countryCallingCodes": [
      "+91"
    ],
    "currencies": [
      "INR"
    ],
    "emoji": "🇮🇳",
    "ioc": "IND",
    "languages": [
      "eng",
      "hin"
    ],
    "name": "India",
    "status": "assigned"
  },
  {
    "alpha2": "IO",
    "alpha3": "IOT",
    "countryCallingCodes": [
      "+246"
    ],
    "currencies": [
      "USD"
    ],
    "emoji": "🇮🇴",
    "ioc": "",
    "languages": [
      "eng"
    ],
    "name": "British Indian Ocean Territory",
    "status": "assigned"
  },
  {
    "alpha2": "IQ",
    "alpha3": "IRQ",
    "countryCallingCodes": [
      "+964"
    ],
    "currencies": [
      "IQD"
    ],
    "emoji": "🇮🇶",
    "ioc": "IRQ",
    "languages": [
      "ara",
      "kur"
    ],
    "name": "Iraq",
    "status": "assigned"
  },
  {
    "alpha2": "IR",
    "alpha3": "IRN",
    "countryCallingCodes": [
      "+98"
    ],
    "currencies": [
      "IRR"
    ],
    "emoji": "🇮🇷",
    "ioc": "IRI",
    "languages": [
      "fas"
    ],
    "name": "Iran, Islamic Republic Of",
    "status": "assigned"
  },
  {
    "alpha2": "IS",
    "alpha3": "ISL",
    "countryCallingCodes": [
      "+354"
    ],
    "currencies": [
      "ISK"
    ],
    "emoji": "🇮🇸",
    "ioc": "ISL",
    "languages": [
      "isl"
    ],
    "name": "Iceland",
    "status": "assigned"
  },
  {
    "alpha2": "IT",
    "alpha3": "ITA",
    "countryCallingCodes": [
      "+39"
    ],
    "currencies": [
      "EUR"
    ],
    "emoji": "🇮🇹",
    "ioc": "ITA",
    "languages": [
      "ita"
    ],
    "name": "Italy",
    "status": "assigned"
  },
  {
    "alpha2": "JE",
    "alpha3": "JEY",
    "countryCallingCodes": [
      "+44"
    ],
    "currencies": [
      "GBP"
    ],
    "emoji": "🇯🇪",
    "ioc": "JCI",
    "languages": [
      "eng",
      "fra"
    ],
    "name": "Jersey",
    "status": "assigned"
  },
  {
    "alpha2": "JM",
    "alpha3": "JAM",
    "countryCallingCodes": [
      "+1 876"
    ],
    "currencies": [
      "JMD"
    ],
    "emoji": "🇯🇲",
    "ioc": "JAM",
    "languages": [
      "eng"
    ],
    "name": "Jamaica",
    "status": "assigned"
  },
  {
    "alpha2": "JO",
    "alpha3": "JOR",
    "countryCallingCodes": [
      "+962"
    ],
    "currencies": [
      "JOD"
    ],
    "emoji": "🇯🇴",
    "ioc": "JOR",
    "languages": [
      "ara"
    ],
    "name": "Jordan",
    "status": "assigned"
  },
  {
    "alpha2": "JP",
    "alpha3": "JPN",
    "countryCallingCodes": [
      "+81"
    ],
    "currencies": [
      "JPY"
    ],
    "emoji": "🇯🇵",
    "ioc": "JPN",
    "languages": [
      "jpn"
    ],
    "name": "Japan",
    "status": "assigned"
  },
  {
    "alpha2": "JT",
    "alpha3": "JTN",
    "countryCallingCodes": [],
    "currencies": [],
    "ioc": "",
    "languages": [],
    "name": "Johnston Island",
    "status": "deleted"
  },
  {
    "alpha2": "KE",
    "alpha3": "KEN",
    "countryCallingCodes": [
      "+254"
    ],
    "currencies": [
      "KES"
    ],
    "emoji": "🇰🇪",
    "ioc": "KEN",
    "languages": [
      "eng",
      "swa"
    ],
    "name": "Kenya",
    "status": "assigned"
  },
  {
    "alpha2": "KG",
    "alpha3": "KGZ",
    "countryCallingCodes": [
      "+996"
    ],
    "currencies": [
      "KGS"
    ],
    "emoji": "🇰🇬",
    "ioc": "KGZ",
    "languages": [
      "rus"
    ],
    "name": "Kyrgyzstan",
    "status": "assigned"
  },
  {
    "alpha2": "KH",
    "alpha3": "KHM",
    "countryCallingCodes": [
      "+855"
    ],
    "currencies": [
      "KHR"
    ],
    "emoji": "🇰🇭",
    "ioc": "CAM",
    "languages": [
      "khm"
    ],
    "name": "Cambodia",
    "status": "assigned"
  },
  {
    "alpha2": "KI",
    "alpha3": "KIR",
    "countryCallingCodes": [
      "+686"
    ],
    "currencies": [
      "AUD"
    ],
    "emoji": "🇰🇮",
    "ioc": "KIR",
    "languages": [
      "eng"
    ],
    "name": "Kiribati",
    "status": "assigned"
  },
  {
    "alpha2": "KM",
    "alpha3": "COM",
    "countryCallingCodes": [
      "+269"
    ],
    "currencies": [
      "KMF"
    ],
    "emoji": "🇰🇲",
    "ioc": "COM",
    "languages": [
      "ara",
      "fra"
    ],
    "name": "Comoros",
    "status": "assigned"
  },
  {
    "alpha2": "KN",
    "alpha3": "KNA",
    "countryCallingCodes": [
      "+1 869"
    ],
    "currencies": [
      "XCD"
    ],
    "emoji": "🇰🇳",
    "ioc": "SKN",
    "languages": [
      "eng"
    ],
    "name": "Saint Kitts And Nevis",
    "status": "assigned"
  },
  {
    "alpha2": "KP",
    "alpha3": "PRK",
    "countryCallingCodes": [
      "+850"
    ],
    "currencies": [
      "KPW"
    ],
    "emoji": "🇰🇵",
    "ioc": "PRK",
    "languages": [
      "kor"
    ],
    "name": "Korea, Democratic People's Republic Of",
    "status": "assigned"
  },
  {
    "alpha2": "KR",
    "alpha3": "KOR",
    "countryCallingCodes": [
      "+82"
    ],
    "currencies": [
      "KRW"
    ],
    "emoji": "🇰🇷",
    "ioc": "KOR",
    "languages": [
      "kor"
    ],
    "name": "Korea, Republic Of",
    "status": "assigned"
  },
  {
    "alpha2": "KW",
    "alpha3": "KWT",
    "countryCallingCodes": [
      "+965"
    ],
    "currencies": [
      "KWD"
    ],
    "emoji": "🇰🇼",
    "ioc": "KUW",
    "languages": [
      "ara"
    ],
    "name": "Kuwait",
    "status": "assigned"
  },
  {
    "alpha2": "KY",
    "alpha3": "CYM",
    "countryCallingCodes": [
      "+1 345"
    ],
    "currencies": [
      "KYD"
    ],
    "emoji": "🇰🇾",
    "ioc": "CAY",
    "languages": [
      "eng"
    ],
    "name": "Cayman Islands",
    "status": "assigned"
  },
  {
    "alpha2": "KZ",
    "alpha3": "KAZ",
    "countryCallingCodes": [
      "+7",
      "+7 6",
      "+7 7"
    ],
    "currencies": [
      "KZT"
    ],
    "emoji": "🇰🇿",
    "ioc": "KAZ",
    "languages": [
      "kaz",
      "rus"
    ],
    "name": "Kazakhstan",
    "status": "assigned"
  },
  {
    "alpha2": "LA",
    "alpha3": "LAO",
    "countryCallingCodes": [
      "+856"
    ],
    "currencies": [
      "LAK"
    ],
    "emoji": "🇱🇦",
    "ioc": "LAO",
    "languages": [
      "lao"
    ],
    "name": "Lao People's Democratic Republic",
    "status": "assigned"
  },
  {
    "alpha2": "LB",
    "alpha3": "LBN",
    "countryCallingCodes": [
      "+961"
    ],
    "currencies": [
      "LBP"
    ],
    "emoji": "🇱🇧",
    "ioc": "LIB",
    "languages": [
      "ara",
      "hye"
    ],
    "name": "Lebanon",
    "status": "assigned"
  },
  {
    "alpha2": "LC",
    "alpha3": "LCA",
    "countryCallingCodes": [
      "+1 758"
    ],
    "currencies": [
      "XCD"
    ],
    "emoji": "🇱🇨",
    "ioc": "LCA",
    "languages": [
      "eng"
    ],
    "name": "Saint Lucia",
    "status": "assigned"
  },
  {
    "alpha2": "LI",
    "alpha3": "LIE",
    "countryCallingCodes": [
      "+423"
    ],
    "currencies": [
      "CHF"
    ],
    "emoji": "🇱🇮",
    "ioc": "LIE",
    "languages": [
      "deu"
    ],
    "name": "Liechtenstein",
    "status": "assigned"
  },
  {
    "alpha2": "LK",
    "alpha3": "LKA",
    "countryCallingCodes": [
      "+94"
    ],
    "currencies": [
      "LKR"
    ],
    "emoji": "🇱🇰",
    "ioc": "SRI",
    "languages": [
      "sin",
      "tam"
    ],
    "name": "Sri Lanka",
    "status": "assigned"
  },
  {
    "alpha2": "LR",
    "alpha3": "LBR",
    "countryCallingCodes": [
      "+231"
    ],
    "currencies": [
      "LRD"
    ],
    "emoji": "🇱🇷",
    "ioc": "LBR",
    "languages": [
      "eng"
    ],
    "name": "Liberia",
    "status": "assigned"
  },
  {
    "alpha2": "LS",
    "alpha3": "LSO",
    "countryCallingCodes": [
      "+266"
    ],
    "currencies": [
      "LSL",
      "ZAR"
    ],
    "emoji": "🇱🇸",
    "ioc": "LES",
    "languages": [
      "eng",
      "sot"
    ],
    "name": "Lesotho",
    "status": "assigned"
  },
  {
    "alpha2": "LT",
    "alpha3": "LTU",
    "countryCallingCodes": [
      "+370"
    ],
    "currencies": [
      "EUR"
    ],
    "emoji": "🇱🇹",
    "ioc": "LTU",
    "languages": [
      "lit"
    ],
    "name": "Lithuania",
    "status": "assigned"
  },
  {
    "alpha2": "LU",
    "alpha3": "LUX",
    "countryCallingCodes": [
      "+352"
    ],
    "currencies": [
      "EUR"
    ],
    "emoji": "🇱🇺",
    "ioc": "LUX",
    "languages": [
      "fra",
      "deu",
      "ltz"
    ],
    "name": "Luxembourg",
    "status": "assigned"
  },
  {
    "alpha2": "LV",
    "alpha3": "LVA",
    "countryCallingCodes": [
      "+371"
    ],
    "currencies": [
      "EUR"
    ],
    "emoji": "🇱🇻",
    "ioc": "LAT",
    "languages": [
      "lav"
    ],
    "name": "Latvia",
    "status": "assigned"
  },
  {
    "alpha2": "LY",
    "alpha3": "LBY",
    "countryCallingCodes": [
      "+218"
    ],
    "currencies": [
      "LYD"
    ],
    "emoji": "🇱🇾",
    "ioc": "LBA",
    "languages": [
      "ara"
    ],
    "name": "Libya",
    "status": "assigned"
  },
  {
    "alpha2": "MA",
    "alpha3": "MAR",
    "countryCallingCodes": [
      "+212"
    ],
    "currencies": [
      "MAD"
    ],
    "emoji": "🇲🇦",
    "ioc": "MAR",
    "languages": [
      "ara"
    ],
    "name": "Morocco",
    "status": "assigned"
  },
  {
    "alpha2": "MC",
    "alpha3": "MCO",
    "countryCallingCodes": [
      "+377"
    ],
    "currencies": [
      "EUR"
    ],
    "emoji": "🇲🇨",
    "ioc": "MON",
    "languages": [
      "fra"
    ],
    "name": "Monaco",
    "status": "assigned"
  },
  {
    "alpha2": "MD",
    "alpha3": "MDA",
    "countryCallingCodes": [
      "+373"
    ],
    "currencies": [
      "MDL"
    ],
    "emoji": "🇲🇩",
    "ioc": "MDA",
    "languages": [
      "ron"
    ],
    "name": "Moldova",
    "status": "assigned"
  },
  {
    "alpha2": "ME",
    "alpha3": "MNE",
    "countryCallingCodes": [
      "+382"
    ],
    "currencies": [
      "EUR"
    ],
    "emoji": "🇲🇪",
    "ioc": "MNE",
    "languages": [
      "mot"
    ],
    "name": "Montenegro",
    "status": "assigned"
  },
  {
    "alpha2": "MF",
    "alpha3": "MAF",
    "countryCallingCodes": [
      "+590"
    ],
    "currencies": [
      "EUR"
    ],
    "emoji": "🇲🇫",
    "ioc": "",
    "languages": [
      "fra"
    ],
    "name": "Saint Martin",
    "status": "assigned"
  },
  {
    "alpha2": "MG",
    "alpha3": "MDG",
    "countryCallingCodes": [
      "+261"
    ],
    "currencies": [
      "MGA"
    ],
    "emoji": "🇲🇬",
    "ioc": "MAD",
    "languages": [
      "fra",
      "mlg"
    ],
    "name": "Madagascar",
    "status": "assigned"
  },
  {
    "alpha2": "MH",
    "alpha3": "MHL",
    "countryCallingCodes": [
      "+692"
    ],
    "currencies": [
      "USD"
    ],
    "emoji": "🇲🇭",
    "ioc": "MHL",
    "languages": [
      "eng",
      "mah"
    ],
    "name": "Marshall Islands",
    "status": "assigned"
  },
  {
    "alpha2": "MI",
    "alpha3": "MID",
    "countryCallingCodes": [],
    "currencies": [],
    "ioc": "",
    "languages": [],
    "name": "Midway Islands",
    "status": "deleted"
  },
  {
    "alpha2": "MK",
    "alpha3": "MKD",
    "countryCallingCodes": [
      "+389"
    ],
    "currencies": [
      "MKD"
    ],
    "emoji": "🇲🇰",
    "ioc": "MKD",
    "languages": [
      "mkd"
    ],
    "name": "Macedonia, The Former Yugoslav Republic Of",
    "status": "assigned"
  },
  {
    "alpha2": "ML",
    "alpha3": "MLI",
    "countryCallingCodes": [
      "+223"
    ],
    "currencies": [
      "XOF"
    ],
    "emoji": "🇲🇱",
    "ioc": "MLI",
    "languages": [
      "fra"
    ],
    "name": "Mali",
    "status": "assigned"
  },
  {
    "alpha2": "MM",
    "alpha3": "MMR",
    "countryCallingCodes": [
      "+95"
    ],
    "currencies": [
      "MMK"
    ],
    "emoji": "🇲🇲",
    "ioc": "MYA",
    "languages": [
      "mya"
    ],
    "name": "Myanmar",
    "status": "assigned"
  },
  {
    "alpha2": "MN",
    "alpha3": "MNG",
    "countryCallingCodes": [
      "+976"
    ],
    "currencies": [
      "MNT"
    ],
    "emoji": "🇲🇳",
    "ioc": "MGL",
    "languages": [
      "mon"
    ],
    "name": "Mongolia",
    "status": "assigned"
  },
  {
    "alpha2": "MO",
    "alpha3": "MAC",
    "countryCallingCodes": [
      "+853"
    ],
    "currencies": [
      "MOP"
    ],
    "emoji": "🇲🇴",
    "ioc": "MAC",
    "languages": [
      "zho",
      "por"
    ],
    "name": "Macao",
    "status": "assigned"
  },
  {
    "alpha2": "MP",
    "alpha3": "MNP",
    "countryCallingCodes": [
      "+1 670"
    ],
    "currencies": [
      "USD"
    ],
    "emoji": "🇲🇵",
    "ioc": "",
    "languages": [
      "eng"
    ],
    "name": "Northern Mariana Islands",
    "status": "assigned"
  },
  {
    "alpha2": "MQ",
    "alpha3": "MTQ",
    "countryCallingCodes": [
      "+596"
    ],
    "currencies": [
      "EUR"
    ],
    "emoji": "🇲🇶",
    "ioc": "",
    "languages": [],
    "name": "Martinique",
    "status": "assigned"
  },
  {
    "alpha2": "MR",
    "alpha3": "MRT",
    "countryCallingCodes": [
      "+222"
    ],
    "currencies": [
      "MRO"
    ],
    "emoji": "🇲🇷",
    "ioc": "MTN",
    "languages": [
      "ara",
      "fra"
    ],
    "name": "Mauritania",
    "status": "assigned"
  },
  {
    "alpha2": "MS",
    "alpha3": "MSR",
    "countryCallingCodes": [
      "+1 664"
    ],
    "currencies": [
      "XCD"
    ],
    "emoji": "🇲🇸",
    "ioc": "",
    "languages": [],
    "name": "Montserrat",
    "status": "assigned"
  },
  {
    "alpha2": "MT",
    "alpha3": "MLT",
    "countryCallingCodes": [
      "+356"
    ],
    "currencies": [
      "EUR"
    ],
    "emoji": "🇲🇹",
    "ioc": "MLT",
    "languages": [
      "mlt",
      "eng"
    ],
    "name": "Malta",
    "status": "assigned"
  },
  {
    "alpha2": "MU",
    "alpha3": "MUS",
    "countryCallingCodes": [
      "+230"
    ],
    "currencies": [
      "MUR"
    ],
    "emoji": "🇲🇺",
    "ioc": "MRI",
    "languages": [
      "eng",
      "fra"
    ],
    "name": "Mauritius",
    "status": "assigned"
  },
  {
    "alpha2": "MV",
    "alpha3": "MDV",
    "countryCallingCodes": [
      "+960"
    ],
    "currencies": [
      "MVR"
    ],
    "emoji": "🇲🇻",
    "ioc": "MDV",
    "languages": [
      "div"
    ],
    "name": "Maldives",
    "status": "assigned"
  },
  {
    "alpha2": "MW",
    "alpha3": "MWI",
    "countryCallingCodes": [
      "+265"
    ],
    "currencies": [
      "MWK"
    ],
    "emoji": "🇲🇼",
    "ioc": "MAW",
    "languages": [
      "eng",
      "nya"
    ],
    "name": "Malawi",
    "status": "assigned"
  },
  {
    "alpha2": "MX",
    "alpha3": "MEX",
    "countryCallingCodes": [
      "+52"
    ],
    "currencies": [
      "MXN",
      "MXV"
    ],
    "emoji": "🇲🇽",
    "ioc": "MEX",
    "languages": [
      "spa"
    ],
    "name": "Mexico",
    "status": "assigned"
  },
  {
    "alpha2": "MY",
    "alpha3": "MYS",
    "countryCallingCodes": [
      "+60"
    ],
    "currencies": [
      "MYR"
    ],
    "emoji": "🇲🇾",
    "ioc": "MAS",
    "languages": [
      "msa",
      "eng"
    ],
    "name": "Malaysia",
    "status": "assigned"
  },
  {
    "alpha2": "MZ",
    "alpha3": "MOZ",
    "countryCallingCodes": [
      "+258"
    ],
    "currencies": [
      "MZN"
    ],
    "emoji": "🇲🇿",
    "ioc": "MOZ",
    "languages": [
      "por"
    ],
    "name": "Mozambique",
    "status": "assigned"
  },
  {
    "alpha2": "NA",
    "alpha3": "NAM",
    "countryCallingCodes": [
      "+264"
    ],
    "currencies": [
      "NAD",
      "ZAR"
    ],
    "emoji": "🇳🇦",
    "ioc": "NAM",
    "languages": [
      "eng"
    ],
    "name": "Namibia",
    "status": "assigned"
  },
  {
    "alpha2": "NC",
    "alpha3": "NCL",
    "countryCallingCodes": [
      "+687"
    ],
    "currencies": [
      "XPF"
    ],
    "emoji": "🇳🇨",
    "ioc": "",
    "languages": [
      "fra"
    ],
    "name": "New Caledonia",
    "status": "assigned"
  },
  {
    "alpha2": "NE",
    "alpha3": "NER",
    "countryCallingCodes": [
      "+227"
    ],
    "currencies": [
      "XOF"
    ],
    "emoji": "🇳🇪",
    "ioc": "NIG",
    "languages": [
      "fra"
    ],
    "name": "Niger",
    "status": "assigned"
  },
  {
    "alpha2": "NF",
    "alpha3": "NFK",
    "countryCallingCodes": [
      "+672"
    ],
    "currencies": [
      "AUD"
    ],
    "emoji": "🇳🇫",
    "ioc": "",
    "languages": [
      "eng"
    ],
    "name": "Norfolk Island",
    "status": "assigned"
  },
  {
    "alpha2": "NG",
    "alpha3": "NGA",
    "countryCallingCodes": [
      "+234"
    ],
    "currencies": [
      "NGN"
    ],
    "emoji": "🇳🇬",
    "ioc": "NGR",
    "languages": [
      "eng"
    ],
    "name": "Nigeria",
    "status": "assigned"
  },
  {
    "alpha2": "NH",
    "alpha3": "NHB",
    "countryCallingCodes": [],
    "currencies": [],
    "ioc": "",
    "languages": [],
    "name": "New Hebrides",
    "status": "deleted"
  },
  {
    "alpha2": "NI",
    "alpha3": "NIC",
    "countryCallingCodes": [
      "+505"
    ],
    "currencies": [
      "NIO"
    ],
    "emoji": "🇳🇮",
    "ioc": "NCA",
    "languages": [
      "spa"
    ],
    "name": "Nicaragua",
    "status": "assigned"
  },
  {
    "alpha2": "NL",
    "alpha3": "NLD",
    "countryCallingCodes": [
      "+31"
    ],
    "currencies": [
      "EUR"
    ],
    "emoji": "🇳🇱",
    "ioc": "NED",
    "languages": [
      "nld"
    ],
    "name": "Netherlands",
    "status": "assigned"
  },
  {
    "alpha2": "NO",
    "alpha3": "NOR",
    "countryCallingCodes": [
      "+47"
    ],
    "currencies": [
      "NOK"
    ],
    "emoji": "🇳🇴",
    "ioc": "NOR",
    "languages": [
      "nor"
    ],
    "name": "Norway",
    "status": "assigned"
  },
  {
    "alpha2": "NP",
    "alpha3": "NPL",
    "countryCallingCodes": [
      "+977"
    ],
    "currencies": [
      "NPR"
    ],
    "emoji": "🇳🇵",
    "ioc": "NEP",
    "languages": [
      "nep"
    ],
    "name": "Nepal",
    "status": "assigned"
  },
  {
    "alpha2": "NQ",
    "alpha3": "ATN",
    "countryCallingCodes": [],
    "currencies": [],
    "ioc": "",
    "languages": [],
    "name": "Dronning Maud Land",
    "status": "deleted"
  },
  {
    "alpha2": "NR",
    "alpha3": "NRU",
    "countryCallingCodes": [
      "+674"
    ],
    "currencies": [
      "AUD"
    ],
    "emoji": "🇳🇷",
    "ioc": "NRU",
    "languages": [
      "eng",
      "nau"
    ],
    "name": "Nauru",
    "status": "assigned"
  },
  {
    "alpha2": "NT",
    "alpha3": "NTZ",
    "countryCallingCodes": [],
    "currencies": [],
    "ioc": "",
    "languages": [],
    "name": "Neutral Zone",
    "status": "deleted"
  },
  {
    "alpha2": "NU",
    "alpha3": "NIU",
    "countryCallingCodes": [
      "+683"
    ],
    "currencies": [
      "NZD"
    ],
    "emoji": "🇳🇺",
    "ioc": "",
    "languages": [
      "eng"
    ],
    "name": "Niue",
    "status": "assigned"
  },
  {
    "alpha2": "NZ",
    "alpha3": "NZL",
    "countryCallingCodes": [
      "+64"
    ],
    "currencies": [
      "NZD"
    ],
    "emoji": "🇳🇿",
    "ioc": "NZL",
    "languages": [
      "eng"
    ],
    "name": "New Zealand",
    "status": "assigned"
  },
  {
    "alpha2": "OM",
    "alpha3": "OMN",
    "countryCallingCodes": [
      "+968"
    ],
    "currencies": [
      "OMR"
    ],
    "emoji": "🇴🇲",
    "ioc": "OMA",
    "languages": [
      "ara"
    ],
    "name": "Oman",
    "status": "assigned"
  },
  {
    "alpha2": "PA",
    "alpha3": "PAN",
    "countryCallingCodes": [
      "+507"
    ],
    "currencies": [
      "PAB",
      "USD"
    ],
    "emoji": "🇵🇦",
    "ioc": "PAN",
    "languages": [
      "spa"
    ],
    "name": "Panama",
    "status": "assigned"
  },
  {
    "alpha2": "PC",
    "alpha3": "PCI",
    "countryCallingCodes": [],
    "currencies": [],
    "ioc": "",
    "languages": [],
    "name": "Pacific Islands, Trust Territory of the",
    "status": "deleted"
  },
  {
    "alpha2": "PE",
    "alpha3": "PER",
    "countryCallingCodes": [
      "+51"
    ],
    "currencies": [
      "PEN"
    ],
    "emoji": "🇵🇪",
    "ioc": "PER",
    "languages": [
      "spa",
      "aym",
      "que"
    ],
    "name": "Peru",
    "status": "assigned"
  },
  {
    "alpha2": "PF",
    "alpha3": "PYF",
    "countryCallingCodes": [
      "+689"
    ],
    "currencies": [
      "XPF"
    ],
    "emoji": "🇵🇫",
    "ioc": "",
    "languages": [
      "fra"
    ],
    "name": "French Polynesia",
    "status": "assigned"
  },
  {
    "alpha2": "PG",
    "alpha3": "PNG",
    "countryCallingCodes": [
      "+675"
    ],
    "currencies": [
      "PGK"
    ],
    "emoji": "🇵🇬",
    "ioc": "PNG",
    "languages": [
      "eng"
    ],
    "name": "Papua New Guinea",
    "status": "assigned"
  },
  {
    "alpha2": "PH",
    "alpha3": "PHL",
    "countryCallingCodes": [
      "+63"
    ],
    "currencies": [
      "PHP"
    ],
    "emoji": "🇵🇭",
    "ioc": "PHI",
    "languages": [
      "eng"
    ],
    "name": "Philippines",
    "status": "assigned"
  },
  {
    "alpha2": "PK",
    "alpha3": "PAK",
    "countryCallingCodes": [
      "+92"
    ],
    "currencies": [
      "PKR"
    ],
    "emoji": "🇵🇰",
    "ioc": "PAK",
    "languages": [
      "urd",
      "eng"
    ],
    "name": "Pakistan",
    "status": "assigned"
  },
  {
    "alpha2": "PL",
    "alpha3": "POL",
    "countryCallingCodes": [
      "+48"
    ],
    "currencies": [
      "PLN"
    ],
    "emoji": "🇵🇱",
    "ioc": "POL",
    "languages": [
      "pol"
    ],
    "name": "Poland",
    "status": "assigned"
  },
  {
    "alpha2": "PM",
    "alpha3": "SPM",
    "countryCallingCodes": [
      "+508"
    ],
    "currencies": [
      "EUR"
    ],
    "emoji": "🇵🇲",
    "ioc": "",
    "languages": [
      "eng"
    ],
    "name": "Saint Pierre And Miquelon",
    "status": "assigned"
  },
  {
    "alpha2": "PN",
    "alpha3": "PCN",
    "countryCallingCodes": [
      "+872"
    ],
    "currencies": [
      "NZD"
    ],
    "emoji": "🇵🇳",
    "ioc": "",
    "languages": [
      "eng"
    ],
    "name": "Pitcairn",
    "status": "assigned"
  },
  {
    "alpha2": "PR",
    "alpha3": "PRI",
    "countryCallingCodes": [
      "+1 787",
      "+1 939"
    ],
    "currencies": [
      "USD"
    ],
    "emoji": "🇵🇷",
    "ioc": "PUR",
    "languages": [
      "spa",
      "eng"
    ],
    "name": "Puerto Rico",
    "status": "assigned"
  },
  {
    "alpha2": "PS",
    "alpha3": "PSE",
    "countryCallingCodes": [
      "+970"
    ],
    "currencies": [
      "JOD",
      "EGP",
      "ILS"
    ],
    "emoji": "🇵🇸",
    "ioc": "PLE",
    "languages": [
      "ara"
    ],
    "name": "Palestinian Territory, Occupied",
    "status": "assigned"
  },
  {
    "alpha2": "PT",
    "alpha3": "PRT",
    "countryCallingCodes": [
      "+351"
    ],
    "currencies": [
      "EUR"
    ],
    "emoji": "🇵🇹",
    "ioc": "POR",
    "languages": [
      "por"
    ],
    "name": "Portugal",
    "status": "assigned"
  },
  {
    "alpha2": "PU",
    "alpha3": "PUS",
    "countryCallingCodes": [],
    "currencies": [],
    "ioc": "",
    "languages": [],
    "name": "U.S. Miscellaneous Pacific Islands",
    "status": "deleted"
  },
  {
    "alpha2": "PW",
    "alpha3": "PLW",
    "countryCallingCodes": [
      "+680"
    ],
    "currencies": [
      "USD"
    ],
    "emoji": "🇵🇼",
    "ioc": "PLW",
    "languages": [
      "eng"
    ],
    "name": "Palau",
    "status": "assigned"
  },
  {
    "alpha2": "PY",
    "alpha3": "PRY",
    "countryCallingCodes": [
      "+595"
    ],
    "currencies": [
      "PYG"
    ],
    "emoji": "🇵🇾",
    "ioc": "PAR",
    "languages": [
      "spa"
    ],
    "name": "Paraguay",
    "status": "assigned"
  },
  {
    "alpha2": "PZ",
    "alpha3": "PCZ",
    "countryCallingCodes": [],
    "currencies": [],
    "ioc": "",
    "languages": [],
    "name": "Panama Canal Zone",
    "status": "deleted"
  },
  {
    "alpha2": "QA",
    "alpha3": "QAT",
    "countryCallingCodes": [
      "+974"
    ],
    "currencies": [
      "QAR"
    ],
    "emoji": "🇶🇦",
    "ioc": "QAT",
    "languages": [
      "ara"
    ],
    "name": "Qatar",
    "status": "assigned"
  },
  {
    "alpha2": "RE",
    "alpha3": "REU",
    "countryCallingCodes": [
      "+262"
    ],
    "currencies": [
      "EUR"
    ],
    "emoji": "🇷🇪",
    "ioc": "",
    "languages": [
      "fra"
    ],
    "name": "Reunion",
    "status": "assigned"
  },
  {
    "alpha2": "RH",
    "alpha3": "RHO",
    "countryCallingCodes": [],
    "currencies": [],
    "ioc": "",
    "languages": [],
    "name": "Southern Rhodesia",
    "status": "deleted"
  },
  {
    "alpha2": "RO",
    "alpha3": "ROU",
    "countryCallingCodes": [
      "+40"
    ],
    "currencies": [
      "RON"
    ],
    "emoji": "🇷🇴",
    "ioc": "ROU",
    "languages": [
      "ron"
    ],
    "name": "Romania",
    "status": "assigned"
  },
  {
    "alpha2": "RS",
    "alpha3": "SRB",
    "countryCallingCodes": [
      "+381"
    ],
    "currencies": [
      "RSD"
    ],
    "emoji": "🇷🇸",
    "ioc": "SRB",
    "languages": [
      "srp"
    ],
    "name": "Serbia",
    "status": "assigned"
  },
  {
    "alpha2": "RU",
    "alpha3": "RUS",
    "countryCallingCodes": [
      "+7",
      "+7 3",
      "+7 4",
      "+7 8"
    ],
    "currencies": [
      "RUB"
    ],
    "emoji": "🇷🇺",
    "ioc": "RUS",
    "languages": [
      "rus"
    ],
    "name": "Russian Federation",
    "status": "assigned"
  },
  {
    "alpha2": "RW",
    "alpha3": "RWA",
    "countryCallingCodes": [
      "+250"
    ],
    "currencies": [
      "RWF"
    ],
    "emoji": "🇷🇼",
    "ioc": "RWA",
    "languages": [
      "eng",
      "fra",
      "kin"
    ],
    "name": "Rwanda",
    "status": "assigned"
  },
  {
    "alpha2": "SA",
    "alpha3": "SAU",
    "countryCallingCodes": [
      "+966"
    ],
    "currencies": [
      "SAR"
    ],
    "emoji": "🇸🇦",
    "ioc": "KSA",
    "languages": [
      "ara"
    ],
    "name": "Saudi Arabia",
    "status": "assigned"
  },
  {
    "alpha2": "SB",
    "alpha3": "SLB",
    "countryCallingCodes": [
      "+677"
    ],
    "currencies": [
      "SBD"
    ],
    "emoji": "🇸🇧",
    "ioc": "SOL",
    "languages": [
      "eng"
    ],
    "name": "Solomon Islands",
    "status": "assigned"
  },
  {
    "alpha2": "SC",
    "alpha3": "SYC",
    "countryCallingCodes": [
      "+248"
    ],
    "currencies": [
      "SCR"
    ],
    "emoji": "🇸🇨",
    "ioc": "SEY",
    "languages": [
      "eng",
      "fra"
    ],
    "name": "Seychelles",
    "status": "assigned"
  },
  {
    "alpha2": "SD",
    "alpha3": "SDN",
    "countryCallingCodes": [
      "+249"
    ],
    "currencies": [
      "SDG"
    ],
    "emoji": "🇸🇩",
    "ioc": "SUD",
    "languages": [
      "ara",
      "eng"
    ],
    "name": "Sudan",
    "status": "assigned"
  },
  {
    "alpha2": "SE",
    "alpha3": "SWE",
    "countryCallingCodes": [
      "+46"
    ],
    "currencies": [
      "SEK"
    ],
    "emoji": "🇸🇪",
    "ioc": "SWE",
    "languages": [
      "swe"
    ],
    "name": "Sweden",
    "status": "assigned"
  },
  {
    "alpha2": "SG",
    "alpha3": "SGP",
    "countryCallingCodes": [
      "+65"
    ],
    "currencies": [
      "SGD"
    ],
    "emoji": "🇸🇬",
    "ioc": "SIN",
    "languages": [
      "eng",
      "zho",
      "msa",
      "tam"
    ],
    "name": "Singapore",
    "status": "assigned"
  },
  {
    "alpha2": "SH",
    "alpha3": "SHN",
    "countryCallingCodes": [
      "+290"
    ],
    "currencies": [
      "SHP"
    ],
    "emoji": "🇸🇭",
    "ioc": "",
    "languages": [
      "eng"
    ],
    "name": "Saint Helena, Ascension And Tristan Da Cunha",
    "status": "assigned"
  },
  {
    "alpha2": "SI",
    "alpha3": "SVN",
    "countryCallingCodes": [
      "+386"
    ],
    "currencies": [
      "EUR"
    ],
    "emoji": "🇸🇮",
    "ioc": "SLO",
    "languages": [
      "slv"
    ],
    "name": "Slovenia",
    "status": "assigned"
  },
  {
    "alpha2": "SJ",
    "alpha3": "SJM",
    "countryCallingCodes": [
      "+47"
    ],
    "currencies": [
      "NOK"
    ],
    "emoji": "🇸🇯",
    "ioc": "",
    "languages": [],
    "name": "Svalbard And Jan Mayen",
    "status": "assigned"
  },
  {
    "alpha2": "SK",
    "alpha3": "SVK",
    "countryCallingCodes": [
      "+421"
    ],
    "currencies": [
      "EUR"
    ],
    "emoji": "🇸🇰",
    "ioc": "SVK",
    "languages": [
      "slk"
    ],
    "name": "Slovakia",
    "status": "assigned"
  },
  {
    "alpha2": "SK",
    "alpha3": "SKM",
    "countryCallingCodes": [],
    "currencies": [],
    "ioc": "",
    "languages": [],
    "name": "Sikkim",
    "status": "deleted"
  },
  {
    "alpha2": "SL",
    "alpha3": "SLE",
    "countryCallingCodes": [
      "+232"
    ],
    "currencies": [
      "SLL"
    ],
    "emoji": "🇸🇱",
    "ioc": "SLE",
    "languages": [
      "eng"
    ],
    "name": "Sierra Leone",
    "status": "assigned"
  },
  {
    "alpha2": "SM",
    "alpha3": "SMR",
    "countryCallingCodes": [
      "+378"
    ],
    "currencies": [
      "EUR"
    ],
    "emoji": "🇸🇲",
    "ioc": "SMR",
    "languages": [
      "ita"
    ],
    "name": "San Marino",
    "status": "assigned"
  },
  {
    "alpha2": "SN",
    "alpha3": "SEN",
    "countryCallingCodes": [
      "+221"
    ],
    "currencies": [
      "XOF"
    ],
    "emoji": "🇸🇳",
    "ioc": "SEN",
    "languages": [
      "fra"
    ],
    "name": "Senegal",
    "status": "assigned"
  },
  {
    "alpha2": "SO",
    "alpha3": "SOM",
    "countryCallingCodes": [
      "+252"
    ],
    "currencies": [
      "SOS"
    ],
    "emoji": "🇸🇴",
    "ioc": "SOM",
    "languages": [
      "som"
    ],
    "name": "Somalia",
    "status": "assigned"
  },
  {
    "alpha2": "SR",
    "alpha3": "SUR",
    "countryCallingCodes": [
      "+597"
    ],
    "currencies": [
      "SRD"
    ],
    "emoji": "🇸🇷",
    "ioc": "SUR",
    "languages": [
      "nld"
    ],
    "name": "Suriname",
    "status": "assigned"
  },
  {
    "alpha2": "SS",
    "alpha3": "SSD",
    "countryCallingCodes": [
      "+211"
    ],
    "currencies": [
      "SSP"
    ],
    "emoji": "🇸🇸",
    "ioc": "SSD",
    "languages": [
      "eng"
    ],
    "name": "South Sudan",
    "status": "assigned"
  },
  {
    "alpha2": "ST",
    "alpha3": "STP",
    "countryCallingCodes": [
      "+239"
    ],
    "currencies": [
      "STD"
    ],
    "emoji": "🇸🇹",
    "ioc": "STP",
    "languages": [
      "por"
    ],
    "name": "Sao Tome and Principe",
    "status": "assigned"
  },
  {
    "alpha2": "SU",
    "alpha3": "",
    "countryCallingCodes": [],
    "currencies": [
      "RUB"
    ],
    "emoji": "",
    "ioc": "",
    "languages": [
      "rus"
    ],
    "name": "USSR",
    "status": "reserved"
  },
  {
    "alpha2": "SV",
    "alpha3": "SLV",
    "countryCallingCodes": [
      "+503"
    ],
    "currencies": [
      "USD"
    ],
    "emoji": "🇸🇻",
    "ioc": "ESA",
    "languages": [
      "spa"
    ],
    "name": "El Salvador",
    "status": "assigned"
  },
  {
    "alpha2": "SX",
    "alpha3": "SXM",
    "countryCallingCodes": [
      "+1 721"
    ],
    "currencies": [
      "ANG"
    ],
    "emoji": "🇸🇽",
    "ioc": "",
    "languages": [
      "nld"
    ],
    "name": "Sint Maarten",
    "status": "assigned"
  },
  {
    "alpha2": "SY",
    "alpha3": "SYR",
    "countryCallingCodes": [
      "+963"
    ],
    "currencies": [
      "SYP"
    ],
    "emoji": "🇸🇾",
    "ioc": "SYR",
    "languages": [
      "ara"
    ],
    "name": "Syrian Arab Republic",
    "status": "assigned"
  },
  {
    "alpha2": "SZ",
    "alpha3": "SWZ",
    "countryCallingCodes": [
      "+268"
    ],
    "currencies": [
      "SZL"
    ],
    "emoji": "🇸🇿",
    "ioc": "SWZ",
    "languages": [
      "eng",
      "ssw"
    ],
    "name": "Swaziland",
    "status": "assigned"
  },
  {
    "alpha2": "TA",
    "alpha3": "",
    "countryCallingCodes": [
      "+290"
    ],
    "currencies": [
      "GBP"
    ],
    "emoji": "",
    "ioc": "",
    "languages": [],
    "name": "Tristan de Cunha",
    "status": "reserved"
  },
  {
    "alpha2": "TC",
    "alpha3": "TCA",
    "countryCallingCodes": [
      "+1 649"
    ],
    "currencies": [
      "USD"
    ],
    "emoji": "🇹🇨",
    "ioc": "",
    "languages": [
      "eng"
    ],
    "name": "Turks And Caicos Islands",
    "status": "assigned"
  },
  {
    "alpha2": "TD",
    "alpha3": "TCD",
    "countryCallingCodes": [
      "+235"
    ],
    "currencies": [
      "XAF"
    ],
    "emoji": "🇹🇩",
    "ioc": "CHA",
    "languages": [
      "ara",
      "fra"
    ],
    "name": "Chad",
    "status": "assigned"
  },
  {
    "alpha2": "TF",
    "alpha3": "ATF",
    "countryCallingCodes": [],
    "currencies": [
      "EUR"
    ],
    "emoji": "🇹🇫",
    "ioc": "",
    "languages": [
      "fra"
    ],
    "name": "French Southern Territories",
    "status": "assigned"
  },
  {
    "alpha2": "TG",
    "alpha3": "TGO",
    "countryCallingCodes": [
      "+228"
    ],
    "currencies": [
      "XOF"
    ],
    "emoji": "🇹🇬",
    "ioc": "TOG",
    "languages": [
      "fra"
    ],
    "name": "Togo",
    "status": "assigned"
  },
  {
    "alpha2": "TH",
    "alpha3": "THA",
    "countryCallingCodes": [
      "+66"
    ],
    "currencies": [
      "THB"
    ],
    "emoji": "🇹🇭",
    "ioc": "THA",
    "languages": [
      "tha"
    ],
    "name": "Thailand",
    "status": "assigned"
  },
  {
    "alpha2": "TJ",
    "alpha3": "TJK",
    "countryCallingCodes": [
      "+992"
    ],
    "currencies": [
      "TJS"
    ],
    "emoji": "🇹🇯",
    "ioc": "TJK",
    "languages": [
      "tgk",
      "rus"
    ],
    "name": "Tajikistan",
    "status": "assigned"
  },
  {
    "alpha2": "TK",
    "alpha3": "TKL",
    "countryCallingCodes": [
      "+690"
    ],
    "currencies": [
      "NZD"
    ],
    "emoji": "🇹🇰",
    "ioc": "",
    "languages": [
      "eng"
    ],
    "name": "Tokelau",
    "status": "assigned"
  },
  {
    "alpha2": "TL",
    "alpha3": "TLS",
    "countryCallingCodes": [
      "+670"
    ],
    "currencies": [
      "USD"
    ],
    "emoji": "🇹🇱",
    "ioc": "TLS",
    "languages": [
      "por"
    ],
    "name": "Timor-Leste, Democratic Republic of",
    "status": "assigned"
  },
  {
    "alpha2": "TM",
    "alpha3": "TKM",
    "countryCallingCodes": [
      "+993"
    ],
    "currencies": [
      "TMT"
    ],
    "emoji": "🇹🇲",
    "ioc": "TKM",
    "languages": [
      "tuk",
      "rus"
    ],
    "name": "Turkmenistan",
    "status": "assigned"
  },
  {
    "alpha2": "TN",
    "alpha3": "TUN",
    "countryCallingCodes": [
      "+216"
    ],
    "currencies": [
      "TND"
    ],
    "emoji": "🇹🇳",
    "ioc": "TUN",
    "languages": [
      "ara"
    ],
    "name": "Tunisia",
    "status": "assigned"
  },
  {
    "alpha2": "TO",
    "alpha3": "TON",
    "countryCallingCodes": [
      "+676"
    ],
    "currencies": [
      "TOP"
    ],
    "emoji": "🇹🇴",
    "ioc": "TGA",
    "languages": [
      "eng"
    ],
    "name": "Tonga",
    "status": "assigned"
  },
  {
    "alpha2": "TP",
    "alpha3": "TMP",
    "countryCallingCodes": [],
    "currencies": [],
    "ioc": "",
    "languages": [],
    "name": "East Timor",
    "status": "deleted"
  },
  {
    "alpha2": "TR",
    "alpha3": "TUR",
    "countryCallingCodes": [
      "+90"
    ],
    "currencies": [
      "TRY"
    ],
    "emoji": "🇹🇷",
    "ioc": "TUR",
    "languages": [
      "tur"
    ],
    "name": "Turkey",
    "status": "assigned"
  },
  {
    "alpha2": "TT",
    "alpha3": "TTO",
    "countryCallingCodes": [
      "+1 868"
    ],
    "currencies": [
      "TTD"
    ],
    "emoji": "🇹🇹",
    "ioc": "TTO",
    "languages": [
      "eng"
    ],
    "name": "Trinidad And Tobago",
    "status": "assigned"
  },
  {
    "alpha2": "TV",
    "alpha3": "TUV",
    "countryCallingCodes": [
      "+688"
    ],
    "currencies": [
      "AUD"
    ],
    "emoji": "🇹🇻",
    "ioc": "TUV",
    "languages": [
      "eng"
    ],
    "name": "Tuvalu",
    "status": "assigned"
  },
  {
    "alpha2": "TW",
    "alpha3": "TWN",
    "countryCallingCodes": [
      "+886"
    ],
    "currencies": [
      "TWD"
    ],
    "emoji": "🇹🇼",
    "ioc": "TPE",
    "languages": [
      "zho"
    ],
    "name": "Taiwan",
    "status": "assigned"
  },
  {
    "alpha2": "TZ",
    "alpha3": "TZA",
    "countryCallingCodes": [
      "+255"
    ],
    "currencies": [
      "TZS"
    ],
    "emoji": "🇹🇿",
    "ioc": "TAN",
    "languages": [
      "swa",
      "eng"
    ],
    "name": "Tanzania, United Republic Of",
    "status": "assigned"
  },
  {
    "alpha2": "UA",
    "alpha3": "UKR",
    "countryCallingCodes": [
      "+380"
    ],
    "currencies": [
      "UAH"
    ],
    "emoji": "🇺🇦",
    "ioc": "UKR",
    "languages": [
      "ukr",
      "rus"
    ],
    "name": "Ukraine",
    "status": "assigned"
  },
  {
    "alpha2": "UG",
    "alpha3": "UGA",
    "countryCallingCodes": [
      "+256"
    ],
    "currencies": [
      "UGX"
    ],
    "emoji": "🇺🇬",
    "ioc": "UGA",
    "languages": [
      "eng",
      "swa"
    ],
    "name": "Uganda",
    "status": "assigned"
  },
  {
    "alpha2": "UK",
    "alpha3": "",
    "countryCallingCodes": [],
    "currencies": [
      "GBP"
    ],
    "emoji": "",
    "ioc": "",
    "languages": [
      "eng",
      "cor",
      "gle",
      "gla",
      "cym"
    ],
    "name": "United Kingdom",
    "status": "reserved"
  },
  {
    "alpha2": "UM",
    "alpha3": "UMI",
    "countryCallingCodes": [
      "+1"
    ],
    "currencies": [
      "USD"
    ],
    "emoji": "🇺🇲",
    "ioc": "",
    "languages": [
      "eng"
    ],
    "name": "United States Minor Outlying Islands",
    "status": "assigned"
  },
  {
    "alpha2": "US",
    "alpha3": "USA",
    "countryCallingCodes": [
      "+1"
    ],
    "currencies": [
      "USD"
    ],
    "emoji": "🇺🇸",
    "ioc": "USA",
    "languages": [
      "eng"
    ],
    "name": "United States",
    "status": "assigned"
  },
  {
    "alpha2": "UY",
    "alpha3": "URY",
    "countryCallingCodes": [
      "+598"
    ],
    "currencies": [
      "UYU",
      "UYI"
    ],
    "emoji": "🇺🇾",
    "ioc": "URU",
    "languages": [
      "spa"
    ],
    "name": "Uruguay",
    "status": "assigned"
  },
  {
    "alpha2": "UZ",
    "alpha3": "UZB",
    "countryCallingCodes": [
      "+998"
    ],
    "currencies": [
      "UZS"
    ],
    "emoji": "🇺🇿",
    "ioc": "UZB",
    "languages": [
      "uzb",
      "rus"
    ],
    "name": "Uzbekistan",
    "status": "assigned"
  },
  {
    "alpha2": "VA",
    "alpha3": "VAT",
    "countryCallingCodes": [
      "+379",
      "+39"
    ],
    "currencies": [
      "EUR"
    ],
    "emoji": "🇻🇦",
    "ioc": "",
    "languages": [
      "ita"
    ],
    "name": "Vatican City State",
    "status": "assigned"
  },
  {
    "alpha2": "VC",
    "alpha3": "VCT",
    "countryCallingCodes": [
      "+1 784"
    ],
    "currencies": [
      "XCD"
    ],
    "emoji": "🇻🇨",
    "ioc": "VIN",
    "languages": [
      "eng"
    ],
    "name": "Saint Vincent And The Grenadines",
    "status": "assigned"
  },
  {
    "alpha2": "VD",
    "alpha3": "VDR",
    "countryCallingCodes": [],
    "currencies": [],
    "ioc": "",
    "languages": [],
    "name": "Viet-Nam, Democratic Republic of",
    "status": "deleted"
  },
  {
    "alpha2": "VE",
    "alpha3": "VEN",
    "countryCallingCodes": [
      "+58"
    ],
    "currencies": [
      "VEF"
    ],
    "emoji": "🇻🇪",
    "ioc": "VEN",
    "languages": [
      "spa"
    ],
    "name": "Venezuela, Bolivarian Republic Of",
    "status": "assigned"
  },
  {
    "alpha2": "VG",
    "alpha3": "VGB",
    "countryCallingCodes": [
      "+1 284"
    ],
    "currencies": [
      "USD"
    ],
    "emoji": "🇻🇬",
    "ioc": "IVB",
    "languages": [
      "eng"
    ],
    "name": "Virgin Islands (British)",
    "status": "assigned"
  },
  {
    "alpha2": "VI",
    "alpha3": "VIR",
    "countryCallingCodes": [
      "+1 340"
    ],
    "currencies": [
      "USD"
    ],
    "emoji": "🇻🇮",
    "ioc": "ISV",
    "languages": [
      "eng"
    ],
    "name": "Virgin Islands (US)",
    "status": "assigned"
  },
  {
    "alpha2": "VN",
    "alpha3": "VNM",
    "countryCallingCodes": [
      "+84"
    ],
    "currencies": [
      "VND"
    ],
    "emoji": "🇻🇳",
    "ioc": "VIE",
    "languages": [
      "vie"
    ],
    "name": "Viet Nam",
    "status": "assigned"
  },
  {
    "alpha2": "VU",
    "alpha3": "VUT",
    "countryCallingCodes": [
      "+678"
    ],
    "currencies": [
      "VUV"
    ],
    "emoji": "🇻🇺",
    "ioc": "VAN",
    "languages": [
      "bis",
      "eng",
      "fra"
    ],
    "name": "Vanuatu",
    "status": "assigned"
  },
  {
    "alpha2": "WF",
    "alpha3": "WLF",
    "countryCallingCodes": [
      "+681"
    ],
    "currencies": [
      "XPF"
    ],
    "emoji": "🇼🇫",
    "ioc": "",
    "languages": [
      "fra"
    ],
    "name": "Wallis And Futuna",
    "status": "assigned"
  },
  {
    "alpha2": "WK",
    "alpha3": "WAK",
    "countryCallingCodes": [],
    "currencies": [],
    "ioc": "",
    "languages": [],
    "name": "Wake Island",
    "status": "deleted"
  },
  {
    "alpha2": "WS",
    "alpha3": "WSM",
    "countryCallingCodes": [
      "+685"
    ],
    "currencies": [
      "WST"
    ],
    "emoji": "🇼🇸",
    "ioc": "SAM",
    "languages": [
      "eng",
      "smo"
    ],
    "name": "Samoa",
    "status": "assigned"
  },
  {
    "alpha2": "XK",
    "alpha3": "",
    "countryCallingCodes": [
      "+383"
    ],
    "currencies": [
      "EUR"
    ],
    "emoji": "",
    "ioc": "KOS",
    "languages": [
      "sqi",
      "srp",
      "bos",
      "tur",
      "rom"
    ],
    "name": "Kosovo",
    "status": "user assigned"
  },
  {
    "alpha2": "YD",
    "alpha3": "YMD",
    "countryCallingCodes": [],
    "currencies": [],
    "ioc": "",
    "languages": [],
    "name": "Yemen, Democratic",
    "status": "deleted"
  },
  {
    "alpha2": "YE",
    "alpha3": "YEM",
    "countryCallingCodes": [
      "+967"
    ],
    "currencies": [
      "YER"
    ],
    "emoji": "🇾🇪",
    "ioc": "YEM",
    "languages": [
      "ara"
    ],
    "name": "Yemen",
    "status": "assigned"
  },
  {
    "alpha2": "YT",
    "alpha3": "MYT",
    "countryCallingCodes": [
      "+262"
    ],
    "currencies": [
      "EUR"
    ],
    "emoji": "🇾🇹",
    "ioc": "",
    "languages": [
      "fra"
    ],
    "name": "Mayotte",
    "status": "assigned"
  },
  {
    "alpha2": "YU",
    "alpha3": "YUG",
    "countryCallingCodes": [],
    "currencies": [],
    "ioc": "",
    "languages": [],
    "name": "Yugoslavia",
    "status": "deleted"
  },
  {
    "alpha2": "ZA",
    "alpha3": "ZAF",
    "countryCallingCodes": [
      "+27"
    ],
    "currencies": [
      "ZAR"
    ],
    "emoji": "🇿🇦",
    "ioc": "RSA",
    "languages": [
      "afr",
      "eng",
      "nbl",
      "som",
      "tso",
      "ven",
      "xho",
      "zul"
    ],
    "name": "South Africa",
    "status": "assigned"
  },
  {
    "alpha2": "ZM",
    "alpha3": "ZMB",
    "countryCallingCodes": [
      "+260"
    ],
    "currencies": [
      "ZMW"
    ],
    "emoji": "🇿🇲",
    "ioc": "ZAM",
    "languages": [
      "eng"
    ],
    "name": "Zambia",
    "status": "assigned"
  },
  {
    "alpha2": "ZR",
    "alpha3": "ZAR",
    "countryCallingCodes": [],
    "currencies": [],
    "ioc": "",
    "languages": [],
    "name": "Zaire",
    "status": "deleted"
  },
  {
    "alpha2": "ZW",
    "alpha3": "ZWE",
    "countryCallingCodes": [
      "+263"
    ],
    "currencies": [
      "USD",
      "ZAR",
      "BWP",
      "GBP",
      "EUR"
    ],
    "emoji": "🇿🇼",
    "ioc": "ZIM",
    "languages": [
      "eng",
      "sna",
      "nde"
    ],
    "name": "Zimbabwe",
    "status": "assigned"
  }
]
;
},{}],"../node_modules/country-data/data/currencies.json":[function(require,module,exports) {
module.exports = [
  {
    "code": "AED",
    "decimals": 2,
    "name": "United Arab Emirates dirham",
    "number": "784"
  },
  {
    "code": "AFN",
    "decimals": 2,
    "name": "Afghan afghani",
    "number": "971"
  },
  {
    "code": "ALL",
    "decimals": 2,
    "name": "Albanian lek",
    "number": "8"
  },
  {
    "code": "AMD",
    "decimals": 2,
    "name": "Armenian dram",
    "number": "51"
  },
  {
    "code": "ANG",
    "decimals": 2,
    "name": "Netherlands Antillean guilder",
    "number": "532"
  },
  {
    "code": "AOA",
    "decimals": 2,
    "name": "Angolan kwanza",
    "number": "973"
  },
  {
    "code": "ARS",
    "decimals": 2,
    "name": "Argentine peso",
    "number": "32"
  },
  {
    "code": "AUD",
    "decimals": 2,
    "name": "Australian dollar",
    "number": "36"
  },
  {
    "code": "AWG",
    "decimals": 2,
    "name": "Aruban florin",
    "number": "533"
  },
  {
    "code": "AZN",
    "decimals": 2,
    "name": "Azerbaijani manat",
    "number": "944"
  },
  {
    "code": "BAM",
    "decimals": 2,
    "name": "Bosnia and Herzegovina convertible mark",
    "number": "977"
  },
  {
    "code": "BBD",
    "decimals": 2,
    "name": "Barbados dollar",
    "number": "52"
  },
  {
    "code": "BDT",
    "decimals": 2,
    "name": "Bangladeshi taka",
    "number": "50"
  },
  {
    "code": "BGN",
    "decimals": 2,
    "name": "Bulgarian lev",
    "number": "975"
  },
  {
    "code": "BHD",
    "decimals": 3,
    "name": "Bahraini dinar",
    "number": "48"
  },
  {
    "code": "BIF",
    "decimals": 0,
    "name": "Burundian franc",
    "number": "108"
  },
  {
    "code": "BMD",
    "decimals": 2,
    "name": "Bermudian dollar (customarily known as Bermuda dollar)",
    "number": "60"
  },
  {
    "code": "BND",
    "decimals": 2,
    "name": "Brunei dollar",
    "number": "96"
  },
  {
    "code": "BOB",
    "decimals": 2,
    "name": "Boliviano",
    "number": "68"
  },
  {
    "code": "BOV",
    "decimals": 2,
    "name": "Bolivian Mvdol (funds code)",
    "number": "984"
  },
  {
    "code": "BRL",
    "decimals": 2,
    "name": "Brazilian real",
    "number": "986"
  },
  {
    "code": "BSD",
    "decimals": 2,
    "name": "Bahamian dollar",
    "number": "44"
  },
  {
    "code": "BTN",
    "decimals": 2,
    "name": "Bhutanese ngultrum",
    "number": "64"
  },
  {
    "code": "BWP",
    "decimals": 2,
    "name": "Botswana pula",
    "number": "72"
  },
  {
    "code": "BYR",
    "decimals": 0,
    "name": "Belarusian ruble",
    "number": "974"
  },
  {
    "code": "BZD",
    "decimals": 2,
    "name": "Belize dollar",
    "number": "84"
  },
  {
    "code": "CAD",
    "decimals": 2,
    "name": "Canadian dollar",
    "number": "124"
  },
  {
    "code": "CDF",
    "decimals": 2,
    "name": "Congolese franc",
    "number": "976"
  },
  {
    "code": "CHE",
    "decimals": 2,
    "name": "WIR Euro (complementary currency)",
    "number": "947"
  },
  {
    "code": "CHF",
    "decimals": 2,
    "name": "Swiss franc",
    "number": "756"
  },
  {
    "code": "CHW",
    "decimals": 2,
    "name": "WIR Franc (complementary currency)",
    "number": "948"
  },
  {
    "code": "CLF",
    "decimals": 0,
    "name": "Unidad de Fomento (funds code)",
    "number": "990"
  },
  {
    "code": "CLP",
    "decimals": 0,
    "name": "Chilean peso",
    "number": "152"
  },
  {
    "code": "CNY",
    "decimals": 2,
    "name": "Chinese yuan",
    "number": "156"
  },
  {
    "code": "COP",
    "decimals": 2,
    "name": "Colombian peso",
    "number": "170"
  },
  {
    "code": "COU",
    "decimals": 2,
    "name": "Unidad de Valor Real",
    "number": "970"
  },
  {
    "code": "CRC",
    "decimals": 2,
    "name": "Costa Rican colon",
    "number": "188"
  },
  {
    "code": "CUC",
    "decimals": 2,
    "name": "Cuban convertible peso",
    "number": "931"
  },
  {
    "code": "CUP",
    "decimals": 2,
    "name": "Cuban peso",
    "number": "192"
  },
  {
    "code": "CVE",
    "decimals": 0,
    "name": "Cape Verde escudo",
    "number": "132"
  },
  {
    "code": "CZK",
    "decimals": 2,
    "name": "Czech koruna",
    "number": "203"
  },
  {
    "code": "DJF",
    "decimals": 0,
    "name": "Djiboutian franc",
    "number": "262"
  },
  {
    "code": "DKK",
    "decimals": 2,
    "name": "Danish krone",
    "number": "208"
  },
  {
    "code": "DOP",
    "decimals": 2,
    "name": "Dominican peso",
    "number": "214"
  },
  {
    "code": "DZD",
    "decimals": 2,
    "name": "Algerian dinar",
    "number": "12"
  },
  {
    "code": "EGP",
    "decimals": 2,
    "name": "Egyptian pound",
    "number": "818"
  },
  {
    "code": "ERN",
    "decimals": 2,
    "name": "Eritrean nakfa",
    "number": "232"
  },
  {
    "code": "ETB",
    "decimals": 2,
    "name": "Ethiopian birr",
    "number": "230"
  },
  {
    "code": "EUR",
    "decimals": 2,
    "name": "Euro",
    "number": "978"
  },
  {
    "code": "FJD",
    "decimals": 2,
    "name": "Fiji dollar",
    "number": "242"
  },
  {
    "code": "FKP",
    "decimals": 2,
    "name": "Falkland Islands pound",
    "number": "238"
  },
  {
    "code": "GBP",
    "decimals": 2,
    "name": "Pound sterling",
    "number": "826"
  },
  {
    "code": "GEL",
    "decimals": 2,
    "name": "Georgian lari",
    "number": "981"
  },
  {
    "code": "GHS",
    "decimals": 2,
    "name": "Ghanaian cedi",
    "number": "936"
  },
  {
    "code": "GIP",
    "decimals": 2,
    "name": "Gibraltar pound",
    "number": "292"
  },
  {
    "code": "GMD",
    "decimals": 2,
    "name": "Gambian dalasi",
    "number": "270"
  },
  {
    "code": "GNF",
    "decimals": 0,
    "name": "Guinean franc",
    "number": "324"
  },
  {
    "code": "GTQ",
    "decimals": 2,
    "name": "Guatemalan quetzal",
    "number": "320"
  },
  {
    "code": "GYD",
    "decimals": 2,
    "name": "Guyanese dollar",
    "number": "328"
  },
  {
    "code": "HKD",
    "decimals": 2,
    "name": "Hong Kong dollar",
    "number": "344"
  },
  {
    "code": "HNL",
    "decimals": 2,
    "name": "Honduran lempira",
    "number": "340"
  },
  {
    "code": "HRK",
    "decimals": 2,
    "name": "Croatian kuna",
    "number": "191"
  },
  {
    "code": "HTG",
    "decimals": 2,
    "name": "Haitian gourde",
    "number": "332"
  },
  {
    "code": "HUF",
    "decimals": 2,
    "name": "Hungarian forint",
    "number": "348"
  },
  {
    "code": "IDR",
    "decimals": 2,
    "name": "Indonesian rupiah",
    "number": "360"
  },
  {
    "code": "ILS",
    "decimals": 2,
    "name": "Israeli new shekel",
    "number": "376"
  },
  {
    "code": "INR",
    "decimals": 2,
    "name": "Indian rupee",
    "number": "356"
  },
  {
    "code": "IQD",
    "decimals": 3,
    "name": "Iraqi dinar",
    "number": "368"
  },
  {
    "code": "IRR",
    "decimals": 0,
    "name": "Iranian rial",
    "number": "364"
  },
  {
    "code": "ISK",
    "decimals": 0,
    "name": "Icelandic króna",
    "number": "352"
  },
  {
    "code": "JMD",
    "decimals": 2,
    "name": "Jamaican dollar",
    "number": "388"
  },
  {
    "code": "JOD",
    "decimals": 3,
    "name": "Jordanian dinar",
    "number": "400"
  },
  {
    "code": "JPY",
    "decimals": 0,
    "name": "Japanese yen",
    "number": "392"
  },
  {
    "code": "KES",
    "decimals": 2,
    "name": "Kenyan shilling",
    "number": "404"
  },
  {
    "code": "KGS",
    "decimals": 2,
    "name": "Kyrgyzstani som",
    "number": "417"
  },
  {
    "code": "KHR",
    "decimals": 2,
    "name": "Cambodian riel",
    "number": "116"
  },
  {
    "code": "KMF",
    "decimals": 0,
    "name": "Comoro franc",
    "number": "174"
  },
  {
    "code": "KPW",
    "decimals": 0,
    "name": "North Korean won",
    "number": "408"
  },
  {
    "code": "KRW",
    "decimals": 0,
    "name": "South Korean won",
    "number": "410"
  },
  {
    "code": "KWD",
    "decimals": 3,
    "name": "Kuwaiti dinar",
    "number": "414"
  },
  {
    "code": "KYD",
    "decimals": 2,
    "name": "Cayman Islands dollar",
    "number": "136"
  },
  {
    "code": "KZT",
    "decimals": 2,
    "name": "Kazakhstani tenge",
    "number": "398"
  },
  {
    "code": "LAK",
    "decimals": 0,
    "name": "Lao kip",
    "number": "418"
  },
  {
    "code": "LBP",
    "decimals": 0,
    "name": "Lebanese pound",
    "number": "422"
  },
  {
    "code": "LKR",
    "decimals": 2,
    "name": "Sri Lankan rupee",
    "number": "144"
  },
  {
    "code": "LRD",
    "decimals": 2,
    "name": "Liberian dollar",
    "number": "430"
  },
  {
    "code": "LSL",
    "decimals": 2,
    "name": "Lesotho loti",
    "number": "426"
  },
  {
    "code": "LTL",
    "decimals": 2,
    "name": "Lithuanian litas",
    "number": "440"
  },
  {
    "code": "LVL",
    "decimals": 2,
    "name": "Latvian lats",
    "number": "428"
  },
  {
    "code": "LYD",
    "decimals": 3,
    "name": "Libyan dinar",
    "number": "434"
  },
  {
    "code": "MAD",
    "decimals": 2,
    "name": "Moroccan dirham",
    "number": "504"
  },
  {
    "code": "MDL",
    "decimals": 2,
    "name": "Moldovan leu",
    "number": "498"
  },
  {
    "code": "MGA",
    "decimals": 0,
    "name": "Malagasy ariary",
    "number": "969"
  },
  {
    "code": "MKD",
    "decimals": 0,
    "name": "Macedonian denar",
    "number": "807"
  },
  {
    "code": "MMK",
    "decimals": 0,
    "name": "Myanma kyat",
    "number": "104"
  },
  {
    "code": "MNT",
    "decimals": 2,
    "name": "Mongolian tugrik",
    "number": "496"
  },
  {
    "code": "MOP",
    "decimals": 2,
    "name": "Macanese pataca",
    "number": "446"
  },
  {
    "code": "MRO",
    "decimals": 0,
    "name": "Mauritanian ouguiya",
    "number": "478"
  },
  {
    "code": "MUR",
    "decimals": 2,
    "name": "Mauritian rupee",
    "number": "480"
  },
  {
    "code": "MVR",
    "decimals": 2,
    "name": "Maldivian rufiyaa",
    "number": "462"
  },
  {
    "code": "MWK",
    "decimals": 2,
    "name": "Malawian kwacha",
    "number": "454"
  },
  {
    "code": "MXN",
    "decimals": 2,
    "name": "Mexican peso",
    "number": "484"
  },
  {
    "code": "MXV",
    "decimals": 2,
    "name": "Mexican Unidad de Inversion (UDI) (funds code)",
    "number": "979"
  },
  {
    "code": "MYR",
    "decimals": 2,
    "name": "Malaysian ringgit",
    "number": "458"
  },
  {
    "code": "MZN",
    "decimals": 2,
    "name": "Mozambican metical",
    "number": "943"
  },
  {
    "code": "NAD",
    "decimals": 2,
    "name": "Namibian dollar",
    "number": "516"
  },
  {
    "code": "NGN",
    "decimals": 2,
    "name": "Nigerian naira",
    "number": "566"
  },
  {
    "code": "NIO",
    "decimals": 2,
    "name": "Nicaraguan córdoba",
    "number": "558"
  },
  {
    "code": "NOK",
    "decimals": 2,
    "name": "Norwegian krone",
    "number": "578"
  },
  {
    "code": "NPR",
    "decimals": 2,
    "name": "Nepalese rupee",
    "number": "524"
  },
  {
    "code": "NZD",
    "decimals": 2,
    "name": "New Zealand dollar",
    "number": "554"
  },
  {
    "code": "OMR",
    "decimals": 3,
    "name": "Omani rial",
    "number": "512"
  },
  {
    "code": "PAB",
    "decimals": 2,
    "name": "Panamanian balboa",
    "number": "590"
  },
  {
    "code": "PEN",
    "decimals": 2,
    "name": "Peruvian nuevo sol",
    "number": "604"
  },
  {
    "code": "PGK",
    "decimals": 2,
    "name": "Papua New Guinean kina",
    "number": "598"
  },
  {
    "code": "PHP",
    "decimals": 2,
    "name": "Philippine peso",
    "number": "608"
  },
  {
    "code": "PKR",
    "decimals": 2,
    "name": "Pakistani rupee",
    "number": "586"
  },
  {
    "code": "PLN",
    "decimals": 2,
    "name": "Polish złoty",
    "number": "985"
  },
  {
    "code": "PYG",
    "decimals": 0,
    "name": "Paraguayan guaraní",
    "number": "600"
  },
  {
    "code": "QAR",
    "decimals": 2,
    "name": "Qatari riyal",
    "number": "634"
  },
  {
    "code": "RON",
    "decimals": 2,
    "name": "Romanian new leu",
    "number": "946"
  },
  {
    "code": "RSD",
    "decimals": 2,
    "name": "Serbian dinar",
    "number": "941"
  },
  {
    "code": "RUB",
    "decimals": 2,
    "name": "Russian rouble",
    "number": "643"
  },
  {
    "code": "RWF",
    "decimals": 0,
    "name": "Rwandan franc",
    "number": "646"
  },
  {
    "code": "SAR",
    "decimals": 2,
    "name": "Saudi riyal",
    "number": "682"
  },
  {
    "code": "SBD",
    "decimals": 2,
    "name": "Solomon Islands dollar",
    "number": "90"
  },
  {
    "code": "SCR",
    "decimals": 2,
    "name": "Seychelles rupee",
    "number": "690"
  },
  {
    "code": "SDG",
    "decimals": 2,
    "name": "Sudanese pound",
    "number": "938"
  },
  {
    "code": "SEK",
    "decimals": 2,
    "name": "Swedish krona/kronor",
    "number": "752"
  },
  {
    "code": "SGD",
    "decimals": 2,
    "name": "Singapore dollar",
    "number": "702"
  },
  {
    "code": "SHP",
    "decimals": 2,
    "name": "Saint Helena pound",
    "number": "654"
  },
  {
    "code": "SLL",
    "decimals": 0,
    "name": "Sierra Leonean leone",
    "number": "694"
  },
  {
    "code": "SOS",
    "decimals": 2,
    "name": "Somali shilling",
    "number": "706"
  },
  {
    "code": "SRD",
    "decimals": 2,
    "name": "Surinamese dollar",
    "number": "968"
  },
  {
    "code": "SSP",
    "decimals": 2,
    "name": "South Sudanese pound",
    "number": "728"
  },
  {
    "code": "STD",
    "decimals": 0,
    "name": "São Tomé and Príncipe dobra",
    "number": "678"
  },
  {
    "code": "SYP",
    "decimals": 2,
    "name": "Syrian pound",
    "number": "760"
  },
  {
    "code": "SZL",
    "decimals": 2,
    "name": "Swazi lilangeni",
    "number": "748"
  },
  {
    "code": "THB",
    "decimals": 2,
    "name": "Thai baht",
    "number": "764"
  },
  {
    "code": "TJS",
    "decimals": 2,
    "name": "Tajikistani somoni",
    "number": "972"
  },
  {
    "code": "TMT",
    "decimals": 2,
    "name": "Turkmenistani manat",
    "number": "934"
  },
  {
    "code": "TND",
    "decimals": 3,
    "name": "Tunisian dinar",
    "number": "788"
  },
  {
    "code": "TOP",
    "decimals": 2,
    "name": "Tongan paʻanga",
    "number": "776"
  },
  {
    "code": "TRY",
    "decimals": 2,
    "name": "Turkish lira",
    "number": "949"
  },
  {
    "code": "TTD",
    "decimals": 2,
    "name": "Trinidad and Tobago dollar",
    "number": "780"
  },
  {
    "code": "TWD",
    "decimals": 2,
    "name": "New Taiwan dollar",
    "number": "901"
  },
  {
    "code": "TZS",
    "decimals": 2,
    "name": "Tanzanian shilling",
    "number": "834"
  },
  {
    "code": "UAH",
    "decimals": 2,
    "name": "Ukrainian hryvnia",
    "number": "980"
  },
  {
    "code": "UGX",
    "decimals": 2,
    "name": "Ugandan shilling",
    "number": "800"
  },
  {
    "code": "USD",
    "decimals": 2,
    "name": "United States dollar",
    "number": "840"
  },
  {
    "code": "USN",
    "decimals": 2,
    "name": "United States dollar (next day) (funds code)",
    "number": "997"
  },
  {
    "code": "USS",
    "decimals": 2,
    "name": "United States dollar (same day) (funds code) (one source[who?] claims it is no longer used, but it is still on the ISO 4217-MA list)",
    "number": "998"
  },
  {
    "code": "UYI",
    "decimals": 0,
    "name": "Uruguay Peso en Unidades Indexadas (URUIURUI) (funds code)",
    "number": "940"
  },
  {
    "code": "UYU",
    "decimals": 2,
    "name": "Uruguayan peso",
    "number": "858"
  },
  {
    "code": "UZS",
    "decimals": 2,
    "name": "Uzbekistan som",
    "number": "860"
  },
  {
    "code": "VEF",
    "decimals": 2,
    "name": "Venezuelan bolívar fuerte",
    "number": "937"
  },
  {
    "code": "VND",
    "decimals": 0,
    "name": "Vietnamese dong",
    "number": "704"
  },
  {
    "code": "VUV",
    "decimals": 0,
    "name": "Vanuatu vatu",
    "number": "548"
  },
  {
    "code": "WST",
    "decimals": 2,
    "name": "Samoan tala",
    "number": "882"
  },
  {
    "code": "XAF",
    "decimals": 0,
    "name": "CFA franc BEAC",
    "number": "950"
  },
  {
    "code": "XAG",
    "decimals": null,
    "name": "Silver (one troy ounce)",
    "number": "961"
  },
  {
    "code": "XAU",
    "decimals": null,
    "name": "Gold (one troy ounce)",
    "number": "959"
  },
  {
    "code": "XBA",
    "decimals": null,
    "name": "European Composite Unit (EURCO) (bond market unit)",
    "number": "955"
  },
  {
    "code": "XBB",
    "decimals": null,
    "name": "European Monetary Unit (E.M.U.-6) (bond market unit)",
    "number": "956"
  },
  {
    "code": "XBC",
    "decimals": null,
    "name": "European Unit of Account 9 (E.U.A.-9) (bond market unit)",
    "number": "957"
  },
  {
    "code": "XBD",
    "decimals": null,
    "name": "European Unit of Account 17 (E.U.A.-17) (bond market unit)",
    "number": "958"
  },
  {
    "code": "XCD",
    "decimals": 2,
    "name": "East Caribbean dollar",
    "number": "951"
  },
  {
    "code": "XDR",
    "decimals": null,
    "name": "Special drawing rights",
    "number": "960"
  },
  {
    "code": "XFU",
    "decimals": null,
    "name": "UIC franc (special settlement currency)",
    "number": "Nil"
  },
  {
    "code": "XOF",
    "decimals": 0,
    "name": "CFA franc BCEAO",
    "number": "952"
  },
  {
    "code": "XPD",
    "decimals": null,
    "name": "Palladium (one troy ounce)",
    "number": "964"
  },
  {
    "code": "XPF",
    "decimals": 0,
    "name": "CFP franc",
    "number": "953"
  },
  {
    "code": "XPT",
    "decimals": null,
    "name": "Platinum (one troy ounce)",
    "number": "962"
  },
  {
    "code": "XTS",
    "decimals": null,
    "name": "Code reserved for testing purposes",
    "number": "963"
  },
  {
    "code": "XXX",
    "decimals": null,
    "name": "No currency",
    "number": "999"
  },
  {
    "code": "YER",
    "decimals": 2,
    "name": "Yemeni rial",
    "number": "886"
  },
  {
    "code": "ZAR",
    "decimals": 2,
    "name": "South African rand",
    "number": "710"
  },
  {
    "code": "ZMW",
    "decimals": 2,
    "name": "Zambian kwacha",
    "number": "967"
  }
]
;
},{}],"../node_modules/country-data/data/languages.json":[function(require,module,exports) {
module.exports = [
  {
    "alpha2": "aa",
    "alpha3": "aar",
    "bibliographic": "",
    "name": "Afar"
  },
  {
    "alpha2": "ab",
    "alpha3": "abk",
    "bibliographic": "",
    "name": "Abkhazian"
  },
  {
    "alpha2": "",
    "alpha3": "ace",
    "bibliographic": "",
    "name": "Achinese"
  },
  {
    "alpha2": "",
    "alpha3": "ach",
    "bibliographic": "",
    "name": "Acoli"
  },
  {
    "alpha2": "",
    "alpha3": "ada",
    "bibliographic": "",
    "name": "Adangme"
  },
  {
    "alpha2": "",
    "alpha3": "ady",
    "bibliographic": "",
    "name": "Adygei"
  },
  {
    "alpha2": "",
    "alpha3": "ady",
    "bibliographic": "",
    "name": "Adyghe"
  },
  {
    "alpha2": "",
    "alpha3": "afa",
    "bibliographic": "",
    "name": "Afro-Asiatic languages"
  },
  {
    "alpha2": "",
    "alpha3": "afh",
    "bibliographic": "",
    "name": "Afrihili"
  },
  {
    "alpha2": "af",
    "alpha3": "afr",
    "bibliographic": "",
    "name": "Afrikaans"
  },
  {
    "alpha2": "",
    "alpha3": "ain",
    "bibliographic": "",
    "name": "Ainu"
  },
  {
    "alpha2": "ak",
    "alpha3": "aka",
    "bibliographic": "",
    "name": "Akan"
  },
  {
    "alpha2": "",
    "alpha3": "akk",
    "bibliographic": "",
    "name": "Akkadian"
  },
  {
    "alpha2": "",
    "alpha3": "ale",
    "bibliographic": "",
    "name": "Aleut"
  },
  {
    "alpha2": "",
    "alpha3": "alg",
    "bibliographic": "",
    "name": "Algonquian languages"
  },
  {
    "alpha2": "",
    "alpha3": "alt",
    "bibliographic": "",
    "name": "Southern Altai"
  },
  {
    "alpha2": "am",
    "alpha3": "amh",
    "bibliographic": "",
    "name": "Amharic"
  },
  {
    "alpha2": "",
    "alpha3": "ang",
    "bibliographic": "",
    "name": "English, Old (ca.450-1100)"
  },
  {
    "alpha2": "",
    "alpha3": "anp",
    "bibliographic": "",
    "name": "Angika"
  },
  {
    "alpha2": "",
    "alpha3": "apa",
    "bibliographic": "",
    "name": "Apache languages"
  },
  {
    "alpha2": "ar",
    "alpha3": "ara",
    "bibliographic": "",
    "name": "Arabic"
  },
  {
    "alpha2": "",
    "alpha3": "arc",
    "bibliographic": "",
    "name": "Imperial Aramaic (700-300 BCE)"
  },
  {
    "alpha2": "",
    "alpha3": "arc",
    "bibliographic": "",
    "name": "Official Aramaic (700-300 BCE)"
  },
  {
    "alpha2": "an",
    "alpha3": "arg",
    "bibliographic": "",
    "name": "Aragonese"
  },
  {
    "alpha2": "",
    "alpha3": "arn",
    "bibliographic": "",
    "name": "Mapuche"
  },
  {
    "alpha2": "",
    "alpha3": "arn",
    "bibliographic": "",
    "name": "Mapudungun"
  },
  {
    "alpha2": "",
    "alpha3": "arp",
    "bibliographic": "",
    "name": "Arapaho"
  },
  {
    "alpha2": "",
    "alpha3": "art",
    "bibliographic": "",
    "name": "Artificial languages"
  },
  {
    "alpha2": "",
    "alpha3": "arw",
    "bibliographic": "",
    "name": "Arawak"
  },
  {
    "alpha2": "as",
    "alpha3": "asm",
    "bibliographic": "",
    "name": "Assamese"
  },
  {
    "alpha2": "",
    "alpha3": "ast",
    "bibliographic": "",
    "name": "Asturian"
  },
  {
    "alpha2": "",
    "alpha3": "ast",
    "bibliographic": "",
    "name": "Asturleonese"
  },
  {
    "alpha2": "",
    "alpha3": "ast",
    "bibliographic": "",
    "name": "Bable"
  },
  {
    "alpha2": "",
    "alpha3": "ast",
    "bibliographic": "",
    "name": "Leonese"
  },
  {
    "alpha2": "",
    "alpha3": "ath",
    "bibliographic": "",
    "name": "Athapascan languages"
  },
  {
    "alpha2": "",
    "alpha3": "aus",
    "bibliographic": "",
    "name": "Australian languages"
  },
  {
    "alpha2": "av",
    "alpha3": "ava",
    "bibliographic": "",
    "name": "Avaric"
  },
  {
    "alpha2": "ae",
    "alpha3": "ave",
    "bibliographic": "",
    "name": "Avestan"
  },
  {
    "alpha2": "",
    "alpha3": "awa",
    "bibliographic": "",
    "name": "Awadhi"
  },
  {
    "alpha2": "ay",
    "alpha3": "aym",
    "bibliographic": "",
    "name": "Aymara"
  },
  {
    "alpha2": "az",
    "alpha3": "aze",
    "bibliographic": "",
    "name": "Azerbaijani"
  },
  {
    "alpha2": "",
    "alpha3": "bad",
    "bibliographic": "",
    "name": "Banda languages"
  },
  {
    "alpha2": "",
    "alpha3": "bai",
    "bibliographic": "",
    "name": "Bamileke languages"
  },
  {
    "alpha2": "ba",
    "alpha3": "bak",
    "bibliographic": "",
    "name": "Bashkir"
  },
  {
    "alpha2": "",
    "alpha3": "bal",
    "bibliographic": "",
    "name": "Baluchi"
  },
  {
    "alpha2": "bm",
    "alpha3": "bam",
    "bibliographic": "",
    "name": "Bambara"
  },
  {
    "alpha2": "",
    "alpha3": "ban",
    "bibliographic": "",
    "name": "Balinese"
  },
  {
    "alpha2": "",
    "alpha3": "bas",
    "bibliographic": "",
    "name": "Basa"
  },
  {
    "alpha2": "",
    "alpha3": "bat",
    "bibliographic": "",
    "name": "Baltic languages"
  },
  {
    "alpha2": "",
    "alpha3": "bej",
    "bibliographic": "",
    "name": "Bedawiyet"
  },
  {
    "alpha2": "",
    "alpha3": "bej",
    "bibliographic": "",
    "name": "Beja"
  },
  {
    "alpha2": "be",
    "alpha3": "bel",
    "bibliographic": "",
    "name": "Belarusian"
  },
  {
    "alpha2": "",
    "alpha3": "bem",
    "bibliographic": "",
    "name": "Bemba"
  },
  {
    "alpha2": "bn",
    "alpha3": "ben",
    "bibliographic": "",
    "name": "Bengali"
  },
  {
    "alpha2": "",
    "alpha3": "ber",
    "bibliographic": "",
    "name": "Berber languages"
  },
  {
    "alpha2": "",
    "alpha3": "bho",
    "bibliographic": "",
    "name": "Bhojpuri"
  },
  {
    "alpha2": "bh",
    "alpha3": "bih",
    "bibliographic": "",
    "name": "Bihari languages"
  },
  {
    "alpha2": "",
    "alpha3": "bik",
    "bibliographic": "",
    "name": "Bikol"
  },
  {
    "alpha2": "",
    "alpha3": "bin",
    "bibliographic": "",
    "name": "Bini"
  },
  {
    "alpha2": "",
    "alpha3": "bin",
    "bibliographic": "",
    "name": "Edo"
  },
  {
    "alpha2": "bi",
    "alpha3": "bis",
    "bibliographic": "",
    "name": "Bislama"
  },
  {
    "alpha2": "",
    "alpha3": "bla",
    "bibliographic": "",
    "name": "Siksika"
  },
  {
    "alpha2": "",
    "alpha3": "bnt",
    "bibliographic": "",
    "name": "Bantu languages"
  },
  {
    "alpha2": "bo",
    "alpha3": "bod",
    "bibliographic": "tib",
    "name": "Tibetan"
  },
  {
    "alpha2": "bs",
    "alpha3": "bos",
    "bibliographic": "",
    "name": "Bosnian"
  },
  {
    "alpha2": "",
    "alpha3": "bra",
    "bibliographic": "",
    "name": "Braj"
  },
  {
    "alpha2": "br",
    "alpha3": "bre",
    "bibliographic": "",
    "name": "Breton"
  },
  {
    "alpha2": "",
    "alpha3": "btk",
    "bibliographic": "",
    "name": "Batak languages"
  },
  {
    "alpha2": "",
    "alpha3": "bua",
    "bibliographic": "",
    "name": "Buriat"
  },
  {
    "alpha2": "",
    "alpha3": "bug",
    "bibliographic": "",
    "name": "Buginese"
  },
  {
    "alpha2": "bg",
    "alpha3": "bul",
    "bibliographic": "",
    "name": "Bulgarian"
  },
  {
    "alpha2": "",
    "alpha3": "byn",
    "bibliographic": "",
    "name": "Bilin"
  },
  {
    "alpha2": "",
    "alpha3": "byn",
    "bibliographic": "",
    "name": "Blin"
  },
  {
    "alpha2": "",
    "alpha3": "cad",
    "bibliographic": "",
    "name": "Caddo"
  },
  {
    "alpha2": "",
    "alpha3": "cai",
    "bibliographic": "",
    "name": "Central American Indian languages"
  },
  {
    "alpha2": "",
    "alpha3": "car",
    "bibliographic": "",
    "name": "Galibi Carib"
  },
  {
    "alpha2": "ca",
    "alpha3": "cat",
    "bibliographic": "",
    "name": "Catalan"
  },
  {
    "alpha2": "ca",
    "alpha3": "cat",
    "bibliographic": "",
    "name": "Valencian"
  },
  {
    "alpha2": "",
    "alpha3": "cau",
    "bibliographic": "",
    "name": "Caucasian languages"
  },
  {
    "alpha2": "",
    "alpha3": "ceb",
    "bibliographic": "",
    "name": "Cebuano"
  },
  {
    "alpha2": "",
    "alpha3": "cel",
    "bibliographic": "",
    "name": "Celtic languages"
  },
  {
    "alpha2": "cs",
    "alpha3": "ces",
    "bibliographic": "cze",
    "name": "Czech"
  },
  {
    "alpha2": "ch",
    "alpha3": "cha",
    "bibliographic": "",
    "name": "Chamorro"
  },
  {
    "alpha2": "",
    "alpha3": "chb",
    "bibliographic": "",
    "name": "Chibcha"
  },
  {
    "alpha2": "ce",
    "alpha3": "che",
    "bibliographic": "",
    "name": "Chechen"
  },
  {
    "alpha2": "",
    "alpha3": "chg",
    "bibliographic": "",
    "name": "Chagatai"
  },
  {
    "alpha2": "",
    "alpha3": "chk",
    "bibliographic": "",
    "name": "Chuukese"
  },
  {
    "alpha2": "",
    "alpha3": "chm",
    "bibliographic": "",
    "name": "Mari"
  },
  {
    "alpha2": "",
    "alpha3": "chn",
    "bibliographic": "",
    "name": "Chinook jargon"
  },
  {
    "alpha2": "",
    "alpha3": "cho",
    "bibliographic": "",
    "name": "Choctaw"
  },
  {
    "alpha2": "",
    "alpha3": "chp",
    "bibliographic": "",
    "name": "Chipewyan"
  },
  {
    "alpha2": "",
    "alpha3": "chp",
    "bibliographic": "",
    "name": "Dene Suline"
  },
  {
    "alpha2": "",
    "alpha3": "chr",
    "bibliographic": "",
    "name": "Cherokee"
  },
  {
    "alpha2": "cu",
    "alpha3": "chu",
    "bibliographic": "",
    "name": "Church Slavic"
  },
  {
    "alpha2": "cu",
    "alpha3": "chu",
    "bibliographic": "",
    "name": "Church Slavonic"
  },
  {
    "alpha2": "cu",
    "alpha3": "chu",
    "bibliographic": "",
    "name": "Old Bulgarian"
  },
  {
    "alpha2": "cu",
    "alpha3": "chu",
    "bibliographic": "",
    "name": "Old Church Slavonic"
  },
  {
    "alpha2": "cu",
    "alpha3": "chu",
    "bibliographic": "",
    "name": "Old Slavonic"
  },
  {
    "alpha2": "cv",
    "alpha3": "chv",
    "bibliographic": "",
    "name": "Chuvash"
  },
  {
    "alpha2": "",
    "alpha3": "chy",
    "bibliographic": "",
    "name": "Cheyenne"
  },
  {
    "alpha2": "",
    "alpha3": "cmc",
    "bibliographic": "",
    "name": "Chamic languages"
  },
  {
    "alpha2": "",
    "alpha3": "cop",
    "bibliographic": "",
    "name": "Coptic"
  },
  {
    "alpha2": "kw",
    "alpha3": "cor",
    "bibliographic": "",
    "name": "Cornish"
  },
  {
    "alpha2": "co",
    "alpha3": "cos",
    "bibliographic": "",
    "name": "Corsican"
  },
  {
    "alpha2": "",
    "alpha3": "cpe",
    "bibliographic": "",
    "name": "Creoles and pidgins, English based"
  },
  {
    "alpha2": "",
    "alpha3": "cpf",
    "bibliographic": "",
    "name": "Creoles and pidgins, French-based"
  },
  {
    "alpha2": "",
    "alpha3": "cpp",
    "bibliographic": "",
    "name": "Creoles and pidgins, Portuguese-based"
  },
  {
    "alpha2": "cr",
    "alpha3": "cre",
    "bibliographic": "",
    "name": "Cree"
  },
  {
    "alpha2": "",
    "alpha3": "crh",
    "bibliographic": "",
    "name": "Crimean Tatar"
  },
  {
    "alpha2": "",
    "alpha3": "crh",
    "bibliographic": "",
    "name": "Crimean Turkish"
  },
  {
    "alpha2": "",
    "alpha3": "crp",
    "bibliographic": "",
    "name": "Creoles and pidgins"
  },
  {
    "alpha2": "",
    "alpha3": "csb",
    "bibliographic": "",
    "name": "Kashubian"
  },
  {
    "alpha2": "",
    "alpha3": "cus",
    "bibliographic": "",
    "name": "Cushitic languages"
  },
  {
    "alpha2": "cy",
    "alpha3": "cym",
    "bibliographic": "wel",
    "name": "Welsh"
  },
  {
    "alpha2": "",
    "alpha3": "dak",
    "bibliographic": "",
    "name": "Dakota"
  },
  {
    "alpha2": "da",
    "alpha3": "dan",
    "bibliographic": "",
    "name": "Danish"
  },
  {
    "alpha2": "",
    "alpha3": "dar",
    "bibliographic": "",
    "name": "Dargwa"
  },
  {
    "alpha2": "",
    "alpha3": "day",
    "bibliographic": "",
    "name": "Land Dayak languages"
  },
  {
    "alpha2": "",
    "alpha3": "del",
    "bibliographic": "",
    "name": "Delaware"
  },
  {
    "alpha2": "",
    "alpha3": "den",
    "bibliographic": "",
    "name": "Slave (Athapascan)"
  },
  {
    "alpha2": "de",
    "alpha3": "deu",
    "bibliographic": "ger",
    "name": "German"
  },
  {
    "alpha2": "",
    "alpha3": "dgr",
    "bibliographic": "",
    "name": "Dogrib"
  },
  {
    "alpha2": "",
    "alpha3": "din",
    "bibliographic": "",
    "name": "Dinka"
  },
  {
    "alpha2": "dv",
    "alpha3": "div",
    "bibliographic": "",
    "name": "Dhivehi"
  },
  {
    "alpha2": "dv",
    "alpha3": "div",
    "bibliographic": "",
    "name": "Divehi"
  },
  {
    "alpha2": "dv",
    "alpha3": "div",
    "bibliographic": "",
    "name": "Maldivian"
  },
  {
    "alpha2": "",
    "alpha3": "doi",
    "bibliographic": "",
    "name": "Dogri"
  },
  {
    "alpha2": "",
    "alpha3": "dra",
    "bibliographic": "",
    "name": "Dravidian languages"
  },
  {
    "alpha2": "",
    "alpha3": "dsb",
    "bibliographic": "",
    "name": "Lower Sorbian"
  },
  {
    "alpha2": "",
    "alpha3": "dua",
    "bibliographic": "",
    "name": "Duala"
  },
  {
    "alpha2": "",
    "alpha3": "dum",
    "bibliographic": "",
    "name": "Dutch, Middle (ca.1050-1350)"
  },
  {
    "alpha2": "",
    "alpha3": "dyu",
    "bibliographic": "",
    "name": "Dyula"
  },
  {
    "alpha2": "dz",
    "alpha3": "dzo",
    "bibliographic": "",
    "name": "Dzongkha"
  },
  {
    "alpha2": "",
    "alpha3": "efi",
    "bibliographic": "",
    "name": "Efik"
  },
  {
    "alpha2": "",
    "alpha3": "egy",
    "bibliographic": "",
    "name": "Egyptian (Ancient)"
  },
  {
    "alpha2": "",
    "alpha3": "eka",
    "bibliographic": "",
    "name": "Ekajuk"
  },
  {
    "alpha2": "el",
    "alpha3": "ell",
    "bibliographic": "gre",
    "name": "Greek, Modern (1453-)"
  },
  {
    "alpha2": "",
    "alpha3": "elx",
    "bibliographic": "",
    "name": "Elamite"
  },
  {
    "alpha2": "en",
    "alpha3": "eng",
    "bibliographic": "",
    "name": "English"
  },
  {
    "alpha2": "",
    "alpha3": "enm",
    "bibliographic": "",
    "name": "English, Middle (1100-1500)"
  },
  {
    "alpha2": "eo",
    "alpha3": "epo",
    "bibliographic": "",
    "name": "Esperanto"
  },
  {
    "alpha2": "et",
    "alpha3": "est",
    "bibliographic": "",
    "name": "Estonian"
  },
  {
    "alpha2": "eu",
    "alpha3": "eus",
    "bibliographic": "baq",
    "name": "Basque"
  },
  {
    "alpha2": "ee",
    "alpha3": "ewe",
    "bibliographic": "",
    "name": "Ewe"
  },
  {
    "alpha2": "",
    "alpha3": "ewo",
    "bibliographic": "",
    "name": "Ewondo"
  },
  {
    "alpha2": "",
    "alpha3": "fan",
    "bibliographic": "",
    "name": "Fang"
  },
  {
    "alpha2": "fo",
    "alpha3": "fao",
    "bibliographic": "",
    "name": "Faroese"
  },
  {
    "alpha2": "fa",
    "alpha3": "fas",
    "bibliographic": "per",
    "name": "Persian"
  },
  {
    "alpha2": "",
    "alpha3": "fat",
    "bibliographic": "",
    "name": "Fanti"
  },
  {
    "alpha2": "fj",
    "alpha3": "fij",
    "bibliographic": "",
    "name": "Fijian"
  },
  {
    "alpha2": "",
    "alpha3": "fil",
    "bibliographic": "",
    "name": "Filipino"
  },
  {
    "alpha2": "",
    "alpha3": "fil",
    "bibliographic": "",
    "name": "Pilipino"
  },
  {
    "alpha2": "fi",
    "alpha3": "fin",
    "bibliographic": "",
    "name": "Finnish"
  },
  {
    "alpha2": "",
    "alpha3": "fiu",
    "bibliographic": "",
    "name": "Finno-Ugrian languages"
  },
  {
    "alpha2": "",
    "alpha3": "fon",
    "bibliographic": "",
    "name": "Fon"
  },
  {
    "alpha2": "fr",
    "alpha3": "fra",
    "bibliographic": "fre",
    "name": "French"
  },
  {
    "alpha2": "",
    "alpha3": "frm",
    "bibliographic": "",
    "name": "French, Middle (ca.1400-1600)"
  },
  {
    "alpha2": "",
    "alpha3": "fro",
    "bibliographic": "",
    "name": "French, Old (842-ca.1400)"
  },
  {
    "alpha2": "",
    "alpha3": "frr",
    "bibliographic": "",
    "name": "Northern Frisian"
  },
  {
    "alpha2": "",
    "alpha3": "frs",
    "bibliographic": "",
    "name": "Eastern Frisian"
  },
  {
    "alpha2": "fy",
    "alpha3": "fry",
    "bibliographic": "",
    "name": "Western Frisian"
  },
  {
    "alpha2": "ff",
    "alpha3": "ful",
    "bibliographic": "",
    "name": "Fulah"
  },
  {
    "alpha2": "",
    "alpha3": "fur",
    "bibliographic": "",
    "name": "Friulian"
  },
  {
    "alpha2": "",
    "alpha3": "gaa",
    "bibliographic": "",
    "name": "Ga"
  },
  {
    "alpha2": "",
    "alpha3": "gay",
    "bibliographic": "",
    "name": "Gayo"
  },
  {
    "alpha2": "",
    "alpha3": "gba",
    "bibliographic": "",
    "name": "Gbaya"
  },
  {
    "alpha2": "",
    "alpha3": "gem",
    "bibliographic": "",
    "name": "Germanic languages"
  },
  {
    "alpha2": "",
    "alpha3": "gez",
    "bibliographic": "",
    "name": "Geez"
  },
  {
    "alpha2": "",
    "alpha3": "gil",
    "bibliographic": "",
    "name": "Gilbertese"
  },
  {
    "alpha2": "gd",
    "alpha3": "gla",
    "bibliographic": "",
    "name": "Gaelic"
  },
  {
    "alpha2": "gd",
    "alpha3": "gla",
    "bibliographic": "",
    "name": "Scottish Gaelic"
  },
  {
    "alpha2": "ga",
    "alpha3": "gle",
    "bibliographic": "",
    "name": "Irish"
  },
  {
    "alpha2": "gl",
    "alpha3": "glg",
    "bibliographic": "",
    "name": "Galician"
  },
  {
    "alpha2": "gv",
    "alpha3": "glv",
    "bibliographic": "",
    "name": "Manx"
  },
  {
    "alpha2": "",
    "alpha3": "gmh",
    "bibliographic": "",
    "name": "German, Middle High (ca.1050-1500)"
  },
  {
    "alpha2": "",
    "alpha3": "goh",
    "bibliographic": "",
    "name": "German, Old High (ca.750-1050)"
  },
  {
    "alpha2": "",
    "alpha3": "gon",
    "bibliographic": "",
    "name": "Gondi"
  },
  {
    "alpha2": "",
    "alpha3": "gor",
    "bibliographic": "",
    "name": "Gorontalo"
  },
  {
    "alpha2": "",
    "alpha3": "got",
    "bibliographic": "",
    "name": "Gothic"
  },
  {
    "alpha2": "",
    "alpha3": "grb",
    "bibliographic": "",
    "name": "Grebo"
  },
  {
    "alpha2": "",
    "alpha3": "grc",
    "bibliographic": "",
    "name": "Greek, Ancient (to 1453)"
  },
  {
    "alpha2": "gn",
    "alpha3": "grn",
    "bibliographic": "",
    "name": "Guarani"
  },
  {
    "alpha2": "",
    "alpha3": "gsw",
    "bibliographic": "",
    "name": "Alemannic"
  },
  {
    "alpha2": "",
    "alpha3": "gsw",
    "bibliographic": "",
    "name": "Alsatian"
  },
  {
    "alpha2": "",
    "alpha3": "gsw",
    "bibliographic": "",
    "name": "Swiss German"
  },
  {
    "alpha2": "gu",
    "alpha3": "guj",
    "bibliographic": "",
    "name": "Gujarati"
  },
  {
    "alpha2": "",
    "alpha3": "gwi",
    "bibliographic": "",
    "name": "Gwich'in"
  },
  {
    "alpha2": "",
    "alpha3": "hai",
    "bibliographic": "",
    "name": "Haida"
  },
  {
    "alpha2": "ht",
    "alpha3": "hat",
    "bibliographic": "",
    "name": "Haitian"
  },
  {
    "alpha2": "ht",
    "alpha3": "hat",
    "bibliographic": "",
    "name": "Haitian Creole"
  },
  {
    "alpha2": "ha",
    "alpha3": "hau",
    "bibliographic": "",
    "name": "Hausa"
  },
  {
    "alpha2": "",
    "alpha3": "haw",
    "bibliographic": "",
    "name": "Hawaiian"
  },
  {
    "alpha2": "he",
    "alpha3": "heb",
    "bibliographic": "",
    "name": "Hebrew"
  },
  {
    "alpha2": "hz",
    "alpha3": "her",
    "bibliographic": "",
    "name": "Herero"
  },
  {
    "alpha2": "",
    "alpha3": "hil",
    "bibliographic": "",
    "name": "Hiligaynon"
  },
  {
    "alpha2": "",
    "alpha3": "him",
    "bibliographic": "",
    "name": "Himachali languages"
  },
  {
    "alpha2": "",
    "alpha3": "him",
    "bibliographic": "",
    "name": "Western Pahari languages"
  },
  {
    "alpha2": "hi",
    "alpha3": "hin",
    "bibliographic": "",
    "name": "Hindi"
  },
  {
    "alpha2": "",
    "alpha3": "hit",
    "bibliographic": "",
    "name": "Hittite"
  },
  {
    "alpha2": "",
    "alpha3": "hmn",
    "bibliographic": "",
    "name": "Hmong"
  },
  {
    "alpha2": "",
    "alpha3": "hmn",
    "bibliographic": "",
    "name": "Mong"
  },
  {
    "alpha2": "ho",
    "alpha3": "hmo",
    "bibliographic": "",
    "name": "Hiri Motu"
  },
  {
    "alpha2": "hr",
    "alpha3": "hrv",
    "bibliographic": "",
    "name": "Croatian"
  },
  {
    "alpha2": "",
    "alpha3": "hsb",
    "bibliographic": "",
    "name": "Upper Sorbian"
  },
  {
    "alpha2": "hu",
    "alpha3": "hun",
    "bibliographic": "",
    "name": "Hungarian"
  },
  {
    "alpha2": "",
    "alpha3": "hup",
    "bibliographic": "",
    "name": "Hupa"
  },
  {
    "alpha2": "hy",
    "alpha3": "hye",
    "bibliographic": "arm",
    "name": "Armenian"
  },
  {
    "alpha2": "",
    "alpha3": "iba",
    "bibliographic": "",
    "name": "Iban"
  },
  {
    "alpha2": "ig",
    "alpha3": "ibo",
    "bibliographic": "",
    "name": "Igbo"
  },
  {
    "alpha2": "io",
    "alpha3": "ido",
    "bibliographic": "",
    "name": "Ido"
  },
  {
    "alpha2": "ii",
    "alpha3": "iii",
    "bibliographic": "",
    "name": "Nuosu"
  },
  {
    "alpha2": "ii",
    "alpha3": "iii",
    "bibliographic": "",
    "name": "Sichuan Yi"
  },
  {
    "alpha2": "",
    "alpha3": "ijo",
    "bibliographic": "",
    "name": "Ijo languages"
  },
  {
    "alpha2": "iu",
    "alpha3": "iku",
    "bibliographic": "",
    "name": "Inuktitut"
  },
  {
    "alpha2": "ie",
    "alpha3": "ile",
    "bibliographic": "",
    "name": "Interlingue"
  },
  {
    "alpha2": "ie",
    "alpha3": "ile",
    "bibliographic": "",
    "name": "Occidental"
  },
  {
    "alpha2": "",
    "alpha3": "ilo",
    "bibliographic": "",
    "name": "Iloko"
  },
  {
    "alpha2": "ia",
    "alpha3": "ina",
    "bibliographic": "",
    "name": "Interlingua (International Auxiliary Language Association)"
  },
  {
    "alpha2": "",
    "alpha3": "inc",
    "bibliographic": "",
    "name": "Indic languages"
  },
  {
    "alpha2": "id",
    "alpha3": "ind",
    "bibliographic": "",
    "name": "Indonesian"
  },
  {
    "alpha2": "",
    "alpha3": "ine",
    "bibliographic": "",
    "name": "Indo-European languages"
  },
  {
    "alpha2": "",
    "alpha3": "inh",
    "bibliographic": "",
    "name": "Ingush"
  },
  {
    "alpha2": "ik",
    "alpha3": "ipk",
    "bibliographic": "",
    "name": "Inupiaq"
  },
  {
    "alpha2": "",
    "alpha3": "ira",
    "bibliographic": "",
    "name": "Iranian languages"
  },
  {
    "alpha2": "",
    "alpha3": "iro",
    "bibliographic": "",
    "name": "Iroquoian languages"
  },
  {
    "alpha2": "is",
    "alpha3": "isl",
    "bibliographic": "ice",
    "name": "Icelandic"
  },
  {
    "alpha2": "it",
    "alpha3": "ita",
    "bibliographic": "",
    "name": "Italian"
  },
  {
    "alpha2": "jv",
    "alpha3": "jav",
    "bibliographic": "",
    "name": "Javanese"
  },
  {
    "alpha2": "",
    "alpha3": "jbo",
    "bibliographic": "",
    "name": "Lojban"
  },
  {
    "alpha2": "ja",
    "alpha3": "jpn",
    "bibliographic": "",
    "name": "Japanese"
  },
  {
    "alpha2": "",
    "alpha3": "jpr",
    "bibliographic": "",
    "name": "Judeo-Persian"
  },
  {
    "alpha2": "",
    "alpha3": "jrb",
    "bibliographic": "",
    "name": "Judeo-Arabic"
  },
  {
    "alpha2": "",
    "alpha3": "kaa",
    "bibliographic": "",
    "name": "Kara-Kalpak"
  },
  {
    "alpha2": "",
    "alpha3": "kab",
    "bibliographic": "",
    "name": "Kabyle"
  },
  {
    "alpha2": "",
    "alpha3": "kac",
    "bibliographic": "",
    "name": "Jingpho"
  },
  {
    "alpha2": "",
    "alpha3": "kac",
    "bibliographic": "",
    "name": "Kachin"
  },
  {
    "alpha2": "kl",
    "alpha3": "kal",
    "bibliographic": "",
    "name": "Greenlandic"
  },
  {
    "alpha2": "kl",
    "alpha3": "kal",
    "bibliographic": "",
    "name": "Kalaallisut"
  },
  {
    "alpha2": "",
    "alpha3": "kam",
    "bibliographic": "",
    "name": "Kamba"
  },
  {
    "alpha2": "kn",
    "alpha3": "kan",
    "bibliographic": "",
    "name": "Kannada"
  },
  {
    "alpha2": "",
    "alpha3": "kar",
    "bibliographic": "",
    "name": "Karen languages"
  },
  {
    "alpha2": "ks",
    "alpha3": "kas",
    "bibliographic": "",
    "name": "Kashmiri"
  },
  {
    "alpha2": "ka",
    "alpha3": "kat",
    "bibliographic": "geo",
    "name": "Georgian"
  },
  {
    "alpha2": "kr",
    "alpha3": "kau",
    "bibliographic": "",
    "name": "Kanuri"
  },
  {
    "alpha2": "",
    "alpha3": "kaw",
    "bibliographic": "",
    "name": "Kawi"
  },
  {
    "alpha2": "kk",
    "alpha3": "kaz",
    "bibliographic": "",
    "name": "Kazakh"
  },
  {
    "alpha2": "",
    "alpha3": "kbd",
    "bibliographic": "",
    "name": "Kabardian"
  },
  {
    "alpha2": "",
    "alpha3": "kha",
    "bibliographic": "",
    "name": "Khasi"
  },
  {
    "alpha2": "",
    "alpha3": "khi",
    "bibliographic": "",
    "name": "Khoisan languages"
  },
  {
    "alpha2": "km",
    "alpha3": "khm",
    "bibliographic": "",
    "name": "Central Khmer"
  },
  {
    "alpha2": "",
    "alpha3": "kho",
    "bibliographic": "",
    "name": "Khotanese"
  },
  {
    "alpha2": "",
    "alpha3": "kho",
    "bibliographic": "",
    "name": "Sakan"
  },
  {
    "alpha2": "ki",
    "alpha3": "kik",
    "bibliographic": "",
    "name": "Gikuyu"
  },
  {
    "alpha2": "ki",
    "alpha3": "kik",
    "bibliographic": "",
    "name": "Kikuyu"
  },
  {
    "alpha2": "rw",
    "alpha3": "kin",
    "bibliographic": "",
    "name": "Kinyarwanda"
  },
  {
    "alpha2": "ky",
    "alpha3": "kir",
    "bibliographic": "",
    "name": "Kirghiz"
  },
  {
    "alpha2": "ky",
    "alpha3": "kir",
    "bibliographic": "",
    "name": "Kyrgyz"
  },
  {
    "alpha2": "",
    "alpha3": "kmb",
    "bibliographic": "",
    "name": "Kimbundu"
  },
  {
    "alpha2": "",
    "alpha3": "kok",
    "bibliographic": "",
    "name": "Konkani"
  },
  {
    "alpha2": "kv",
    "alpha3": "kom",
    "bibliographic": "",
    "name": "Komi"
  },
  {
    "alpha2": "kg",
    "alpha3": "kon",
    "bibliographic": "",
    "name": "Kongo"
  },
  {
    "alpha2": "ko",
    "alpha3": "kor",
    "bibliographic": "",
    "name": "Korean"
  },
  {
    "alpha2": "",
    "alpha3": "kos",
    "bibliographic": "",
    "name": "Kosraean"
  },
  {
    "alpha2": "",
    "alpha3": "kpe",
    "bibliographic": "",
    "name": "Kpelle"
  },
  {
    "alpha2": "",
    "alpha3": "krc",
    "bibliographic": "",
    "name": "Karachay-Balkar"
  },
  {
    "alpha2": "",
    "alpha3": "krl",
    "bibliographic": "",
    "name": "Karelian"
  },
  {
    "alpha2": "",
    "alpha3": "kro",
    "bibliographic": "",
    "name": "Kru languages"
  },
  {
    "alpha2": "",
    "alpha3": "kru",
    "bibliographic": "",
    "name": "Kurukh"
  },
  {
    "alpha2": "kj",
    "alpha3": "kua",
    "bibliographic": "",
    "name": "Kuanyama"
  },
  {
    "alpha2": "kj",
    "alpha3": "kua",
    "bibliographic": "",
    "name": "Kwanyama"
  },
  {
    "alpha2": "",
    "alpha3": "kum",
    "bibliographic": "",
    "name": "Kumyk"
  },
  {
    "alpha2": "ku",
    "alpha3": "kur",
    "bibliographic": "",
    "name": "Kurdish"
  },
  {
    "alpha2": "",
    "alpha3": "kut",
    "bibliographic": "",
    "name": "Kutenai"
  },
  {
    "alpha2": "",
    "alpha3": "lad",
    "bibliographic": "",
    "name": "Ladino"
  },
  {
    "alpha2": "",
    "alpha3": "lah",
    "bibliographic": "",
    "name": "Lahnda"
  },
  {
    "alpha2": "",
    "alpha3": "lam",
    "bibliographic": "",
    "name": "Lamba"
  },
  {
    "alpha2": "lo",
    "alpha3": "lao",
    "bibliographic": "",
    "name": "Lao"
  },
  {
    "alpha2": "la",
    "alpha3": "lat",
    "bibliographic": "",
    "name": "Latin"
  },
  {
    "alpha2": "lv",
    "alpha3": "lav",
    "bibliographic": "",
    "name": "Latvian"
  },
  {
    "alpha2": "",
    "alpha3": "lez",
    "bibliographic": "",
    "name": "Lezghian"
  },
  {
    "alpha2": "li",
    "alpha3": "lim",
    "bibliographic": "",
    "name": "Limburgan"
  },
  {
    "alpha2": "li",
    "alpha3": "lim",
    "bibliographic": "",
    "name": "Limburger"
  },
  {
    "alpha2": "li",
    "alpha3": "lim",
    "bibliographic": "",
    "name": "Limburgish"
  },
  {
    "alpha2": "ln",
    "alpha3": "lin",
    "bibliographic": "",
    "name": "Lingala"
  },
  {
    "alpha2": "lt",
    "alpha3": "lit",
    "bibliographic": "",
    "name": "Lithuanian"
  },
  {
    "alpha2": "",
    "alpha3": "lol",
    "bibliographic": "",
    "name": "Mongo"
  },
  {
    "alpha2": "",
    "alpha3": "loz",
    "bibliographic": "",
    "name": "Lozi"
  },
  {
    "alpha2": "lb",
    "alpha3": "ltz",
    "bibliographic": "",
    "name": "Letzeburgesch"
  },
  {
    "alpha2": "lb",
    "alpha3": "ltz",
    "bibliographic": "",
    "name": "Luxembourgish"
  },
  {
    "alpha2": "",
    "alpha3": "lua",
    "bibliographic": "",
    "name": "Luba-Lulua"
  },
  {
    "alpha2": "lu",
    "alpha3": "lub",
    "bibliographic": "",
    "name": "Luba-Katanga"
  },
  {
    "alpha2": "lg",
    "alpha3": "lug",
    "bibliographic": "",
    "name": "Ganda"
  },
  {
    "alpha2": "",
    "alpha3": "lui",
    "bibliographic": "",
    "name": "Luiseno"
  },
  {
    "alpha2": "",
    "alpha3": "lun",
    "bibliographic": "",
    "name": "Lunda"
  },
  {
    "alpha2": "",
    "alpha3": "luo",
    "bibliographic": "",
    "name": "Luo (Kenya and Tanzania)"
  },
  {
    "alpha2": "",
    "alpha3": "lus",
    "bibliographic": "",
    "name": "Lushai"
  },
  {
    "alpha2": "",
    "alpha3": "mad",
    "bibliographic": "",
    "name": "Madurese"
  },
  {
    "alpha2": "",
    "alpha3": "mag",
    "bibliographic": "",
    "name": "Magahi"
  },
  {
    "alpha2": "mh",
    "alpha3": "mah",
    "bibliographic": "",
    "name": "Marshallese"
  },
  {
    "alpha2": "",
    "alpha3": "mai",
    "bibliographic": "",
    "name": "Maithili"
  },
  {
    "alpha2": "",
    "alpha3": "mak",
    "bibliographic": "",
    "name": "Makasar"
  },
  {
    "alpha2": "ml",
    "alpha3": "mal",
    "bibliographic": "",
    "name": "Malayalam"
  },
  {
    "alpha2": "",
    "alpha3": "man",
    "bibliographic": "",
    "name": "Mandingo"
  },
  {
    "alpha2": "",
    "alpha3": "map",
    "bibliographic": "",
    "name": "Austronesian languages"
  },
  {
    "alpha2": "mr",
    "alpha3": "mar",
    "bibliographic": "",
    "name": "Marathi"
  },
  {
    "alpha2": "",
    "alpha3": "mas",
    "bibliographic": "",
    "name": "Masai"
  },
  {
    "alpha2": "",
    "alpha3": "mdf",
    "bibliographic": "",
    "name": "Moksha"
  },
  {
    "alpha2": "",
    "alpha3": "mdr",
    "bibliographic": "",
    "name": "Mandar"
  },
  {
    "alpha2": "",
    "alpha3": "men",
    "bibliographic": "",
    "name": "Mende"
  },
  {
    "alpha2": "",
    "alpha3": "mga",
    "bibliographic": "",
    "name": "Irish, Middle (900-1200)"
  },
  {
    "alpha2": "",
    "alpha3": "mic",
    "bibliographic": "",
    "name": "Mi'kmaq"
  },
  {
    "alpha2": "",
    "alpha3": "mic",
    "bibliographic": "",
    "name": "Micmac"
  },
  {
    "alpha2": "",
    "alpha3": "min",
    "bibliographic": "",
    "name": "Minangkabau"
  },
  {
    "alpha2": "",
    "alpha3": "mis",
    "bibliographic": "",
    "name": "Uncoded languages"
  },
  {
    "alpha2": "mk",
    "alpha3": "mkd",
    "bibliographic": "mac",
    "name": "Macedonian"
  },
  {
    "alpha2": "",
    "alpha3": "mkh",
    "bibliographic": "",
    "name": "Mon-Khmer languages"
  },
  {
    "alpha2": "mg",
    "alpha3": "mlg",
    "bibliographic": "",
    "name": "Malagasy"
  },
  {
    "alpha2": "mt",
    "alpha3": "mlt",
    "bibliographic": "",
    "name": "Maltese"
  },
  {
    "alpha2": "",
    "alpha3": "mnc",
    "bibliographic": "",
    "name": "Manchu"
  },
  {
    "alpha2": "",
    "alpha3": "mni",
    "bibliographic": "",
    "name": "Manipuri"
  },
  {
    "alpha2": "",
    "alpha3": "mno",
    "bibliographic": "",
    "name": "Manobo languages"
  },
  {
    "alpha2": "",
    "alpha3": "moh",
    "bibliographic": "",
    "name": "Mohawk"
  },
  {
    "alpha2": "mn",
    "alpha3": "mon",
    "bibliographic": "",
    "name": "Mongolian"
  },
  {
    "alpha2": "",
    "alpha3": "mos",
    "bibliographic": "",
    "name": "Mossi"
  },
  {
    "alpha2": "",
    "alpha3": "mot",
    "bibliographic": "",
    "name": "Montenegrin"
  },
  {
    "alpha2": "mi",
    "alpha3": "mri",
    "bibliographic": "mao",
    "name": "Maori"
  },
  {
    "alpha2": "ms",
    "alpha3": "msa",
    "bibliographic": "may",
    "name": "Malay"
  },
  {
    "alpha2": "",
    "alpha3": "mul",
    "bibliographic": "",
    "name": "Multiple languages"
  },
  {
    "alpha2": "",
    "alpha3": "mun",
    "bibliographic": "",
    "name": "Munda languages"
  },
  {
    "alpha2": "",
    "alpha3": "mus",
    "bibliographic": "",
    "name": "Creek"
  },
  {
    "alpha2": "",
    "alpha3": "mwl",
    "bibliographic": "",
    "name": "Mirandese"
  },
  {
    "alpha2": "",
    "alpha3": "mwr",
    "bibliographic": "",
    "name": "Marwari"
  },
  {
    "alpha2": "my",
    "alpha3": "mya",
    "bibliographic": "bur",
    "name": "Burmese"
  },
  {
    "alpha2": "",
    "alpha3": "myn",
    "bibliographic": "",
    "name": "Mayan languages"
  },
  {
    "alpha2": "",
    "alpha3": "myv",
    "bibliographic": "",
    "name": "Erzya"
  },
  {
    "alpha2": "",
    "alpha3": "nah",
    "bibliographic": "",
    "name": "Nahuatl languages"
  },
  {
    "alpha2": "",
    "alpha3": "nai",
    "bibliographic": "",
    "name": "North American Indian languages"
  },
  {
    "alpha2": "",
    "alpha3": "nap",
    "bibliographic": "",
    "name": "Neapolitan"
  },
  {
    "alpha2": "na",
    "alpha3": "nau",
    "bibliographic": "",
    "name": "Nauru"
  },
  {
    "alpha2": "nv",
    "alpha3": "nav",
    "bibliographic": "",
    "name": "Navaho"
  },
  {
    "alpha2": "nv",
    "alpha3": "nav",
    "bibliographic": "",
    "name": "Navajo"
  },
  {
    "alpha2": "nr",
    "alpha3": "nbl",
    "bibliographic": "",
    "name": "Ndebele, South"
  },
  {
    "alpha2": "nr",
    "alpha3": "nbl",
    "bibliographic": "",
    "name": "South Ndebele"
  },
  {
    "alpha2": "nd",
    "alpha3": "nde",
    "bibliographic": "",
    "name": "Ndebele, North"
  },
  {
    "alpha2": "nd",
    "alpha3": "nde",
    "bibliographic": "",
    "name": "North Ndebele"
  },
  {
    "alpha2": "ng",
    "alpha3": "ndo",
    "bibliographic": "",
    "name": "Ndonga"
  },
  {
    "alpha2": "",
    "alpha3": "nds",
    "bibliographic": "",
    "name": "German, Low"
  },
  {
    "alpha2": "",
    "alpha3": "nds",
    "bibliographic": "",
    "name": "Low German"
  },
  {
    "alpha2": "",
    "alpha3": "nds",
    "bibliographic": "",
    "name": "Low Saxon"
  },
  {
    "alpha2": "",
    "alpha3": "nds",
    "bibliographic": "",
    "name": "Saxon, Low"
  },
  {
    "alpha2": "ne",
    "alpha3": "nep",
    "bibliographic": "",
    "name": "Nepali"
  },
  {
    "alpha2": "",
    "alpha3": "new",
    "bibliographic": "",
    "name": "Nepal Bhasa"
  },
  {
    "alpha2": "",
    "alpha3": "new",
    "bibliographic": "",
    "name": "Newari"
  },
  {
    "alpha2": "",
    "alpha3": "nia",
    "bibliographic": "",
    "name": "Nias"
  },
  {
    "alpha2": "",
    "alpha3": "nic",
    "bibliographic": "",
    "name": "Niger-Kordofanian languages"
  },
  {
    "alpha2": "",
    "alpha3": "niu",
    "bibliographic": "",
    "name": "Niuean"
  },
  {
    "alpha2": "nl",
    "alpha3": "nld",
    "bibliographic": "dut",
    "name": "Dutch"
  },
  {
    "alpha2": "nl",
    "alpha3": "nld",
    "bibliographic": "dut",
    "name": "Flemish"
  },
  {
    "alpha2": "nn",
    "alpha3": "nno",
    "bibliographic": "",
    "name": "Norwegian Nynorsk"
  },
  {
    "alpha2": "nn",
    "alpha3": "nno",
    "bibliographic": "",
    "name": "Nynorsk, Norwegian"
  },
  {
    "alpha2": "nb",
    "alpha3": "nob",
    "bibliographic": "",
    "name": "Bokmål, Norwegian"
  },
  {
    "alpha2": "nb",
    "alpha3": "nob",
    "bibliographic": "",
    "name": "Norwegian Bokmål"
  },
  {
    "alpha2": "",
    "alpha3": "nog",
    "bibliographic": "",
    "name": "Nogai"
  },
  {
    "alpha2": "",
    "alpha3": "non",
    "bibliographic": "",
    "name": "Norse, Old"
  },
  {
    "alpha2": "no",
    "alpha3": "nor",
    "bibliographic": "",
    "name": "Norwegian"
  },
  {
    "alpha2": "",
    "alpha3": "nqo",
    "bibliographic": "",
    "name": "N'Ko"
  },
  {
    "alpha2": "",
    "alpha3": "nso",
    "bibliographic": "",
    "name": "Northern Sotho"
  },
  {
    "alpha2": "",
    "alpha3": "nso",
    "bibliographic": "",
    "name": "Pedi"
  },
  {
    "alpha2": "",
    "alpha3": "nso",
    "bibliographic": "",
    "name": "Sepedi"
  },
  {
    "alpha2": "",
    "alpha3": "nso",
    "bibliographic": "",
    "name": "Sotho, Northern"
  },
  {
    "alpha2": "",
    "alpha3": "nub",
    "bibliographic": "",
    "name": "Nubian languages"
  },
  {
    "alpha2": "",
    "alpha3": "nwc",
    "bibliographic": "",
    "name": "Classical Nepal Bhasa"
  },
  {
    "alpha2": "",
    "alpha3": "nwc",
    "bibliographic": "",
    "name": "Classical Newari"
  },
  {
    "alpha2": "",
    "alpha3": "nwc",
    "bibliographic": "",
    "name": "Old Newari"
  },
  {
    "alpha2": "ny",
    "alpha3": "nya",
    "bibliographic": "",
    "name": "Chewa"
  },
  {
    "alpha2": "ny",
    "alpha3": "nya",
    "bibliographic": "",
    "name": "Chichewa"
  },
  {
    "alpha2": "ny",
    "alpha3": "nya",
    "bibliographic": "",
    "name": "Nyanja"
  },
  {
    "alpha2": "",
    "alpha3": "nym",
    "bibliographic": "",
    "name": "Nyamwezi"
  },
  {
    "alpha2": "",
    "alpha3": "nyn",
    "bibliographic": "",
    "name": "Nyankole"
  },
  {
    "alpha2": "",
    "alpha3": "nyo",
    "bibliographic": "",
    "name": "Nyoro"
  },
  {
    "alpha2": "",
    "alpha3": "nzi",
    "bibliographic": "",
    "name": "Nzima"
  },
  {
    "alpha2": "oc",
    "alpha3": "oci",
    "bibliographic": "",
    "name": "Occitan (post 1500)"
  },
  {
    "alpha2": "oj",
    "alpha3": "oji",
    "bibliographic": "",
    "name": "Ojibwa"
  },
  {
    "alpha2": "or",
    "alpha3": "ori",
    "bibliographic": "",
    "name": "Oriya"
  },
  {
    "alpha2": "om",
    "alpha3": "orm",
    "bibliographic": "",
    "name": "Oromo"
  },
  {
    "alpha2": "",
    "alpha3": "osa",
    "bibliographic": "",
    "name": "Osage"
  },
  {
    "alpha2": "os",
    "alpha3": "oss",
    "bibliographic": "",
    "name": "Ossetian"
  },
  {
    "alpha2": "os",
    "alpha3": "oss",
    "bibliographic": "",
    "name": "Ossetic"
  },
  {
    "alpha2": "",
    "alpha3": "ota",
    "bibliographic": "",
    "name": "Turkish, Ottoman (1500-1928)"
  },
  {
    "alpha2": "",
    "alpha3": "oto",
    "bibliographic": "",
    "name": "Otomian languages"
  },
  {
    "alpha2": "",
    "alpha3": "paa",
    "bibliographic": "",
    "name": "Papuan languages"
  },
  {
    "alpha2": "",
    "alpha3": "pag",
    "bibliographic": "",
    "name": "Pangasinan"
  },
  {
    "alpha2": "",
    "alpha3": "pal",
    "bibliographic": "",
    "name": "Pahlavi"
  },
  {
    "alpha2": "",
    "alpha3": "pam",
    "bibliographic": "",
    "name": "Kapampangan"
  },
  {
    "alpha2": "",
    "alpha3": "pam",
    "bibliographic": "",
    "name": "Pampanga"
  },
  {
    "alpha2": "pa",
    "alpha3": "pan",
    "bibliographic": "",
    "name": "Panjabi"
  },
  {
    "alpha2": "pa",
    "alpha3": "pan",
    "bibliographic": "",
    "name": "Punjabi"
  },
  {
    "alpha2": "",
    "alpha3": "pap",
    "bibliographic": "",
    "name": "Papiamento"
  },
  {
    "alpha2": "",
    "alpha3": "pau",
    "bibliographic": "",
    "name": "Palauan"
  },
  {
    "alpha2": "",
    "alpha3": "peo",
    "bibliographic": "",
    "name": "Persian, Old (ca.600-400 B.C.)"
  },
  {
    "alpha2": "",
    "alpha3": "phi",
    "bibliographic": "",
    "name": "Philippine languages"
  },
  {
    "alpha2": "",
    "alpha3": "phn",
    "bibliographic": "",
    "name": "Phoenician"
  },
  {
    "alpha2": "pi",
    "alpha3": "pli",
    "bibliographic": "",
    "name": "Pali"
  },
  {
    "alpha2": "pl",
    "alpha3": "pol",
    "bibliographic": "",
    "name": "Polish"
  },
  {
    "alpha2": "",
    "alpha3": "pon",
    "bibliographic": "",
    "name": "Pohnpeian"
  },
  {
    "alpha2": "pt",
    "alpha3": "por",
    "bibliographic": "",
    "name": "Portuguese"
  },
  {
    "alpha2": "",
    "alpha3": "pra",
    "bibliographic": "",
    "name": "Prakrit languages"
  },
  {
    "alpha2": "",
    "alpha3": "pro",
    "bibliographic": "",
    "name": "Occitan, Old (to 1500)"
  },
  {
    "alpha2": "",
    "alpha3": "pro",
    "bibliographic": "",
    "name": "Provençal, Old (to 1500)"
  },
  {
    "alpha2": "ps",
    "alpha3": "pus",
    "bibliographic": "",
    "name": "Pashto"
  },
  {
    "alpha2": "ps",
    "alpha3": "pus",
    "bibliographic": "",
    "name": "Pushto"
  },
  {
    "alpha2": "qu",
    "alpha3": "que",
    "bibliographic": "",
    "name": "Quechua"
  },
  {
    "alpha2": "",
    "alpha3": "raj",
    "bibliographic": "",
    "name": "Rajasthani"
  },
  {
    "alpha2": "",
    "alpha3": "rap",
    "bibliographic": "",
    "name": "Rapanui"
  },
  {
    "alpha2": "",
    "alpha3": "rar",
    "bibliographic": "",
    "name": "Cook Islands Maori"
  },
  {
    "alpha2": "",
    "alpha3": "rar",
    "bibliographic": "",
    "name": "Rarotongan"
  },
  {
    "alpha2": "",
    "alpha3": "roa",
    "bibliographic": "",
    "name": "Romance languages"
  },
  {
    "alpha2": "rm",
    "alpha3": "roh",
    "bibliographic": "",
    "name": "Romansh"
  },
  {
    "alpha2": "",
    "alpha3": "rom",
    "bibliographic": "",
    "name": "Romany"
  },
  {
    "alpha2": "ro",
    "alpha3": "ron",
    "bibliographic": "rum",
    "name": "Moldavian"
  },
  {
    "alpha2": "ro",
    "alpha3": "ron",
    "bibliographic": "rum",
    "name": "Romanian"
  },
  {
    "alpha2": "rn",
    "alpha3": "run",
    "bibliographic": "",
    "name": "Rundi"
  },
  {
    "alpha2": "",
    "alpha3": "rup",
    "bibliographic": "",
    "name": "Aromanian"
  },
  {
    "alpha2": "",
    "alpha3": "rup",
    "bibliographic": "",
    "name": "Arumanian"
  },
  {
    "alpha2": "",
    "alpha3": "rup",
    "bibliographic": "",
    "name": "Macedo-Romanian"
  },
  {
    "alpha2": "ru",
    "alpha3": "rus",
    "bibliographic": "",
    "name": "Russian"
  },
  {
    "alpha2": "",
    "alpha3": "sad",
    "bibliographic": "",
    "name": "Sandawe"
  },
  {
    "alpha2": "sg",
    "alpha3": "sag",
    "bibliographic": "",
    "name": "Sango"
  },
  {
    "alpha2": "",
    "alpha3": "sah",
    "bibliographic": "",
    "name": "Yakut"
  },
  {
    "alpha2": "",
    "alpha3": "sai",
    "bibliographic": "",
    "name": "South American Indian languages"
  },
  {
    "alpha2": "",
    "alpha3": "sal",
    "bibliographic": "",
    "name": "Salishan languages"
  },
  {
    "alpha2": "",
    "alpha3": "sam",
    "bibliographic": "",
    "name": "Samaritan Aramaic"
  },
  {
    "alpha2": "sa",
    "alpha3": "san",
    "bibliographic": "",
    "name": "Sanskrit"
  },
  {
    "alpha2": "",
    "alpha3": "sas",
    "bibliographic": "",
    "name": "Sasak"
  },
  {
    "alpha2": "",
    "alpha3": "sat",
    "bibliographic": "",
    "name": "Santali"
  },
  {
    "alpha2": "",
    "alpha3": "scn",
    "bibliographic": "",
    "name": "Sicilian"
  },
  {
    "alpha2": "",
    "alpha3": "sco",
    "bibliographic": "",
    "name": "Scots"
  },
  {
    "alpha2": "",
    "alpha3": "sel",
    "bibliographic": "",
    "name": "Selkup"
  },
  {
    "alpha2": "",
    "alpha3": "sem",
    "bibliographic": "",
    "name": "Semitic languages"
  },
  {
    "alpha2": "",
    "alpha3": "sga",
    "bibliographic": "",
    "name": "Irish, Old (to 900)"
  },
  {
    "alpha2": "",
    "alpha3": "sgn",
    "bibliographic": "",
    "name": "Sign Languages"
  },
  {
    "alpha2": "",
    "alpha3": "shn",
    "bibliographic": "",
    "name": "Shan"
  },
  {
    "alpha2": "",
    "alpha3": "sid",
    "bibliographic": "",
    "name": "Sidamo"
  },
  {
    "alpha2": "si",
    "alpha3": "sin",
    "bibliographic": "",
    "name": "Sinhala"
  },
  {
    "alpha2": "si",
    "alpha3": "sin",
    "bibliographic": "",
    "name": "Sinhalese"
  },
  {
    "alpha2": "",
    "alpha3": "sio",
    "bibliographic": "",
    "name": "Siouan languages"
  },
  {
    "alpha2": "",
    "alpha3": "sit",
    "bibliographic": "",
    "name": "Sino-Tibetan languages"
  },
  {
    "alpha2": "",
    "alpha3": "sla",
    "bibliographic": "",
    "name": "Slavic languages"
  },
  {
    "alpha2": "sk",
    "alpha3": "slk",
    "bibliographic": "slo",
    "name": "Slovak"
  },
  {
    "alpha2": "sl",
    "alpha3": "slv",
    "bibliographic": "",
    "name": "Slovenian"
  },
  {
    "alpha2": "",
    "alpha3": "sma",
    "bibliographic": "",
    "name": "Southern Sami"
  },
  {
    "alpha2": "se",
    "alpha3": "sme",
    "bibliographic": "",
    "name": "Northern Sami"
  },
  {
    "alpha2": "",
    "alpha3": "smi",
    "bibliographic": "",
    "name": "Sami languages"
  },
  {
    "alpha2": "",
    "alpha3": "smj",
    "bibliographic": "",
    "name": "Lule Sami"
  },
  {
    "alpha2": "",
    "alpha3": "smn",
    "bibliographic": "",
    "name": "Inari Sami"
  },
  {
    "alpha2": "sm",
    "alpha3": "smo",
    "bibliographic": "",
    "name": "Samoan"
  },
  {
    "alpha2": "",
    "alpha3": "sms",
    "bibliographic": "",
    "name": "Skolt Sami"
  },
  {
    "alpha2": "sn",
    "alpha3": "sna",
    "bibliographic": "",
    "name": "Shona"
  },
  {
    "alpha2": "sd",
    "alpha3": "snd",
    "bibliographic": "",
    "name": "Sindhi"
  },
  {
    "alpha2": "",
    "alpha3": "snk",
    "bibliographic": "",
    "name": "Soninke"
  },
  {
    "alpha2": "",
    "alpha3": "sog",
    "bibliographic": "",
    "name": "Sogdian"
  },
  {
    "alpha2": "so",
    "alpha3": "som",
    "bibliographic": "",
    "name": "Somali"
  },
  {
    "alpha2": "",
    "alpha3": "son",
    "bibliographic": "",
    "name": "Songhai languages"
  },
  {
    "alpha2": "st",
    "alpha3": "sot",
    "bibliographic": "",
    "name": "Sotho, Southern"
  },
  {
    "alpha2": "es",
    "alpha3": "spa",
    "bibliographic": "",
    "name": "Castilian"
  },
  {
    "alpha2": "es",
    "alpha3": "spa",
    "bibliographic": "",
    "name": "Spanish"
  },
  {
    "alpha2": "sq",
    "alpha3": "sqi",
    "bibliographic": "alb",
    "name": "Albanian"
  },
  {
    "alpha2": "sc",
    "alpha3": "srd",
    "bibliographic": "",
    "name": "Sardinian"
  },
  {
    "alpha2": "",
    "alpha3": "srn",
    "bibliographic": "",
    "name": "Sranan Tongo"
  },
  {
    "alpha2": "sr",
    "alpha3": "srp",
    "bibliographic": "",
    "name": "Serbian"
  },
  {
    "alpha2": "",
    "alpha3": "srr",
    "bibliographic": "",
    "name": "Serer"
  },
  {
    "alpha2": "",
    "alpha3": "ssa",
    "bibliographic": "",
    "name": "Nilo-Saharan languages"
  },
  {
    "alpha2": "ss",
    "alpha3": "ssw",
    "bibliographic": "",
    "name": "Swati"
  },
  {
    "alpha2": "",
    "alpha3": "suk",
    "bibliographic": "",
    "name": "Sukuma"
  },
  {
    "alpha2": "su",
    "alpha3": "sun",
    "bibliographic": "",
    "name": "Sundanese"
  },
  {
    "alpha2": "",
    "alpha3": "sus",
    "bibliographic": "",
    "name": "Susu"
  },
  {
    "alpha2": "",
    "alpha3": "sux",
    "bibliographic": "",
    "name": "Sumerian"
  },
  {
    "alpha2": "sw",
    "alpha3": "swa",
    "bibliographic": "",
    "name": "Swahili"
  },
  {
    "alpha2": "sv",
    "alpha3": "swe",
    "bibliographic": "",
    "name": "Swedish"
  },
  {
    "alpha2": "",
    "alpha3": "syc",
    "bibliographic": "",
    "name": "Classical Syriac"
  },
  {
    "alpha2": "",
    "alpha3": "syr",
    "bibliographic": "",
    "name": "Syriac"
  },
  {
    "alpha2": "ty",
    "alpha3": "tah",
    "bibliographic": "",
    "name": "Tahitian"
  },
  {
    "alpha2": "",
    "alpha3": "tai",
    "bibliographic": "",
    "name": "Tai languages"
  },
  {
    "alpha2": "ta",
    "alpha3": "tam",
    "bibliographic": "",
    "name": "Tamil"
  },
  {
    "alpha2": "tt",
    "alpha3": "tat",
    "bibliographic": "",
    "name": "Tatar"
  },
  {
    "alpha2": "te",
    "alpha3": "tel",
    "bibliographic": "",
    "name": "Telugu"
  },
  {
    "alpha2": "",
    "alpha3": "tem",
    "bibliographic": "",
    "name": "Timne"
  },
  {
    "alpha2": "",
    "alpha3": "ter",
    "bibliographic": "",
    "name": "Tereno"
  },
  {
    "alpha2": "",
    "alpha3": "tet",
    "bibliographic": "",
    "name": "Tetum"
  },
  {
    "alpha2": "tg",
    "alpha3": "tgk",
    "bibliographic": "",
    "name": "Tajik"
  },
  {
    "alpha2": "tl",
    "alpha3": "tgl",
    "bibliographic": "",
    "name": "Tagalog"
  },
  {
    "alpha2": "th",
    "alpha3": "tha",
    "bibliographic": "",
    "name": "Thai"
  },
  {
    "alpha2": "",
    "alpha3": "tig",
    "bibliographic": "",
    "name": "Tigre"
  },
  {
    "alpha2": "ti",
    "alpha3": "tir",
    "bibliographic": "",
    "name": "Tigrinya"
  },
  {
    "alpha2": "",
    "alpha3": "tiv",
    "bibliographic": "",
    "name": "Tiv"
  },
  {
    "alpha2": "",
    "alpha3": "tkl",
    "bibliographic": "",
    "name": "Tokelau"
  },
  {
    "alpha2": "",
    "alpha3": "tlh",
    "bibliographic": "",
    "name": "Klingon"
  },
  {
    "alpha2": "",
    "alpha3": "tlh",
    "bibliographic": "",
    "name": "tlhIngan-Hol"
  },
  {
    "alpha2": "",
    "alpha3": "tli",
    "bibliographic": "",
    "name": "Tlingit"
  },
  {
    "alpha2": "",
    "alpha3": "tmh",
    "bibliographic": "",
    "name": "Tamashek"
  },
  {
    "alpha2": "",
    "alpha3": "tog",
    "bibliographic": "",
    "name": "Tonga (Nyasa)"
  },
  {
    "alpha2": "to",
    "alpha3": "ton",
    "bibliographic": "",
    "name": "Tonga (Tonga Islands)"
  },
  {
    "alpha2": "",
    "alpha3": "tpi",
    "bibliographic": "",
    "name": "Tok Pisin"
  },
  {
    "alpha2": "",
    "alpha3": "tsi",
    "bibliographic": "",
    "name": "Tsimshian"
  },
  {
    "alpha2": "tn",
    "alpha3": "tsn",
    "bibliographic": "",
    "name": "Tswana"
  },
  {
    "alpha2": "ts",
    "alpha3": "tso",
    "bibliographic": "",
    "name": "Tsonga"
  },
  {
    "alpha2": "tk",
    "alpha3": "tuk",
    "bibliographic": "",
    "name": "Turkmen"
  },
  {
    "alpha2": "",
    "alpha3": "tum",
    "bibliographic": "",
    "name": "Tumbuka"
  },
  {
    "alpha2": "",
    "alpha3": "tup",
    "bibliographic": "",
    "name": "Tupi languages"
  },
  {
    "alpha2": "tr",
    "alpha3": "tur",
    "bibliographic": "",
    "name": "Turkish"
  },
  {
    "alpha2": "",
    "alpha3": "tut",
    "bibliographic": "",
    "name": "Altaic languages"
  },
  {
    "alpha2": "",
    "alpha3": "tvl",
    "bibliographic": "",
    "name": "Tuvalu"
  },
  {
    "alpha2": "tw",
    "alpha3": "twi",
    "bibliographic": "",
    "name": "Twi"
  },
  {
    "alpha2": "",
    "alpha3": "tyv",
    "bibliographic": "",
    "name": "Tuvinian"
  },
  {
    "alpha2": "",
    "alpha3": "udm",
    "bibliographic": "",
    "name": "Udmurt"
  },
  {
    "alpha2": "",
    "alpha3": "uga",
    "bibliographic": "",
    "name": "Ugaritic"
  },
  {
    "alpha2": "ug",
    "alpha3": "uig",
    "bibliographic": "",
    "name": "Uighur"
  },
  {
    "alpha2": "ug",
    "alpha3": "uig",
    "bibliographic": "",
    "name": "Uyghur"
  },
  {
    "alpha2": "uk",
    "alpha3": "ukr",
    "bibliographic": "",
    "name": "Ukrainian"
  },
  {
    "alpha2": "",
    "alpha3": "umb",
    "bibliographic": "",
    "name": "Umbundu"
  },
  {
    "alpha2": "",
    "alpha3": "und",
    "bibliographic": "",
    "name": "Undetermined"
  },
  {
    "alpha2": "ur",
    "alpha3": "urd",
    "bibliographic": "",
    "name": "Urdu"
  },
  {
    "alpha2": "uz",
    "alpha3": "uzb",
    "bibliographic": "",
    "name": "Uzbek"
  },
  {
    "alpha2": "",
    "alpha3": "vai",
    "bibliographic": "",
    "name": "Vai"
  },
  {
    "alpha2": "ve",
    "alpha3": "ven",
    "bibliographic": "",
    "name": "Venda"
  },
  {
    "alpha2": "vi",
    "alpha3": "vie",
    "bibliographic": "",
    "name": "Vietnamese"
  },
  {
    "alpha2": "vo",
    "alpha3": "vol",
    "bibliographic": "",
    "name": "Volapük"
  },
  {
    "alpha2": "",
    "alpha3": "vot",
    "bibliographic": "",
    "name": "Votic"
  },
  {
    "alpha2": "",
    "alpha3": "wak",
    "bibliographic": "",
    "name": "Wakashan languages"
  },
  {
    "alpha2": "",
    "alpha3": "wal",
    "bibliographic": "",
    "name": "Wolaitta"
  },
  {
    "alpha2": "",
    "alpha3": "wal",
    "bibliographic": "",
    "name": "Wolaytta"
  },
  {
    "alpha2": "",
    "alpha3": "war",
    "bibliographic": "",
    "name": "Waray"
  },
  {
    "alpha2": "",
    "alpha3": "was",
    "bibliographic": "",
    "name": "Washo"
  },
  {
    "alpha2": "",
    "alpha3": "wen",
    "bibliographic": "",
    "name": "Sorbian languages"
  },
  {
    "alpha2": "wa",
    "alpha3": "wln",
    "bibliographic": "",
    "name": "Walloon"
  },
  {
    "alpha2": "wo",
    "alpha3": "wol",
    "bibliographic": "",
    "name": "Wolof"
  },
  {
    "alpha2": "",
    "alpha3": "xal",
    "bibliographic": "",
    "name": "Kalmyk"
  },
  {
    "alpha2": "",
    "alpha3": "xal",
    "bibliographic": "",
    "name": "Oirat"
  },
  {
    "alpha2": "xh",
    "alpha3": "xho",
    "bibliographic": "",
    "name": "Xhosa"
  },
  {
    "alpha2": "",
    "alpha3": "yao",
    "bibliographic": "",
    "name": "Yao"
  },
  {
    "alpha2": "",
    "alpha3": "yap",
    "bibliographic": "",
    "name": "Yapese"
  },
  {
    "alpha2": "yi",
    "alpha3": "yid",
    "bibliographic": "",
    "name": "Yiddish"
  },
  {
    "alpha2": "yo",
    "alpha3": "yor",
    "bibliographic": "",
    "name": "Yoruba"
  },
  {
    "alpha2": "",
    "alpha3": "ypk",
    "bibliographic": "",
    "name": "Yupik languages"
  },
  {
    "alpha2": "",
    "alpha3": "zap",
    "bibliographic": "",
    "name": "Zapotec"
  },
  {
    "alpha2": "",
    "alpha3": "zbl",
    "bibliographic": "",
    "name": "Bliss"
  },
  {
    "alpha2": "",
    "alpha3": "zbl",
    "bibliographic": "",
    "name": "Blissymbolics"
  },
  {
    "alpha2": "",
    "alpha3": "zbl",
    "bibliographic": "",
    "name": "Blissymbols"
  },
  {
    "alpha2": "",
    "alpha3": "zen",
    "bibliographic": "",
    "name": "Zenaga"
  },
  {
    "alpha2": "",
    "alpha3": "zgh",
    "bibliographic": "",
    "name": "Standard Moroccan Tamazight"
  },
  {
    "alpha2": "za",
    "alpha3": "zha",
    "bibliographic": "",
    "name": "Chuang"
  },
  {
    "alpha2": "za",
    "alpha3": "zha",
    "bibliographic": "",
    "name": "Zhuang"
  },
  {
    "alpha2": "zh",
    "alpha3": "zho",
    "bibliographic": "chi",
    "name": "Chinese"
  },
  {
    "alpha2": "",
    "alpha3": "znd",
    "bibliographic": "",
    "name": "Zande languages"
  },
  {
    "alpha2": "zu",
    "alpha3": "zul",
    "bibliographic": "",
    "name": "Zulu"
  },
  {
    "alpha2": "",
    "alpha3": "zun",
    "bibliographic": "",
    "name": "Zuni"
  },
  {
    "alpha2": "",
    "alpha3": "zxx",
    "bibliographic": "",
    "name": "No linguistic content"
  },
  {
    "alpha2": "",
    "alpha3": "zxx",
    "bibliographic": "",
    "name": "Not applicable"
  },
  {
    "alpha2": "",
    "alpha3": "zza",
    "bibliographic": "",
    "name": "Dimili"
  },
  {
    "alpha2": "",
    "alpha3": "zza",
    "bibliographic": "",
    "name": "Dimli"
  },
  {
    "alpha2": "",
    "alpha3": "zza",
    "bibliographic": "",
    "name": "Kirdki"
  },
  {
    "alpha2": "",
    "alpha3": "zza",
    "bibliographic": "",
    "name": "Kirmanjki"
  },
  {
    "alpha2": "",
    "alpha3": "zza",
    "bibliographic": "",
    "name": "Zaza"
  },
  {
    "alpha2": "",
    "alpha3": "zza",
    "bibliographic": "",
    "name": "Zazaki"
  }
]
;
},{}],"../node_modules/country-data/lookup.js":[function(require,module,exports) {
var _ = require('underscore');

module.exports = init;

function init(o) {
  return {
    countries: search.bind(null, o.countries),
    currencies: search.bind(null, o.currencies),
    languages: search.bind(null, o.languages)
  };
}

function search(data, query) {
  var q = _.pairs(query);

  return data.filter(function(d) {
    return q.filter(function(v) {
      var prop = d[v[0]];

      if(_.isArray(prop)) return prop.indexOf(v[1]) >= 0;

      return prop == v[1];
    }).length == q.length;
  });
}
},{"underscore":"../node_modules/underscore/underscore.js"}],"../node_modules/currency-symbol-map/map.js":[function(require,module,exports) {
module.exports =
{ "ALL": "L"
, "AFN": "؋"
, "ARS": "$"
, "AWG": "ƒ"
, "AUD": "$"
, "AZN": "₼"
, "BSD": "$"
, "BBD": "$"
, "BYR": "p."
, "BZD": "BZ$"
, "BMD": "$"
, "BOB": "Bs."
, "BAM": "KM"
, "BWP": "P"
, "BGN": "лв"
, "BRL": "R$"
, "BND": "$"
, "KHR": "៛"
, "CAD": "$"
, "KYD": "$"
, "CLP": "$"
, "CNY": "¥"
, "COP": "$"
, "CRC": "₡"
, "HRK": "kn"
, "CUP": "₱"
, "CZK": "Kč"
, "DKK": "kr"
, "DOP": "RD$"
, "XCD": "$"
, "EGP": "£"
, "SVC": "$"
, "EEK": "kr"
, "EUR": "€"
, "FKP": "£"
, "FJD": "$"
, "GHC": "¢"
, "GIP": "£"
, "GTQ": "Q"
, "GGP": "£"
, "GYD": "$"
, "HNL": "L"
, "HKD": "$"
, "HUF": "Ft"
, "ISK": "kr"
, "INR": "₹"
, "IDR": "Rp"
, "IRR": "﷼"
, "IMP": "£"
, "ILS": "₪"
, "JMD": "J$"
, "JPY": "¥"
, "JEP": "£"
, "KES": "KSh"
, "KZT": "лв"
, "KPW": "₩"
, "KRW": "₩"
, "KGS": "лв"
, "LAK": "₭"
, "LVL": "Ls"
, "LBP": "£"
, "LRD": "$"
, "LTL": "Lt"
, "MKD": "ден"
, "MYR": "RM"
, "MUR": "₨"
, "MXN": "$"
, "MNT": "₮"
, "MZN": "MT"
, "NAD": "$"
, "NPR": "₨"
, "ANG": "ƒ"
, "NZD": "$"
, "NIO": "C$"
, "NGN": "₦"
, "NOK": "kr"
, "OMR": "﷼"
, "PKR": "₨"
, "PAB": "B/."
, "PYG": "Gs"
, "PEN": "S/."
, "PHP": "₱"
, "PLN": "zł"
, "QAR": "﷼"
, "RON": "lei"
, "RUB": "₽"
, "SHP": "£"
, "SAR": "﷼"
, "RSD": "Дин."
, "SCR": "₨"
, "SGD": "$"
, "SBD": "$"
, "SOS": "S"
, "ZAR": "R"
, "LKR": "₨"
, "SEK": "kr"
, "CHF": "CHF"
, "SRD": "$"
, "SYP": "£"
, "TZS": "TSh"
, "TWD": "NT$"
, "THB": "฿"
, "TTD": "TT$"
, "TRY": ""
, "TRL": "₤"
, "TVD": "$"
, "UGX": "USh"
, "UAH": "₴"
, "GBP": "£"
, "USD": "$"
, "UYU": "$U"
, "UZS": "лв"
, "VEF": "Bs"
, "VND": "₫"
, "YER": "﷼"
, "ZWD": "Z$"
}

},{}],"../node_modules/currency-symbol-map/currency-symbol-map.js":[function(require,module,exports) {
module.exports = mapSymbol

var map = require('./map')

function mapSymbol(currencyCode) {
  if (map.hasOwnProperty(currencyCode)) {
    return map[currencyCode]
  } else {
    return '?'
  }
}
},{"./map":"../node_modules/currency-symbol-map/map.js"}],"../node_modules/country-data/index.js":[function(require,module,exports) {
'use strict';

var _ = require('underscore');
var continents = require('./data/continents');
var regions = require('./data/regions');
var countriesAll = require('./data/countries.json');
var currenciesAll = require('./data/currencies.json');
var languagesAll = require('./data/languages.json');
var lookup = require('./lookup');

var getSymbol = require('currency-symbol-map')

exports.continents = continents;
exports.regions = regions;

exports.countries = {
  all: countriesAll,
};

_.each(countriesAll, function (country) {
  // prefer assigned country codes over inactive ones
  var exportedAlpha2 = exports.countries[country.alpha2];
  if (!exportedAlpha2 || exportedAlpha2.status === 'deleted') {
    exports.countries[country.alpha2] = country;
  }

  var exportedAlpha3 = exports.countries[country.alpha3];
  if (!exportedAlpha3 || exportedAlpha3.status === 'deleted') {
    exports.countries[country.alpha3] = country;
  }
});

exports.currencies = {
  all: currenciesAll,
};

_.each(currenciesAll, function (currency) {
  //If the symbol isn't available, default to the currency code
  var symbol = getSymbol(currency.code);
  if (symbol == '?') {
    symbol = currency.code;
  }

  currency.symbol = symbol;
  exports.currencies[currency.code] = currency;
});

exports.languages = {
  all: languagesAll,
};

// Note that for the languages there are several entries with the same alpha3 -
// eg Dutch and Flemish. Not sure how to best deal with that - here whichever
// comes last wins.
_.each(languagesAll, function (language) {
  exports.languages[language.alpha2] = language;
  exports.languages[language.bibliographic] = language;
  exports.languages[language.alpha3] = language;
});

exports.lookup = lookup({
    countries: countriesAll,
    currencies: currenciesAll,
    languages: languagesAll
});

var callingCountries = {all: []};

var callingCodesAll = _.reduce(countriesAll, function (codes, country) {
  if (country.countryCallingCodes && country.countryCallingCodes.length) {
    callingCountries.all.push(country);

    callingCountries[country.alpha2] = country;
    callingCountries[country.alpha3] = country;

    _.each(country.countryCallingCodes, function (code) {
      if (codes.indexOf(code) == -1) {
        codes.push(code);
      }
    });
  }
  return codes;
}, []);

delete callingCountries['']; // remove empty alpha3s
exports.callingCountries = callingCountries;

callingCodesAll.sort(function (a, b) {
  var parse = function (str) { return parseInt(str) };
  var splitA = _.map(a.split(' '), parse);
  var splitB = _.map(b.split(' '), parse);

  if (splitA[0] < splitB[0]) {
    return -1;
  } else if (splitA[0] > splitB[0]) {
    return 1;
  } else {
    // Same - check split[1]
    if (splitA[1] === undefined && splitB[1] !== undefined) {
      return -1;
    } else if (splitA[1] !== undefined && splitB[1] === undefined) {
      return 1;
    } else if (splitA[1] < splitB[1]) {
      return -1;
    } else if (splitA[1] > splitB[1]) {
      return 1;
    } else {
      return 0;
    }
  }
});

exports.callingCodes = {
  all: callingCodesAll
};

},{"underscore":"../node_modules/underscore/underscore.js","./data/continents":"../node_modules/country-data/data/continents.js","./data/regions":"../node_modules/country-data/data/regions.js","./data/countries.json":"../node_modules/country-data/data/countries.json","./data/currencies.json":"../node_modules/country-data/data/currencies.json","./data/languages.json":"../node_modules/country-data/data/languages.json","./lookup":"../node_modules/country-data/lookup.js","currency-symbol-map":"../node_modules/currency-symbol-map/currency-symbol-map.js"}],"components/countryUtils.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.lookupCountryCode = lookupCountryCode;

var _countryData = require("country-data");

var whoCountryNameToCountryDataLookupName = {
  "Bolivia": "Bolivia, Plurinational State Of",
  "Bosnia and Herzegovina": "Bosnia & Herzegovina",
  "Congo": "Republic Of Congo",
  "Congo_Democratic People Republic of": "Democratic Republic Of Congo",
  "Czechia": "Czech Republic",
  "France (metropolitan)": "France, Metropolitan",
  "The Gambia": "Gambia",
  "Palestine": "Palestinian Territory, Occupied",
  //"France_Guadeloupe": "France",
  //"France_Martinique": "France",
  "Iran (Islamic Republic of)": "Iran, Islamic Republic Of",
  "Côte d Ivoire": "Côte d'Ivoire",
  "Korea_Democratic People Republic of": "Korea, Democratic People's Republic Of",
  "Korea_Republic of": "Korea, Republic Of",
  "Lao People Democratic Republic": "Lao People's Democratic Republic",
  "Moldova_Republic of": "Moldova",
  "France_New Caledonia": "France",
  "Guinea-Bissau": "Guinea-bissau",
  "Timor-Leste": "Timor-Leste, Democratic Republic of",
  "France_Reunion": "France",
  "Trinidad and Tobago": "Trinidad And Tobago",
  "Macedonia_Former Yugoslav Republic of": "Macedonia, The Former Yugoslav Republic Of",
  "Tanzania_United Republic of": "Tanzania, United Republic Of",
  "United States of America": "United States",
  "Venezuela": "Venezuela, Bolivarian Republic Of"
};

function lookupCountryCode(countryName) {
  var countryInfo = _countryData.lookup.countries({
    name: whoCountryNameToCountryDataLookupName[countryName] || countryName
  });

  var countryCode = null;

  if (countryInfo.length) {
    countryCode = countryInfo[0].alpha3;
  } else {
    console.log("WARNING: Could not look up country code for ".concat(countryName));
  }

  return countryCode;
}
},{"country-data":"../node_modules/country-data/index.js"}],"components/dorlingCartogram.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = dorlingCartogram;

var d3 = _interopRequireWildcard(require("d3"));

var _topojson = require("topojson");

var _world = _interopRequireDefault(require("/data/world.json"));

var _countryUtils = require("/components/countryUtils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var centroidLookup = {};

function dorlingCartogram(container, props) {
  var data = props.data,
      radius = props.radius,
      labelFilter = props.labelFilter,
      projection = props.projection,
      fill = props.fill,
      _props$iterations = props.iterations,
      iterations = _props$iterations === void 0 ? 20 : _props$iterations,
      _props$strength = props.strength,
      strength = _props$strength === void 0 ? 0.55 : _props$strength,
      _props$stroke = props.stroke,
      stroke = _props$stroke === void 0 ? function () {
    return "none";
  } : _props$stroke;
  var path = d3.geoPath().projection(projection);
  (0, _topojson.feature)(_world.default, _world.default.objects.general).features.map(function (d) {
    var obj = {
      data: d.properties,
      centroid: path.centroid(d)
    };
    centroidLookup[obj.data.ISO_3_CODE] = obj;
    return obj;
  });

  var createNodes = function createNodes(data) {
    return data // filters countries with geojson
    .filter(function (d) {
      var hasGeoJSON = centroidLookup.hasOwnProperty((0, _countryUtils.lookupCountryCode)(d.country));

      if (!hasGeoJSON) {
        console.log("WARNING: Country '".concat(d.country, "' excluded for no GeoJSON"));
      }

      return hasGeoJSON;
    }).map(function (d) {
      var point = centroidLookup[(0, _countryUtils.lookupCountryCode)(d.country)].centroid;
      return _objectSpread({}, d, {
        x: point[0],
        y: point[1],
        x0: point[0],
        y0: point[1],
        r: radius(d)
      });
    });
  };

  var key = function key(d) {
    return d.country;
  };

  var node = container.selectAll("circle");
  var labels = container.selectAll("text");
  var forceSim = d3.forceSimulation().stop(); // Speeds up force simulation
  //forceSim.alphaDecay(1 - Math.pow(0.001, 1 / 200))
  // Cartogram

  forceSim.force("collide", d3.forceCollide(function (d) {
    return d.r;
  }).strength(strength)); // Nodes are attracted to their original position
  //forceSim.force("gravity", function(alpha) {
  //const k = 0.01 * alpha;
  //node.each(function(d) {
  //d.x += (d.x0 - d.x) * k;
  //d.y += (d.y0 - d.y) * k;
  //});
  //});

  var TRANSITION_DUR = 200;
  var numIterations = 0;
  forceSim.on("tick", function () {
    node.transition().duration(TRANSITION_DUR).attr("cx", function (d) {
      return d.x;
    }).attr("cy", function (d) {
      return d.y;
    }).attr("r", function (d) {
      return d.r;
    }).style("fill", fill).style("stroke", stroke);
    labels.transition().duration(TRANSITION_DUR).attr("x", function (d) {
      return d.x;
    }).attr("y", function (d) {
      return d.y;
    });
    numIterations += 1;

    if (numIterations > iterations) {
      forceSim.stop();
    }
  });

  var update = function update(data) {
    var nodes = createNodes(data);
    node = container.selectAll("circle").data(nodes, key).join(function (enter) {
      return enter.append("circle").attr("r", function (d) {
        return d.r;
      }).attr("cx", function (d) {
        return d.x;
      }).attr("cy", function (d) {
        return d.y;
      }).style("stroke", stroke).style("opacity", 0.9).style("fill", fill).on("mouseover", function (d) {
        console.log(d.country);
      });
    }, function (update) {
      return update.transition().duration(TRANSITION_DUR).attr("r", function (d) {
        return d.r;
      }).style("fill", fill).style("stroke", stroke);
    });
    labels = container.selectAll("text").data(nodes.filter(labelFilter), key).join(function (enter) {
      return enter.append("text").attr("text-anchor", "middle").attr("alignment-baseline", "middle").style("font-weight", "bold").style("fill", "#222").text(function (d) {
        return d.country;
      }).style("font-size", "24px").style("font-family", "Helvetica").attr("x", function (d) {
        return d.x;
      }).attr("y", function (d) {
        return d.y;
      });
    });
    numIterations = 0;
    forceSim.nodes(nodes).alpha(1).restart();
  };

  update(data);
  return {
    update: update
  };
}
},{"d3":"../node_modules/d3/index.js","topojson":"../node_modules/topojson/index.js","/data/world.json":"data/world.json","/components/countryUtils":"components/countryUtils.js"}],"../../../../../../../../usr/local/lib/node_modules/parcel/src/builtins/bundle-url.js":[function(require,module,exports) {
var bundleURL = null;

function getBundleURLCached() {
  if (!bundleURL) {
    bundleURL = getBundleURL();
  }

  return bundleURL;
}

function getBundleURL() {
  // Attempt to find the URL of the current script and use that as the base URL
  try {
    throw new Error();
  } catch (err) {
    var matches = ('' + err.stack).match(/(https?|file|ftp|chrome-extension|moz-extension):\/\/[^)\n]+/g);

    if (matches) {
      return getBaseURL(matches[0]);
    }
  }

  return '/';
}

function getBaseURL(url) {
  return ('' + url).replace(/^((?:https?|file|ftp|chrome-extension|moz-extension):\/\/.+)\/[^/]+$/, '$1') + '/';
}

exports.getBundleURL = getBundleURLCached;
exports.getBaseURL = getBaseURL;
},{}],"../../../../../../../../usr/local/lib/node_modules/parcel/src/builtins/css-loader.js":[function(require,module,exports) {
var bundle = require('./bundle-url');

function updateLink(link) {
  var newLink = link.cloneNode();

  newLink.onload = function () {
    link.remove();
  };

  newLink.href = link.href.split('?')[0] + '?' + Date.now();
  link.parentNode.insertBefore(newLink, link.nextSibling);
}

var cssTimeout = null;

function reloadCSS() {
  if (cssTimeout) {
    return;
  }

  cssTimeout = setTimeout(function () {
    var links = document.querySelectorAll('link[rel="stylesheet"]');

    for (var i = 0; i < links.length; i++) {
      if (bundle.getBaseURL(links[i].href) === bundle.getBundleURL()) {
        updateLink(links[i]);
      }
    }

    cssTimeout = null;
  }, 50);
}

module.exports = reloadCSS;
},{"./bundle-url":"../../../../../../../../usr/local/lib/node_modules/parcel/src/builtins/bundle-url.js"}],"index.scss":[function(require,module,exports) {
var reloadCSS = require('_css_loader');

module.hot.dispose(reloadCSS);
module.hot.accept(reloadCSS);
},{"_css_loader":"../../../../../../../../usr/local/lib/node_modules/parcel/src/builtins/css-loader.js"}],"03_unvaccinated_children/index.scss":[function(require,module,exports) {
var reloadCSS = require('_css_loader');

module.hot.dispose(reloadCSS);
module.hot.accept(reloadCSS);
},{"_css_loader":"../../../../../../../../usr/local/lib/node_modules/parcel/src/builtins/css-loader.js"}],"03_unvaccinated_children/index.js":[function(require,module,exports) {
"use strict";

var d3 = _interopRequireWildcard(require("d3"));

var _topojson = require("topojson");

var _world = _interopRequireDefault(require("/data/world.json"));

var _d3SvgLegend = require("d3-svg-legend");

var _animated_map_dtp = _interopRequireDefault(require("/data/animated_map_dtp1.csv"));

var _animated_map_dtp2 = _interopRequireDefault(require("/data/animated_map_dtp3.csv"));

var _punchColorScale = require("/components/punchColorScale");

var _projection = require("/components/projection");

var _CountryTotalsDataProvider = _interopRequireDefault(require("./CountryTotalsDataProvider"));

var _dorlingCartogram2 = _interopRequireDefault(require("/components/dorlingCartogram"));

require("/index.scss");

require("./index.scss");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var countriesWithLabels = ["Afghanistan", "Angola", "Argentina", "Australia", "Bangladesh", "Brazil", "Canada", "Chad", "China", "Colombia", "Congo", "Democratic Republic of the Congo", "Ecuador", "Egypt", "Equatorial Guinea", "Ethiopia", "France", "Germany", "Guatemala", "Guinea", "Haiti", "India", "Indonesia", "Iraq", "Italy", "Japan", "Lao People’s Democratic Republic", "Liberia", "Madagascar", "Malawi", "Mali", "Mauritania", "Mexico", "Myanmar", "Niger", "Nigeria", "Pakistan", "Papua New Guinea", "Peru", "Philippines", "Russian Federation", "Somalia", "South Africa", "South Sudan", "Spain", "Sudan", "Syrian Arab Republic", "Uganda", "Ukraine", "United States of America", "Yemen"];

var titleText = function titleText(_ref) {
  var year = _ref.year;
  return (//`${year} Coverage and Unvaccinated Population for ${vaccine}`;
    "".concat(year)
  );
};

document.addEventListener("DOMContentLoaded", function () {
  Promise.all([d3.csv(_animated_map_dtp.default), d3.csv(_animated_map_dtp2.default)]).then(function (_ref2) {
    var _ref3 = _slicedToArray(_ref2, 2),
        dtp1Data = _ref3[0],
        dtp3Data = _ref3[1];

    var countryTotalsDataProvider = new _CountryTotalsDataProvider.default({
      dtp1Data: dtp1Data,
      dtp3Data: dtp3Data
    });
    var years = countryTotalsDataProvider.getYears();

    var formatDataForYearAndVac = function formatDataForYearAndVac(_ref4) {
      var year = _ref4.year,
          vaccine = _ref4.vaccine;
      return countryTotalsDataProvider.getRows() // filters on one vaccine
      .filter(function (d) {
        return d.vaccine === vaccine;
      }) // filters on one year
      .map(function (d) {
        return _objectSpread({}, d, {
          unvaccinated: d["".concat(year, "_unvaccinated")],
          coverage: d["".concat(year)] / 100
        });
      });
    };

    var state = {
      yearIndex: 0,
      year: years[0],
      vaccine: "dtp1"
    };
    var data = formatDataForYearAndVac(state);
    var height = 1800,
        width = 3096;
    var title = d3.select("body").append("h1");

    var _radius = d3.scaleSqrt().domain([1.5, 2500000]).range([0, 80]);

    var legendContainer = d3.select("body").append("div").attr("class", "legendContainer");
    var color = _punchColorScale.punchColorScale;
    var colorLegendContainer = legendContainer.append("div").attr("class", "legend color-legend");
    colorLegendContainer.append("h2").text("".concat(state.vaccine.toUpperCase(), " Coverage"));
    var color_svg = colorLegendContainer.append("svg").attr("height", 250);
    color_svg.append("g").attr("class", "legendQuant").attr("transform", "translate(10,10)");
    var colorLegendSwatchSize = 40;
    var color_legend = (0, _d3SvgLegend.legendColor)().labelFormat(d3.format(".0%")).labels(_d3SvgLegend.legendHelpers.thresholdLabels).scale(color).shapeWidth(colorLegendSwatchSize).shapeHeight(colorLegendSwatchSize).ascending(true);
    color_svg.select(".legendQuant").call(color_legend);
    var radiusLegendWidth = 500;
    var radiusLegendHeight = 450;
    var radiusLegendContainer = legendContainer.append("div").attr("class", "legend size-legend");
    radiusLegendContainer.append("h2").text("Unvaccinated Population");
    var radius_svg = radiusLegendContainer.append("svg").attr("width", radiusLegendWidth).attr("height", radiusLegendHeight);
    radius_svg.append("g").attr("class", "legendQuant").attr("transform", "translate(25,45)");
    var formatSi = d3.format(".2s");
    var radius_legend = (0, _d3SvgLegend.legendSize)().scale(_radius).shape("circle").cells([1000, 10000, 100000, 1000000, 3000000]).shapePadding(40).labelOffset(24).labelFormat(formatSi).orient("horizontal");
    radius_svg.select(".legendQuant").call(radius_legend).selectAll("circle").style("opacity", 0.9).style("fill", "#444");
    radius_svg.selectAll("text").style("font-size", "24px").style("font-family", "Helvetica");
    var projection = (0, _projection.makeProjection)(width, height);
    var path = d3.geoPath().projection(projection);
    var svg = d3.select("body").append("svg").attr("width", width).attr("height", height);
    svg.selectAll(".country").data((0, _topojson.feature)(_world.default, _world.default.objects.general).features).enter().append("path").attr("class", "country").attr("d", path).style("fill", "#e6e6e6");

    var _dorlingCartogram = (0, _dorlingCartogram2.default)(svg, {
      data: data,
      projection: projection,
      radius: function radius(d) {
        return _radius(d.unvaccinated);
      },
      fill: function fill(d) {
        return color(d.coverage) || "#999";
      },
      labelFilter: function labelFilter(d) {
        return countriesWithLabels.indexOf(d.country) > -1;
      }
    }),
        update = _dorlingCartogram.update;

    title.text(titleText(state));

    var renderNextYear = function renderNextYear() {
      state.yearIndex += 1;
      state.year = years[state.yearIndex];
      data = formatDataForYearAndVac(state);
      title.text(titleText(state));
      update(data);

      if (state.yearIndex < years.length - 1) {
        setTimeout(renderNextYear, 1500);
      } else {
        return;
      }
    };

    setTimeout(renderNextYear, 4000);
  });
});
},{"d3":"../node_modules/d3/index.js","topojson":"../node_modules/topojson/index.js","/data/world.json":"data/world.json","d3-svg-legend":"../node_modules/d3-svg-legend/indexRollupNext.js","/data/animated_map_dtp1.csv":"data/animated_map_dtp1.csv","/data/animated_map_dtp3.csv":"data/animated_map_dtp3.csv","/components/punchColorScale":"components/punchColorScale.js","/components/projection":"components/projection.js","./CountryTotalsDataProvider":"03_unvaccinated_children/CountryTotalsDataProvider.js","/components/dorlingCartogram":"components/dorlingCartogram.js","/index.scss":"index.scss","./index.scss":"03_unvaccinated_children/index.scss"}],"../../../../../../../../usr/local/lib/node_modules/parcel/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;

function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}

module.bundle.Module = Module;
var checkedAssets, assetsToAccept;
var parent = module.bundle.parent;

if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "52127" + '/');

  ws.onmessage = function (event) {
    checkedAssets = {};
    assetsToAccept = [];
    var data = JSON.parse(event.data);

    if (data.type === 'update') {
      var handled = false;
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);

          if (didAccept) {
            handled = true;
          }
        }
      }); // Enable HMR for CSS by default.

      handled = handled || data.assets.every(function (asset) {
        return asset.type === 'css' && asset.generated.js;
      });

      if (handled) {
        console.clear();
        data.assets.forEach(function (asset) {
          hmrApply(global.parcelRequire, asset);
        });
        assetsToAccept.forEach(function (v) {
          hmrAcceptRun(v[0], v[1]);
        });
      } else {
        window.location.reload();
      }
    }

    if (data.type === 'reload') {
      ws.close();

      ws.onclose = function () {
        location.reload();
      };
    }

    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');
      removeErrorOverlay();
    }

    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}

function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);

  if (overlay) {
    overlay.remove();
  }
}

function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID; // html encode message and stack trace

  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}

function getParents(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return [];
  }

  var parents = [];
  var k, d, dep;

  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];

      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }

  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }

  return parents;
}

function hmrApply(bundle, asset) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}

function hmrAcceptCheck(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (!modules[id] && bundle.parent) {
    return hmrAcceptCheck(bundle.parent, id);
  }

  if (checkedAssets[id]) {
    return;
  }

  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }

  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAcceptCheck(global.parcelRequire, id);
  });
}

function hmrAcceptRun(bundle, id) {
  var cached = bundle.cache[id];
  bundle.hotData = {};

  if (cached) {
    cached.hot.data = bundle.hotData;
  }

  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }

  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });

    return true;
  }
}
},{}]},{},["../../../../../../../../usr/local/lib/node_modules/parcel/src/builtins/hmr-runtime.js","03_unvaccinated_children/index.js"], null)
//# sourceMappingURL=/03_unvaccinated_children.4f57699a.js.map